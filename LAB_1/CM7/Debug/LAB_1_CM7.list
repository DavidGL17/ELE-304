
LAB_1_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005138  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080053d8  080053d8  000153d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005490  08005490  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005490  08005490  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005490  08005490  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005490  08005490  00015490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005494  08005494  00015494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  08005498  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a150  24000078  08005510  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2400a1c8  08005510  0002a1c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026be5  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004297  00000000  00000000  00046c8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f0  00000000  00000000  0004af28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001378  00000000  00000000  0004c418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ba04  00000000  00000000  0004d790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018207  00000000  00000000  00089194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018a3ea  00000000  00000000  000a139b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0022b785  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059b8  00000000  00000000  0022b7d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080053c0 	.word	0x080053c0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	080053c0 	.word	0x080053c0

080002e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002e4:	4b3f      	ldr	r3, [pc, #252]	; (80003e4 <SystemInit+0x104>)
 80002e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002ea:	4a3e      	ldr	r2, [pc, #248]	; (80003e4 <SystemInit+0x104>)
 80002ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002f4:	4b3b      	ldr	r3, [pc, #236]	; (80003e4 <SystemInit+0x104>)
 80002f6:	691b      	ldr	r3, [r3, #16]
 80002f8:	4a3a      	ldr	r2, [pc, #232]	; (80003e4 <SystemInit+0x104>)
 80002fa:	f043 0310 	orr.w	r3, r3, #16
 80002fe:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000300:	4b39      	ldr	r3, [pc, #228]	; (80003e8 <SystemInit+0x108>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	f003 030f 	and.w	r3, r3, #15
 8000308:	2b06      	cmp	r3, #6
 800030a:	d807      	bhi.n	800031c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800030c:	4b36      	ldr	r3, [pc, #216]	; (80003e8 <SystemInit+0x108>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f023 030f 	bic.w	r3, r3, #15
 8000314:	4a34      	ldr	r2, [pc, #208]	; (80003e8 <SystemInit+0x108>)
 8000316:	f043 0307 	orr.w	r3, r3, #7
 800031a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800031c:	4b33      	ldr	r3, [pc, #204]	; (80003ec <SystemInit+0x10c>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a32      	ldr	r2, [pc, #200]	; (80003ec <SystemInit+0x10c>)
 8000322:	f043 0301 	orr.w	r3, r3, #1
 8000326:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000328:	4b30      	ldr	r3, [pc, #192]	; (80003ec <SystemInit+0x10c>)
 800032a:	2200      	movs	r2, #0
 800032c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800032e:	4b2f      	ldr	r3, [pc, #188]	; (80003ec <SystemInit+0x10c>)
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	492e      	ldr	r1, [pc, #184]	; (80003ec <SystemInit+0x10c>)
 8000334:	4b2e      	ldr	r3, [pc, #184]	; (80003f0 <SystemInit+0x110>)
 8000336:	4013      	ands	r3, r2
 8000338:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800033a:	4b2b      	ldr	r3, [pc, #172]	; (80003e8 <SystemInit+0x108>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f003 0308 	and.w	r3, r3, #8
 8000342:	2b00      	cmp	r3, #0
 8000344:	d007      	beq.n	8000356 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000346:	4b28      	ldr	r3, [pc, #160]	; (80003e8 <SystemInit+0x108>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f023 030f 	bic.w	r3, r3, #15
 800034e:	4a26      	ldr	r2, [pc, #152]	; (80003e8 <SystemInit+0x108>)
 8000350:	f043 0307 	orr.w	r3, r3, #7
 8000354:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000356:	4b25      	ldr	r3, [pc, #148]	; (80003ec <SystemInit+0x10c>)
 8000358:	2200      	movs	r2, #0
 800035a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800035c:	4b23      	ldr	r3, [pc, #140]	; (80003ec <SystemInit+0x10c>)
 800035e:	2200      	movs	r2, #0
 8000360:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000362:	4b22      	ldr	r3, [pc, #136]	; (80003ec <SystemInit+0x10c>)
 8000364:	2200      	movs	r2, #0
 8000366:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000368:	4b20      	ldr	r3, [pc, #128]	; (80003ec <SystemInit+0x10c>)
 800036a:	4a22      	ldr	r2, [pc, #136]	; (80003f4 <SystemInit+0x114>)
 800036c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800036e:	4b1f      	ldr	r3, [pc, #124]	; (80003ec <SystemInit+0x10c>)
 8000370:	4a21      	ldr	r2, [pc, #132]	; (80003f8 <SystemInit+0x118>)
 8000372:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000374:	4b1d      	ldr	r3, [pc, #116]	; (80003ec <SystemInit+0x10c>)
 8000376:	4a21      	ldr	r2, [pc, #132]	; (80003fc <SystemInit+0x11c>)
 8000378:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800037a:	4b1c      	ldr	r3, [pc, #112]	; (80003ec <SystemInit+0x10c>)
 800037c:	2200      	movs	r2, #0
 800037e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000380:	4b1a      	ldr	r3, [pc, #104]	; (80003ec <SystemInit+0x10c>)
 8000382:	4a1e      	ldr	r2, [pc, #120]	; (80003fc <SystemInit+0x11c>)
 8000384:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000386:	4b19      	ldr	r3, [pc, #100]	; (80003ec <SystemInit+0x10c>)
 8000388:	2200      	movs	r2, #0
 800038a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800038c:	4b17      	ldr	r3, [pc, #92]	; (80003ec <SystemInit+0x10c>)
 800038e:	4a1b      	ldr	r2, [pc, #108]	; (80003fc <SystemInit+0x11c>)
 8000390:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000392:	4b16      	ldr	r3, [pc, #88]	; (80003ec <SystemInit+0x10c>)
 8000394:	2200      	movs	r2, #0
 8000396:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000398:	4b14      	ldr	r3, [pc, #80]	; (80003ec <SystemInit+0x10c>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a13      	ldr	r2, [pc, #76]	; (80003ec <SystemInit+0x10c>)
 800039e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80003a4:	4b11      	ldr	r3, [pc, #68]	; (80003ec <SystemInit+0x10c>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003aa:	4b15      	ldr	r3, [pc, #84]	; (8000400 <SystemInit+0x120>)
 80003ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003ae:	4a14      	ldr	r2, [pc, #80]	; (8000400 <SystemInit+0x120>)
 80003b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003b4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003b6:	4b13      	ldr	r3, [pc, #76]	; (8000404 <SystemInit+0x124>)
 80003b8:	681a      	ldr	r2, [r3, #0]
 80003ba:	4b13      	ldr	r3, [pc, #76]	; (8000408 <SystemInit+0x128>)
 80003bc:	4013      	ands	r3, r2
 80003be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003c2:	d202      	bcs.n	80003ca <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003c4:	4b11      	ldr	r3, [pc, #68]	; (800040c <SystemInit+0x12c>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003ca:	4b11      	ldr	r3, [pc, #68]	; (8000410 <SystemInit+0x130>)
 80003cc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003d0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80003d2:	4b04      	ldr	r3, [pc, #16]	; (80003e4 <SystemInit+0x104>)
 80003d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80003da:	bf00      	nop
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr
 80003e4:	e000ed00 	.word	0xe000ed00
 80003e8:	52002000 	.word	0x52002000
 80003ec:	58024400 	.word	0x58024400
 80003f0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003f4:	02020200 	.word	0x02020200
 80003f8:	01ff0000 	.word	0x01ff0000
 80003fc:	01010280 	.word	0x01010280
 8000400:	580000c0 	.word	0x580000c0
 8000404:	5c001000 	.word	0x5c001000
 8000408:	ffff0000 	.word	0xffff0000
 800040c:	51008108 	.word	0x51008108
 8000410:	52004000 	.word	0x52004000

08000414 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800041a:	4b0a      	ldr	r3, [pc, #40]	; (8000444 <MX_DMA_Init+0x30>)
 800041c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000420:	4a08      	ldr	r2, [pc, #32]	; (8000444 <MX_DMA_Init+0x30>)
 8000422:	f043 0301 	orr.w	r3, r3, #1
 8000426:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800042a:	4b06      	ldr	r3, [pc, #24]	; (8000444 <MX_DMA_Init+0x30>)
 800042c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000430:	f003 0301 	and.w	r3, r3, #1
 8000434:	607b      	str	r3, [r7, #4]
 8000436:	687b      	ldr	r3, [r7, #4]

}
 8000438:	bf00      	nop
 800043a:	370c      	adds	r7, #12
 800043c:	46bd      	mov	sp, r7
 800043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000442:	4770      	bx	lr
 8000444:	58024400 	.word	0x58024400

08000448 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800044c:	4a04      	ldr	r2, [pc, #16]	; (8000460 <MX_FREERTOS_Init+0x18>)
 800044e:	2100      	movs	r1, #0
 8000450:	4804      	ldr	r0, [pc, #16]	; (8000464 <MX_FREERTOS_Init+0x1c>)
 8000452:	f002 f983 	bl	800275c <osThreadNew>
 8000456:	4603      	mov	r3, r0
 8000458:	4a03      	ldr	r2, [pc, #12]	; (8000468 <MX_FREERTOS_Init+0x20>)
 800045a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800045c:	bf00      	nop
 800045e:	bd80      	pop	{r7, pc}
 8000460:	0800540c 	.word	0x0800540c
 8000464:	0800046d 	.word	0x0800046d
 8000468:	2400a128 	.word	0x2400a128

0800046c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(Green_LED_CM7_Running_GPIO_Port, Green_LED_CM7_Running_Pin);
 8000474:	2101      	movs	r1, #1
 8000476:	4804      	ldr	r0, [pc, #16]	; (8000488 <StartDefaultTask+0x1c>)
 8000478:	f000 fda5 	bl	8000fc6 <HAL_GPIO_TogglePin>
    osDelay(1000);
 800047c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000480:	f002 f9ff 	bl	8002882 <osDelay>
	  HAL_GPIO_TogglePin(Green_LED_CM7_Running_GPIO_Port, Green_LED_CM7_Running_Pin);
 8000484:	e7f6      	b.n	8000474 <StartDefaultTask+0x8>
 8000486:	bf00      	nop
 8000488:	58020400 	.word	0x58020400

0800048c <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b08a      	sub	sp, #40	; 0x28
 8000490:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000492:	f107 0314 	add.w	r3, r7, #20
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
 800049a:	605a      	str	r2, [r3, #4]
 800049c:	609a      	str	r2, [r3, #8]
 800049e:	60da      	str	r2, [r3, #12]
 80004a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004a2:	4b5a      	ldr	r3, [pc, #360]	; (800060c <MX_GPIO_Init+0x180>)
 80004a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004a8:	4a58      	ldr	r2, [pc, #352]	; (800060c <MX_GPIO_Init+0x180>)
 80004aa:	f043 0304 	orr.w	r3, r3, #4
 80004ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004b2:	4b56      	ldr	r3, [pc, #344]	; (800060c <MX_GPIO_Init+0x180>)
 80004b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004b8:	f003 0304 	and.w	r3, r3, #4
 80004bc:	613b      	str	r3, [r7, #16]
 80004be:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004c0:	4b52      	ldr	r3, [pc, #328]	; (800060c <MX_GPIO_Init+0x180>)
 80004c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004c6:	4a51      	ldr	r2, [pc, #324]	; (800060c <MX_GPIO_Init+0x180>)
 80004c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004d0:	4b4e      	ldr	r3, [pc, #312]	; (800060c <MX_GPIO_Init+0x180>)
 80004d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004da:	60fb      	str	r3, [r7, #12]
 80004dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004de:	4b4b      	ldr	r3, [pc, #300]	; (800060c <MX_GPIO_Init+0x180>)
 80004e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004e4:	4a49      	ldr	r2, [pc, #292]	; (800060c <MX_GPIO_Init+0x180>)
 80004e6:	f043 0301 	orr.w	r3, r3, #1
 80004ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004ee:	4b47      	ldr	r3, [pc, #284]	; (800060c <MX_GPIO_Init+0x180>)
 80004f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004f4:	f003 0301 	and.w	r3, r3, #1
 80004f8:	60bb      	str	r3, [r7, #8]
 80004fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fc:	4b43      	ldr	r3, [pc, #268]	; (800060c <MX_GPIO_Init+0x180>)
 80004fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000502:	4a42      	ldr	r2, [pc, #264]	; (800060c <MX_GPIO_Init+0x180>)
 8000504:	f043 0302 	orr.w	r3, r3, #2
 8000508:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800050c:	4b3f      	ldr	r3, [pc, #252]	; (800060c <MX_GPIO_Init+0x180>)
 800050e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000512:	f003 0302 	and.w	r3, r3, #2
 8000516:	607b      	str	r3, [r7, #4]
 8000518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800051a:	4b3c      	ldr	r3, [pc, #240]	; (800060c <MX_GPIO_Init+0x180>)
 800051c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000520:	4a3a      	ldr	r2, [pc, #232]	; (800060c <MX_GPIO_Init+0x180>)
 8000522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000526:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800052a:	4b38      	ldr	r3, [pc, #224]	; (800060c <MX_GPIO_Init+0x180>)
 800052c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000534:	603b      	str	r3, [r7, #0]
 8000536:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Green_LED_CM7_Running_GPIO_Port, Green_LED_CM7_Running_Pin, GPIO_PIN_RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	2101      	movs	r1, #1
 800053c:	4834      	ldr	r0, [pc, #208]	; (8000610 <MX_GPIO_Init+0x184>)
 800053e:	f000 fd29 	bl	8000f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000542:	2332      	movs	r3, #50	; 0x32
 8000544:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000546:	2302      	movs	r3, #2
 8000548:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054a:	2300      	movs	r3, #0
 800054c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054e:	2300      	movs	r3, #0
 8000550:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000552:	230b      	movs	r3, #11
 8000554:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000556:	f107 0314 	add.w	r3, r7, #20
 800055a:	4619      	mov	r1, r3
 800055c:	482d      	ldr	r0, [pc, #180]	; (8000614 <MX_GPIO_Init+0x188>)
 800055e:	f000 fb69 	bl	8000c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000562:	2386      	movs	r3, #134	; 0x86
 8000564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000566:	2302      	movs	r3, #2
 8000568:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056a:	2300      	movs	r3, #0
 800056c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056e:	2300      	movs	r3, #0
 8000570:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000572:	230b      	movs	r3, #11
 8000574:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	4619      	mov	r1, r3
 800057c:	4826      	ldr	r0, [pc, #152]	; (8000618 <MX_GPIO_Init+0x18c>)
 800057e:	f000 fb59 	bl	8000c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Green_LED_CM7_Running_Pin;
 8000582:	2301      	movs	r3, #1
 8000584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000586:	2301      	movs	r3, #1
 8000588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058a:	2300      	movs	r3, #0
 800058c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058e:	2300      	movs	r3, #0
 8000590:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Green_LED_CM7_Running_GPIO_Port, &GPIO_InitStruct);
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	4619      	mov	r1, r3
 8000598:	481d      	ldr	r0, [pc, #116]	; (8000610 <MX_GPIO_Init+0x184>)
 800059a:	f000 fb4b 	bl	8000c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800059e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a4:	2302      	movs	r3, #2
 80005a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ac:	2300      	movs	r3, #0
 80005ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80005b0:	230b      	movs	r3, #11
 80005b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b4:	f107 0314 	add.w	r3, r7, #20
 80005b8:	4619      	mov	r1, r3
 80005ba:	4815      	ldr	r0, [pc, #84]	; (8000610 <MX_GPIO_Init+0x184>)
 80005bc:	f000 fb3a 	bl	8000c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80005c0:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80005c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c6:	2302      	movs	r3, #2
 80005c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ce:	2300      	movs	r3, #0
 80005d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80005d2:	230a      	movs	r3, #10
 80005d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	4619      	mov	r1, r3
 80005dc:	480e      	ldr	r0, [pc, #56]	; (8000618 <MX_GPIO_Init+0x18c>)
 80005de:	f000 fb29 	bl	8000c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80005e2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80005e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e8:	2302      	movs	r3, #2
 80005ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f0:	2300      	movs	r3, #0
 80005f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80005f4:	230b      	movs	r3, #11
 80005f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	4619      	mov	r1, r3
 80005fe:	4807      	ldr	r0, [pc, #28]	; (800061c <MX_GPIO_Init+0x190>)
 8000600:	f000 fb18 	bl	8000c34 <HAL_GPIO_Init>

}
 8000604:	bf00      	nop
 8000606:	3728      	adds	r7, #40	; 0x28
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	58024400 	.word	0x58024400
 8000610:	58020400 	.word	0x58020400
 8000614:	58020800 	.word	0x58020800
 8000618:	58020000 	.word	0x58020000
 800061c:	58021800 	.word	0x58021800

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000626:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800062a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800062c:	bf00      	nop
 800062e:	4b24      	ldr	r3, [pc, #144]	; (80006c0 <main+0xa0>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000636:	2b00      	cmp	r3, #0
 8000638:	d004      	beq.n	8000644 <main+0x24>
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	1e5a      	subs	r2, r3, #1
 800063e:	607a      	str	r2, [r7, #4]
 8000640:	2b00      	cmp	r3, #0
 8000642:	dcf4      	bgt.n	800062e <main+0xe>
  if ( timeout < 0 )
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2b00      	cmp	r3, #0
 8000648:	da01      	bge.n	800064e <main+0x2e>
  {
  Error_Handler();
 800064a:	f000 f8d1 	bl	80007f0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064e:	f000 f9a9 	bl	80009a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000652:	f000 f837 	bl	80006c4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000656:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <main+0xa0>)
 8000658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800065c:	4a18      	ldr	r2, [pc, #96]	; (80006c0 <main+0xa0>)
 800065e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000662:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000666:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <main+0xa0>)
 8000668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800066c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000670:	603b      	str	r3, [r7, #0]
 8000672:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000674:	2000      	movs	r0, #0
 8000676:	f000 fcc1 	bl	8000ffc <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800067a:	2100      	movs	r1, #0
 800067c:	2000      	movs	r0, #0
 800067e:	f000 fcd7 	bl	8001030 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000682:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000686:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000688:	bf00      	nop
 800068a:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <main+0xa0>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000692:	2b00      	cmp	r3, #0
 8000694:	d104      	bne.n	80006a0 <main+0x80>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	1e5a      	subs	r2, r3, #1
 800069a:	607a      	str	r2, [r7, #4]
 800069c:	2b00      	cmp	r3, #0
 800069e:	dcf4      	bgt.n	800068a <main+0x6a>
if ( timeout < 0 )
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	da01      	bge.n	80006aa <main+0x8a>
{
Error_Handler();
 80006a6:	f000 f8a3 	bl	80007f0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006aa:	f7ff feef 	bl	800048c <MX_GPIO_Init>
  MX_DMA_Init();
 80006ae:	f7ff feb1 	bl	8000414 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80006b2:	f002 f809 	bl	80026c8 <osKernelInitialize>
  MX_FREERTOS_Init();
 80006b6:	f7ff fec7 	bl	8000448 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80006ba:	f002 f829 	bl	8002710 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006be:	e7fe      	b.n	80006be <main+0x9e>
 80006c0:	58024400 	.word	0x58024400

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b09c      	sub	sp, #112	; 0x70
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ce:	224c      	movs	r2, #76	; 0x4c
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f004 fda6 	bl	8005224 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2220      	movs	r2, #32
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f004 fda0 	bl	8005224 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80006e4:	2004      	movs	r0, #4
 80006e6:	f000 fcb7 	bl	8001058 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006ea:	2300      	movs	r3, #0
 80006ec:	603b      	str	r3, [r7, #0]
 80006ee:	4b34      	ldr	r3, [pc, #208]	; (80007c0 <SystemClock_Config+0xfc>)
 80006f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006f2:	4a33      	ldr	r2, [pc, #204]	; (80007c0 <SystemClock_Config+0xfc>)
 80006f4:	f023 0301 	bic.w	r3, r3, #1
 80006f8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006fa:	4b31      	ldr	r3, [pc, #196]	; (80007c0 <SystemClock_Config+0xfc>)
 80006fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	4b2f      	ldr	r3, [pc, #188]	; (80007c4 <SystemClock_Config+0x100>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800070c:	4a2d      	ldr	r2, [pc, #180]	; (80007c4 <SystemClock_Config+0x100>)
 800070e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000712:	6193      	str	r3, [r2, #24]
 8000714:	4b2b      	ldr	r3, [pc, #172]	; (80007c4 <SystemClock_Config+0x100>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800071c:	603b      	str	r3, [r7, #0]
 800071e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000720:	bf00      	nop
 8000722:	4b28      	ldr	r3, [pc, #160]	; (80007c4 <SystemClock_Config+0x100>)
 8000724:	699b      	ldr	r3, [r3, #24]
 8000726:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800072a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800072e:	d1f8      	bne.n	8000722 <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000730:	4b25      	ldr	r3, [pc, #148]	; (80007c8 <SystemClock_Config+0x104>)
 8000732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000734:	4a24      	ldr	r2, [pc, #144]	; (80007c8 <SystemClock_Config+0x104>)
 8000736:	f023 0303 	bic.w	r3, r3, #3
 800073a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800073c:	2302      	movs	r3, #2
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000740:	2301      	movs	r3, #1
 8000742:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000744:	2340      	movs	r3, #64	; 0x40
 8000746:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000748:	2302      	movs	r3, #2
 800074a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800074c:	2300      	movs	r3, #0
 800074e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000750:	2304      	movs	r3, #4
 8000752:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000754:	231e      	movs	r3, #30
 8000756:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000758:	2302      	movs	r3, #2
 800075a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800075c:	2302      	movs	r3, #2
 800075e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000760:	2302      	movs	r3, #2
 8000762:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000764:	230c      	movs	r3, #12
 8000766:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000768:	2300      	movs	r3, #0
 800076a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000774:	4618      	mov	r0, r3
 8000776:	f000 fcc9 	bl	800110c <HAL_RCC_OscConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000780:	f000 f836 	bl	80007f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000784:	233f      	movs	r3, #63	; 0x3f
 8000786:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000788:	2303      	movs	r3, #3
 800078a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000790:	2308      	movs	r3, #8
 8000792:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000798:	2340      	movs	r3, #64	; 0x40
 800079a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	2102      	movs	r1, #2
 80007a8:	4618      	mov	r0, r3
 80007aa:	f001 f8bf 	bl	800192c <HAL_RCC_ClockConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80007b4:	f000 f81c 	bl	80007f0 <Error_Handler>
  }
}
 80007b8:	bf00      	nop
 80007ba:	3770      	adds	r7, #112	; 0x70
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	58000400 	.word	0x58000400
 80007c4:	58024800 	.word	0x58024800
 80007c8:	58024400 	.word	0x58024400

080007cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a04      	ldr	r2, [pc, #16]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d101      	bne.n	80007e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007de:	f000 f91d 	bl	8000a1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40001400 	.word	0x40001400

080007f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f4:	b672      	cpsid	i
}
 80007f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <Error_Handler+0x8>
	...

080007fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000802:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <HAL_MspInit+0x38>)
 8000804:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000808:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <HAL_MspInit+0x38>)
 800080a:	f043 0302 	orr.w	r3, r3, #2
 800080e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000812:	4b08      	ldr	r3, [pc, #32]	; (8000834 <HAL_MspInit+0x38>)
 8000814:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000818:	f003 0302 	and.w	r3, r3, #2
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000820:	2200      	movs	r2, #0
 8000822:	210f      	movs	r1, #15
 8000824:	f06f 0001 	mvn.w	r0, #1
 8000828:	f000 f9dc 	bl	8000be4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	58024400 	.word	0x58024400

08000838 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b090      	sub	sp, #64	; 0x40
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2b0f      	cmp	r3, #15
 8000844:	d827      	bhi.n	8000896 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 8000846:	2200      	movs	r2, #0
 8000848:	6879      	ldr	r1, [r7, #4]
 800084a:	2037      	movs	r0, #55	; 0x37
 800084c:	f000 f9ca 	bl	8000be4 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000850:	2037      	movs	r0, #55	; 0x37
 8000852:	f000 f9e1 	bl	8000c18 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000856:	4a29      	ldr	r2, [pc, #164]	; (80008fc <HAL_InitTick+0xc4>)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 800085c:	4b28      	ldr	r3, [pc, #160]	; (8000900 <HAL_InitTick+0xc8>)
 800085e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000862:	4a27      	ldr	r2, [pc, #156]	; (8000900 <HAL_InitTick+0xc8>)
 8000864:	f043 0320 	orr.w	r3, r3, #32
 8000868:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800086c:	4b24      	ldr	r3, [pc, #144]	; (8000900 <HAL_InitTick+0xc8>)
 800086e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000872:	f003 0320 	and.w	r3, r3, #32
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800087a:	f107 0210 	add.w	r2, r7, #16
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	4611      	mov	r1, r2
 8000884:	4618      	mov	r0, r3
 8000886:	f001 fbc7 	bl	8002018 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800088a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800088c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800088e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000890:	2b00      	cmp	r3, #0
 8000892:	d106      	bne.n	80008a2 <HAL_InitTick+0x6a>
 8000894:	e001      	b.n	800089a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000896:	2301      	movs	r3, #1
 8000898:	e02b      	b.n	80008f2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800089a:	f001 fba7 	bl	8001fec <HAL_RCC_GetPCLK1Freq>
 800089e:	63f8      	str	r0, [r7, #60]	; 0x3c
 80008a0:	e004      	b.n	80008ac <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008a2:	f001 fba3 	bl	8001fec <HAL_RCC_GetPCLK1Freq>
 80008a6:	4603      	mov	r3, r0
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008ae:	4a15      	ldr	r2, [pc, #84]	; (8000904 <HAL_InitTick+0xcc>)
 80008b0:	fba2 2303 	umull	r2, r3, r2, r3
 80008b4:	0c9b      	lsrs	r3, r3, #18
 80008b6:	3b01      	subs	r3, #1
 80008b8:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80008ba:	4b13      	ldr	r3, [pc, #76]	; (8000908 <HAL_InitTick+0xd0>)
 80008bc:	4a13      	ldr	r2, [pc, #76]	; (800090c <HAL_InitTick+0xd4>)
 80008be:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80008c0:	4b11      	ldr	r3, [pc, #68]	; (8000908 <HAL_InitTick+0xd0>)
 80008c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008c6:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80008c8:	4a0f      	ldr	r2, [pc, #60]	; (8000908 <HAL_InitTick+0xd0>)
 80008ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008cc:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <HAL_InitTick+0xd0>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <HAL_InitTick+0xd0>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 80008da:	480b      	ldr	r0, [pc, #44]	; (8000908 <HAL_InitTick+0xd0>)
 80008dc:	f001 fbde 	bl	800209c <HAL_TIM_Base_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d104      	bne.n	80008f0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 80008e6:	4808      	ldr	r0, [pc, #32]	; (8000908 <HAL_InitTick+0xd0>)
 80008e8:	f001 fc3a 	bl	8002160 <HAL_TIM_Base_Start_IT>
 80008ec:	4603      	mov	r3, r0
 80008ee:	e000      	b.n	80008f2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80008f0:	2301      	movs	r3, #1
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3740      	adds	r7, #64	; 0x40
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	24000008 	.word	0x24000008
 8000900:	58024400 	.word	0x58024400
 8000904:	431bde83 	.word	0x431bde83
 8000908:	2400a12c 	.word	0x2400a12c
 800090c:	40001400 	.word	0x40001400

08000910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <NMI_Handler+0x4>

08000916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091a:	e7fe      	b.n	800091a <HardFault_Handler+0x4>

0800091c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <MemManage_Handler+0x4>

08000922 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <BusFault_Handler+0x4>

08000928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <UsageFault_Handler+0x4>

0800092e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000940:	4802      	ldr	r0, [pc, #8]	; (800094c <TIM7_IRQHandler+0x10>)
 8000942:	f001 fc7d 	bl	8002240 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	2400a12c 	.word	0x2400a12c

08000950 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000950:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000988 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000954:	f7ff fcc4 	bl	80002e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000958:	480c      	ldr	r0, [pc, #48]	; (800098c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800095a:	490d      	ldr	r1, [pc, #52]	; (8000990 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800095c:	4a0d      	ldr	r2, [pc, #52]	; (8000994 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800095e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000960:	e002      	b.n	8000968 <LoopCopyDataInit>

08000962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000966:	3304      	adds	r3, #4

08000968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800096c:	d3f9      	bcc.n	8000962 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096e:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000970:	4c0a      	ldr	r4, [pc, #40]	; (800099c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000974:	e001      	b.n	800097a <LoopFillZerobss>

08000976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000978:	3204      	adds	r2, #4

0800097a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800097c:	d3fb      	bcc.n	8000976 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800097e:	f004 fc1d 	bl	80051bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000982:	f7ff fe4d 	bl	8000620 <main>
  bx  lr
 8000986:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000988:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800098c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000990:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8000994:	08005498 	.word	0x08005498
  ldr r2, =_sbss
 8000998:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 800099c:	2400a1c8 	.word	0x2400a1c8

080009a0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009a0:	e7fe      	b.n	80009a0 <ADC3_IRQHandler>
	...

080009a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009aa:	2003      	movs	r0, #3
 80009ac:	f000 f90f 	bl	8000bce <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80009b0:	f001 f972 	bl	8001c98 <HAL_RCC_GetSysClockFreq>
 80009b4:	4602      	mov	r2, r0
 80009b6:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <HAL_Init+0x68>)
 80009b8:	699b      	ldr	r3, [r3, #24]
 80009ba:	0a1b      	lsrs	r3, r3, #8
 80009bc:	f003 030f 	and.w	r3, r3, #15
 80009c0:	4913      	ldr	r1, [pc, #76]	; (8000a10 <HAL_Init+0x6c>)
 80009c2:	5ccb      	ldrb	r3, [r1, r3]
 80009c4:	f003 031f 	and.w	r3, r3, #31
 80009c8:	fa22 f303 	lsr.w	r3, r2, r3
 80009cc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <HAL_Init+0x68>)
 80009d0:	699b      	ldr	r3, [r3, #24]
 80009d2:	f003 030f 	and.w	r3, r3, #15
 80009d6:	4a0e      	ldr	r2, [pc, #56]	; (8000a10 <HAL_Init+0x6c>)
 80009d8:	5cd3      	ldrb	r3, [r2, r3]
 80009da:	f003 031f 	and.w	r3, r3, #31
 80009de:	687a      	ldr	r2, [r7, #4]
 80009e0:	fa22 f303 	lsr.w	r3, r2, r3
 80009e4:	4a0b      	ldr	r2, [pc, #44]	; (8000a14 <HAL_Init+0x70>)
 80009e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80009e8:	4a0b      	ldr	r2, [pc, #44]	; (8000a18 <HAL_Init+0x74>)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009ee:	200f      	movs	r0, #15
 80009f0:	f7ff ff22 	bl	8000838 <HAL_InitTick>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
 80009fc:	e002      	b.n	8000a04 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80009fe:	f7ff fefd 	bl	80007fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a02:	2300      	movs	r3, #0
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	58024400 	.word	0x58024400
 8000a10:	080053fc 	.word	0x080053fc
 8000a14:	24000004 	.word	0x24000004
 8000a18:	24000000 	.word	0x24000000

08000a1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <HAL_IncTick+0x20>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	461a      	mov	r2, r3
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <HAL_IncTick+0x24>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	4a04      	ldr	r2, [pc, #16]	; (8000a40 <HAL_IncTick+0x24>)
 8000a2e:	6013      	str	r3, [r2, #0]
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	2400000c 	.word	0x2400000c
 8000a40:	2400a178 	.word	0x2400a178

08000a44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  return uwTick;
 8000a48:	4b03      	ldr	r3, [pc, #12]	; (8000a58 <HAL_GetTick+0x14>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	2400a178 	.word	0x2400a178

08000a5c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000a60:	4b03      	ldr	r3, [pc, #12]	; (8000a70 <HAL_GetREVID+0x14>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	0c1b      	lsrs	r3, r3, #16
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	5c001000 	.word	0x5c001000

08000a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f003 0307 	and.w	r3, r3, #7
 8000a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a84:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <__NVIC_SetPriorityGrouping+0x40>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a90:	4013      	ands	r3, r2
 8000a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aa2:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <__NVIC_SetPriorityGrouping+0x40>)
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	60d3      	str	r3, [r2, #12]
}
 8000aa8:	bf00      	nop
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	e000ed00 	.word	0xe000ed00
 8000ab8:	05fa0000 	.word	0x05fa0000

08000abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac0:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	0a1b      	lsrs	r3, r3, #8
 8000ac6:	f003 0307 	and.w	r3, r3, #7
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ae2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	db0b      	blt.n	8000b02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aea:	88fb      	ldrh	r3, [r7, #6]
 8000aec:	f003 021f 	and.w	r2, r3, #31
 8000af0:	4907      	ldr	r1, [pc, #28]	; (8000b10 <__NVIC_EnableIRQ+0x38>)
 8000af2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000af6:	095b      	lsrs	r3, r3, #5
 8000af8:	2001      	movs	r0, #1
 8000afa:	fa00 f202 	lsl.w	r2, r0, r2
 8000afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000e100 	.word	0xe000e100

08000b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	6039      	str	r1, [r7, #0]
 8000b1e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	db0a      	blt.n	8000b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	490c      	ldr	r1, [pc, #48]	; (8000b60 <__NVIC_SetPriority+0x4c>)
 8000b2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b32:	0112      	lsls	r2, r2, #4
 8000b34:	b2d2      	uxtb	r2, r2
 8000b36:	440b      	add	r3, r1
 8000b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b3c:	e00a      	b.n	8000b54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	4908      	ldr	r1, [pc, #32]	; (8000b64 <__NVIC_SetPriority+0x50>)
 8000b44:	88fb      	ldrh	r3, [r7, #6]
 8000b46:	f003 030f 	and.w	r3, r3, #15
 8000b4a:	3b04      	subs	r3, #4
 8000b4c:	0112      	lsls	r2, r2, #4
 8000b4e:	b2d2      	uxtb	r2, r2
 8000b50:	440b      	add	r3, r1
 8000b52:	761a      	strb	r2, [r3, #24]
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000e100 	.word	0xe000e100
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b089      	sub	sp, #36	; 0x24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	f1c3 0307 	rsb	r3, r3, #7
 8000b82:	2b04      	cmp	r3, #4
 8000b84:	bf28      	it	cs
 8000b86:	2304      	movcs	r3, #4
 8000b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	3304      	adds	r3, #4
 8000b8e:	2b06      	cmp	r3, #6
 8000b90:	d902      	bls.n	8000b98 <NVIC_EncodePriority+0x30>
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	3b03      	subs	r3, #3
 8000b96:	e000      	b.n	8000b9a <NVIC_EncodePriority+0x32>
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba0:	69bb      	ldr	r3, [r7, #24]
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	43da      	mvns	r2, r3
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	401a      	ands	r2, r3
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bba:	43d9      	mvns	r1, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc0:	4313      	orrs	r3, r2
         );
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3724      	adds	r7, #36	; 0x24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f7ff ff4c 	bl	8000a74 <__NVIC_SetPriorityGrouping>
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
 8000bf0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bf2:	f7ff ff63 	bl	8000abc <__NVIC_GetPriorityGrouping>
 8000bf6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	68b9      	ldr	r1, [r7, #8]
 8000bfc:	6978      	ldr	r0, [r7, #20]
 8000bfe:	f7ff ffb3 	bl	8000b68 <NVIC_EncodePriority>
 8000c02:	4602      	mov	r2, r0
 8000c04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c08:	4611      	mov	r1, r2
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff ff82 	bl	8000b14 <__NVIC_SetPriority>
}
 8000c10:	bf00      	nop
 8000c12:	3718      	adds	r7, #24
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff ff56 	bl	8000ad8 <__NVIC_EnableIRQ>
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b089      	sub	sp, #36	; 0x24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000c42:	4b89      	ldr	r3, [pc, #548]	; (8000e68 <HAL_GPIO_Init+0x234>)
 8000c44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000c46:	e194      	b.n	8000f72 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	fa01 f303 	lsl.w	r3, r1, r3
 8000c54:	4013      	ands	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f000 8186 	beq.w	8000f6c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d00b      	beq.n	8000c80 <HAL_GPIO_Init+0x4c>
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	d007      	beq.n	8000c80 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c74:	2b11      	cmp	r3, #17
 8000c76:	d003      	beq.n	8000c80 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	2b12      	cmp	r3, #18
 8000c7e:	d130      	bne.n	8000ce2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	43db      	mvns	r3, r3
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	4013      	ands	r3, r2
 8000c96:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	68da      	ldr	r2, [r3, #12]
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	091b      	lsrs	r3, r3, #4
 8000ccc:	f003 0201 	and.w	r2, r3, #1
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	68db      	ldr	r3, [r3, #12]
 8000ce6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	2203      	movs	r2, #3
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	689a      	ldr	r2, [r3, #8]
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d003      	beq.n	8000d22 <HAL_GPIO_Init+0xee>
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	2b12      	cmp	r3, #18
 8000d20:	d123      	bne.n	8000d6a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	08da      	lsrs	r2, r3, #3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	3208      	adds	r2, #8
 8000d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	220f      	movs	r2, #15
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	4013      	ands	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	691a      	ldr	r2, [r3, #16]
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	f003 0307 	and.w	r3, r3, #7
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	08da      	lsrs	r2, r3, #3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3208      	adds	r2, #8
 8000d64:	69b9      	ldr	r1, [r7, #24]
 8000d66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	2203      	movs	r2, #3
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f003 0203 	and.w	r2, r3, #3
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f000 80e0 	beq.w	8000f6c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dac:	4b2f      	ldr	r3, [pc, #188]	; (8000e6c <HAL_GPIO_Init+0x238>)
 8000dae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000db2:	4a2e      	ldr	r2, [pc, #184]	; (8000e6c <HAL_GPIO_Init+0x238>)
 8000db4:	f043 0302 	orr.w	r3, r3, #2
 8000db8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000dbc:	4b2b      	ldr	r3, [pc, #172]	; (8000e6c <HAL_GPIO_Init+0x238>)
 8000dbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dca:	4a29      	ldr	r2, [pc, #164]	; (8000e70 <HAL_GPIO_Init+0x23c>)
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	089b      	lsrs	r3, r3, #2
 8000dd0:	3302      	adds	r3, #2
 8000dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	f003 0303 	and.w	r3, r3, #3
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	220f      	movs	r2, #15
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43db      	mvns	r3, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4013      	ands	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a20      	ldr	r2, [pc, #128]	; (8000e74 <HAL_GPIO_Init+0x240>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d052      	beq.n	8000e9c <HAL_GPIO_Init+0x268>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a1f      	ldr	r2, [pc, #124]	; (8000e78 <HAL_GPIO_Init+0x244>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d031      	beq.n	8000e62 <HAL_GPIO_Init+0x22e>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a1e      	ldr	r2, [pc, #120]	; (8000e7c <HAL_GPIO_Init+0x248>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d02b      	beq.n	8000e5e <HAL_GPIO_Init+0x22a>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a1d      	ldr	r2, [pc, #116]	; (8000e80 <HAL_GPIO_Init+0x24c>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d025      	beq.n	8000e5a <HAL_GPIO_Init+0x226>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a1c      	ldr	r2, [pc, #112]	; (8000e84 <HAL_GPIO_Init+0x250>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d01f      	beq.n	8000e56 <HAL_GPIO_Init+0x222>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a1b      	ldr	r2, [pc, #108]	; (8000e88 <HAL_GPIO_Init+0x254>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d019      	beq.n	8000e52 <HAL_GPIO_Init+0x21e>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a1a      	ldr	r2, [pc, #104]	; (8000e8c <HAL_GPIO_Init+0x258>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d013      	beq.n	8000e4e <HAL_GPIO_Init+0x21a>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a19      	ldr	r2, [pc, #100]	; (8000e90 <HAL_GPIO_Init+0x25c>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d00d      	beq.n	8000e4a <HAL_GPIO_Init+0x216>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a18      	ldr	r2, [pc, #96]	; (8000e94 <HAL_GPIO_Init+0x260>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d007      	beq.n	8000e46 <HAL_GPIO_Init+0x212>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a17      	ldr	r2, [pc, #92]	; (8000e98 <HAL_GPIO_Init+0x264>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d101      	bne.n	8000e42 <HAL_GPIO_Init+0x20e>
 8000e3e:	2309      	movs	r3, #9
 8000e40:	e02d      	b.n	8000e9e <HAL_GPIO_Init+0x26a>
 8000e42:	230a      	movs	r3, #10
 8000e44:	e02b      	b.n	8000e9e <HAL_GPIO_Init+0x26a>
 8000e46:	2308      	movs	r3, #8
 8000e48:	e029      	b.n	8000e9e <HAL_GPIO_Init+0x26a>
 8000e4a:	2307      	movs	r3, #7
 8000e4c:	e027      	b.n	8000e9e <HAL_GPIO_Init+0x26a>
 8000e4e:	2306      	movs	r3, #6
 8000e50:	e025      	b.n	8000e9e <HAL_GPIO_Init+0x26a>
 8000e52:	2305      	movs	r3, #5
 8000e54:	e023      	b.n	8000e9e <HAL_GPIO_Init+0x26a>
 8000e56:	2304      	movs	r3, #4
 8000e58:	e021      	b.n	8000e9e <HAL_GPIO_Init+0x26a>
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	e01f      	b.n	8000e9e <HAL_GPIO_Init+0x26a>
 8000e5e:	2302      	movs	r3, #2
 8000e60:	e01d      	b.n	8000e9e <HAL_GPIO_Init+0x26a>
 8000e62:	2301      	movs	r3, #1
 8000e64:	e01b      	b.n	8000e9e <HAL_GPIO_Init+0x26a>
 8000e66:	bf00      	nop
 8000e68:	58000080 	.word	0x58000080
 8000e6c:	58024400 	.word	0x58024400
 8000e70:	58000400 	.word	0x58000400
 8000e74:	58020000 	.word	0x58020000
 8000e78:	58020400 	.word	0x58020400
 8000e7c:	58020800 	.word	0x58020800
 8000e80:	58020c00 	.word	0x58020c00
 8000e84:	58021000 	.word	0x58021000
 8000e88:	58021400 	.word	0x58021400
 8000e8c:	58021800 	.word	0x58021800
 8000e90:	58021c00 	.word	0x58021c00
 8000e94:	58022000 	.word	0x58022000
 8000e98:	58022400 	.word	0x58022400
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	69fa      	ldr	r2, [r7, #28]
 8000ea0:	f002 0203 	and.w	r2, r2, #3
 8000ea4:	0092      	lsls	r2, r2, #2
 8000ea6:	4093      	lsls	r3, r2
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eae:	4938      	ldr	r1, [pc, #224]	; (8000f90 <HAL_GPIO_Init+0x35c>)
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	089b      	lsrs	r3, r3, #2
 8000eb4:	3302      	adds	r3, #2
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d003      	beq.n	8000ee0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d003      	beq.n	8000f0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000f36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d003      	beq.n	8000f64 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000f64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	fa22 f303 	lsr.w	r3, r2, r3
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	f47f ae63 	bne.w	8000c48 <HAL_GPIO_Init+0x14>
  }
}
 8000f82:	bf00      	nop
 8000f84:	bf00      	nop
 8000f86:	3724      	adds	r7, #36	; 0x24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	58000400 	.word	0x58000400

08000f94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	807b      	strh	r3, [r7, #2]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fa4:	787b      	ldrb	r3, [r7, #1]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000faa:	887a      	ldrh	r2, [r7, #2]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000fb0:	e003      	b.n	8000fba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000fb2:	887b      	ldrh	r3, [r7, #2]
 8000fb4:	041a      	lsls	r2, r3, #16
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	619a      	str	r2, [r3, #24]
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b085      	sub	sp, #20
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
 8000fce:	460b      	mov	r3, r1
 8000fd0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	695b      	ldr	r3, [r3, #20]
 8000fd6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fd8:	887a      	ldrh	r2, [r7, #2]
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	041a      	lsls	r2, r3, #16
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	43d9      	mvns	r1, r3
 8000fe4:	887b      	ldrh	r3, [r7, #2]
 8000fe6:	400b      	ands	r3, r1
 8000fe8:	431a      	orrs	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	619a      	str	r2, [r3, #24]
}
 8000fee:	bf00      	nop
 8000ff0:	3714      	adds	r7, #20
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
	...

08000ffc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001004:	4a08      	ldr	r2, [pc, #32]	; (8001028 <HAL_HSEM_FastTake+0x2c>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3320      	adds	r3, #32
 800100a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800100e:	4a07      	ldr	r2, [pc, #28]	; (800102c <HAL_HSEM_FastTake+0x30>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d101      	bne.n	8001018 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001014:	2300      	movs	r3, #0
 8001016:	e000      	b.n	800101a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
}
 800101a:	4618      	mov	r0, r3
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	58026400 	.word	0x58026400
 800102c:	80000300 	.word	0x80000300

08001030 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800103a:	4906      	ldr	r1, [pc, #24]	; (8001054 <HAL_HSEM_Release+0x24>)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	58026400 	.word	0x58026400

08001058 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001060:	4b29      	ldr	r3, [pc, #164]	; (8001108 <HAL_PWREx_ConfigSupply+0xb0>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	f003 0307 	and.w	r3, r3, #7
 8001068:	2b06      	cmp	r3, #6
 800106a:	d00a      	beq.n	8001082 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800106c:	4b26      	ldr	r3, [pc, #152]	; (8001108 <HAL_PWREx_ConfigSupply+0xb0>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	429a      	cmp	r2, r3
 8001078:	d001      	beq.n	800107e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e040      	b.n	8001100 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800107e:	2300      	movs	r3, #0
 8001080:	e03e      	b.n	8001100 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001082:	4b21      	ldr	r3, [pc, #132]	; (8001108 <HAL_PWREx_ConfigSupply+0xb0>)
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800108a:	491f      	ldr	r1, [pc, #124]	; (8001108 <HAL_PWREx_ConfigSupply+0xb0>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4313      	orrs	r3, r2
 8001090:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001092:	f7ff fcd7 	bl	8000a44 <HAL_GetTick>
 8001096:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001098:	e009      	b.n	80010ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800109a:	f7ff fcd3 	bl	8000a44 <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010a8:	d901      	bls.n	80010ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e028      	b.n	8001100 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80010ae:	4b16      	ldr	r3, [pc, #88]	; (8001108 <HAL_PWREx_ConfigSupply+0xb0>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010ba:	d1ee      	bne.n	800109a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b1e      	cmp	r3, #30
 80010c0:	d008      	beq.n	80010d4 <HAL_PWREx_ConfigSupply+0x7c>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b2e      	cmp	r3, #46	; 0x2e
 80010c6:	d005      	beq.n	80010d4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b1d      	cmp	r3, #29
 80010cc:	d002      	beq.n	80010d4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2b2d      	cmp	r3, #45	; 0x2d
 80010d2:	d114      	bne.n	80010fe <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80010d4:	f7ff fcb6 	bl	8000a44 <HAL_GetTick>
 80010d8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80010da:	e009      	b.n	80010f0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80010dc:	f7ff fcb2 	bl	8000a44 <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010ea:	d901      	bls.n	80010f0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e007      	b.n	8001100 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <HAL_PWREx_ConfigSupply+0xb0>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010fc:	d1ee      	bne.n	80010dc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80010fe:	2300      	movs	r3, #0
}
 8001100:	4618      	mov	r0, r3
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	58024800 	.word	0x58024800

0800110c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08c      	sub	sp, #48	; 0x30
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d101      	bne.n	800111e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e3ff      	b.n	800191e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b00      	cmp	r3, #0
 8001128:	f000 8087 	beq.w	800123a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800112c:	4b99      	ldr	r3, [pc, #612]	; (8001394 <HAL_RCC_OscConfig+0x288>)
 800112e:	691b      	ldr	r3, [r3, #16]
 8001130:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001134:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001136:	4b97      	ldr	r3, [pc, #604]	; (8001394 <HAL_RCC_OscConfig+0x288>)
 8001138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800113c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800113e:	2b10      	cmp	r3, #16
 8001140:	d007      	beq.n	8001152 <HAL_RCC_OscConfig+0x46>
 8001142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001144:	2b18      	cmp	r3, #24
 8001146:	d110      	bne.n	800116a <HAL_RCC_OscConfig+0x5e>
 8001148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114a:	f003 0303 	and.w	r3, r3, #3
 800114e:	2b02      	cmp	r3, #2
 8001150:	d10b      	bne.n	800116a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001152:	4b90      	ldr	r3, [pc, #576]	; (8001394 <HAL_RCC_OscConfig+0x288>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d06c      	beq.n	8001238 <HAL_RCC_OscConfig+0x12c>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d168      	bne.n	8001238 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e3d9      	b.n	800191e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001172:	d106      	bne.n	8001182 <HAL_RCC_OscConfig+0x76>
 8001174:	4b87      	ldr	r3, [pc, #540]	; (8001394 <HAL_RCC_OscConfig+0x288>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a86      	ldr	r2, [pc, #536]	; (8001394 <HAL_RCC_OscConfig+0x288>)
 800117a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800117e:	6013      	str	r3, [r2, #0]
 8001180:	e02e      	b.n	80011e0 <HAL_RCC_OscConfig+0xd4>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d10c      	bne.n	80011a4 <HAL_RCC_OscConfig+0x98>
 800118a:	4b82      	ldr	r3, [pc, #520]	; (8001394 <HAL_RCC_OscConfig+0x288>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a81      	ldr	r2, [pc, #516]	; (8001394 <HAL_RCC_OscConfig+0x288>)
 8001190:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	4b7f      	ldr	r3, [pc, #508]	; (8001394 <HAL_RCC_OscConfig+0x288>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a7e      	ldr	r2, [pc, #504]	; (8001394 <HAL_RCC_OscConfig+0x288>)
 800119c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011a0:	6013      	str	r3, [r2, #0]
 80011a2:	e01d      	b.n	80011e0 <HAL_RCC_OscConfig+0xd4>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011ac:	d10c      	bne.n	80011c8 <HAL_RCC_OscConfig+0xbc>
 80011ae:	4b79      	ldr	r3, [pc, #484]	; (8001394 <HAL_RCC_OscConfig+0x288>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a78      	ldr	r2, [pc, #480]	; (8001394 <HAL_RCC_OscConfig+0x288>)
 80011b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	4b76      	ldr	r3, [pc, #472]	; (8001394 <HAL_RCC_OscConfig+0x288>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a75      	ldr	r2, [pc, #468]	; (8001394 <HAL_RCC_OscConfig+0x288>)
 80011c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c4:	6013      	str	r3, [r2, #0]
 80011c6:	e00b      	b.n	80011e0 <HAL_RCC_OscConfig+0xd4>
 80011c8:	4b72      	ldr	r3, [pc, #456]	; (8001394 <HAL_RCC_OscConfig+0x288>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a71      	ldr	r2, [pc, #452]	; (8001394 <HAL_RCC_OscConfig+0x288>)
 80011ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011d2:	6013      	str	r3, [r2, #0]
 80011d4:	4b6f      	ldr	r3, [pc, #444]	; (8001394 <HAL_RCC_OscConfig+0x288>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a6e      	ldr	r2, [pc, #440]	; (8001394 <HAL_RCC_OscConfig+0x288>)
 80011da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d013      	beq.n	8001210 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e8:	f7ff fc2c 	bl	8000a44 <HAL_GetTick>
 80011ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011f0:	f7ff fc28 	bl	8000a44 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b64      	cmp	r3, #100	; 0x64
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e38d      	b.n	800191e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001202:	4b64      	ldr	r3, [pc, #400]	; (8001394 <HAL_RCC_OscConfig+0x288>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0f0      	beq.n	80011f0 <HAL_RCC_OscConfig+0xe4>
 800120e:	e014      	b.n	800123a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001210:	f7ff fc18 	bl	8000a44 <HAL_GetTick>
 8001214:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001216:	e008      	b.n	800122a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001218:	f7ff fc14 	bl	8000a44 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b64      	cmp	r3, #100	; 0x64
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e379      	b.n	800191e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800122a:	4b5a      	ldr	r3, [pc, #360]	; (8001394 <HAL_RCC_OscConfig+0x288>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1f0      	bne.n	8001218 <HAL_RCC_OscConfig+0x10c>
 8001236:	e000      	b.n	800123a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001238:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	f000 80ae 	beq.w	80013a4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001248:	4b52      	ldr	r3, [pc, #328]	; (8001394 <HAL_RCC_OscConfig+0x288>)
 800124a:	691b      	ldr	r3, [r3, #16]
 800124c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001250:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001252:	4b50      	ldr	r3, [pc, #320]	; (8001394 <HAL_RCC_OscConfig+0x288>)
 8001254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001256:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001258:	6a3b      	ldr	r3, [r7, #32]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d007      	beq.n	800126e <HAL_RCC_OscConfig+0x162>
 800125e:	6a3b      	ldr	r3, [r7, #32]
 8001260:	2b18      	cmp	r3, #24
 8001262:	d13a      	bne.n	80012da <HAL_RCC_OscConfig+0x1ce>
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	2b00      	cmp	r3, #0
 800126c:	d135      	bne.n	80012da <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800126e:	4b49      	ldr	r3, [pc, #292]	; (8001394 <HAL_RCC_OscConfig+0x288>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0304 	and.w	r3, r3, #4
 8001276:	2b00      	cmp	r3, #0
 8001278:	d005      	beq.n	8001286 <HAL_RCC_OscConfig+0x17a>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d101      	bne.n	8001286 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e34b      	b.n	800191e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001286:	f7ff fbe9 	bl	8000a5c <HAL_GetREVID>
 800128a:	4603      	mov	r3, r0
 800128c:	f241 0203 	movw	r2, #4099	; 0x1003
 8001290:	4293      	cmp	r3, r2
 8001292:	d817      	bhi.n	80012c4 <HAL_RCC_OscConfig+0x1b8>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	2b40      	cmp	r3, #64	; 0x40
 800129a:	d108      	bne.n	80012ae <HAL_RCC_OscConfig+0x1a2>
 800129c:	4b3d      	ldr	r3, [pc, #244]	; (8001394 <HAL_RCC_OscConfig+0x288>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80012a4:	4a3b      	ldr	r2, [pc, #236]	; (8001394 <HAL_RCC_OscConfig+0x288>)
 80012a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012aa:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012ac:	e07a      	b.n	80013a4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ae:	4b39      	ldr	r3, [pc, #228]	; (8001394 <HAL_RCC_OscConfig+0x288>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	691b      	ldr	r3, [r3, #16]
 80012ba:	031b      	lsls	r3, r3, #12
 80012bc:	4935      	ldr	r1, [pc, #212]	; (8001394 <HAL_RCC_OscConfig+0x288>)
 80012be:	4313      	orrs	r3, r2
 80012c0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012c2:	e06f      	b.n	80013a4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c4:	4b33      	ldr	r3, [pc, #204]	; (8001394 <HAL_RCC_OscConfig+0x288>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	691b      	ldr	r3, [r3, #16]
 80012d0:	061b      	lsls	r3, r3, #24
 80012d2:	4930      	ldr	r1, [pc, #192]	; (8001394 <HAL_RCC_OscConfig+0x288>)
 80012d4:	4313      	orrs	r3, r2
 80012d6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012d8:	e064      	b.n	80013a4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d045      	beq.n	800136e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80012e2:	4b2c      	ldr	r3, [pc, #176]	; (8001394 <HAL_RCC_OscConfig+0x288>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f023 0219 	bic.w	r2, r3, #25
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	4929      	ldr	r1, [pc, #164]	; (8001394 <HAL_RCC_OscConfig+0x288>)
 80012f0:	4313      	orrs	r3, r2
 80012f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f4:	f7ff fba6 	bl	8000a44 <HAL_GetTick>
 80012f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012fc:	f7ff fba2 	bl	8000a44 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e307      	b.n	800191e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800130e:	4b21      	ldr	r3, [pc, #132]	; (8001394 <HAL_RCC_OscConfig+0x288>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0304 	and.w	r3, r3, #4
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0f0      	beq.n	80012fc <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800131a:	f7ff fb9f 	bl	8000a5c <HAL_GetREVID>
 800131e:	4603      	mov	r3, r0
 8001320:	f241 0203 	movw	r2, #4099	; 0x1003
 8001324:	4293      	cmp	r3, r2
 8001326:	d817      	bhi.n	8001358 <HAL_RCC_OscConfig+0x24c>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	2b40      	cmp	r3, #64	; 0x40
 800132e:	d108      	bne.n	8001342 <HAL_RCC_OscConfig+0x236>
 8001330:	4b18      	ldr	r3, [pc, #96]	; (8001394 <HAL_RCC_OscConfig+0x288>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001338:	4a16      	ldr	r2, [pc, #88]	; (8001394 <HAL_RCC_OscConfig+0x288>)
 800133a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800133e:	6053      	str	r3, [r2, #4]
 8001340:	e030      	b.n	80013a4 <HAL_RCC_OscConfig+0x298>
 8001342:	4b14      	ldr	r3, [pc, #80]	; (8001394 <HAL_RCC_OscConfig+0x288>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	031b      	lsls	r3, r3, #12
 8001350:	4910      	ldr	r1, [pc, #64]	; (8001394 <HAL_RCC_OscConfig+0x288>)
 8001352:	4313      	orrs	r3, r2
 8001354:	604b      	str	r3, [r1, #4]
 8001356:	e025      	b.n	80013a4 <HAL_RCC_OscConfig+0x298>
 8001358:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <HAL_RCC_OscConfig+0x288>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	061b      	lsls	r3, r3, #24
 8001366:	490b      	ldr	r1, [pc, #44]	; (8001394 <HAL_RCC_OscConfig+0x288>)
 8001368:	4313      	orrs	r3, r2
 800136a:	604b      	str	r3, [r1, #4]
 800136c:	e01a      	b.n	80013a4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <HAL_RCC_OscConfig+0x288>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a08      	ldr	r2, [pc, #32]	; (8001394 <HAL_RCC_OscConfig+0x288>)
 8001374:	f023 0301 	bic.w	r3, r3, #1
 8001378:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137a:	f7ff fb63 	bl	8000a44 <HAL_GetTick>
 800137e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001380:	e00a      	b.n	8001398 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001382:	f7ff fb5f 	bl	8000a44 <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d903      	bls.n	8001398 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e2c4      	b.n	800191e <HAL_RCC_OscConfig+0x812>
 8001394:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001398:	4ba4      	ldr	r3, [pc, #656]	; (800162c <HAL_RCC_OscConfig+0x520>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0304 	and.w	r3, r3, #4
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1ee      	bne.n	8001382 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0310 	and.w	r3, r3, #16
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f000 80a9 	beq.w	8001504 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013b2:	4b9e      	ldr	r3, [pc, #632]	; (800162c <HAL_RCC_OscConfig+0x520>)
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80013ba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80013bc:	4b9b      	ldr	r3, [pc, #620]	; (800162c <HAL_RCC_OscConfig+0x520>)
 80013be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	2b08      	cmp	r3, #8
 80013c6:	d007      	beq.n	80013d8 <HAL_RCC_OscConfig+0x2cc>
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	2b18      	cmp	r3, #24
 80013cc:	d13a      	bne.n	8001444 <HAL_RCC_OscConfig+0x338>
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	f003 0303 	and.w	r3, r3, #3
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d135      	bne.n	8001444 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013d8:	4b94      	ldr	r3, [pc, #592]	; (800162c <HAL_RCC_OscConfig+0x520>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d005      	beq.n	80013f0 <HAL_RCC_OscConfig+0x2e4>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69db      	ldr	r3, [r3, #28]
 80013e8:	2b80      	cmp	r3, #128	; 0x80
 80013ea:	d001      	beq.n	80013f0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e296      	b.n	800191e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013f0:	f7ff fb34 	bl	8000a5c <HAL_GetREVID>
 80013f4:	4603      	mov	r3, r0
 80013f6:	f241 0203 	movw	r2, #4099	; 0x1003
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d817      	bhi.n	800142e <HAL_RCC_OscConfig+0x322>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a1b      	ldr	r3, [r3, #32]
 8001402:	2b20      	cmp	r3, #32
 8001404:	d108      	bne.n	8001418 <HAL_RCC_OscConfig+0x30c>
 8001406:	4b89      	ldr	r3, [pc, #548]	; (800162c <HAL_RCC_OscConfig+0x520>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800140e:	4a87      	ldr	r2, [pc, #540]	; (800162c <HAL_RCC_OscConfig+0x520>)
 8001410:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001414:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001416:	e075      	b.n	8001504 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001418:	4b84      	ldr	r3, [pc, #528]	; (800162c <HAL_RCC_OscConfig+0x520>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a1b      	ldr	r3, [r3, #32]
 8001424:	069b      	lsls	r3, r3, #26
 8001426:	4981      	ldr	r1, [pc, #516]	; (800162c <HAL_RCC_OscConfig+0x520>)
 8001428:	4313      	orrs	r3, r2
 800142a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800142c:	e06a      	b.n	8001504 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800142e:	4b7f      	ldr	r3, [pc, #508]	; (800162c <HAL_RCC_OscConfig+0x520>)
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a1b      	ldr	r3, [r3, #32]
 800143a:	061b      	lsls	r3, r3, #24
 800143c:	497b      	ldr	r1, [pc, #492]	; (800162c <HAL_RCC_OscConfig+0x520>)
 800143e:	4313      	orrs	r3, r2
 8001440:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001442:	e05f      	b.n	8001504 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	69db      	ldr	r3, [r3, #28]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d042      	beq.n	80014d2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800144c:	4b77      	ldr	r3, [pc, #476]	; (800162c <HAL_RCC_OscConfig+0x520>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a76      	ldr	r2, [pc, #472]	; (800162c <HAL_RCC_OscConfig+0x520>)
 8001452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001456:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001458:	f7ff faf4 	bl	8000a44 <HAL_GetTick>
 800145c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001460:	f7ff faf0 	bl	8000a44 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e255      	b.n	800191e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001472:	4b6e      	ldr	r3, [pc, #440]	; (800162c <HAL_RCC_OscConfig+0x520>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0f0      	beq.n	8001460 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800147e:	f7ff faed 	bl	8000a5c <HAL_GetREVID>
 8001482:	4603      	mov	r3, r0
 8001484:	f241 0203 	movw	r2, #4099	; 0x1003
 8001488:	4293      	cmp	r3, r2
 800148a:	d817      	bhi.n	80014bc <HAL_RCC_OscConfig+0x3b0>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	2b20      	cmp	r3, #32
 8001492:	d108      	bne.n	80014a6 <HAL_RCC_OscConfig+0x39a>
 8001494:	4b65      	ldr	r3, [pc, #404]	; (800162c <HAL_RCC_OscConfig+0x520>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800149c:	4a63      	ldr	r2, [pc, #396]	; (800162c <HAL_RCC_OscConfig+0x520>)
 800149e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80014a2:	6053      	str	r3, [r2, #4]
 80014a4:	e02e      	b.n	8001504 <HAL_RCC_OscConfig+0x3f8>
 80014a6:	4b61      	ldr	r3, [pc, #388]	; (800162c <HAL_RCC_OscConfig+0x520>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a1b      	ldr	r3, [r3, #32]
 80014b2:	069b      	lsls	r3, r3, #26
 80014b4:	495d      	ldr	r1, [pc, #372]	; (800162c <HAL_RCC_OscConfig+0x520>)
 80014b6:	4313      	orrs	r3, r2
 80014b8:	604b      	str	r3, [r1, #4]
 80014ba:	e023      	b.n	8001504 <HAL_RCC_OscConfig+0x3f8>
 80014bc:	4b5b      	ldr	r3, [pc, #364]	; (800162c <HAL_RCC_OscConfig+0x520>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a1b      	ldr	r3, [r3, #32]
 80014c8:	061b      	lsls	r3, r3, #24
 80014ca:	4958      	ldr	r1, [pc, #352]	; (800162c <HAL_RCC_OscConfig+0x520>)
 80014cc:	4313      	orrs	r3, r2
 80014ce:	60cb      	str	r3, [r1, #12]
 80014d0:	e018      	b.n	8001504 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80014d2:	4b56      	ldr	r3, [pc, #344]	; (800162c <HAL_RCC_OscConfig+0x520>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a55      	ldr	r2, [pc, #340]	; (800162c <HAL_RCC_OscConfig+0x520>)
 80014d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014de:	f7ff fab1 	bl	8000a44 <HAL_GetTick>
 80014e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80014e6:	f7ff faad 	bl	8000a44 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e212      	b.n	800191e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80014f8:	4b4c      	ldr	r3, [pc, #304]	; (800162c <HAL_RCC_OscConfig+0x520>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1f0      	bne.n	80014e6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0308 	and.w	r3, r3, #8
 800150c:	2b00      	cmp	r3, #0
 800150e:	d036      	beq.n	800157e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	695b      	ldr	r3, [r3, #20]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d019      	beq.n	800154c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001518:	4b44      	ldr	r3, [pc, #272]	; (800162c <HAL_RCC_OscConfig+0x520>)
 800151a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800151c:	4a43      	ldr	r2, [pc, #268]	; (800162c <HAL_RCC_OscConfig+0x520>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001524:	f7ff fa8e 	bl	8000a44 <HAL_GetTick>
 8001528:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800152c:	f7ff fa8a 	bl	8000a44 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e1ef      	b.n	800191e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800153e:	4b3b      	ldr	r3, [pc, #236]	; (800162c <HAL_RCC_OscConfig+0x520>)
 8001540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0f0      	beq.n	800152c <HAL_RCC_OscConfig+0x420>
 800154a:	e018      	b.n	800157e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800154c:	4b37      	ldr	r3, [pc, #220]	; (800162c <HAL_RCC_OscConfig+0x520>)
 800154e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001550:	4a36      	ldr	r2, [pc, #216]	; (800162c <HAL_RCC_OscConfig+0x520>)
 8001552:	f023 0301 	bic.w	r3, r3, #1
 8001556:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001558:	f7ff fa74 	bl	8000a44 <HAL_GetTick>
 800155c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001560:	f7ff fa70 	bl	8000a44 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e1d5      	b.n	800191e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001572:	4b2e      	ldr	r3, [pc, #184]	; (800162c <HAL_RCC_OscConfig+0x520>)
 8001574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f0      	bne.n	8001560 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0320 	and.w	r3, r3, #32
 8001586:	2b00      	cmp	r3, #0
 8001588:	d036      	beq.n	80015f8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d019      	beq.n	80015c6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001592:	4b26      	ldr	r3, [pc, #152]	; (800162c <HAL_RCC_OscConfig+0x520>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a25      	ldr	r2, [pc, #148]	; (800162c <HAL_RCC_OscConfig+0x520>)
 8001598:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800159c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800159e:	f7ff fa51 	bl	8000a44 <HAL_GetTick>
 80015a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80015a6:	f7ff fa4d 	bl	8000a44 <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e1b2      	b.n	800191e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80015b8:	4b1c      	ldr	r3, [pc, #112]	; (800162c <HAL_RCC_OscConfig+0x520>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0f0      	beq.n	80015a6 <HAL_RCC_OscConfig+0x49a>
 80015c4:	e018      	b.n	80015f8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80015c6:	4b19      	ldr	r3, [pc, #100]	; (800162c <HAL_RCC_OscConfig+0x520>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a18      	ldr	r2, [pc, #96]	; (800162c <HAL_RCC_OscConfig+0x520>)
 80015cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80015d2:	f7ff fa37 	bl	8000a44 <HAL_GetTick>
 80015d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80015d8:	e008      	b.n	80015ec <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80015da:	f7ff fa33 	bl	8000a44 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e198      	b.n	800191e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <HAL_RCC_OscConfig+0x520>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1f0      	bne.n	80015da <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	2b00      	cmp	r3, #0
 8001602:	f000 8085 	beq.w	8001710 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001606:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <HAL_RCC_OscConfig+0x524>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a09      	ldr	r2, [pc, #36]	; (8001630 <HAL_RCC_OscConfig+0x524>)
 800160c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001610:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001612:	f7ff fa17 	bl	8000a44 <HAL_GetTick>
 8001616:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001618:	e00c      	b.n	8001634 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800161a:	f7ff fa13 	bl	8000a44 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b64      	cmp	r3, #100	; 0x64
 8001626:	d905      	bls.n	8001634 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e178      	b.n	800191e <HAL_RCC_OscConfig+0x812>
 800162c:	58024400 	.word	0x58024400
 8001630:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001634:	4b96      	ldr	r3, [pc, #600]	; (8001890 <HAL_RCC_OscConfig+0x784>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0ec      	beq.n	800161a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d106      	bne.n	8001656 <HAL_RCC_OscConfig+0x54a>
 8001648:	4b92      	ldr	r3, [pc, #584]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 800164a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164c:	4a91      	ldr	r2, [pc, #580]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	6713      	str	r3, [r2, #112]	; 0x70
 8001654:	e02d      	b.n	80016b2 <HAL_RCC_OscConfig+0x5a6>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10c      	bne.n	8001678 <HAL_RCC_OscConfig+0x56c>
 800165e:	4b8d      	ldr	r3, [pc, #564]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 8001660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001662:	4a8c      	ldr	r2, [pc, #560]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 8001664:	f023 0301 	bic.w	r3, r3, #1
 8001668:	6713      	str	r3, [r2, #112]	; 0x70
 800166a:	4b8a      	ldr	r3, [pc, #552]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 800166c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800166e:	4a89      	ldr	r2, [pc, #548]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 8001670:	f023 0304 	bic.w	r3, r3, #4
 8001674:	6713      	str	r3, [r2, #112]	; 0x70
 8001676:	e01c      	b.n	80016b2 <HAL_RCC_OscConfig+0x5a6>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	2b05      	cmp	r3, #5
 800167e:	d10c      	bne.n	800169a <HAL_RCC_OscConfig+0x58e>
 8001680:	4b84      	ldr	r3, [pc, #528]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 8001682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001684:	4a83      	ldr	r2, [pc, #524]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 8001686:	f043 0304 	orr.w	r3, r3, #4
 800168a:	6713      	str	r3, [r2, #112]	; 0x70
 800168c:	4b81      	ldr	r3, [pc, #516]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 800168e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001690:	4a80      	ldr	r2, [pc, #512]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	6713      	str	r3, [r2, #112]	; 0x70
 8001698:	e00b      	b.n	80016b2 <HAL_RCC_OscConfig+0x5a6>
 800169a:	4b7e      	ldr	r3, [pc, #504]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 800169c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169e:	4a7d      	ldr	r2, [pc, #500]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 80016a0:	f023 0301 	bic.w	r3, r3, #1
 80016a4:	6713      	str	r3, [r2, #112]	; 0x70
 80016a6:	4b7b      	ldr	r3, [pc, #492]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 80016a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016aa:	4a7a      	ldr	r2, [pc, #488]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 80016ac:	f023 0304 	bic.w	r3, r3, #4
 80016b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d015      	beq.n	80016e6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ba:	f7ff f9c3 	bl	8000a44 <HAL_GetTick>
 80016be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016c0:	e00a      	b.n	80016d8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016c2:	f7ff f9bf 	bl	8000a44 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e122      	b.n	800191e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016d8:	4b6e      	ldr	r3, [pc, #440]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 80016da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0ee      	beq.n	80016c2 <HAL_RCC_OscConfig+0x5b6>
 80016e4:	e014      	b.n	8001710 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e6:	f7ff f9ad 	bl	8000a44 <HAL_GetTick>
 80016ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016ec:	e00a      	b.n	8001704 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ee:	f7ff f9a9 	bl	8000a44 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e10c      	b.n	800191e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001704:	4b63      	ldr	r3, [pc, #396]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 8001706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1ee      	bne.n	80016ee <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001714:	2b00      	cmp	r3, #0
 8001716:	f000 8101 	beq.w	800191c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800171a:	4b5e      	ldr	r3, [pc, #376]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001722:	2b18      	cmp	r3, #24
 8001724:	f000 80bc 	beq.w	80018a0 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172c:	2b02      	cmp	r3, #2
 800172e:	f040 8095 	bne.w	800185c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001732:	4b58      	ldr	r3, [pc, #352]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a57      	ldr	r2, [pc, #348]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 8001738:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800173c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173e:	f7ff f981 	bl	8000a44 <HAL_GetTick>
 8001742:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001746:	f7ff f97d 	bl	8000a44 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e0e2      	b.n	800191e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001758:	4b4e      	ldr	r3, [pc, #312]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1f0      	bne.n	8001746 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001764:	4b4b      	ldr	r3, [pc, #300]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 8001766:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001768:	4b4b      	ldr	r3, [pc, #300]	; (8001898 <HAL_RCC_OscConfig+0x78c>)
 800176a:	4013      	ands	r3, r2
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001774:	0112      	lsls	r2, r2, #4
 8001776:	430a      	orrs	r2, r1
 8001778:	4946      	ldr	r1, [pc, #280]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 800177a:	4313      	orrs	r3, r2
 800177c:	628b      	str	r3, [r1, #40]	; 0x28
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	3b01      	subs	r3, #1
 8001784:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800178c:	3b01      	subs	r3, #1
 800178e:	025b      	lsls	r3, r3, #9
 8001790:	b29b      	uxth	r3, r3
 8001792:	431a      	orrs	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001798:	3b01      	subs	r3, #1
 800179a:	041b      	lsls	r3, r3, #16
 800179c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80017a0:	431a      	orrs	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a6:	3b01      	subs	r3, #1
 80017a8:	061b      	lsls	r3, r3, #24
 80017aa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80017ae:	4939      	ldr	r1, [pc, #228]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80017b4:	4b37      	ldr	r3, [pc, #220]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 80017b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b8:	4a36      	ldr	r2, [pc, #216]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 80017ba:	f023 0301 	bic.w	r3, r3, #1
 80017be:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80017c0:	4b34      	ldr	r3, [pc, #208]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 80017c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017c4:	4b35      	ldr	r3, [pc, #212]	; (800189c <HAL_RCC_OscConfig+0x790>)
 80017c6:	4013      	ands	r3, r2
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80017cc:	00d2      	lsls	r2, r2, #3
 80017ce:	4931      	ldr	r1, [pc, #196]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80017d4:	4b2f      	ldr	r3, [pc, #188]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 80017d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d8:	f023 020c 	bic.w	r2, r3, #12
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	492c      	ldr	r1, [pc, #176]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80017e6:	4b2b      	ldr	r3, [pc, #172]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 80017e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ea:	f023 0202 	bic.w	r2, r3, #2
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	4928      	ldr	r1, [pc, #160]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80017f8:	4b26      	ldr	r3, [pc, #152]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 80017fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fc:	4a25      	ldr	r2, [pc, #148]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 80017fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001802:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001804:	4b23      	ldr	r3, [pc, #140]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 8001806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001808:	4a22      	ldr	r2, [pc, #136]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 800180a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800180e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001810:	4b20      	ldr	r3, [pc, #128]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 8001812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001814:	4a1f      	ldr	r2, [pc, #124]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 8001816:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800181a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800181c:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 800181e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001820:	4a1c      	ldr	r2, [pc, #112]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001828:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a19      	ldr	r2, [pc, #100]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 800182e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001834:	f7ff f906 	bl	8000a44 <HAL_GetTick>
 8001838:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800183c:	f7ff f902 	bl	8000a44 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e067      	b.n	800191e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800184e:	4b11      	ldr	r3, [pc, #68]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d0f0      	beq.n	800183c <HAL_RCC_OscConfig+0x730>
 800185a:	e05f      	b.n	800191c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800185c:	4b0d      	ldr	r3, [pc, #52]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a0c      	ldr	r2, [pc, #48]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 8001862:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001866:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001868:	f7ff f8ec 	bl	8000a44 <HAL_GetTick>
 800186c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001870:	f7ff f8e8 	bl	8000a44 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e04d      	b.n	800191e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001882:	4b04      	ldr	r3, [pc, #16]	; (8001894 <HAL_RCC_OscConfig+0x788>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1f0      	bne.n	8001870 <HAL_RCC_OscConfig+0x764>
 800188e:	e045      	b.n	800191c <HAL_RCC_OscConfig+0x810>
 8001890:	58024800 	.word	0x58024800
 8001894:	58024400 	.word	0x58024400
 8001898:	fffffc0c 	.word	0xfffffc0c
 800189c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80018a0:	4b21      	ldr	r3, [pc, #132]	; (8001928 <HAL_RCC_OscConfig+0x81c>)
 80018a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80018a6:	4b20      	ldr	r3, [pc, #128]	; (8001928 <HAL_RCC_OscConfig+0x81c>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d031      	beq.n	8001918 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	f003 0203 	and.w	r2, r3, #3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018be:	429a      	cmp	r2, r3
 80018c0:	d12a      	bne.n	8001918 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	091b      	lsrs	r3, r3, #4
 80018c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d122      	bne.n	8001918 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018dc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80018de:	429a      	cmp	r2, r3
 80018e0:	d11a      	bne.n	8001918 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	0a5b      	lsrs	r3, r3, #9
 80018e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ee:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d111      	bne.n	8001918 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	0c1b      	lsrs	r3, r3, #16
 80018f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001900:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001902:	429a      	cmp	r2, r3
 8001904:	d108      	bne.n	8001918 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	0e1b      	lsrs	r3, r3, #24
 800190a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001912:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001914:	429a      	cmp	r2, r3
 8001916:	d001      	beq.n	800191c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e000      	b.n	800191e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3730      	adds	r7, #48	; 0x30
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	58024400 	.word	0x58024400

0800192c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e19c      	b.n	8001c7a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001940:	4b8a      	ldr	r3, [pc, #552]	; (8001b6c <HAL_RCC_ClockConfig+0x240>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 030f 	and.w	r3, r3, #15
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	429a      	cmp	r2, r3
 800194c:	d910      	bls.n	8001970 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194e:	4b87      	ldr	r3, [pc, #540]	; (8001b6c <HAL_RCC_ClockConfig+0x240>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f023 020f 	bic.w	r2, r3, #15
 8001956:	4985      	ldr	r1, [pc, #532]	; (8001b6c <HAL_RCC_ClockConfig+0x240>)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	4313      	orrs	r3, r2
 800195c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800195e:	4b83      	ldr	r3, [pc, #524]	; (8001b6c <HAL_RCC_ClockConfig+0x240>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 030f 	and.w	r3, r3, #15
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	429a      	cmp	r2, r3
 800196a:	d001      	beq.n	8001970 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e184      	b.n	8001c7a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	2b00      	cmp	r3, #0
 800197a:	d010      	beq.n	800199e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691a      	ldr	r2, [r3, #16]
 8001980:	4b7b      	ldr	r3, [pc, #492]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001988:	429a      	cmp	r2, r3
 800198a:	d908      	bls.n	800199e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800198c:	4b78      	ldr	r3, [pc, #480]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	4975      	ldr	r1, [pc, #468]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 800199a:	4313      	orrs	r3, r2
 800199c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0308 	and.w	r3, r3, #8
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d010      	beq.n	80019cc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	695a      	ldr	r2, [r3, #20]
 80019ae:	4b70      	ldr	r3, [pc, #448]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d908      	bls.n	80019cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80019ba:	4b6d      	ldr	r3, [pc, #436]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	496a      	ldr	r1, [pc, #424]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0310 	and.w	r3, r3, #16
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d010      	beq.n	80019fa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	699a      	ldr	r2, [r3, #24]
 80019dc:	4b64      	ldr	r3, [pc, #400]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 80019de:	69db      	ldr	r3, [r3, #28]
 80019e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d908      	bls.n	80019fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80019e8:	4b61      	ldr	r3, [pc, #388]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 80019ea:	69db      	ldr	r3, [r3, #28]
 80019ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	495e      	ldr	r1, [pc, #376]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0320 	and.w	r3, r3, #32
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d010      	beq.n	8001a28 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69da      	ldr	r2, [r3, #28]
 8001a0a:	4b59      	ldr	r3, [pc, #356]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d908      	bls.n	8001a28 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001a16:	4b56      	ldr	r3, [pc, #344]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	4953      	ldr	r1, [pc, #332]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d010      	beq.n	8001a56 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68da      	ldr	r2, [r3, #12]
 8001a38:	4b4d      	ldr	r3, [pc, #308]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	f003 030f 	and.w	r3, r3, #15
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d908      	bls.n	8001a56 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a44:	4b4a      	ldr	r3, [pc, #296]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	f023 020f 	bic.w	r2, r3, #15
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	4947      	ldr	r1, [pc, #284]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d055      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001a62:	4b43      	ldr	r3, [pc, #268]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	4940      	ldr	r1, [pc, #256]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d107      	bne.n	8001a8c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a7c:	4b3c      	ldr	r3, [pc, #240]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d121      	bne.n	8001acc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e0f6      	b.n	8001c7a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b03      	cmp	r3, #3
 8001a92:	d107      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a94:	4b36      	ldr	r3, [pc, #216]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d115      	bne.n	8001acc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e0ea      	b.n	8001c7a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d107      	bne.n	8001abc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001aac:	4b30      	ldr	r3, [pc, #192]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d109      	bne.n	8001acc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e0de      	b.n	8001c7a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001abc:	4b2c      	ldr	r3, [pc, #176]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e0d6      	b.n	8001c7a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001acc:	4b28      	ldr	r3, [pc, #160]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	f023 0207 	bic.w	r2, r3, #7
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	4925      	ldr	r1, [pc, #148]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ade:	f7fe ffb1 	bl	8000a44 <HAL_GetTick>
 8001ae2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae4:	e00a      	b.n	8001afc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae6:	f7fe ffad 	bl	8000a44 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e0be      	b.n	8001c7a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afc:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d1eb      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d010      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68da      	ldr	r2, [r3, #12]
 8001b1e:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d208      	bcs.n	8001b3c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b2a:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	f023 020f 	bic.w	r2, r3, #15
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	490e      	ldr	r1, [pc, #56]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <HAL_RCC_ClockConfig+0x240>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 030f 	and.w	r3, r3, #15
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d214      	bcs.n	8001b74 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b4a:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <HAL_RCC_ClockConfig+0x240>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f023 020f 	bic.w	r2, r3, #15
 8001b52:	4906      	ldr	r1, [pc, #24]	; (8001b6c <HAL_RCC_ClockConfig+0x240>)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5a:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <HAL_RCC_ClockConfig+0x240>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d005      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e086      	b.n	8001c7a <HAL_RCC_ClockConfig+0x34e>
 8001b6c:	52002000 	.word	0x52002000
 8001b70:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d010      	beq.n	8001ba2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691a      	ldr	r2, [r3, #16]
 8001b84:	4b3f      	ldr	r3, [pc, #252]	; (8001c84 <HAL_RCC_ClockConfig+0x358>)
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d208      	bcs.n	8001ba2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001b90:	4b3c      	ldr	r3, [pc, #240]	; (8001c84 <HAL_RCC_ClockConfig+0x358>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	4939      	ldr	r1, [pc, #228]	; (8001c84 <HAL_RCC_ClockConfig+0x358>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d010      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	695a      	ldr	r2, [r3, #20]
 8001bb2:	4b34      	ldr	r3, [pc, #208]	; (8001c84 <HAL_RCC_ClockConfig+0x358>)
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d208      	bcs.n	8001bd0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001bbe:	4b31      	ldr	r3, [pc, #196]	; (8001c84 <HAL_RCC_ClockConfig+0x358>)
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	492e      	ldr	r1, [pc, #184]	; (8001c84 <HAL_RCC_ClockConfig+0x358>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0310 	and.w	r3, r3, #16
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d010      	beq.n	8001bfe <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	699a      	ldr	r2, [r3, #24]
 8001be0:	4b28      	ldr	r3, [pc, #160]	; (8001c84 <HAL_RCC_ClockConfig+0x358>)
 8001be2:	69db      	ldr	r3, [r3, #28]
 8001be4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d208      	bcs.n	8001bfe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001bec:	4b25      	ldr	r3, [pc, #148]	; (8001c84 <HAL_RCC_ClockConfig+0x358>)
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	4922      	ldr	r1, [pc, #136]	; (8001c84 <HAL_RCC_ClockConfig+0x358>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0320 	and.w	r3, r3, #32
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d010      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69da      	ldr	r2, [r3, #28]
 8001c0e:	4b1d      	ldr	r3, [pc, #116]	; (8001c84 <HAL_RCC_ClockConfig+0x358>)
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d208      	bcs.n	8001c2c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001c1a:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <HAL_RCC_ClockConfig+0x358>)
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	4917      	ldr	r1, [pc, #92]	; (8001c84 <HAL_RCC_ClockConfig+0x358>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c2c:	f000 f834 	bl	8001c98 <HAL_RCC_GetSysClockFreq>
 8001c30:	4602      	mov	r2, r0
 8001c32:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <HAL_RCC_ClockConfig+0x358>)
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	0a1b      	lsrs	r3, r3, #8
 8001c38:	f003 030f 	and.w	r3, r3, #15
 8001c3c:	4912      	ldr	r1, [pc, #72]	; (8001c88 <HAL_RCC_ClockConfig+0x35c>)
 8001c3e:	5ccb      	ldrb	r3, [r1, r3]
 8001c40:	f003 031f 	and.w	r3, r3, #31
 8001c44:	fa22 f303 	lsr.w	r3, r2, r3
 8001c48:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <HAL_RCC_ClockConfig+0x358>)
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	4a0d      	ldr	r2, [pc, #52]	; (8001c88 <HAL_RCC_ClockConfig+0x35c>)
 8001c54:	5cd3      	ldrb	r3, [r2, r3]
 8001c56:	f003 031f 	and.w	r3, r3, #31
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c60:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <HAL_RCC_ClockConfig+0x360>)
 8001c62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c64:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <HAL_RCC_ClockConfig+0x364>)
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <HAL_RCC_ClockConfig+0x368>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7fe fde2 	bl	8000838 <HAL_InitTick>
 8001c74:	4603      	mov	r3, r0
 8001c76:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	58024400 	.word	0x58024400
 8001c88:	080053fc 	.word	0x080053fc
 8001c8c:	24000004 	.word	0x24000004
 8001c90:	24000000 	.word	0x24000000
 8001c94:	24000008 	.word	0x24000008

08001c98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b089      	sub	sp, #36	; 0x24
 8001c9c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c9e:	4bb3      	ldr	r3, [pc, #716]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ca6:	2b18      	cmp	r3, #24
 8001ca8:	f200 8155 	bhi.w	8001f56 <HAL_RCC_GetSysClockFreq+0x2be>
 8001cac:	a201      	add	r2, pc, #4	; (adr r2, 8001cb4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb2:	bf00      	nop
 8001cb4:	08001d19 	.word	0x08001d19
 8001cb8:	08001f57 	.word	0x08001f57
 8001cbc:	08001f57 	.word	0x08001f57
 8001cc0:	08001f57 	.word	0x08001f57
 8001cc4:	08001f57 	.word	0x08001f57
 8001cc8:	08001f57 	.word	0x08001f57
 8001ccc:	08001f57 	.word	0x08001f57
 8001cd0:	08001f57 	.word	0x08001f57
 8001cd4:	08001d3f 	.word	0x08001d3f
 8001cd8:	08001f57 	.word	0x08001f57
 8001cdc:	08001f57 	.word	0x08001f57
 8001ce0:	08001f57 	.word	0x08001f57
 8001ce4:	08001f57 	.word	0x08001f57
 8001ce8:	08001f57 	.word	0x08001f57
 8001cec:	08001f57 	.word	0x08001f57
 8001cf0:	08001f57 	.word	0x08001f57
 8001cf4:	08001d45 	.word	0x08001d45
 8001cf8:	08001f57 	.word	0x08001f57
 8001cfc:	08001f57 	.word	0x08001f57
 8001d00:	08001f57 	.word	0x08001f57
 8001d04:	08001f57 	.word	0x08001f57
 8001d08:	08001f57 	.word	0x08001f57
 8001d0c:	08001f57 	.word	0x08001f57
 8001d10:	08001f57 	.word	0x08001f57
 8001d14:	08001d4b 	.word	0x08001d4b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001d18:	4b94      	ldr	r3, [pc, #592]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0320 	and.w	r3, r3, #32
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d009      	beq.n	8001d38 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001d24:	4b91      	ldr	r3, [pc, #580]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	08db      	lsrs	r3, r3, #3
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	4a90      	ldr	r2, [pc, #576]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d30:	fa22 f303 	lsr.w	r3, r2, r3
 8001d34:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001d36:	e111      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001d38:	4b8d      	ldr	r3, [pc, #564]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d3a:	61bb      	str	r3, [r7, #24]
    break;
 8001d3c:	e10e      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001d3e:	4b8d      	ldr	r3, [pc, #564]	; (8001f74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001d40:	61bb      	str	r3, [r7, #24]
    break;
 8001d42:	e10b      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001d44:	4b8c      	ldr	r3, [pc, #560]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001d46:	61bb      	str	r3, [r7, #24]
    break;
 8001d48:	e108      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001d4a:	4b88      	ldr	r3, [pc, #544]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001d54:	4b85      	ldr	r3, [pc, #532]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d58:	091b      	lsrs	r3, r3, #4
 8001d5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d5e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001d60:	4b82      	ldr	r3, [pc, #520]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001d6a:	4b80      	ldr	r3, [pc, #512]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d6e:	08db      	lsrs	r3, r3, #3
 8001d70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	fb02 f303 	mul.w	r3, r2, r3
 8001d7a:	ee07 3a90 	vmov	s15, r3
 8001d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d82:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f000 80e1 	beq.w	8001f50 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	f000 8083 	beq.w	8001e9c <HAL_RCC_GetSysClockFreq+0x204>
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	f200 80a1 	bhi.w	8001ee0 <HAL_RCC_GetSysClockFreq+0x248>
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <HAL_RCC_GetSysClockFreq+0x114>
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d056      	beq.n	8001e58 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001daa:	e099      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001dac:	4b6f      	ldr	r3, [pc, #444]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0320 	and.w	r3, r3, #32
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d02d      	beq.n	8001e14 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001db8:	4b6c      	ldr	r3, [pc, #432]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	08db      	lsrs	r3, r3, #3
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	4a6b      	ldr	r2, [pc, #428]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	ee07 3a90 	vmov	s15, r3
 8001dd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	ee07 3a90 	vmov	s15, r3
 8001dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001de2:	4b62      	ldr	r3, [pc, #392]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dea:	ee07 3a90 	vmov	s15, r3
 8001dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001df2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001df6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001f7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001e12:	e087      	b.n	8001f24 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	ee07 3a90 	vmov	s15, r3
 8001e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e1e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001f80 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e26:	4b51      	ldr	r3, [pc, #324]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e2e:	ee07 3a90 	vmov	s15, r3
 8001e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e36:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e3a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001f7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001e56:	e065      	b.n	8001f24 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	ee07 3a90 	vmov	s15, r3
 8001e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e62:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001f84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e6a:	4b40      	ldr	r3, [pc, #256]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e72:	ee07 3a90 	vmov	s15, r3
 8001e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e7e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001f7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001e9a:	e043      	b.n	8001f24 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	ee07 3a90 	vmov	s15, r3
 8001ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ea6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001f88 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001eae:	4b2f      	ldr	r3, [pc, #188]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eb6:	ee07 3a90 	vmov	s15, r3
 8001eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ebe:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ec2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001f7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ece:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001ede:	e021      	b.n	8001f24 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	ee07 3a90 	vmov	s15, r3
 8001ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eea:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001f84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ef2:	4b1e      	ldr	r3, [pc, #120]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001efa:	ee07 3a90 	vmov	s15, r3
 8001efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f02:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f06:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001f7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f22:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001f24:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f28:	0a5b      	lsrs	r3, r3, #9
 8001f2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f2e:	3301      	adds	r3, #1
 8001f30:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	ee07 3a90 	vmov	s15, r3
 8001f38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8001f40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f48:	ee17 3a90 	vmov	r3, s15
 8001f4c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001f4e:	e005      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	61bb      	str	r3, [r7, #24]
    break;
 8001f54:	e002      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8001f56:	4b07      	ldr	r3, [pc, #28]	; (8001f74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001f58:	61bb      	str	r3, [r7, #24]
    break;
 8001f5a:	bf00      	nop
  }

  return sysclockfreq;
 8001f5c:	69bb      	ldr	r3, [r7, #24]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3724      	adds	r7, #36	; 0x24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	58024400 	.word	0x58024400
 8001f70:	03d09000 	.word	0x03d09000
 8001f74:	003d0900 	.word	0x003d0900
 8001f78:	017d7840 	.word	0x017d7840
 8001f7c:	46000000 	.word	0x46000000
 8001f80:	4c742400 	.word	0x4c742400
 8001f84:	4a742400 	.word	0x4a742400
 8001f88:	4bbebc20 	.word	0x4bbebc20

08001f8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001f92:	f7ff fe81 	bl	8001c98 <HAL_RCC_GetSysClockFreq>
 8001f96:	4602      	mov	r2, r0
 8001f98:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <HAL_RCC_GetHCLKFreq+0x50>)
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	0a1b      	lsrs	r3, r3, #8
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	490f      	ldr	r1, [pc, #60]	; (8001fe0 <HAL_RCC_GetHCLKFreq+0x54>)
 8001fa4:	5ccb      	ldrb	r3, [r1, r3]
 8001fa6:	f003 031f 	and.w	r3, r3, #31
 8001faa:	fa22 f303 	lsr.w	r3, r2, r3
 8001fae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001fb0:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <HAL_RCC_GetHCLKFreq+0x50>)
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	f003 030f 	and.w	r3, r3, #15
 8001fb8:	4a09      	ldr	r2, [pc, #36]	; (8001fe0 <HAL_RCC_GetHCLKFreq+0x54>)
 8001fba:	5cd3      	ldrb	r3, [r2, r3]
 8001fbc:	f003 031f 	and.w	r3, r3, #31
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc6:	4a07      	ldr	r2, [pc, #28]	; (8001fe4 <HAL_RCC_GetHCLKFreq+0x58>)
 8001fc8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001fca:	4a07      	ldr	r2, [pc, #28]	; (8001fe8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8001fd0:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <HAL_RCC_GetHCLKFreq+0x58>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	58024400 	.word	0x58024400
 8001fe0:	080053fc 	.word	0x080053fc
 8001fe4:	24000004 	.word	0x24000004
 8001fe8:	24000000 	.word	0x24000000

08001fec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8001ff0:	f7ff ffcc 	bl	8001f8c <HAL_RCC_GetHCLKFreq>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	4b06      	ldr	r3, [pc, #24]	; (8002010 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	091b      	lsrs	r3, r3, #4
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	4904      	ldr	r1, [pc, #16]	; (8002014 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002002:	5ccb      	ldrb	r3, [r1, r3]
 8002004:	f003 031f 	and.w	r3, r3, #31
 8002008:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800200c:	4618      	mov	r0, r3
 800200e:	bd80      	pop	{r7, pc}
 8002010:	58024400 	.word	0x58024400
 8002014:	080053fc 	.word	0x080053fc

08002018 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	223f      	movs	r2, #63	; 0x3f
 8002026:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002028:	4b1a      	ldr	r3, [pc, #104]	; (8002094 <HAL_RCC_GetClockConfig+0x7c>)
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	f003 0207 	and.w	r2, r3, #7
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002034:	4b17      	ldr	r3, [pc, #92]	; (8002094 <HAL_RCC_GetClockConfig+0x7c>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8002040:	4b14      	ldr	r3, [pc, #80]	; (8002094 <HAL_RCC_GetClockConfig+0x7c>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	f003 020f 	and.w	r2, r3, #15
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800204c:	4b11      	ldr	r3, [pc, #68]	; (8002094 <HAL_RCC_GetClockConfig+0x7c>)
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8002058:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <HAL_RCC_GetClockConfig+0x7c>)
 800205a:	69db      	ldr	r3, [r3, #28]
 800205c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002064:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <HAL_RCC_GetClockConfig+0x7c>)
 8002066:	69db      	ldr	r3, [r3, #28]
 8002068:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002070:	4b08      	ldr	r3, [pc, #32]	; (8002094 <HAL_RCC_GetClockConfig+0x7c>)
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800207c:	4b06      	ldr	r3, [pc, #24]	; (8002098 <HAL_RCC_GetClockConfig+0x80>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 020f 	and.w	r2, r3, #15
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	601a      	str	r2, [r3, #0]
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	58024400 	.word	0x58024400
 8002098:	52002000 	.word	0x52002000

0800209c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e049      	b.n	8002142 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d106      	bne.n	80020c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f841 	bl	800214a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2202      	movs	r2, #2
 80020cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3304      	adds	r3, #4
 80020d8:	4619      	mov	r1, r3
 80020da:	4610      	mov	r0, r2
 80020dc:	f000 f9f8 	bl	80024d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
	...

08002160 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b01      	cmp	r3, #1
 8002172:	d001      	beq.n	8002178 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e04f      	b.n	8002218 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2202      	movs	r2, #2
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68da      	ldr	r2, [r3, #12]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0201 	orr.w	r2, r2, #1
 800218e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a23      	ldr	r2, [pc, #140]	; (8002224 <HAL_TIM_Base_Start_IT+0xc4>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d01d      	beq.n	80021d6 <HAL_TIM_Base_Start_IT+0x76>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021a2:	d018      	beq.n	80021d6 <HAL_TIM_Base_Start_IT+0x76>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a1f      	ldr	r2, [pc, #124]	; (8002228 <HAL_TIM_Base_Start_IT+0xc8>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d013      	beq.n	80021d6 <HAL_TIM_Base_Start_IT+0x76>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a1e      	ldr	r2, [pc, #120]	; (800222c <HAL_TIM_Base_Start_IT+0xcc>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d00e      	beq.n	80021d6 <HAL_TIM_Base_Start_IT+0x76>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a1c      	ldr	r2, [pc, #112]	; (8002230 <HAL_TIM_Base_Start_IT+0xd0>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d009      	beq.n	80021d6 <HAL_TIM_Base_Start_IT+0x76>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a1b      	ldr	r2, [pc, #108]	; (8002234 <HAL_TIM_Base_Start_IT+0xd4>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d004      	beq.n	80021d6 <HAL_TIM_Base_Start_IT+0x76>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a19      	ldr	r2, [pc, #100]	; (8002238 <HAL_TIM_Base_Start_IT+0xd8>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d115      	bne.n	8002202 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	4b17      	ldr	r3, [pc, #92]	; (800223c <HAL_TIM_Base_Start_IT+0xdc>)
 80021de:	4013      	ands	r3, r2
 80021e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2b06      	cmp	r3, #6
 80021e6:	d015      	beq.n	8002214 <HAL_TIM_Base_Start_IT+0xb4>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ee:	d011      	beq.n	8002214 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0201 	orr.w	r2, r2, #1
 80021fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002200:	e008      	b.n	8002214 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f042 0201 	orr.w	r2, r2, #1
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	e000      	b.n	8002216 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002214:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	40010000 	.word	0x40010000
 8002228:	40000400 	.word	0x40000400
 800222c:	40000800 	.word	0x40000800
 8002230:	40000c00 	.word	0x40000c00
 8002234:	40010400 	.word	0x40010400
 8002238:	40001800 	.word	0x40001800
 800223c:	00010007 	.word	0x00010007

08002240 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b02      	cmp	r3, #2
 8002254:	d122      	bne.n	800229c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b02      	cmp	r3, #2
 8002262:	d11b      	bne.n	800229c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f06f 0202 	mvn.w	r2, #2
 800226c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	f003 0303 	and.w	r3, r3, #3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f905 	bl	8002492 <HAL_TIM_IC_CaptureCallback>
 8002288:	e005      	b.n	8002296 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f8f7 	bl	800247e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 f908 	bl	80024a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	f003 0304 	and.w	r3, r3, #4
 80022a6:	2b04      	cmp	r3, #4
 80022a8:	d122      	bne.n	80022f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b04      	cmp	r3, #4
 80022b6:	d11b      	bne.n	80022f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f06f 0204 	mvn.w	r2, #4
 80022c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2202      	movs	r2, #2
 80022c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 f8db 	bl	8002492 <HAL_TIM_IC_CaptureCallback>
 80022dc:	e005      	b.n	80022ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f8cd 	bl	800247e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f000 f8de 	bl	80024a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	d122      	bne.n	8002344 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f003 0308 	and.w	r3, r3, #8
 8002308:	2b08      	cmp	r3, #8
 800230a:	d11b      	bne.n	8002344 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f06f 0208 	mvn.w	r2, #8
 8002314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2204      	movs	r2, #4
 800231a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 f8b1 	bl	8002492 <HAL_TIM_IC_CaptureCallback>
 8002330:	e005      	b.n	800233e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f8a3 	bl	800247e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 f8b4 	bl	80024a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	f003 0310 	and.w	r3, r3, #16
 800234e:	2b10      	cmp	r3, #16
 8002350:	d122      	bne.n	8002398 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	f003 0310 	and.w	r3, r3, #16
 800235c:	2b10      	cmp	r3, #16
 800235e:	d11b      	bne.n	8002398 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f06f 0210 	mvn.w	r2, #16
 8002368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2208      	movs	r2, #8
 800236e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f887 	bl	8002492 <HAL_TIM_IC_CaptureCallback>
 8002384:	e005      	b.n	8002392 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f879 	bl	800247e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 f88a 	bl	80024a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d10e      	bne.n	80023c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d107      	bne.n	80023c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f06f 0201 	mvn.w	r2, #1
 80023bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7fe fa04 	bl	80007cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ce:	2b80      	cmp	r3, #128	; 0x80
 80023d0:	d10e      	bne.n	80023f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023dc:	2b80      	cmp	r3, #128	; 0x80
 80023de:	d107      	bne.n	80023f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 f914 	bl	8002618 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023fe:	d10e      	bne.n	800241e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800240a:	2b80      	cmp	r3, #128	; 0x80
 800240c:	d107      	bne.n	800241e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 f907 	bl	800262c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002428:	2b40      	cmp	r3, #64	; 0x40
 800242a:	d10e      	bne.n	800244a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002436:	2b40      	cmp	r3, #64	; 0x40
 8002438:	d107      	bne.n	800244a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 f838 	bl	80024ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	f003 0320 	and.w	r3, r3, #32
 8002454:	2b20      	cmp	r3, #32
 8002456:	d10e      	bne.n	8002476 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	f003 0320 	and.w	r3, r3, #32
 8002462:	2b20      	cmp	r3, #32
 8002464:	d107      	bne.n	8002476 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f06f 0220 	mvn.w	r2, #32
 800246e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 f8c7 	bl	8002604 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
	...

080024d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a40      	ldr	r2, [pc, #256]	; (80025e4 <TIM_Base_SetConfig+0x114>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d013      	beq.n	8002510 <TIM_Base_SetConfig+0x40>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ee:	d00f      	beq.n	8002510 <TIM_Base_SetConfig+0x40>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a3d      	ldr	r2, [pc, #244]	; (80025e8 <TIM_Base_SetConfig+0x118>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d00b      	beq.n	8002510 <TIM_Base_SetConfig+0x40>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a3c      	ldr	r2, [pc, #240]	; (80025ec <TIM_Base_SetConfig+0x11c>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d007      	beq.n	8002510 <TIM_Base_SetConfig+0x40>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a3b      	ldr	r2, [pc, #236]	; (80025f0 <TIM_Base_SetConfig+0x120>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d003      	beq.n	8002510 <TIM_Base_SetConfig+0x40>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a3a      	ldr	r2, [pc, #232]	; (80025f4 <TIM_Base_SetConfig+0x124>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d108      	bne.n	8002522 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002516:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	4313      	orrs	r3, r2
 8002520:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a2f      	ldr	r2, [pc, #188]	; (80025e4 <TIM_Base_SetConfig+0x114>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d01f      	beq.n	800256a <TIM_Base_SetConfig+0x9a>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002530:	d01b      	beq.n	800256a <TIM_Base_SetConfig+0x9a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a2c      	ldr	r2, [pc, #176]	; (80025e8 <TIM_Base_SetConfig+0x118>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d017      	beq.n	800256a <TIM_Base_SetConfig+0x9a>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a2b      	ldr	r2, [pc, #172]	; (80025ec <TIM_Base_SetConfig+0x11c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d013      	beq.n	800256a <TIM_Base_SetConfig+0x9a>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a2a      	ldr	r2, [pc, #168]	; (80025f0 <TIM_Base_SetConfig+0x120>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d00f      	beq.n	800256a <TIM_Base_SetConfig+0x9a>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a29      	ldr	r2, [pc, #164]	; (80025f4 <TIM_Base_SetConfig+0x124>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d00b      	beq.n	800256a <TIM_Base_SetConfig+0x9a>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a28      	ldr	r2, [pc, #160]	; (80025f8 <TIM_Base_SetConfig+0x128>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d007      	beq.n	800256a <TIM_Base_SetConfig+0x9a>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a27      	ldr	r2, [pc, #156]	; (80025fc <TIM_Base_SetConfig+0x12c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d003      	beq.n	800256a <TIM_Base_SetConfig+0x9a>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a26      	ldr	r2, [pc, #152]	; (8002600 <TIM_Base_SetConfig+0x130>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d108      	bne.n	800257c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002570:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	4313      	orrs	r3, r2
 800257a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	4313      	orrs	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a10      	ldr	r2, [pc, #64]	; (80025e4 <TIM_Base_SetConfig+0x114>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d00f      	beq.n	80025c8 <TIM_Base_SetConfig+0xf8>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a12      	ldr	r2, [pc, #72]	; (80025f4 <TIM_Base_SetConfig+0x124>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d00b      	beq.n	80025c8 <TIM_Base_SetConfig+0xf8>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a11      	ldr	r2, [pc, #68]	; (80025f8 <TIM_Base_SetConfig+0x128>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d007      	beq.n	80025c8 <TIM_Base_SetConfig+0xf8>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a10      	ldr	r2, [pc, #64]	; (80025fc <TIM_Base_SetConfig+0x12c>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d003      	beq.n	80025c8 <TIM_Base_SetConfig+0xf8>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a0f      	ldr	r2, [pc, #60]	; (8002600 <TIM_Base_SetConfig+0x130>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d103      	bne.n	80025d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	691a      	ldr	r2, [r3, #16]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	615a      	str	r2, [r3, #20]
}
 80025d6:	bf00      	nop
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	40010000 	.word	0x40010000
 80025e8:	40000400 	.word	0x40000400
 80025ec:	40000800 	.word	0x40000800
 80025f0:	40000c00 	.word	0x40000c00
 80025f4:	40010400 	.word	0x40010400
 80025f8:	40014000 	.word	0x40014000
 80025fc:	40014400 	.word	0x40014400
 8002600:	40014800 	.word	0x40014800

08002604 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <__NVIC_SetPriority>:
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	6039      	str	r1, [r7, #0]
 800264a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800264c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002650:	2b00      	cmp	r3, #0
 8002652:	db0a      	blt.n	800266a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	b2da      	uxtb	r2, r3
 8002658:	490c      	ldr	r1, [pc, #48]	; (800268c <__NVIC_SetPriority+0x4c>)
 800265a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800265e:	0112      	lsls	r2, r2, #4
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	440b      	add	r3, r1
 8002664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002668:	e00a      	b.n	8002680 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	b2da      	uxtb	r2, r3
 800266e:	4908      	ldr	r1, [pc, #32]	; (8002690 <__NVIC_SetPriority+0x50>)
 8002670:	88fb      	ldrh	r3, [r7, #6]
 8002672:	f003 030f 	and.w	r3, r3, #15
 8002676:	3b04      	subs	r3, #4
 8002678:	0112      	lsls	r2, r2, #4
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	440b      	add	r3, r1
 800267e:	761a      	strb	r2, [r3, #24]
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	e000e100 	.word	0xe000e100
 8002690:	e000ed00 	.word	0xe000ed00

08002694 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002698:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <SysTick_Handler+0x1c>)
 800269a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800269c:	f002 f960 	bl	8004960 <xTaskGetSchedulerState>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d001      	beq.n	80026aa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80026a6:	f000 fd97 	bl	80031d8 <xPortSysTickHandler>
  }
}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	e000e010 	.word	0xe000e010

080026b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80026b8:	2100      	movs	r1, #0
 80026ba:	f06f 0004 	mvn.w	r0, #4
 80026be:	f7ff ffbf 	bl	8002640 <__NVIC_SetPriority>
#endif
}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026ce:	f3ef 8305 	mrs	r3, IPSR
 80026d2:	603b      	str	r3, [r7, #0]
  return(result);
 80026d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80026da:	f06f 0305 	mvn.w	r3, #5
 80026de:	607b      	str	r3, [r7, #4]
 80026e0:	e00c      	b.n	80026fc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80026e2:	4b0a      	ldr	r3, [pc, #40]	; (800270c <osKernelInitialize+0x44>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d105      	bne.n	80026f6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80026ea:	4b08      	ldr	r3, [pc, #32]	; (800270c <osKernelInitialize+0x44>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80026f0:	2300      	movs	r3, #0
 80026f2:	607b      	str	r3, [r7, #4]
 80026f4:	e002      	b.n	80026fc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80026f6:	f04f 33ff 	mov.w	r3, #4294967295
 80026fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80026fc:	687b      	ldr	r3, [r7, #4]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	24000094 	.word	0x24000094

08002710 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002716:	f3ef 8305 	mrs	r3, IPSR
 800271a:	603b      	str	r3, [r7, #0]
  return(result);
 800271c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002722:	f06f 0305 	mvn.w	r3, #5
 8002726:	607b      	str	r3, [r7, #4]
 8002728:	e010      	b.n	800274c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800272a:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <osKernelStart+0x48>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d109      	bne.n	8002746 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002732:	f7ff ffbf 	bl	80026b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002736:	4b08      	ldr	r3, [pc, #32]	; (8002758 <osKernelStart+0x48>)
 8002738:	2202      	movs	r2, #2
 800273a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800273c:	f001 fcb4 	bl	80040a8 <vTaskStartScheduler>
      stat = osOK;
 8002740:	2300      	movs	r3, #0
 8002742:	607b      	str	r3, [r7, #4]
 8002744:	e002      	b.n	800274c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002746:	f04f 33ff 	mov.w	r3, #4294967295
 800274a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800274c:	687b      	ldr	r3, [r7, #4]
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	24000094 	.word	0x24000094

0800275c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800275c:	b580      	push	{r7, lr}
 800275e:	b08e      	sub	sp, #56	; 0x38
 8002760:	af04      	add	r7, sp, #16
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002768:	2300      	movs	r3, #0
 800276a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800276c:	f3ef 8305 	mrs	r3, IPSR
 8002770:	617b      	str	r3, [r7, #20]
  return(result);
 8002772:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002774:	2b00      	cmp	r3, #0
 8002776:	d17f      	bne.n	8002878 <osThreadNew+0x11c>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d07c      	beq.n	8002878 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800277e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002782:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002784:	2318      	movs	r3, #24
 8002786:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002788:	2300      	movs	r3, #0
 800278a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800278c:	f04f 33ff 	mov.w	r3, #4294967295
 8002790:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d045      	beq.n	8002824 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d002      	beq.n	80027a6 <osThreadNew+0x4a>
        name = attr->name;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d008      	beq.n	80027cc <osThreadNew+0x70>
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	2b38      	cmp	r3, #56	; 0x38
 80027be:	d805      	bhi.n	80027cc <osThreadNew+0x70>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <osThreadNew+0x74>
        return (NULL);
 80027cc:	2300      	movs	r3, #0
 80027ce:	e054      	b.n	800287a <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d003      	beq.n	80027e0 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	089b      	lsrs	r3, r3, #2
 80027de:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00e      	beq.n	8002806 <osThreadNew+0xaa>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	2bcb      	cmp	r3, #203	; 0xcb
 80027ee:	d90a      	bls.n	8002806 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d006      	beq.n	8002806 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	695b      	ldr	r3, [r3, #20]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d002      	beq.n	8002806 <osThreadNew+0xaa>
        mem = 1;
 8002800:	2301      	movs	r3, #1
 8002802:	61bb      	str	r3, [r7, #24]
 8002804:	e010      	b.n	8002828 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10c      	bne.n	8002828 <osThreadNew+0xcc>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d108      	bne.n	8002828 <osThreadNew+0xcc>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d104      	bne.n	8002828 <osThreadNew+0xcc>
          mem = 0;
 800281e:	2300      	movs	r3, #0
 8002820:	61bb      	str	r3, [r7, #24]
 8002822:	e001      	b.n	8002828 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8002824:	2300      	movs	r3, #0
 8002826:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d110      	bne.n	8002850 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002836:	9202      	str	r2, [sp, #8]
 8002838:	9301      	str	r3, [sp, #4]
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	6a3a      	ldr	r2, [r7, #32]
 8002842:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f001 fa43 	bl	8003cd0 <xTaskCreateStatic>
 800284a:	4603      	mov	r3, r0
 800284c:	613b      	str	r3, [r7, #16]
 800284e:	e013      	b.n	8002878 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d110      	bne.n	8002878 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002856:	6a3b      	ldr	r3, [r7, #32]
 8002858:	b29a      	uxth	r2, r3
 800285a:	f107 0310 	add.w	r3, r7, #16
 800285e:	9301      	str	r3, [sp, #4]
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f001 fa8e 	bl	8003d8a <xTaskCreate>
 800286e:	4603      	mov	r3, r0
 8002870:	2b01      	cmp	r3, #1
 8002872:	d001      	beq.n	8002878 <osThreadNew+0x11c>
            hTask = NULL;
 8002874:	2300      	movs	r3, #0
 8002876:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002878:	693b      	ldr	r3, [r7, #16]
}
 800287a:	4618      	mov	r0, r3
 800287c:	3728      	adds	r7, #40	; 0x28
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002882:	b580      	push	{r7, lr}
 8002884:	b084      	sub	sp, #16
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800288a:	f3ef 8305 	mrs	r3, IPSR
 800288e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002890:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <osDelay+0x1c>
    stat = osErrorISR;
 8002896:	f06f 0305 	mvn.w	r3, #5
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	e007      	b.n	80028ae <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800289e:	2300      	movs	r3, #0
 80028a0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d002      	beq.n	80028ae <osDelay+0x2c>
      vTaskDelay(ticks);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f001 fbc9 	bl	8004040 <vTaskDelay>
    }
  }

  return (stat);
 80028ae:	68fb      	ldr	r3, [r7, #12]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4a07      	ldr	r2, [pc, #28]	; (80028e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80028c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	4a06      	ldr	r2, [pc, #24]	; (80028e8 <vApplicationGetIdleTaskMemory+0x30>)
 80028ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028d6:	601a      	str	r2, [r3, #0]
}
 80028d8:	bf00      	nop
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	24000098 	.word	0x24000098
 80028e8:	24000164 	.word	0x24000164

080028ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4a07      	ldr	r2, [pc, #28]	; (8002918 <vApplicationGetTimerTaskMemory+0x2c>)
 80028fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	4a06      	ldr	r2, [pc, #24]	; (800291c <vApplicationGetTimerTaskMemory+0x30>)
 8002902:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f44f 7200 	mov.w	r2, #512	; 0x200
 800290a:	601a      	str	r2, [r3, #0]
}
 800290c:	bf00      	nop
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	24000564 	.word	0x24000564
 800291c:	24000630 	.word	0x24000630

08002920 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b08a      	sub	sp, #40	; 0x28
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002928:	2300      	movs	r3, #0
 800292a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800292c:	f001 fc2c 	bl	8004188 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002930:	4b5b      	ldr	r3, [pc, #364]	; (8002aa0 <pvPortMalloc+0x180>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002938:	f000 f920 	bl	8002b7c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800293c:	4b59      	ldr	r3, [pc, #356]	; (8002aa4 <pvPortMalloc+0x184>)
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4013      	ands	r3, r2
 8002944:	2b00      	cmp	r3, #0
 8002946:	f040 8093 	bne.w	8002a70 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d01d      	beq.n	800298c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002950:	2208      	movs	r2, #8
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4413      	add	r3, r2
 8002956:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	2b00      	cmp	r3, #0
 8002960:	d014      	beq.n	800298c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f023 0307 	bic.w	r3, r3, #7
 8002968:	3308      	adds	r3, #8
 800296a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00a      	beq.n	800298c <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800297a:	f383 8811 	msr	BASEPRI, r3
 800297e:	f3bf 8f6f 	isb	sy
 8002982:	f3bf 8f4f 	dsb	sy
 8002986:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002988:	bf00      	nop
 800298a:	e7fe      	b.n	800298a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d06e      	beq.n	8002a70 <pvPortMalloc+0x150>
 8002992:	4b45      	ldr	r3, [pc, #276]	; (8002aa8 <pvPortMalloc+0x188>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	429a      	cmp	r2, r3
 800299a:	d869      	bhi.n	8002a70 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800299c:	4b43      	ldr	r3, [pc, #268]	; (8002aac <pvPortMalloc+0x18c>)
 800299e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80029a0:	4b42      	ldr	r3, [pc, #264]	; (8002aac <pvPortMalloc+0x18c>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80029a6:	e004      	b.n	80029b2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d903      	bls.n	80029c4 <pvPortMalloc+0xa4>
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1f1      	bne.n	80029a8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80029c4:	4b36      	ldr	r3, [pc, #216]	; (8002aa0 <pvPortMalloc+0x180>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d050      	beq.n	8002a70 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80029ce:	6a3b      	ldr	r3, [r7, #32]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2208      	movs	r2, #8
 80029d4:	4413      	add	r3, r2
 80029d6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80029d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	1ad2      	subs	r2, r2, r3
 80029e8:	2308      	movs	r3, #8
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d91f      	bls.n	8002a30 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80029f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4413      	add	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00a      	beq.n	8002a18 <pvPortMalloc+0xf8>
	__asm volatile
 8002a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a06:	f383 8811 	msr	BASEPRI, r3
 8002a0a:	f3bf 8f6f 	isb	sy
 8002a0e:	f3bf 8f4f 	dsb	sy
 8002a12:	613b      	str	r3, [r7, #16]
}
 8002a14:	bf00      	nop
 8002a16:	e7fe      	b.n	8002a16 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	1ad2      	subs	r2, r2, r3
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002a2a:	69b8      	ldr	r0, [r7, #24]
 8002a2c:	f000 f908 	bl	8002c40 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002a30:	4b1d      	ldr	r3, [pc, #116]	; (8002aa8 <pvPortMalloc+0x188>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	4a1b      	ldr	r2, [pc, #108]	; (8002aa8 <pvPortMalloc+0x188>)
 8002a3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002a3e:	4b1a      	ldr	r3, [pc, #104]	; (8002aa8 <pvPortMalloc+0x188>)
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	4b1b      	ldr	r3, [pc, #108]	; (8002ab0 <pvPortMalloc+0x190>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d203      	bcs.n	8002a52 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002a4a:	4b17      	ldr	r3, [pc, #92]	; (8002aa8 <pvPortMalloc+0x188>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a18      	ldr	r2, [pc, #96]	; (8002ab0 <pvPortMalloc+0x190>)
 8002a50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	4b13      	ldr	r3, [pc, #76]	; (8002aa4 <pvPortMalloc+0x184>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8002a66:	4b13      	ldr	r3, [pc, #76]	; (8002ab4 <pvPortMalloc+0x194>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	4a11      	ldr	r2, [pc, #68]	; (8002ab4 <pvPortMalloc+0x194>)
 8002a6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002a70:	f001 fb98 	bl	80041a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	f003 0307 	and.w	r3, r3, #7
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00a      	beq.n	8002a94 <pvPortMalloc+0x174>
	__asm volatile
 8002a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a82:	f383 8811 	msr	BASEPRI, r3
 8002a86:	f3bf 8f6f 	isb	sy
 8002a8a:	f3bf 8f4f 	dsb	sy
 8002a8e:	60fb      	str	r3, [r7, #12]
}
 8002a90:	bf00      	nop
 8002a92:	e7fe      	b.n	8002a92 <pvPortMalloc+0x172>
	return pvReturn;
 8002a94:	69fb      	ldr	r3, [r7, #28]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3728      	adds	r7, #40	; 0x28
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	24009ad8 	.word	0x24009ad8
 8002aa4:	24009aec 	.word	0x24009aec
 8002aa8:	24009adc 	.word	0x24009adc
 8002aac:	24009ad0 	.word	0x24009ad0
 8002ab0:	24009ae0 	.word	0x24009ae0
 8002ab4:	24009ae4 	.word	0x24009ae4

08002ab8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d04d      	beq.n	8002b66 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002aca:	2308      	movs	r3, #8
 8002acc:	425b      	negs	r3, r3
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	4b24      	ldr	r3, [pc, #144]	; (8002b70 <vPortFree+0xb8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10a      	bne.n	8002afc <vPortFree+0x44>
	__asm volatile
 8002ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aea:	f383 8811 	msr	BASEPRI, r3
 8002aee:	f3bf 8f6f 	isb	sy
 8002af2:	f3bf 8f4f 	dsb	sy
 8002af6:	60fb      	str	r3, [r7, #12]
}
 8002af8:	bf00      	nop
 8002afa:	e7fe      	b.n	8002afa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00a      	beq.n	8002b1a <vPortFree+0x62>
	__asm volatile
 8002b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b08:	f383 8811 	msr	BASEPRI, r3
 8002b0c:	f3bf 8f6f 	isb	sy
 8002b10:	f3bf 8f4f 	dsb	sy
 8002b14:	60bb      	str	r3, [r7, #8]
}
 8002b16:	bf00      	nop
 8002b18:	e7fe      	b.n	8002b18 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	685a      	ldr	r2, [r3, #4]
 8002b1e:	4b14      	ldr	r3, [pc, #80]	; (8002b70 <vPortFree+0xb8>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4013      	ands	r3, r2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d01e      	beq.n	8002b66 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d11a      	bne.n	8002b66 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	4b0e      	ldr	r3, [pc, #56]	; (8002b70 <vPortFree+0xb8>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	401a      	ands	r2, r3
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002b40:	f001 fb22 	bl	8004188 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	4b0a      	ldr	r3, [pc, #40]	; (8002b74 <vPortFree+0xbc>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	4a09      	ldr	r2, [pc, #36]	; (8002b74 <vPortFree+0xbc>)
 8002b50:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002b52:	6938      	ldr	r0, [r7, #16]
 8002b54:	f000 f874 	bl	8002c40 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002b58:	4b07      	ldr	r3, [pc, #28]	; (8002b78 <vPortFree+0xc0>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	4a06      	ldr	r2, [pc, #24]	; (8002b78 <vPortFree+0xc0>)
 8002b60:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8002b62:	f001 fb1f 	bl	80041a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002b66:	bf00      	nop
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	24009aec 	.word	0x24009aec
 8002b74:	24009adc 	.word	0x24009adc
 8002b78:	24009ae8 	.word	0x24009ae8

08002b7c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002b82:	f648 43a0 	movw	r3, #36000	; 0x8ca0
 8002b86:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002b88:	4b27      	ldr	r3, [pc, #156]	; (8002c28 <prvHeapInit+0xac>)
 8002b8a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00c      	beq.n	8002bb0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	3307      	adds	r3, #7
 8002b9a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f023 0307 	bic.w	r3, r3, #7
 8002ba2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	4a1f      	ldr	r2, [pc, #124]	; (8002c28 <prvHeapInit+0xac>)
 8002bac:	4413      	add	r3, r2
 8002bae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002bb4:	4a1d      	ldr	r2, [pc, #116]	; (8002c2c <prvHeapInit+0xb0>)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002bba:	4b1c      	ldr	r3, [pc, #112]	; (8002c2c <prvHeapInit+0xb0>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002bc8:	2208      	movs	r2, #8
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f023 0307 	bic.w	r3, r3, #7
 8002bd6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	4a15      	ldr	r2, [pc, #84]	; (8002c30 <prvHeapInit+0xb4>)
 8002bdc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002bde:	4b14      	ldr	r3, [pc, #80]	; (8002c30 <prvHeapInit+0xb4>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2200      	movs	r2, #0
 8002be4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002be6:	4b12      	ldr	r3, [pc, #72]	; (8002c30 <prvHeapInit+0xb4>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	1ad2      	subs	r2, r2, r3
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002bfc:	4b0c      	ldr	r3, [pc, #48]	; (8002c30 <prvHeapInit+0xb4>)
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	4a0a      	ldr	r2, [pc, #40]	; (8002c34 <prvHeapInit+0xb8>)
 8002c0a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	4a09      	ldr	r2, [pc, #36]	; (8002c38 <prvHeapInit+0xbc>)
 8002c12:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002c14:	4b09      	ldr	r3, [pc, #36]	; (8002c3c <prvHeapInit+0xc0>)
 8002c16:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002c1a:	601a      	str	r2, [r3, #0]
}
 8002c1c:	bf00      	nop
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	24000e30 	.word	0x24000e30
 8002c2c:	24009ad0 	.word	0x24009ad0
 8002c30:	24009ad8 	.word	0x24009ad8
 8002c34:	24009ae0 	.word	0x24009ae0
 8002c38:	24009adc 	.word	0x24009adc
 8002c3c:	24009aec 	.word	0x24009aec

08002c40 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002c48:	4b28      	ldr	r3, [pc, #160]	; (8002cec <prvInsertBlockIntoFreeList+0xac>)
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	e002      	b.n	8002c54 <prvInsertBlockIntoFreeList+0x14>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d8f7      	bhi.n	8002c4e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	4413      	add	r3, r2
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d108      	bne.n	8002c82 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	441a      	add	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	441a      	add	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d118      	bne.n	8002cc8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	4b15      	ldr	r3, [pc, #84]	; (8002cf0 <prvInsertBlockIntoFreeList+0xb0>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d00d      	beq.n	8002cbe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	441a      	add	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	e008      	b.n	8002cd0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002cbe:	4b0c      	ldr	r3, [pc, #48]	; (8002cf0 <prvInsertBlockIntoFreeList+0xb0>)
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	e003      	b.n	8002cd0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d002      	beq.n	8002cde <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002cde:	bf00      	nop
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	24009ad0 	.word	0x24009ad0
 8002cf0:	24009ad8 	.word	0x24009ad8

08002cf4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f103 0208 	add.w	r2, r3, #8
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f04f 32ff 	mov.w	r2, #4294967295
 8002d0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f103 0208 	add.w	r2, r3, #8
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f103 0208 	add.w	r2, r3, #8
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b085      	sub	sp, #20
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
 8002d56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	1c5a      	adds	r2, r3, #1
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	601a      	str	r2, [r3, #0]
}
 8002d8a:	bf00      	nop
 8002d8c:	3714      	adds	r7, #20
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d96:	b480      	push	{r7}
 8002d98:	b085      	sub	sp, #20
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
 8002d9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dac:	d103      	bne.n	8002db6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	e00c      	b.n	8002dd0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3308      	adds	r3, #8
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	e002      	b.n	8002dc4 <vListInsert+0x2e>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d2f6      	bcs.n	8002dbe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	1c5a      	adds	r2, r3, #1
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	601a      	str	r2, [r3, #0]
}
 8002dfc:	bf00      	nop
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6892      	ldr	r2, [r2, #8]
 8002e1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6852      	ldr	r2, [r2, #4]
 8002e28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d103      	bne.n	8002e3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	1e5a      	subs	r2, r3, #1
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	3b04      	subs	r3, #4
 8002e6c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	3b04      	subs	r3, #4
 8002e7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	f023 0201 	bic.w	r2, r3, #1
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	3b04      	subs	r3, #4
 8002e8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002e8c:	4a0c      	ldr	r2, [pc, #48]	; (8002ec0 <pxPortInitialiseStack+0x64>)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	3b14      	subs	r3, #20
 8002e96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	3b04      	subs	r3, #4
 8002ea2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f06f 0202 	mvn.w	r2, #2
 8002eaa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	3b20      	subs	r3, #32
 8002eb0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	08002ec5 	.word	0x08002ec5

08002ec4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002ece:	4b12      	ldr	r3, [pc, #72]	; (8002f18 <prvTaskExitError+0x54>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed6:	d00a      	beq.n	8002eee <prvTaskExitError+0x2a>
	__asm volatile
 8002ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002edc:	f383 8811 	msr	BASEPRI, r3
 8002ee0:	f3bf 8f6f 	isb	sy
 8002ee4:	f3bf 8f4f 	dsb	sy
 8002ee8:	60fb      	str	r3, [r7, #12]
}
 8002eea:	bf00      	nop
 8002eec:	e7fe      	b.n	8002eec <prvTaskExitError+0x28>
	__asm volatile
 8002eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef2:	f383 8811 	msr	BASEPRI, r3
 8002ef6:	f3bf 8f6f 	isb	sy
 8002efa:	f3bf 8f4f 	dsb	sy
 8002efe:	60bb      	str	r3, [r7, #8]
}
 8002f00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002f02:	bf00      	nop
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0fc      	beq.n	8002f04 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002f0a:	bf00      	nop
 8002f0c:	bf00      	nop
 8002f0e:	3714      	adds	r7, #20
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	24000010 	.word	0x24000010
 8002f1c:	00000000 	.word	0x00000000

08002f20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002f20:	4b07      	ldr	r3, [pc, #28]	; (8002f40 <pxCurrentTCBConst2>)
 8002f22:	6819      	ldr	r1, [r3, #0]
 8002f24:	6808      	ldr	r0, [r1, #0]
 8002f26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f2a:	f380 8809 	msr	PSP, r0
 8002f2e:	f3bf 8f6f 	isb	sy
 8002f32:	f04f 0000 	mov.w	r0, #0
 8002f36:	f380 8811 	msr	BASEPRI, r0
 8002f3a:	4770      	bx	lr
 8002f3c:	f3af 8000 	nop.w

08002f40 <pxCurrentTCBConst2>:
 8002f40:	24009af8 	.word	0x24009af8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002f44:	bf00      	nop
 8002f46:	bf00      	nop

08002f48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002f48:	4808      	ldr	r0, [pc, #32]	; (8002f6c <prvPortStartFirstTask+0x24>)
 8002f4a:	6800      	ldr	r0, [r0, #0]
 8002f4c:	6800      	ldr	r0, [r0, #0]
 8002f4e:	f380 8808 	msr	MSP, r0
 8002f52:	f04f 0000 	mov.w	r0, #0
 8002f56:	f380 8814 	msr	CONTROL, r0
 8002f5a:	b662      	cpsie	i
 8002f5c:	b661      	cpsie	f
 8002f5e:	f3bf 8f4f 	dsb	sy
 8002f62:	f3bf 8f6f 	isb	sy
 8002f66:	df00      	svc	0
 8002f68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002f6a:	bf00      	nop
 8002f6c:	e000ed08 	.word	0xe000ed08

08002f70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002f76:	4b46      	ldr	r3, [pc, #280]	; (8003090 <xPortStartScheduler+0x120>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a46      	ldr	r2, [pc, #280]	; (8003094 <xPortStartScheduler+0x124>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d10a      	bne.n	8002f96 <xPortStartScheduler+0x26>
	__asm volatile
 8002f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f84:	f383 8811 	msr	BASEPRI, r3
 8002f88:	f3bf 8f6f 	isb	sy
 8002f8c:	f3bf 8f4f 	dsb	sy
 8002f90:	613b      	str	r3, [r7, #16]
}
 8002f92:	bf00      	nop
 8002f94:	e7fe      	b.n	8002f94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002f96:	4b3e      	ldr	r3, [pc, #248]	; (8003090 <xPortStartScheduler+0x120>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a3f      	ldr	r2, [pc, #252]	; (8003098 <xPortStartScheduler+0x128>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d10a      	bne.n	8002fb6 <xPortStartScheduler+0x46>
	__asm volatile
 8002fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa4:	f383 8811 	msr	BASEPRI, r3
 8002fa8:	f3bf 8f6f 	isb	sy
 8002fac:	f3bf 8f4f 	dsb	sy
 8002fb0:	60fb      	str	r3, [r7, #12]
}
 8002fb2:	bf00      	nop
 8002fb4:	e7fe      	b.n	8002fb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002fb6:	4b39      	ldr	r3, [pc, #228]	; (800309c <xPortStartScheduler+0x12c>)
 8002fb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	22ff      	movs	r2, #255	; 0xff
 8002fc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002fd0:	78fb      	ldrb	r3, [r7, #3]
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	4b31      	ldr	r3, [pc, #196]	; (80030a0 <xPortStartScheduler+0x130>)
 8002fdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002fde:	4b31      	ldr	r3, [pc, #196]	; (80030a4 <xPortStartScheduler+0x134>)
 8002fe0:	2207      	movs	r2, #7
 8002fe2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002fe4:	e009      	b.n	8002ffa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8002fe6:	4b2f      	ldr	r3, [pc, #188]	; (80030a4 <xPortStartScheduler+0x134>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	4a2d      	ldr	r2, [pc, #180]	; (80030a4 <xPortStartScheduler+0x134>)
 8002fee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002ff0:	78fb      	ldrb	r3, [r7, #3]
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ffa:	78fb      	ldrb	r3, [r7, #3]
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003002:	2b80      	cmp	r3, #128	; 0x80
 8003004:	d0ef      	beq.n	8002fe6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003006:	4b27      	ldr	r3, [pc, #156]	; (80030a4 <xPortStartScheduler+0x134>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f1c3 0307 	rsb	r3, r3, #7
 800300e:	2b04      	cmp	r3, #4
 8003010:	d00a      	beq.n	8003028 <xPortStartScheduler+0xb8>
	__asm volatile
 8003012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003016:	f383 8811 	msr	BASEPRI, r3
 800301a:	f3bf 8f6f 	isb	sy
 800301e:	f3bf 8f4f 	dsb	sy
 8003022:	60bb      	str	r3, [r7, #8]
}
 8003024:	bf00      	nop
 8003026:	e7fe      	b.n	8003026 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003028:	4b1e      	ldr	r3, [pc, #120]	; (80030a4 <xPortStartScheduler+0x134>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	021b      	lsls	r3, r3, #8
 800302e:	4a1d      	ldr	r2, [pc, #116]	; (80030a4 <xPortStartScheduler+0x134>)
 8003030:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003032:	4b1c      	ldr	r3, [pc, #112]	; (80030a4 <xPortStartScheduler+0x134>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800303a:	4a1a      	ldr	r2, [pc, #104]	; (80030a4 <xPortStartScheduler+0x134>)
 800303c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	b2da      	uxtb	r2, r3
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003046:	4b18      	ldr	r3, [pc, #96]	; (80030a8 <xPortStartScheduler+0x138>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a17      	ldr	r2, [pc, #92]	; (80030a8 <xPortStartScheduler+0x138>)
 800304c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003050:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003052:	4b15      	ldr	r3, [pc, #84]	; (80030a8 <xPortStartScheduler+0x138>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a14      	ldr	r2, [pc, #80]	; (80030a8 <xPortStartScheduler+0x138>)
 8003058:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800305c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800305e:	f000 f8dd 	bl	800321c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003062:	4b12      	ldr	r3, [pc, #72]	; (80030ac <xPortStartScheduler+0x13c>)
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003068:	f000 f8fc 	bl	8003264 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800306c:	4b10      	ldr	r3, [pc, #64]	; (80030b0 <xPortStartScheduler+0x140>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a0f      	ldr	r2, [pc, #60]	; (80030b0 <xPortStartScheduler+0x140>)
 8003072:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003076:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003078:	f7ff ff66 	bl	8002f48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800307c:	f001 f9fa 	bl	8004474 <vTaskSwitchContext>
	prvTaskExitError();
 8003080:	f7ff ff20 	bl	8002ec4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	e000ed00 	.word	0xe000ed00
 8003094:	410fc271 	.word	0x410fc271
 8003098:	410fc270 	.word	0x410fc270
 800309c:	e000e400 	.word	0xe000e400
 80030a0:	24009af0 	.word	0x24009af0
 80030a4:	24009af4 	.word	0x24009af4
 80030a8:	e000ed20 	.word	0xe000ed20
 80030ac:	24000010 	.word	0x24000010
 80030b0:	e000ef34 	.word	0xe000ef34

080030b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
	__asm volatile
 80030ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030be:	f383 8811 	msr	BASEPRI, r3
 80030c2:	f3bf 8f6f 	isb	sy
 80030c6:	f3bf 8f4f 	dsb	sy
 80030ca:	607b      	str	r3, [r7, #4]
}
 80030cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80030ce:	4b0f      	ldr	r3, [pc, #60]	; (800310c <vPortEnterCritical+0x58>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	3301      	adds	r3, #1
 80030d4:	4a0d      	ldr	r2, [pc, #52]	; (800310c <vPortEnterCritical+0x58>)
 80030d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80030d8:	4b0c      	ldr	r3, [pc, #48]	; (800310c <vPortEnterCritical+0x58>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d10f      	bne.n	8003100 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80030e0:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <vPortEnterCritical+0x5c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00a      	beq.n	8003100 <vPortEnterCritical+0x4c>
	__asm volatile
 80030ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ee:	f383 8811 	msr	BASEPRI, r3
 80030f2:	f3bf 8f6f 	isb	sy
 80030f6:	f3bf 8f4f 	dsb	sy
 80030fa:	603b      	str	r3, [r7, #0]
}
 80030fc:	bf00      	nop
 80030fe:	e7fe      	b.n	80030fe <vPortEnterCritical+0x4a>
	}
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	24000010 	.word	0x24000010
 8003110:	e000ed04 	.word	0xe000ed04

08003114 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800311a:	4b12      	ldr	r3, [pc, #72]	; (8003164 <vPortExitCritical+0x50>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10a      	bne.n	8003138 <vPortExitCritical+0x24>
	__asm volatile
 8003122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003126:	f383 8811 	msr	BASEPRI, r3
 800312a:	f3bf 8f6f 	isb	sy
 800312e:	f3bf 8f4f 	dsb	sy
 8003132:	607b      	str	r3, [r7, #4]
}
 8003134:	bf00      	nop
 8003136:	e7fe      	b.n	8003136 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003138:	4b0a      	ldr	r3, [pc, #40]	; (8003164 <vPortExitCritical+0x50>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	3b01      	subs	r3, #1
 800313e:	4a09      	ldr	r2, [pc, #36]	; (8003164 <vPortExitCritical+0x50>)
 8003140:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003142:	4b08      	ldr	r3, [pc, #32]	; (8003164 <vPortExitCritical+0x50>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d105      	bne.n	8003156 <vPortExitCritical+0x42>
 800314a:	2300      	movs	r3, #0
 800314c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003154:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	24000010 	.word	0x24000010
	...

08003170 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003170:	f3ef 8009 	mrs	r0, PSP
 8003174:	f3bf 8f6f 	isb	sy
 8003178:	4b15      	ldr	r3, [pc, #84]	; (80031d0 <pxCurrentTCBConst>)
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	f01e 0f10 	tst.w	lr, #16
 8003180:	bf08      	it	eq
 8003182:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003186:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800318a:	6010      	str	r0, [r2, #0]
 800318c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003190:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003194:	f380 8811 	msr	BASEPRI, r0
 8003198:	f3bf 8f4f 	dsb	sy
 800319c:	f3bf 8f6f 	isb	sy
 80031a0:	f001 f968 	bl	8004474 <vTaskSwitchContext>
 80031a4:	f04f 0000 	mov.w	r0, #0
 80031a8:	f380 8811 	msr	BASEPRI, r0
 80031ac:	bc09      	pop	{r0, r3}
 80031ae:	6819      	ldr	r1, [r3, #0]
 80031b0:	6808      	ldr	r0, [r1, #0]
 80031b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031b6:	f01e 0f10 	tst.w	lr, #16
 80031ba:	bf08      	it	eq
 80031bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80031c0:	f380 8809 	msr	PSP, r0
 80031c4:	f3bf 8f6f 	isb	sy
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	f3af 8000 	nop.w

080031d0 <pxCurrentTCBConst>:
 80031d0:	24009af8 	.word	0x24009af8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80031d4:	bf00      	nop
 80031d6:	bf00      	nop

080031d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
	__asm volatile
 80031de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e2:	f383 8811 	msr	BASEPRI, r3
 80031e6:	f3bf 8f6f 	isb	sy
 80031ea:	f3bf 8f4f 	dsb	sy
 80031ee:	607b      	str	r3, [r7, #4]
}
 80031f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80031f2:	f001 f885 	bl	8004300 <xTaskIncrementTick>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80031fc:	4b06      	ldr	r3, [pc, #24]	; (8003218 <xPortSysTickHandler+0x40>)
 80031fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	2300      	movs	r3, #0
 8003206:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	f383 8811 	msr	BASEPRI, r3
}
 800320e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003210:	bf00      	nop
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	e000ed04 	.word	0xe000ed04

0800321c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003220:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <vPortSetupTimerInterrupt+0x34>)
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003226:	4b0b      	ldr	r3, [pc, #44]	; (8003254 <vPortSetupTimerInterrupt+0x38>)
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800322c:	4b0a      	ldr	r3, [pc, #40]	; (8003258 <vPortSetupTimerInterrupt+0x3c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a0a      	ldr	r2, [pc, #40]	; (800325c <vPortSetupTimerInterrupt+0x40>)
 8003232:	fba2 2303 	umull	r2, r3, r2, r3
 8003236:	099b      	lsrs	r3, r3, #6
 8003238:	4a09      	ldr	r2, [pc, #36]	; (8003260 <vPortSetupTimerInterrupt+0x44>)
 800323a:	3b01      	subs	r3, #1
 800323c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800323e:	4b04      	ldr	r3, [pc, #16]	; (8003250 <vPortSetupTimerInterrupt+0x34>)
 8003240:	2207      	movs	r2, #7
 8003242:	601a      	str	r2, [r3, #0]
}
 8003244:	bf00      	nop
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	e000e010 	.word	0xe000e010
 8003254:	e000e018 	.word	0xe000e018
 8003258:	24000000 	.word	0x24000000
 800325c:	10624dd3 	.word	0x10624dd3
 8003260:	e000e014 	.word	0xe000e014

08003264 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003264:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003274 <vPortEnableVFP+0x10>
 8003268:	6801      	ldr	r1, [r0, #0]
 800326a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800326e:	6001      	str	r1, [r0, #0]
 8003270:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003272:	bf00      	nop
 8003274:	e000ed88 	.word	0xe000ed88

08003278 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800327e:	f3ef 8305 	mrs	r3, IPSR
 8003282:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2b0f      	cmp	r3, #15
 8003288:	d914      	bls.n	80032b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800328a:	4a17      	ldr	r2, [pc, #92]	; (80032e8 <vPortValidateInterruptPriority+0x70>)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4413      	add	r3, r2
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003294:	4b15      	ldr	r3, [pc, #84]	; (80032ec <vPortValidateInterruptPriority+0x74>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	7afa      	ldrb	r2, [r7, #11]
 800329a:	429a      	cmp	r2, r3
 800329c:	d20a      	bcs.n	80032b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800329e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a2:	f383 8811 	msr	BASEPRI, r3
 80032a6:	f3bf 8f6f 	isb	sy
 80032aa:	f3bf 8f4f 	dsb	sy
 80032ae:	607b      	str	r3, [r7, #4]
}
 80032b0:	bf00      	nop
 80032b2:	e7fe      	b.n	80032b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80032b4:	4b0e      	ldr	r3, [pc, #56]	; (80032f0 <vPortValidateInterruptPriority+0x78>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80032bc:	4b0d      	ldr	r3, [pc, #52]	; (80032f4 <vPortValidateInterruptPriority+0x7c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d90a      	bls.n	80032da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80032c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c8:	f383 8811 	msr	BASEPRI, r3
 80032cc:	f3bf 8f6f 	isb	sy
 80032d0:	f3bf 8f4f 	dsb	sy
 80032d4:	603b      	str	r3, [r7, #0]
}
 80032d6:	bf00      	nop
 80032d8:	e7fe      	b.n	80032d8 <vPortValidateInterruptPriority+0x60>
	}
 80032da:	bf00      	nop
 80032dc:	3714      	adds	r7, #20
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	e000e3f0 	.word	0xe000e3f0
 80032ec:	24009af0 	.word	0x24009af0
 80032f0:	e000ed0c 	.word	0xe000ed0c
 80032f4:	24009af4 	.word	0x24009af4

080032f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10a      	bne.n	8003322 <xQueueGenericReset+0x2a>
	__asm volatile
 800330c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003310:	f383 8811 	msr	BASEPRI, r3
 8003314:	f3bf 8f6f 	isb	sy
 8003318:	f3bf 8f4f 	dsb	sy
 800331c:	60bb      	str	r3, [r7, #8]
}
 800331e:	bf00      	nop
 8003320:	e7fe      	b.n	8003320 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003322:	f7ff fec7 	bl	80030b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332e:	68f9      	ldr	r1, [r7, #12]
 8003330:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003332:	fb01 f303 	mul.w	r3, r1, r3
 8003336:	441a      	add	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003352:	3b01      	subs	r3, #1
 8003354:	68f9      	ldr	r1, [r7, #12]
 8003356:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003358:	fb01 f303 	mul.w	r3, r1, r3
 800335c:	441a      	add	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	22ff      	movs	r2, #255	; 0xff
 8003366:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	22ff      	movs	r2, #255	; 0xff
 800336e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d114      	bne.n	80033a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d01a      	beq.n	80033b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	3310      	adds	r3, #16
 8003384:	4618      	mov	r0, r3
 8003386:	f001 f929 	bl	80045dc <xTaskRemoveFromEventList>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d012      	beq.n	80033b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003390:	4b0c      	ldr	r3, [pc, #48]	; (80033c4 <xQueueGenericReset+0xcc>)
 8003392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	f3bf 8f4f 	dsb	sy
 800339c:	f3bf 8f6f 	isb	sy
 80033a0:	e009      	b.n	80033b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	3310      	adds	r3, #16
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff fca4 	bl	8002cf4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	3324      	adds	r3, #36	; 0x24
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7ff fc9f 	bl	8002cf4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80033b6:	f7ff fead 	bl	8003114 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80033ba:	2301      	movs	r3, #1
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	e000ed04 	.word	0xe000ed04

080033c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b08e      	sub	sp, #56	; 0x38
 80033cc:	af02      	add	r7, sp, #8
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
 80033d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10a      	bne.n	80033f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80033dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e0:	f383 8811 	msr	BASEPRI, r3
 80033e4:	f3bf 8f6f 	isb	sy
 80033e8:	f3bf 8f4f 	dsb	sy
 80033ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80033ee:	bf00      	nop
 80033f0:	e7fe      	b.n	80033f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10a      	bne.n	800340e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80033f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fc:	f383 8811 	msr	BASEPRI, r3
 8003400:	f3bf 8f6f 	isb	sy
 8003404:	f3bf 8f4f 	dsb	sy
 8003408:	627b      	str	r3, [r7, #36]	; 0x24
}
 800340a:	bf00      	nop
 800340c:	e7fe      	b.n	800340c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d002      	beq.n	800341a <xQueueGenericCreateStatic+0x52>
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <xQueueGenericCreateStatic+0x56>
 800341a:	2301      	movs	r3, #1
 800341c:	e000      	b.n	8003420 <xQueueGenericCreateStatic+0x58>
 800341e:	2300      	movs	r3, #0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10a      	bne.n	800343a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003428:	f383 8811 	msr	BASEPRI, r3
 800342c:	f3bf 8f6f 	isb	sy
 8003430:	f3bf 8f4f 	dsb	sy
 8003434:	623b      	str	r3, [r7, #32]
}
 8003436:	bf00      	nop
 8003438:	e7fe      	b.n	8003438 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d102      	bne.n	8003446 <xQueueGenericCreateStatic+0x7e>
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <xQueueGenericCreateStatic+0x82>
 8003446:	2301      	movs	r3, #1
 8003448:	e000      	b.n	800344c <xQueueGenericCreateStatic+0x84>
 800344a:	2300      	movs	r3, #0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10a      	bne.n	8003466 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003454:	f383 8811 	msr	BASEPRI, r3
 8003458:	f3bf 8f6f 	isb	sy
 800345c:	f3bf 8f4f 	dsb	sy
 8003460:	61fb      	str	r3, [r7, #28]
}
 8003462:	bf00      	nop
 8003464:	e7fe      	b.n	8003464 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003466:	2350      	movs	r3, #80	; 0x50
 8003468:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	2b50      	cmp	r3, #80	; 0x50
 800346e:	d00a      	beq.n	8003486 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003474:	f383 8811 	msr	BASEPRI, r3
 8003478:	f3bf 8f6f 	isb	sy
 800347c:	f3bf 8f4f 	dsb	sy
 8003480:	61bb      	str	r3, [r7, #24]
}
 8003482:	bf00      	nop
 8003484:	e7fe      	b.n	8003484 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003486:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800348c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00d      	beq.n	80034ae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800349a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800349e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	4613      	mov	r3, r2
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	68b9      	ldr	r1, [r7, #8]
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f000 f805 	bl	80034b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80034ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3730      	adds	r7, #48	; 0x30
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
 80034c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d103      	bne.n	80034d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	601a      	str	r2, [r3, #0]
 80034d2:	e002      	b.n	80034da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80034e6:	2101      	movs	r1, #1
 80034e8:	69b8      	ldr	r0, [r7, #24]
 80034ea:	f7ff ff05 	bl	80032f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	78fa      	ldrb	r2, [r7, #3]
 80034f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80034f6:	bf00      	nop
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
	...

08003500 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b08e      	sub	sp, #56	; 0x38
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
 800350c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800350e:	2300      	movs	r3, #0
 8003510:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10a      	bne.n	8003532 <xQueueGenericSend+0x32>
	__asm volatile
 800351c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003520:	f383 8811 	msr	BASEPRI, r3
 8003524:	f3bf 8f6f 	isb	sy
 8003528:	f3bf 8f4f 	dsb	sy
 800352c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800352e:	bf00      	nop
 8003530:	e7fe      	b.n	8003530 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d103      	bne.n	8003540 <xQueueGenericSend+0x40>
 8003538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	2b00      	cmp	r3, #0
 800353e:	d101      	bne.n	8003544 <xQueueGenericSend+0x44>
 8003540:	2301      	movs	r3, #1
 8003542:	e000      	b.n	8003546 <xQueueGenericSend+0x46>
 8003544:	2300      	movs	r3, #0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10a      	bne.n	8003560 <xQueueGenericSend+0x60>
	__asm volatile
 800354a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800354e:	f383 8811 	msr	BASEPRI, r3
 8003552:	f3bf 8f6f 	isb	sy
 8003556:	f3bf 8f4f 	dsb	sy
 800355a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800355c:	bf00      	nop
 800355e:	e7fe      	b.n	800355e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	2b02      	cmp	r3, #2
 8003564:	d103      	bne.n	800356e <xQueueGenericSend+0x6e>
 8003566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356a:	2b01      	cmp	r3, #1
 800356c:	d101      	bne.n	8003572 <xQueueGenericSend+0x72>
 800356e:	2301      	movs	r3, #1
 8003570:	e000      	b.n	8003574 <xQueueGenericSend+0x74>
 8003572:	2300      	movs	r3, #0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10a      	bne.n	800358e <xQueueGenericSend+0x8e>
	__asm volatile
 8003578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357c:	f383 8811 	msr	BASEPRI, r3
 8003580:	f3bf 8f6f 	isb	sy
 8003584:	f3bf 8f4f 	dsb	sy
 8003588:	623b      	str	r3, [r7, #32]
}
 800358a:	bf00      	nop
 800358c:	e7fe      	b.n	800358c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800358e:	f001 f9e7 	bl	8004960 <xTaskGetSchedulerState>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d102      	bne.n	800359e <xQueueGenericSend+0x9e>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <xQueueGenericSend+0xa2>
 800359e:	2301      	movs	r3, #1
 80035a0:	e000      	b.n	80035a4 <xQueueGenericSend+0xa4>
 80035a2:	2300      	movs	r3, #0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10a      	bne.n	80035be <xQueueGenericSend+0xbe>
	__asm volatile
 80035a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ac:	f383 8811 	msr	BASEPRI, r3
 80035b0:	f3bf 8f6f 	isb	sy
 80035b4:	f3bf 8f4f 	dsb	sy
 80035b8:	61fb      	str	r3, [r7, #28]
}
 80035ba:	bf00      	nop
 80035bc:	e7fe      	b.n	80035bc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80035be:	f7ff fd79 	bl	80030b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80035c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d302      	bcc.n	80035d4 <xQueueGenericSend+0xd4>
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d129      	bne.n	8003628 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	68b9      	ldr	r1, [r7, #8]
 80035d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035da:	f000 fa0b 	bl	80039f4 <prvCopyDataToQueue>
 80035de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d010      	beq.n	800360a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ea:	3324      	adds	r3, #36	; 0x24
 80035ec:	4618      	mov	r0, r3
 80035ee:	f000 fff5 	bl	80045dc <xTaskRemoveFromEventList>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d013      	beq.n	8003620 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80035f8:	4b3f      	ldr	r3, [pc, #252]	; (80036f8 <xQueueGenericSend+0x1f8>)
 80035fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	f3bf 8f4f 	dsb	sy
 8003604:	f3bf 8f6f 	isb	sy
 8003608:	e00a      	b.n	8003620 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800360a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360c:	2b00      	cmp	r3, #0
 800360e:	d007      	beq.n	8003620 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003610:	4b39      	ldr	r3, [pc, #228]	; (80036f8 <xQueueGenericSend+0x1f8>)
 8003612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	f3bf 8f4f 	dsb	sy
 800361c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003620:	f7ff fd78 	bl	8003114 <vPortExitCritical>
				return pdPASS;
 8003624:	2301      	movs	r3, #1
 8003626:	e063      	b.n	80036f0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d103      	bne.n	8003636 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800362e:	f7ff fd71 	bl	8003114 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003632:	2300      	movs	r3, #0
 8003634:	e05c      	b.n	80036f0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003638:	2b00      	cmp	r3, #0
 800363a:	d106      	bne.n	800364a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800363c:	f107 0314 	add.w	r3, r7, #20
 8003640:	4618      	mov	r0, r3
 8003642:	f001 f82f 	bl	80046a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003646:	2301      	movs	r3, #1
 8003648:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800364a:	f7ff fd63 	bl	8003114 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800364e:	f000 fd9b 	bl	8004188 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003652:	f7ff fd2f 	bl	80030b4 <vPortEnterCritical>
 8003656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003658:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800365c:	b25b      	sxtb	r3, r3
 800365e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003662:	d103      	bne.n	800366c <xQueueGenericSend+0x16c>
 8003664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800366c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003672:	b25b      	sxtb	r3, r3
 8003674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003678:	d103      	bne.n	8003682 <xQueueGenericSend+0x182>
 800367a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003682:	f7ff fd47 	bl	8003114 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003686:	1d3a      	adds	r2, r7, #4
 8003688:	f107 0314 	add.w	r3, r7, #20
 800368c:	4611      	mov	r1, r2
 800368e:	4618      	mov	r0, r3
 8003690:	f001 f81e 	bl	80046d0 <xTaskCheckForTimeOut>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d124      	bne.n	80036e4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800369a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800369c:	f000 faa2 	bl	8003be4 <prvIsQueueFull>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d018      	beq.n	80036d8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80036a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a8:	3310      	adds	r3, #16
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	4611      	mov	r1, r2
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 ff44 	bl	800453c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80036b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036b6:	f000 fa2d 	bl	8003b14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80036ba:	f000 fd73 	bl	80041a4 <xTaskResumeAll>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f47f af7c 	bne.w	80035be <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80036c6:	4b0c      	ldr	r3, [pc, #48]	; (80036f8 <xQueueGenericSend+0x1f8>)
 80036c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036cc:	601a      	str	r2, [r3, #0]
 80036ce:	f3bf 8f4f 	dsb	sy
 80036d2:	f3bf 8f6f 	isb	sy
 80036d6:	e772      	b.n	80035be <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80036d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036da:	f000 fa1b 	bl	8003b14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80036de:	f000 fd61 	bl	80041a4 <xTaskResumeAll>
 80036e2:	e76c      	b.n	80035be <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80036e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036e6:	f000 fa15 	bl	8003b14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80036ea:	f000 fd5b 	bl	80041a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80036ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3738      	adds	r7, #56	; 0x38
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	e000ed04 	.word	0xe000ed04

080036fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b090      	sub	sp, #64	; 0x40
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
 8003708:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800370e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10a      	bne.n	800372a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003718:	f383 8811 	msr	BASEPRI, r3
 800371c:	f3bf 8f6f 	isb	sy
 8003720:	f3bf 8f4f 	dsb	sy
 8003724:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003726:	bf00      	nop
 8003728:	e7fe      	b.n	8003728 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d103      	bne.n	8003738 <xQueueGenericSendFromISR+0x3c>
 8003730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <xQueueGenericSendFromISR+0x40>
 8003738:	2301      	movs	r3, #1
 800373a:	e000      	b.n	800373e <xQueueGenericSendFromISR+0x42>
 800373c:	2300      	movs	r3, #0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10a      	bne.n	8003758 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003746:	f383 8811 	msr	BASEPRI, r3
 800374a:	f3bf 8f6f 	isb	sy
 800374e:	f3bf 8f4f 	dsb	sy
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003754:	bf00      	nop
 8003756:	e7fe      	b.n	8003756 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	2b02      	cmp	r3, #2
 800375c:	d103      	bne.n	8003766 <xQueueGenericSendFromISR+0x6a>
 800375e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003762:	2b01      	cmp	r3, #1
 8003764:	d101      	bne.n	800376a <xQueueGenericSendFromISR+0x6e>
 8003766:	2301      	movs	r3, #1
 8003768:	e000      	b.n	800376c <xQueueGenericSendFromISR+0x70>
 800376a:	2300      	movs	r3, #0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10a      	bne.n	8003786 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003774:	f383 8811 	msr	BASEPRI, r3
 8003778:	f3bf 8f6f 	isb	sy
 800377c:	f3bf 8f4f 	dsb	sy
 8003780:	623b      	str	r3, [r7, #32]
}
 8003782:	bf00      	nop
 8003784:	e7fe      	b.n	8003784 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003786:	f7ff fd77 	bl	8003278 <vPortValidateInterruptPriority>
	__asm volatile
 800378a:	f3ef 8211 	mrs	r2, BASEPRI
 800378e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003792:	f383 8811 	msr	BASEPRI, r3
 8003796:	f3bf 8f6f 	isb	sy
 800379a:	f3bf 8f4f 	dsb	sy
 800379e:	61fa      	str	r2, [r7, #28]
 80037a0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80037a2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80037a4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80037a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d302      	bcc.n	80037b8 <xQueueGenericSendFromISR+0xbc>
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d12f      	bne.n	8003818 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80037b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	68b9      	ldr	r1, [r7, #8]
 80037cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80037ce:	f000 f911 	bl	80039f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80037d2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80037d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037da:	d112      	bne.n	8003802 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d016      	beq.n	8003812 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e6:	3324      	adds	r3, #36	; 0x24
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 fef7 	bl	80045dc <xTaskRemoveFromEventList>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00e      	beq.n	8003812 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00b      	beq.n	8003812 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	e007      	b.n	8003812 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003802:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003806:	3301      	adds	r3, #1
 8003808:	b2db      	uxtb	r3, r3
 800380a:	b25a      	sxtb	r2, r3
 800380c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003812:	2301      	movs	r3, #1
 8003814:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003816:	e001      	b.n	800381c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003818:	2300      	movs	r3, #0
 800381a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800381c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800381e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	f383 8811 	msr	BASEPRI, r3
}
 8003826:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800382a:	4618      	mov	r0, r3
 800382c:	3740      	adds	r7, #64	; 0x40
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
	...

08003834 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b08c      	sub	sp, #48	; 0x30
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003840:	2300      	movs	r3, #0
 8003842:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10a      	bne.n	8003864 <xQueueReceive+0x30>
	__asm volatile
 800384e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003852:	f383 8811 	msr	BASEPRI, r3
 8003856:	f3bf 8f6f 	isb	sy
 800385a:	f3bf 8f4f 	dsb	sy
 800385e:	623b      	str	r3, [r7, #32]
}
 8003860:	bf00      	nop
 8003862:	e7fe      	b.n	8003862 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d103      	bne.n	8003872 <xQueueReceive+0x3e>
 800386a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <xQueueReceive+0x42>
 8003872:	2301      	movs	r3, #1
 8003874:	e000      	b.n	8003878 <xQueueReceive+0x44>
 8003876:	2300      	movs	r3, #0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10a      	bne.n	8003892 <xQueueReceive+0x5e>
	__asm volatile
 800387c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003880:	f383 8811 	msr	BASEPRI, r3
 8003884:	f3bf 8f6f 	isb	sy
 8003888:	f3bf 8f4f 	dsb	sy
 800388c:	61fb      	str	r3, [r7, #28]
}
 800388e:	bf00      	nop
 8003890:	e7fe      	b.n	8003890 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003892:	f001 f865 	bl	8004960 <xTaskGetSchedulerState>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d102      	bne.n	80038a2 <xQueueReceive+0x6e>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <xQueueReceive+0x72>
 80038a2:	2301      	movs	r3, #1
 80038a4:	e000      	b.n	80038a8 <xQueueReceive+0x74>
 80038a6:	2300      	movs	r3, #0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10a      	bne.n	80038c2 <xQueueReceive+0x8e>
	__asm volatile
 80038ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b0:	f383 8811 	msr	BASEPRI, r3
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	61bb      	str	r3, [r7, #24]
}
 80038be:	bf00      	nop
 80038c0:	e7fe      	b.n	80038c0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80038c2:	f7ff fbf7 	bl	80030b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80038cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d01f      	beq.n	8003912 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80038d2:	68b9      	ldr	r1, [r7, #8]
 80038d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038d6:	f000 f8f7 	bl	8003ac8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	1e5a      	subs	r2, r3, #1
 80038de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00f      	beq.n	800390a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ec:	3310      	adds	r3, #16
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 fe74 	bl	80045dc <xTaskRemoveFromEventList>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d007      	beq.n	800390a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80038fa:	4b3d      	ldr	r3, [pc, #244]	; (80039f0 <xQueueReceive+0x1bc>)
 80038fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	f3bf 8f4f 	dsb	sy
 8003906:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800390a:	f7ff fc03 	bl	8003114 <vPortExitCritical>
				return pdPASS;
 800390e:	2301      	movs	r3, #1
 8003910:	e069      	b.n	80039e6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d103      	bne.n	8003920 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003918:	f7ff fbfc 	bl	8003114 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800391c:	2300      	movs	r3, #0
 800391e:	e062      	b.n	80039e6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003922:	2b00      	cmp	r3, #0
 8003924:	d106      	bne.n	8003934 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003926:	f107 0310 	add.w	r3, r7, #16
 800392a:	4618      	mov	r0, r3
 800392c:	f000 feba 	bl	80046a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003930:	2301      	movs	r3, #1
 8003932:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003934:	f7ff fbee 	bl	8003114 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003938:	f000 fc26 	bl	8004188 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800393c:	f7ff fbba 	bl	80030b4 <vPortEnterCritical>
 8003940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003942:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003946:	b25b      	sxtb	r3, r3
 8003948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394c:	d103      	bne.n	8003956 <xQueueReceive+0x122>
 800394e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003958:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800395c:	b25b      	sxtb	r3, r3
 800395e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003962:	d103      	bne.n	800396c <xQueueReceive+0x138>
 8003964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800396c:	f7ff fbd2 	bl	8003114 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003970:	1d3a      	adds	r2, r7, #4
 8003972:	f107 0310 	add.w	r3, r7, #16
 8003976:	4611      	mov	r1, r2
 8003978:	4618      	mov	r0, r3
 800397a:	f000 fea9 	bl	80046d0 <xTaskCheckForTimeOut>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d123      	bne.n	80039cc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003984:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003986:	f000 f917 	bl	8003bb8 <prvIsQueueEmpty>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d017      	beq.n	80039c0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003992:	3324      	adds	r3, #36	; 0x24
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	4611      	mov	r1, r2
 8003998:	4618      	mov	r0, r3
 800399a:	f000 fdcf 	bl	800453c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800399e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039a0:	f000 f8b8 	bl	8003b14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80039a4:	f000 fbfe 	bl	80041a4 <xTaskResumeAll>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d189      	bne.n	80038c2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80039ae:	4b10      	ldr	r3, [pc, #64]	; (80039f0 <xQueueReceive+0x1bc>)
 80039b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	f3bf 8f4f 	dsb	sy
 80039ba:	f3bf 8f6f 	isb	sy
 80039be:	e780      	b.n	80038c2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80039c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039c2:	f000 f8a7 	bl	8003b14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80039c6:	f000 fbed 	bl	80041a4 <xTaskResumeAll>
 80039ca:	e77a      	b.n	80038c2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80039cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039ce:	f000 f8a1 	bl	8003b14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80039d2:	f000 fbe7 	bl	80041a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80039d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039d8:	f000 f8ee 	bl	8003bb8 <prvIsQueueEmpty>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f43f af6f 	beq.w	80038c2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80039e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3730      	adds	r7, #48	; 0x30
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	e000ed04 	.word	0xe000ed04

080039f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003a00:	2300      	movs	r3, #0
 8003a02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10d      	bne.n	8003a2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d14d      	bne.n	8003ab6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 ffbc 	bl	800499c <xTaskPriorityDisinherit>
 8003a24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	609a      	str	r2, [r3, #8]
 8003a2c:	e043      	b.n	8003ab6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d119      	bne.n	8003a68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6858      	ldr	r0, [r3, #4]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	68b9      	ldr	r1, [r7, #8]
 8003a40:	f001 fbe2 	bl	8005208 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4c:	441a      	add	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d32b      	bcc.n	8003ab6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	605a      	str	r2, [r3, #4]
 8003a66:	e026      	b.n	8003ab6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	68d8      	ldr	r0, [r3, #12]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a70:	461a      	mov	r2, r3
 8003a72:	68b9      	ldr	r1, [r7, #8]
 8003a74:	f001 fbc8 	bl	8005208 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	68da      	ldr	r2, [r3, #12]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a80:	425b      	negs	r3, r3
 8003a82:	441a      	add	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	68da      	ldr	r2, [r3, #12]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d207      	bcs.n	8003aa4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9c:	425b      	negs	r3, r3
 8003a9e:	441a      	add	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d105      	bne.n	8003ab6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d002      	beq.n	8003ab6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003abe:	697b      	ldr	r3, [r7, #20]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3718      	adds	r7, #24
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d018      	beq.n	8003b0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68da      	ldr	r2, [r3, #12]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae2:	441a      	add	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68da      	ldr	r2, [r3, #12]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d303      	bcc.n	8003afc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68d9      	ldr	r1, [r3, #12]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b04:	461a      	mov	r2, r3
 8003b06:	6838      	ldr	r0, [r7, #0]
 8003b08:	f001 fb7e 	bl	8005208 <memcpy>
	}
}
 8003b0c:	bf00      	nop
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003b1c:	f7ff faca 	bl	80030b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b28:	e011      	b.n	8003b4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d012      	beq.n	8003b58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	3324      	adds	r3, #36	; 0x24
 8003b36:	4618      	mov	r0, r3
 8003b38:	f000 fd50 	bl	80045dc <xTaskRemoveFromEventList>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003b42:	f000 fe27 	bl	8004794 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003b46:	7bfb      	ldrb	r3, [r7, #15]
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	dce9      	bgt.n	8003b2a <prvUnlockQueue+0x16>
 8003b56:	e000      	b.n	8003b5a <prvUnlockQueue+0x46>
					break;
 8003b58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	22ff      	movs	r2, #255	; 0xff
 8003b5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003b62:	f7ff fad7 	bl	8003114 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003b66:	f7ff faa5 	bl	80030b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b72:	e011      	b.n	8003b98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d012      	beq.n	8003ba2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3310      	adds	r3, #16
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 fd2b 	bl	80045dc <xTaskRemoveFromEventList>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003b8c:	f000 fe02 	bl	8004794 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003b90:	7bbb      	ldrb	r3, [r7, #14]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	dce9      	bgt.n	8003b74 <prvUnlockQueue+0x60>
 8003ba0:	e000      	b.n	8003ba4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003ba2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	22ff      	movs	r2, #255	; 0xff
 8003ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003bac:	f7ff fab2 	bl	8003114 <vPortExitCritical>
}
 8003bb0:	bf00      	nop
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003bc0:	f7ff fa78 	bl	80030b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d102      	bne.n	8003bd2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	e001      	b.n	8003bd6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003bd6:	f7ff fa9d 	bl	8003114 <vPortExitCritical>

	return xReturn;
 8003bda:	68fb      	ldr	r3, [r7, #12]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003bec:	f7ff fa62 	bl	80030b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d102      	bne.n	8003c02 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	60fb      	str	r3, [r7, #12]
 8003c00:	e001      	b.n	8003c06 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003c02:	2300      	movs	r3, #0
 8003c04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c06:	f7ff fa85 	bl	8003114 <vPortExitCritical>

	return xReturn;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60fb      	str	r3, [r7, #12]
 8003c22:	e014      	b.n	8003c4e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003c24:	4a0f      	ldr	r2, [pc, #60]	; (8003c64 <vQueueAddToRegistry+0x50>)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10b      	bne.n	8003c48 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003c30:	490c      	ldr	r1, [pc, #48]	; (8003c64 <vQueueAddToRegistry+0x50>)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003c3a:	4a0a      	ldr	r2, [pc, #40]	; (8003c64 <vQueueAddToRegistry+0x50>)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	4413      	add	r3, r2
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003c46:	e006      	b.n	8003c56 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	60fb      	str	r3, [r7, #12]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2b07      	cmp	r3, #7
 8003c52:	d9e7      	bls.n	8003c24 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003c54:	bf00      	nop
 8003c56:	bf00      	nop
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	2400a17c 	.word	0x2400a17c

08003c68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003c78:	f7ff fa1c 	bl	80030b4 <vPortEnterCritical>
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c82:	b25b      	sxtb	r3, r3
 8003c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c88:	d103      	bne.n	8003c92 <vQueueWaitForMessageRestricted+0x2a>
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c98:	b25b      	sxtb	r3, r3
 8003c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9e:	d103      	bne.n	8003ca8 <vQueueWaitForMessageRestricted+0x40>
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ca8:	f7ff fa34 	bl	8003114 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d106      	bne.n	8003cc2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	3324      	adds	r3, #36	; 0x24
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	68b9      	ldr	r1, [r7, #8]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f000 fc61 	bl	8004584 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003cc2:	6978      	ldr	r0, [r7, #20]
 8003cc4:	f7ff ff26 	bl	8003b14 <prvUnlockQueue>
	}
 8003cc8:	bf00      	nop
 8003cca:	3718      	adds	r7, #24
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b08e      	sub	sp, #56	; 0x38
 8003cd4:	af04      	add	r7, sp, #16
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
 8003cdc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10a      	bne.n	8003cfa <xTaskCreateStatic+0x2a>
	__asm volatile
 8003ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce8:	f383 8811 	msr	BASEPRI, r3
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	623b      	str	r3, [r7, #32]
}
 8003cf6:	bf00      	nop
 8003cf8:	e7fe      	b.n	8003cf8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10a      	bne.n	8003d16 <xTaskCreateStatic+0x46>
	__asm volatile
 8003d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d04:	f383 8811 	msr	BASEPRI, r3
 8003d08:	f3bf 8f6f 	isb	sy
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	61fb      	str	r3, [r7, #28]
}
 8003d12:	bf00      	nop
 8003d14:	e7fe      	b.n	8003d14 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003d16:	23cc      	movs	r3, #204	; 0xcc
 8003d18:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	2bcc      	cmp	r3, #204	; 0xcc
 8003d1e:	d00a      	beq.n	8003d36 <xTaskCreateStatic+0x66>
	__asm volatile
 8003d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d24:	f383 8811 	msr	BASEPRI, r3
 8003d28:	f3bf 8f6f 	isb	sy
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	61bb      	str	r3, [r7, #24]
}
 8003d32:	bf00      	nop
 8003d34:	e7fe      	b.n	8003d34 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003d36:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d01e      	beq.n	8003d7c <xTaskCreateStatic+0xac>
 8003d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d01b      	beq.n	8003d7c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d46:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d4c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d50:	2202      	movs	r2, #2
 8003d52:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003d56:	2300      	movs	r3, #0
 8003d58:	9303      	str	r3, [sp, #12]
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	9302      	str	r3, [sp, #8]
 8003d5e:	f107 0314 	add.w	r3, r7, #20
 8003d62:	9301      	str	r3, [sp, #4]
 8003d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	68b9      	ldr	r1, [r7, #8]
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f000 f850 	bl	8003e14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d76:	f000 f8f3 	bl	8003f60 <prvAddNewTaskToReadyList>
 8003d7a:	e001      	b.n	8003d80 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003d80:	697b      	ldr	r3, [r7, #20]
	}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3728      	adds	r7, #40	; 0x28
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b08c      	sub	sp, #48	; 0x30
 8003d8e:	af04      	add	r7, sp, #16
 8003d90:	60f8      	str	r0, [r7, #12]
 8003d92:	60b9      	str	r1, [r7, #8]
 8003d94:	603b      	str	r3, [r7, #0]
 8003d96:	4613      	mov	r3, r2
 8003d98:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003d9a:	88fb      	ldrh	r3, [r7, #6]
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7fe fdbe 	bl	8002920 <pvPortMalloc>
 8003da4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00e      	beq.n	8003dca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003dac:	20cc      	movs	r0, #204	; 0xcc
 8003dae:	f7fe fdb7 	bl	8002920 <pvPortMalloc>
 8003db2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	631a      	str	r2, [r3, #48]	; 0x30
 8003dc0:	e005      	b.n	8003dce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003dc2:	6978      	ldr	r0, [r7, #20]
 8003dc4:	f7fe fe78 	bl	8002ab8 <vPortFree>
 8003dc8:	e001      	b.n	8003dce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d017      	beq.n	8003e04 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003ddc:	88fa      	ldrh	r2, [r7, #6]
 8003dde:	2300      	movs	r3, #0
 8003de0:	9303      	str	r3, [sp, #12]
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	9302      	str	r3, [sp, #8]
 8003de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de8:	9301      	str	r3, [sp, #4]
 8003dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	68b9      	ldr	r1, [r7, #8]
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f000 f80e 	bl	8003e14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003df8:	69f8      	ldr	r0, [r7, #28]
 8003dfa:	f000 f8b1 	bl	8003f60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	61bb      	str	r3, [r7, #24]
 8003e02:	e002      	b.n	8003e0a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003e04:	f04f 33ff 	mov.w	r3, #4294967295
 8003e08:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003e0a:	69bb      	ldr	r3, [r7, #24]
	}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3720      	adds	r7, #32
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b088      	sub	sp, #32
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
 8003e20:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e24:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	21a5      	movs	r1, #165	; 0xa5
 8003e2e:	f001 f9f9 	bl	8005224 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003e3c:	440b      	add	r3, r1
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	4413      	add	r3, r2
 8003e42:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	f023 0307 	bic.w	r3, r3, #7
 8003e4a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	f003 0307 	and.w	r3, r3, #7
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00a      	beq.n	8003e6c <prvInitialiseNewTask+0x58>
	__asm volatile
 8003e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5a:	f383 8811 	msr	BASEPRI, r3
 8003e5e:	f3bf 8f6f 	isb	sy
 8003e62:	f3bf 8f4f 	dsb	sy
 8003e66:	617b      	str	r3, [r7, #20]
}
 8003e68:	bf00      	nop
 8003e6a:	e7fe      	b.n	8003e6a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d01f      	beq.n	8003eb2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e72:	2300      	movs	r3, #0
 8003e74:	61fb      	str	r3, [r7, #28]
 8003e76:	e012      	b.n	8003e9e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	7819      	ldrb	r1, [r3, #0]
 8003e80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	4413      	add	r3, r2
 8003e86:	3334      	adds	r3, #52	; 0x34
 8003e88:	460a      	mov	r2, r1
 8003e8a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	4413      	add	r3, r2
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d006      	beq.n	8003ea6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	61fb      	str	r3, [r7, #28]
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	2b1f      	cmp	r3, #31
 8003ea2:	d9e9      	bls.n	8003e78 <prvInitialiseNewTask+0x64>
 8003ea4:	e000      	b.n	8003ea8 <prvInitialiseNewTask+0x94>
			{
				break;
 8003ea6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8003eb0:	e003      	b.n	8003eba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ebc:	2b37      	cmp	r3, #55	; 0x37
 8003ebe:	d901      	bls.n	8003ec4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003ec0:	2337      	movs	r3, #55	; 0x37
 8003ec2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ec8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ecc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ece:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8003ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed8:	3304      	adds	r3, #4
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fe ff2a 	bl	8002d34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee2:	3318      	adds	r3, #24
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7fe ff25 	bl	8002d34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003efe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f02:	2200      	movs	r2, #0
 8003f04:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f12:	3364      	adds	r3, #100	; 0x64
 8003f14:	2260      	movs	r2, #96	; 0x60
 8003f16:	2100      	movs	r1, #0
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f001 f983 	bl	8005224 <memset>
 8003f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f20:	4a0c      	ldr	r2, [pc, #48]	; (8003f54 <prvInitialiseNewTask+0x140>)
 8003f22:	669a      	str	r2, [r3, #104]	; 0x68
 8003f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f26:	4a0c      	ldr	r2, [pc, #48]	; (8003f58 <prvInitialiseNewTask+0x144>)
 8003f28:	66da      	str	r2, [r3, #108]	; 0x6c
 8003f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2c:	4a0b      	ldr	r2, [pc, #44]	; (8003f5c <prvInitialiseNewTask+0x148>)
 8003f2e:	671a      	str	r2, [r3, #112]	; 0x70
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	68f9      	ldr	r1, [r7, #12]
 8003f34:	69b8      	ldr	r0, [r7, #24]
 8003f36:	f7fe ff91 	bl	8002e5c <pxPortInitialiseStack>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d002      	beq.n	8003f4c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f4a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f4c:	bf00      	nop
 8003f4e:	3720      	adds	r7, #32
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	08005450 	.word	0x08005450
 8003f58:	08005470 	.word	0x08005470
 8003f5c:	08005430 	.word	0x08005430

08003f60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003f68:	f7ff f8a4 	bl	80030b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003f6c:	4b2d      	ldr	r3, [pc, #180]	; (8004024 <prvAddNewTaskToReadyList+0xc4>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	3301      	adds	r3, #1
 8003f72:	4a2c      	ldr	r2, [pc, #176]	; (8004024 <prvAddNewTaskToReadyList+0xc4>)
 8003f74:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003f76:	4b2c      	ldr	r3, [pc, #176]	; (8004028 <prvAddNewTaskToReadyList+0xc8>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d109      	bne.n	8003f92 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003f7e:	4a2a      	ldr	r2, [pc, #168]	; (8004028 <prvAddNewTaskToReadyList+0xc8>)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003f84:	4b27      	ldr	r3, [pc, #156]	; (8004024 <prvAddNewTaskToReadyList+0xc4>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d110      	bne.n	8003fae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003f8c:	f000 fc26 	bl	80047dc <prvInitialiseTaskLists>
 8003f90:	e00d      	b.n	8003fae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003f92:	4b26      	ldr	r3, [pc, #152]	; (800402c <prvAddNewTaskToReadyList+0xcc>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d109      	bne.n	8003fae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003f9a:	4b23      	ldr	r3, [pc, #140]	; (8004028 <prvAddNewTaskToReadyList+0xc8>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d802      	bhi.n	8003fae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003fa8:	4a1f      	ldr	r2, [pc, #124]	; (8004028 <prvAddNewTaskToReadyList+0xc8>)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003fae:	4b20      	ldr	r3, [pc, #128]	; (8004030 <prvAddNewTaskToReadyList+0xd0>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	4a1e      	ldr	r2, [pc, #120]	; (8004030 <prvAddNewTaskToReadyList+0xd0>)
 8003fb6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003fb8:	4b1d      	ldr	r3, [pc, #116]	; (8004030 <prvAddNewTaskToReadyList+0xd0>)
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc4:	4b1b      	ldr	r3, [pc, #108]	; (8004034 <prvAddNewTaskToReadyList+0xd4>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d903      	bls.n	8003fd4 <prvAddNewTaskToReadyList+0x74>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd0:	4a18      	ldr	r2, [pc, #96]	; (8004034 <prvAddNewTaskToReadyList+0xd4>)
 8003fd2:	6013      	str	r3, [r2, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd8:	4613      	mov	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4a15      	ldr	r2, [pc, #84]	; (8004038 <prvAddNewTaskToReadyList+0xd8>)
 8003fe2:	441a      	add	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	4619      	mov	r1, r3
 8003fea:	4610      	mov	r0, r2
 8003fec:	f7fe feaf 	bl	8002d4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003ff0:	f7ff f890 	bl	8003114 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003ff4:	4b0d      	ldr	r3, [pc, #52]	; (800402c <prvAddNewTaskToReadyList+0xcc>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00e      	beq.n	800401a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003ffc:	4b0a      	ldr	r3, [pc, #40]	; (8004028 <prvAddNewTaskToReadyList+0xc8>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004006:	429a      	cmp	r2, r3
 8004008:	d207      	bcs.n	800401a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800400a:	4b0c      	ldr	r3, [pc, #48]	; (800403c <prvAddNewTaskToReadyList+0xdc>)
 800400c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	f3bf 8f4f 	dsb	sy
 8004016:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800401a:	bf00      	nop
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	24009fcc 	.word	0x24009fcc
 8004028:	24009af8 	.word	0x24009af8
 800402c:	24009fd8 	.word	0x24009fd8
 8004030:	24009fe8 	.word	0x24009fe8
 8004034:	24009fd4 	.word	0x24009fd4
 8004038:	24009afc 	.word	0x24009afc
 800403c:	e000ed04 	.word	0xe000ed04

08004040 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004048:	2300      	movs	r3, #0
 800404a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d017      	beq.n	8004082 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004052:	4b13      	ldr	r3, [pc, #76]	; (80040a0 <vTaskDelay+0x60>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <vTaskDelay+0x30>
	__asm volatile
 800405a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405e:	f383 8811 	msr	BASEPRI, r3
 8004062:	f3bf 8f6f 	isb	sy
 8004066:	f3bf 8f4f 	dsb	sy
 800406a:	60bb      	str	r3, [r7, #8]
}
 800406c:	bf00      	nop
 800406e:	e7fe      	b.n	800406e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004070:	f000 f88a 	bl	8004188 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004074:	2100      	movs	r1, #0
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 fcfe 	bl	8004a78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800407c:	f000 f892 	bl	80041a4 <xTaskResumeAll>
 8004080:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d107      	bne.n	8004098 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004088:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <vTaskDelay+0x64>)
 800408a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	f3bf 8f4f 	dsb	sy
 8004094:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004098:	bf00      	nop
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	24009ff4 	.word	0x24009ff4
 80040a4:	e000ed04 	.word	0xe000ed04

080040a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b08a      	sub	sp, #40	; 0x28
 80040ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80040ae:	2300      	movs	r3, #0
 80040b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80040b2:	2300      	movs	r3, #0
 80040b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80040b6:	463a      	mov	r2, r7
 80040b8:	1d39      	adds	r1, r7, #4
 80040ba:	f107 0308 	add.w	r3, r7, #8
 80040be:	4618      	mov	r0, r3
 80040c0:	f7fe fbfa 	bl	80028b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80040c4:	6839      	ldr	r1, [r7, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	9202      	str	r2, [sp, #8]
 80040cc:	9301      	str	r3, [sp, #4]
 80040ce:	2300      	movs	r3, #0
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	2300      	movs	r3, #0
 80040d4:	460a      	mov	r2, r1
 80040d6:	4924      	ldr	r1, [pc, #144]	; (8004168 <vTaskStartScheduler+0xc0>)
 80040d8:	4824      	ldr	r0, [pc, #144]	; (800416c <vTaskStartScheduler+0xc4>)
 80040da:	f7ff fdf9 	bl	8003cd0 <xTaskCreateStatic>
 80040de:	4603      	mov	r3, r0
 80040e0:	4a23      	ldr	r2, [pc, #140]	; (8004170 <vTaskStartScheduler+0xc8>)
 80040e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80040e4:	4b22      	ldr	r3, [pc, #136]	; (8004170 <vTaskStartScheduler+0xc8>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d002      	beq.n	80040f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80040ec:	2301      	movs	r3, #1
 80040ee:	617b      	str	r3, [r7, #20]
 80040f0:	e001      	b.n	80040f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d102      	bne.n	8004102 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80040fc:	f000 fd10 	bl	8004b20 <xTimerCreateTimerTask>
 8004100:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d11b      	bne.n	8004140 <vTaskStartScheduler+0x98>
	__asm volatile
 8004108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410c:	f383 8811 	msr	BASEPRI, r3
 8004110:	f3bf 8f6f 	isb	sy
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	613b      	str	r3, [r7, #16]
}
 800411a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800411c:	4b15      	ldr	r3, [pc, #84]	; (8004174 <vTaskStartScheduler+0xcc>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	3364      	adds	r3, #100	; 0x64
 8004122:	4a15      	ldr	r2, [pc, #84]	; (8004178 <vTaskStartScheduler+0xd0>)
 8004124:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004126:	4b15      	ldr	r3, [pc, #84]	; (800417c <vTaskStartScheduler+0xd4>)
 8004128:	f04f 32ff 	mov.w	r2, #4294967295
 800412c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800412e:	4b14      	ldr	r3, [pc, #80]	; (8004180 <vTaskStartScheduler+0xd8>)
 8004130:	2201      	movs	r2, #1
 8004132:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004134:	4b13      	ldr	r3, [pc, #76]	; (8004184 <vTaskStartScheduler+0xdc>)
 8004136:	2200      	movs	r2, #0
 8004138:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800413a:	f7fe ff19 	bl	8002f70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800413e:	e00e      	b.n	800415e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004146:	d10a      	bne.n	800415e <vTaskStartScheduler+0xb6>
	__asm volatile
 8004148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414c:	f383 8811 	msr	BASEPRI, r3
 8004150:	f3bf 8f6f 	isb	sy
 8004154:	f3bf 8f4f 	dsb	sy
 8004158:	60fb      	str	r3, [r7, #12]
}
 800415a:	bf00      	nop
 800415c:	e7fe      	b.n	800415c <vTaskStartScheduler+0xb4>
}
 800415e:	bf00      	nop
 8004160:	3718      	adds	r7, #24
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	080053e4 	.word	0x080053e4
 800416c:	080047ad 	.word	0x080047ad
 8004170:	24009ff0 	.word	0x24009ff0
 8004174:	24009af8 	.word	0x24009af8
 8004178:	24000014 	.word	0x24000014
 800417c:	24009fec 	.word	0x24009fec
 8004180:	24009fd8 	.word	0x24009fd8
 8004184:	24009fd0 	.word	0x24009fd0

08004188 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004188:	b480      	push	{r7}
 800418a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800418c:	4b04      	ldr	r3, [pc, #16]	; (80041a0 <vTaskSuspendAll+0x18>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	3301      	adds	r3, #1
 8004192:	4a03      	ldr	r2, [pc, #12]	; (80041a0 <vTaskSuspendAll+0x18>)
 8004194:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004196:	bf00      	nop
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	24009ff4 	.word	0x24009ff4

080041a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80041aa:	2300      	movs	r3, #0
 80041ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80041ae:	2300      	movs	r3, #0
 80041b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80041b2:	4b42      	ldr	r3, [pc, #264]	; (80042bc <xTaskResumeAll+0x118>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10a      	bne.n	80041d0 <xTaskResumeAll+0x2c>
	__asm volatile
 80041ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041be:	f383 8811 	msr	BASEPRI, r3
 80041c2:	f3bf 8f6f 	isb	sy
 80041c6:	f3bf 8f4f 	dsb	sy
 80041ca:	603b      	str	r3, [r7, #0]
}
 80041cc:	bf00      	nop
 80041ce:	e7fe      	b.n	80041ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80041d0:	f7fe ff70 	bl	80030b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80041d4:	4b39      	ldr	r3, [pc, #228]	; (80042bc <xTaskResumeAll+0x118>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	3b01      	subs	r3, #1
 80041da:	4a38      	ldr	r2, [pc, #224]	; (80042bc <xTaskResumeAll+0x118>)
 80041dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041de:	4b37      	ldr	r3, [pc, #220]	; (80042bc <xTaskResumeAll+0x118>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d162      	bne.n	80042ac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80041e6:	4b36      	ldr	r3, [pc, #216]	; (80042c0 <xTaskResumeAll+0x11c>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d05e      	beq.n	80042ac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041ee:	e02f      	b.n	8004250 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041f0:	4b34      	ldr	r3, [pc, #208]	; (80042c4 <xTaskResumeAll+0x120>)
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	3318      	adds	r3, #24
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7fe fe03 	bl	8002e08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	3304      	adds	r3, #4
 8004206:	4618      	mov	r0, r3
 8004208:	f7fe fdfe 	bl	8002e08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004210:	4b2d      	ldr	r3, [pc, #180]	; (80042c8 <xTaskResumeAll+0x124>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	429a      	cmp	r2, r3
 8004216:	d903      	bls.n	8004220 <xTaskResumeAll+0x7c>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421c:	4a2a      	ldr	r2, [pc, #168]	; (80042c8 <xTaskResumeAll+0x124>)
 800421e:	6013      	str	r3, [r2, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004224:	4613      	mov	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4a27      	ldr	r2, [pc, #156]	; (80042cc <xTaskResumeAll+0x128>)
 800422e:	441a      	add	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	3304      	adds	r3, #4
 8004234:	4619      	mov	r1, r3
 8004236:	4610      	mov	r0, r2
 8004238:	f7fe fd89 	bl	8002d4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004240:	4b23      	ldr	r3, [pc, #140]	; (80042d0 <xTaskResumeAll+0x12c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004246:	429a      	cmp	r2, r3
 8004248:	d302      	bcc.n	8004250 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800424a:	4b22      	ldr	r3, [pc, #136]	; (80042d4 <xTaskResumeAll+0x130>)
 800424c:	2201      	movs	r2, #1
 800424e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004250:	4b1c      	ldr	r3, [pc, #112]	; (80042c4 <xTaskResumeAll+0x120>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1cb      	bne.n	80041f0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800425e:	f000 fb5f 	bl	8004920 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004262:	4b1d      	ldr	r3, [pc, #116]	; (80042d8 <xTaskResumeAll+0x134>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d010      	beq.n	8004290 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800426e:	f000 f847 	bl	8004300 <xTaskIncrementTick>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d002      	beq.n	800427e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004278:	4b16      	ldr	r3, [pc, #88]	; (80042d4 <xTaskResumeAll+0x130>)
 800427a:	2201      	movs	r2, #1
 800427c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	3b01      	subs	r3, #1
 8004282:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1f1      	bne.n	800426e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800428a:	4b13      	ldr	r3, [pc, #76]	; (80042d8 <xTaskResumeAll+0x134>)
 800428c:	2200      	movs	r2, #0
 800428e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004290:	4b10      	ldr	r3, [pc, #64]	; (80042d4 <xTaskResumeAll+0x130>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d009      	beq.n	80042ac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004298:	2301      	movs	r3, #1
 800429a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800429c:	4b0f      	ldr	r3, [pc, #60]	; (80042dc <xTaskResumeAll+0x138>)
 800429e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	f3bf 8f4f 	dsb	sy
 80042a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80042ac:	f7fe ff32 	bl	8003114 <vPortExitCritical>

	return xAlreadyYielded;
 80042b0:	68bb      	ldr	r3, [r7, #8]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	24009ff4 	.word	0x24009ff4
 80042c0:	24009fcc 	.word	0x24009fcc
 80042c4:	24009f8c 	.word	0x24009f8c
 80042c8:	24009fd4 	.word	0x24009fd4
 80042cc:	24009afc 	.word	0x24009afc
 80042d0:	24009af8 	.word	0x24009af8
 80042d4:	24009fe0 	.word	0x24009fe0
 80042d8:	24009fdc 	.word	0x24009fdc
 80042dc:	e000ed04 	.word	0xe000ed04

080042e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80042e6:	4b05      	ldr	r3, [pc, #20]	; (80042fc <xTaskGetTickCount+0x1c>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80042ec:	687b      	ldr	r3, [r7, #4]
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	24009fd0 	.word	0x24009fd0

08004300 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004306:	2300      	movs	r3, #0
 8004308:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800430a:	4b4f      	ldr	r3, [pc, #316]	; (8004448 <xTaskIncrementTick+0x148>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	f040 808f 	bne.w	8004432 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004314:	4b4d      	ldr	r3, [pc, #308]	; (800444c <xTaskIncrementTick+0x14c>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	3301      	adds	r3, #1
 800431a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800431c:	4a4b      	ldr	r2, [pc, #300]	; (800444c <xTaskIncrementTick+0x14c>)
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d120      	bne.n	800436a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004328:	4b49      	ldr	r3, [pc, #292]	; (8004450 <xTaskIncrementTick+0x150>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00a      	beq.n	8004348 <xTaskIncrementTick+0x48>
	__asm volatile
 8004332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004336:	f383 8811 	msr	BASEPRI, r3
 800433a:	f3bf 8f6f 	isb	sy
 800433e:	f3bf 8f4f 	dsb	sy
 8004342:	603b      	str	r3, [r7, #0]
}
 8004344:	bf00      	nop
 8004346:	e7fe      	b.n	8004346 <xTaskIncrementTick+0x46>
 8004348:	4b41      	ldr	r3, [pc, #260]	; (8004450 <xTaskIncrementTick+0x150>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	60fb      	str	r3, [r7, #12]
 800434e:	4b41      	ldr	r3, [pc, #260]	; (8004454 <xTaskIncrementTick+0x154>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a3f      	ldr	r2, [pc, #252]	; (8004450 <xTaskIncrementTick+0x150>)
 8004354:	6013      	str	r3, [r2, #0]
 8004356:	4a3f      	ldr	r2, [pc, #252]	; (8004454 <xTaskIncrementTick+0x154>)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6013      	str	r3, [r2, #0]
 800435c:	4b3e      	ldr	r3, [pc, #248]	; (8004458 <xTaskIncrementTick+0x158>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	3301      	adds	r3, #1
 8004362:	4a3d      	ldr	r2, [pc, #244]	; (8004458 <xTaskIncrementTick+0x158>)
 8004364:	6013      	str	r3, [r2, #0]
 8004366:	f000 fadb 	bl	8004920 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800436a:	4b3c      	ldr	r3, [pc, #240]	; (800445c <xTaskIncrementTick+0x15c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	429a      	cmp	r2, r3
 8004372:	d349      	bcc.n	8004408 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004374:	4b36      	ldr	r3, [pc, #216]	; (8004450 <xTaskIncrementTick+0x150>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d104      	bne.n	8004388 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800437e:	4b37      	ldr	r3, [pc, #220]	; (800445c <xTaskIncrementTick+0x15c>)
 8004380:	f04f 32ff 	mov.w	r2, #4294967295
 8004384:	601a      	str	r2, [r3, #0]
					break;
 8004386:	e03f      	b.n	8004408 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004388:	4b31      	ldr	r3, [pc, #196]	; (8004450 <xTaskIncrementTick+0x150>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	429a      	cmp	r2, r3
 800439e:	d203      	bcs.n	80043a8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80043a0:	4a2e      	ldr	r2, [pc, #184]	; (800445c <xTaskIncrementTick+0x15c>)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80043a6:	e02f      	b.n	8004408 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	3304      	adds	r3, #4
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7fe fd2b 	bl	8002e08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d004      	beq.n	80043c4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	3318      	adds	r3, #24
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fe fd22 	bl	8002e08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c8:	4b25      	ldr	r3, [pc, #148]	; (8004460 <xTaskIncrementTick+0x160>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d903      	bls.n	80043d8 <xTaskIncrementTick+0xd8>
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d4:	4a22      	ldr	r2, [pc, #136]	; (8004460 <xTaskIncrementTick+0x160>)
 80043d6:	6013      	str	r3, [r2, #0]
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043dc:	4613      	mov	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4413      	add	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4a1f      	ldr	r2, [pc, #124]	; (8004464 <xTaskIncrementTick+0x164>)
 80043e6:	441a      	add	r2, r3
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	3304      	adds	r3, #4
 80043ec:	4619      	mov	r1, r3
 80043ee:	4610      	mov	r0, r2
 80043f0:	f7fe fcad 	bl	8002d4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f8:	4b1b      	ldr	r3, [pc, #108]	; (8004468 <xTaskIncrementTick+0x168>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fe:	429a      	cmp	r2, r3
 8004400:	d3b8      	bcc.n	8004374 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004402:	2301      	movs	r3, #1
 8004404:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004406:	e7b5      	b.n	8004374 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004408:	4b17      	ldr	r3, [pc, #92]	; (8004468 <xTaskIncrementTick+0x168>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800440e:	4915      	ldr	r1, [pc, #84]	; (8004464 <xTaskIncrementTick+0x164>)
 8004410:	4613      	mov	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4413      	add	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	440b      	add	r3, r1
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d901      	bls.n	8004424 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004420:	2301      	movs	r3, #1
 8004422:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004424:	4b11      	ldr	r3, [pc, #68]	; (800446c <xTaskIncrementTick+0x16c>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d007      	beq.n	800443c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800442c:	2301      	movs	r3, #1
 800442e:	617b      	str	r3, [r7, #20]
 8004430:	e004      	b.n	800443c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004432:	4b0f      	ldr	r3, [pc, #60]	; (8004470 <xTaskIncrementTick+0x170>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	3301      	adds	r3, #1
 8004438:	4a0d      	ldr	r2, [pc, #52]	; (8004470 <xTaskIncrementTick+0x170>)
 800443a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800443c:	697b      	ldr	r3, [r7, #20]
}
 800443e:	4618      	mov	r0, r3
 8004440:	3718      	adds	r7, #24
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	24009ff4 	.word	0x24009ff4
 800444c:	24009fd0 	.word	0x24009fd0
 8004450:	24009f84 	.word	0x24009f84
 8004454:	24009f88 	.word	0x24009f88
 8004458:	24009fe4 	.word	0x24009fe4
 800445c:	24009fec 	.word	0x24009fec
 8004460:	24009fd4 	.word	0x24009fd4
 8004464:	24009afc 	.word	0x24009afc
 8004468:	24009af8 	.word	0x24009af8
 800446c:	24009fe0 	.word	0x24009fe0
 8004470:	24009fdc 	.word	0x24009fdc

08004474 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800447a:	4b2a      	ldr	r3, [pc, #168]	; (8004524 <vTaskSwitchContext+0xb0>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004482:	4b29      	ldr	r3, [pc, #164]	; (8004528 <vTaskSwitchContext+0xb4>)
 8004484:	2201      	movs	r2, #1
 8004486:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004488:	e046      	b.n	8004518 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800448a:	4b27      	ldr	r3, [pc, #156]	; (8004528 <vTaskSwitchContext+0xb4>)
 800448c:	2200      	movs	r2, #0
 800448e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004490:	4b26      	ldr	r3, [pc, #152]	; (800452c <vTaskSwitchContext+0xb8>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	60fb      	str	r3, [r7, #12]
 8004496:	e010      	b.n	80044ba <vTaskSwitchContext+0x46>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10a      	bne.n	80044b4 <vTaskSwitchContext+0x40>
	__asm volatile
 800449e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a2:	f383 8811 	msr	BASEPRI, r3
 80044a6:	f3bf 8f6f 	isb	sy
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	607b      	str	r3, [r7, #4]
}
 80044b0:	bf00      	nop
 80044b2:	e7fe      	b.n	80044b2 <vTaskSwitchContext+0x3e>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	3b01      	subs	r3, #1
 80044b8:	60fb      	str	r3, [r7, #12]
 80044ba:	491d      	ldr	r1, [pc, #116]	; (8004530 <vTaskSwitchContext+0xbc>)
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	4613      	mov	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4413      	add	r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	440b      	add	r3, r1
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d0e4      	beq.n	8004498 <vTaskSwitchContext+0x24>
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	4613      	mov	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4413      	add	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4a15      	ldr	r2, [pc, #84]	; (8004530 <vTaskSwitchContext+0xbc>)
 80044da:	4413      	add	r3, r2
 80044dc:	60bb      	str	r3, [r7, #8]
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	605a      	str	r2, [r3, #4]
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	3308      	adds	r3, #8
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d104      	bne.n	80044fe <vTaskSwitchContext+0x8a>
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	685a      	ldr	r2, [r3, #4]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	605a      	str	r2, [r3, #4]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	4a0b      	ldr	r2, [pc, #44]	; (8004534 <vTaskSwitchContext+0xc0>)
 8004506:	6013      	str	r3, [r2, #0]
 8004508:	4a08      	ldr	r2, [pc, #32]	; (800452c <vTaskSwitchContext+0xb8>)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800450e:	4b09      	ldr	r3, [pc, #36]	; (8004534 <vTaskSwitchContext+0xc0>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	3364      	adds	r3, #100	; 0x64
 8004514:	4a08      	ldr	r2, [pc, #32]	; (8004538 <vTaskSwitchContext+0xc4>)
 8004516:	6013      	str	r3, [r2, #0]
}
 8004518:	bf00      	nop
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	24009ff4 	.word	0x24009ff4
 8004528:	24009fe0 	.word	0x24009fe0
 800452c:	24009fd4 	.word	0x24009fd4
 8004530:	24009afc 	.word	0x24009afc
 8004534:	24009af8 	.word	0x24009af8
 8004538:	24000014 	.word	0x24000014

0800453c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10a      	bne.n	8004562 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800454c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004550:	f383 8811 	msr	BASEPRI, r3
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	f3bf 8f4f 	dsb	sy
 800455c:	60fb      	str	r3, [r7, #12]
}
 800455e:	bf00      	nop
 8004560:	e7fe      	b.n	8004560 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004562:	4b07      	ldr	r3, [pc, #28]	; (8004580 <vTaskPlaceOnEventList+0x44>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	3318      	adds	r3, #24
 8004568:	4619      	mov	r1, r3
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7fe fc13 	bl	8002d96 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004570:	2101      	movs	r1, #1
 8004572:	6838      	ldr	r0, [r7, #0]
 8004574:	f000 fa80 	bl	8004a78 <prvAddCurrentTaskToDelayedList>
}
 8004578:	bf00      	nop
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	24009af8 	.word	0x24009af8

08004584 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10a      	bne.n	80045ac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459a:	f383 8811 	msr	BASEPRI, r3
 800459e:	f3bf 8f6f 	isb	sy
 80045a2:	f3bf 8f4f 	dsb	sy
 80045a6:	617b      	str	r3, [r7, #20]
}
 80045a8:	bf00      	nop
 80045aa:	e7fe      	b.n	80045aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80045ac:	4b0a      	ldr	r3, [pc, #40]	; (80045d8 <vTaskPlaceOnEventListRestricted+0x54>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3318      	adds	r3, #24
 80045b2:	4619      	mov	r1, r3
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f7fe fbca 	bl	8002d4e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d002      	beq.n	80045c6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80045c0:	f04f 33ff 	mov.w	r3, #4294967295
 80045c4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80045c6:	6879      	ldr	r1, [r7, #4]
 80045c8:	68b8      	ldr	r0, [r7, #8]
 80045ca:	f000 fa55 	bl	8004a78 <prvAddCurrentTaskToDelayedList>
	}
 80045ce:	bf00      	nop
 80045d0:	3718      	adds	r7, #24
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	24009af8 	.word	0x24009af8

080045dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b086      	sub	sp, #24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10a      	bne.n	8004608 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80045f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f6:	f383 8811 	msr	BASEPRI, r3
 80045fa:	f3bf 8f6f 	isb	sy
 80045fe:	f3bf 8f4f 	dsb	sy
 8004602:	60fb      	str	r3, [r7, #12]
}
 8004604:	bf00      	nop
 8004606:	e7fe      	b.n	8004606 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	3318      	adds	r3, #24
 800460c:	4618      	mov	r0, r3
 800460e:	f7fe fbfb 	bl	8002e08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004612:	4b1e      	ldr	r3, [pc, #120]	; (800468c <xTaskRemoveFromEventList+0xb0>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d11d      	bne.n	8004656 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	3304      	adds	r3, #4
 800461e:	4618      	mov	r0, r3
 8004620:	f7fe fbf2 	bl	8002e08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004628:	4b19      	ldr	r3, [pc, #100]	; (8004690 <xTaskRemoveFromEventList+0xb4>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	429a      	cmp	r2, r3
 800462e:	d903      	bls.n	8004638 <xTaskRemoveFromEventList+0x5c>
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004634:	4a16      	ldr	r2, [pc, #88]	; (8004690 <xTaskRemoveFromEventList+0xb4>)
 8004636:	6013      	str	r3, [r2, #0]
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800463c:	4613      	mov	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4413      	add	r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4a13      	ldr	r2, [pc, #76]	; (8004694 <xTaskRemoveFromEventList+0xb8>)
 8004646:	441a      	add	r2, r3
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	3304      	adds	r3, #4
 800464c:	4619      	mov	r1, r3
 800464e:	4610      	mov	r0, r2
 8004650:	f7fe fb7d 	bl	8002d4e <vListInsertEnd>
 8004654:	e005      	b.n	8004662 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	3318      	adds	r3, #24
 800465a:	4619      	mov	r1, r3
 800465c:	480e      	ldr	r0, [pc, #56]	; (8004698 <xTaskRemoveFromEventList+0xbc>)
 800465e:	f7fe fb76 	bl	8002d4e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004666:	4b0d      	ldr	r3, [pc, #52]	; (800469c <xTaskRemoveFromEventList+0xc0>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466c:	429a      	cmp	r2, r3
 800466e:	d905      	bls.n	800467c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004670:	2301      	movs	r3, #1
 8004672:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004674:	4b0a      	ldr	r3, [pc, #40]	; (80046a0 <xTaskRemoveFromEventList+0xc4>)
 8004676:	2201      	movs	r2, #1
 8004678:	601a      	str	r2, [r3, #0]
 800467a:	e001      	b.n	8004680 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800467c:	2300      	movs	r3, #0
 800467e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004680:	697b      	ldr	r3, [r7, #20]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3718      	adds	r7, #24
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	24009ff4 	.word	0x24009ff4
 8004690:	24009fd4 	.word	0x24009fd4
 8004694:	24009afc 	.word	0x24009afc
 8004698:	24009f8c 	.word	0x24009f8c
 800469c:	24009af8 	.word	0x24009af8
 80046a0:	24009fe0 	.word	0x24009fe0

080046a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80046ac:	4b06      	ldr	r3, [pc, #24]	; (80046c8 <vTaskInternalSetTimeOutState+0x24>)
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80046b4:	4b05      	ldr	r3, [pc, #20]	; (80046cc <vTaskInternalSetTimeOutState+0x28>)
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	605a      	str	r2, [r3, #4]
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	24009fe4 	.word	0x24009fe4
 80046cc:	24009fd0 	.word	0x24009fd0

080046d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b088      	sub	sp, #32
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10a      	bne.n	80046f6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80046e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e4:	f383 8811 	msr	BASEPRI, r3
 80046e8:	f3bf 8f6f 	isb	sy
 80046ec:	f3bf 8f4f 	dsb	sy
 80046f0:	613b      	str	r3, [r7, #16]
}
 80046f2:	bf00      	nop
 80046f4:	e7fe      	b.n	80046f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10a      	bne.n	8004712 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80046fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004700:	f383 8811 	msr	BASEPRI, r3
 8004704:	f3bf 8f6f 	isb	sy
 8004708:	f3bf 8f4f 	dsb	sy
 800470c:	60fb      	str	r3, [r7, #12]
}
 800470e:	bf00      	nop
 8004710:	e7fe      	b.n	8004710 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004712:	f7fe fccf 	bl	80030b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004716:	4b1d      	ldr	r3, [pc, #116]	; (800478c <xTaskCheckForTimeOut+0xbc>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800472e:	d102      	bne.n	8004736 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004730:	2300      	movs	r3, #0
 8004732:	61fb      	str	r3, [r7, #28]
 8004734:	e023      	b.n	800477e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	4b15      	ldr	r3, [pc, #84]	; (8004790 <xTaskCheckForTimeOut+0xc0>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	429a      	cmp	r2, r3
 8004740:	d007      	beq.n	8004752 <xTaskCheckForTimeOut+0x82>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	429a      	cmp	r2, r3
 800474a:	d302      	bcc.n	8004752 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800474c:	2301      	movs	r3, #1
 800474e:	61fb      	str	r3, [r7, #28]
 8004750:	e015      	b.n	800477e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	429a      	cmp	r2, r3
 800475a:	d20b      	bcs.n	8004774 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	1ad2      	subs	r2, r2, r3
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f7ff ff9b 	bl	80046a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800476e:	2300      	movs	r3, #0
 8004770:	61fb      	str	r3, [r7, #28]
 8004772:	e004      	b.n	800477e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	2200      	movs	r2, #0
 8004778:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800477a:	2301      	movs	r3, #1
 800477c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800477e:	f7fe fcc9 	bl	8003114 <vPortExitCritical>

	return xReturn;
 8004782:	69fb      	ldr	r3, [r7, #28]
}
 8004784:	4618      	mov	r0, r3
 8004786:	3720      	adds	r7, #32
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	24009fd0 	.word	0x24009fd0
 8004790:	24009fe4 	.word	0x24009fe4

08004794 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004798:	4b03      	ldr	r3, [pc, #12]	; (80047a8 <vTaskMissedYield+0x14>)
 800479a:	2201      	movs	r2, #1
 800479c:	601a      	str	r2, [r3, #0]
}
 800479e:	bf00      	nop
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	24009fe0 	.word	0x24009fe0

080047ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80047b4:	f000 f852 	bl	800485c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80047b8:	4b06      	ldr	r3, [pc, #24]	; (80047d4 <prvIdleTask+0x28>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d9f9      	bls.n	80047b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80047c0:	4b05      	ldr	r3, [pc, #20]	; (80047d8 <prvIdleTask+0x2c>)
 80047c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047c6:	601a      	str	r2, [r3, #0]
 80047c8:	f3bf 8f4f 	dsb	sy
 80047cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80047d0:	e7f0      	b.n	80047b4 <prvIdleTask+0x8>
 80047d2:	bf00      	nop
 80047d4:	24009afc 	.word	0x24009afc
 80047d8:	e000ed04 	.word	0xe000ed04

080047dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047e2:	2300      	movs	r3, #0
 80047e4:	607b      	str	r3, [r7, #4]
 80047e6:	e00c      	b.n	8004802 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	4613      	mov	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	4a12      	ldr	r2, [pc, #72]	; (800483c <prvInitialiseTaskLists+0x60>)
 80047f4:	4413      	add	r3, r2
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fe fa7c 	bl	8002cf4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	3301      	adds	r3, #1
 8004800:	607b      	str	r3, [r7, #4]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b37      	cmp	r3, #55	; 0x37
 8004806:	d9ef      	bls.n	80047e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004808:	480d      	ldr	r0, [pc, #52]	; (8004840 <prvInitialiseTaskLists+0x64>)
 800480a:	f7fe fa73 	bl	8002cf4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800480e:	480d      	ldr	r0, [pc, #52]	; (8004844 <prvInitialiseTaskLists+0x68>)
 8004810:	f7fe fa70 	bl	8002cf4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004814:	480c      	ldr	r0, [pc, #48]	; (8004848 <prvInitialiseTaskLists+0x6c>)
 8004816:	f7fe fa6d 	bl	8002cf4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800481a:	480c      	ldr	r0, [pc, #48]	; (800484c <prvInitialiseTaskLists+0x70>)
 800481c:	f7fe fa6a 	bl	8002cf4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004820:	480b      	ldr	r0, [pc, #44]	; (8004850 <prvInitialiseTaskLists+0x74>)
 8004822:	f7fe fa67 	bl	8002cf4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004826:	4b0b      	ldr	r3, [pc, #44]	; (8004854 <prvInitialiseTaskLists+0x78>)
 8004828:	4a05      	ldr	r2, [pc, #20]	; (8004840 <prvInitialiseTaskLists+0x64>)
 800482a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800482c:	4b0a      	ldr	r3, [pc, #40]	; (8004858 <prvInitialiseTaskLists+0x7c>)
 800482e:	4a05      	ldr	r2, [pc, #20]	; (8004844 <prvInitialiseTaskLists+0x68>)
 8004830:	601a      	str	r2, [r3, #0]
}
 8004832:	bf00      	nop
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	24009afc 	.word	0x24009afc
 8004840:	24009f5c 	.word	0x24009f5c
 8004844:	24009f70 	.word	0x24009f70
 8004848:	24009f8c 	.word	0x24009f8c
 800484c:	24009fa0 	.word	0x24009fa0
 8004850:	24009fb8 	.word	0x24009fb8
 8004854:	24009f84 	.word	0x24009f84
 8004858:	24009f88 	.word	0x24009f88

0800485c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004862:	e019      	b.n	8004898 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004864:	f7fe fc26 	bl	80030b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004868:	4b10      	ldr	r3, [pc, #64]	; (80048ac <prvCheckTasksWaitingTermination+0x50>)
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	3304      	adds	r3, #4
 8004874:	4618      	mov	r0, r3
 8004876:	f7fe fac7 	bl	8002e08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800487a:	4b0d      	ldr	r3, [pc, #52]	; (80048b0 <prvCheckTasksWaitingTermination+0x54>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	3b01      	subs	r3, #1
 8004880:	4a0b      	ldr	r2, [pc, #44]	; (80048b0 <prvCheckTasksWaitingTermination+0x54>)
 8004882:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004884:	4b0b      	ldr	r3, [pc, #44]	; (80048b4 <prvCheckTasksWaitingTermination+0x58>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	3b01      	subs	r3, #1
 800488a:	4a0a      	ldr	r2, [pc, #40]	; (80048b4 <prvCheckTasksWaitingTermination+0x58>)
 800488c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800488e:	f7fe fc41 	bl	8003114 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f810 	bl	80048b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004898:	4b06      	ldr	r3, [pc, #24]	; (80048b4 <prvCheckTasksWaitingTermination+0x58>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1e1      	bne.n	8004864 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80048a0:	bf00      	nop
 80048a2:	bf00      	nop
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	24009fa0 	.word	0x24009fa0
 80048b0:	24009fcc 	.word	0x24009fcc
 80048b4:	24009fb4 	.word	0x24009fb4

080048b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3364      	adds	r3, #100	; 0x64
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 fcc3 	bl	8005250 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d108      	bne.n	80048e6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d8:	4618      	mov	r0, r3
 80048da:	f7fe f8ed 	bl	8002ab8 <vPortFree>
				vPortFree( pxTCB );
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7fe f8ea 	bl	8002ab8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80048e4:	e018      	b.n	8004918 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d103      	bne.n	80048f8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f7fe f8e1 	bl	8002ab8 <vPortFree>
	}
 80048f6:	e00f      	b.n	8004918 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d00a      	beq.n	8004918 <prvDeleteTCB+0x60>
	__asm volatile
 8004902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004906:	f383 8811 	msr	BASEPRI, r3
 800490a:	f3bf 8f6f 	isb	sy
 800490e:	f3bf 8f4f 	dsb	sy
 8004912:	60fb      	str	r3, [r7, #12]
}
 8004914:	bf00      	nop
 8004916:	e7fe      	b.n	8004916 <prvDeleteTCB+0x5e>
	}
 8004918:	bf00      	nop
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004926:	4b0c      	ldr	r3, [pc, #48]	; (8004958 <prvResetNextTaskUnblockTime+0x38>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d104      	bne.n	800493a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004930:	4b0a      	ldr	r3, [pc, #40]	; (800495c <prvResetNextTaskUnblockTime+0x3c>)
 8004932:	f04f 32ff 	mov.w	r2, #4294967295
 8004936:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004938:	e008      	b.n	800494c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800493a:	4b07      	ldr	r3, [pc, #28]	; (8004958 <prvResetNextTaskUnblockTime+0x38>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	4a04      	ldr	r2, [pc, #16]	; (800495c <prvResetNextTaskUnblockTime+0x3c>)
 800494a:	6013      	str	r3, [r2, #0]
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	24009f84 	.word	0x24009f84
 800495c:	24009fec 	.word	0x24009fec

08004960 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004966:	4b0b      	ldr	r3, [pc, #44]	; (8004994 <xTaskGetSchedulerState+0x34>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d102      	bne.n	8004974 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800496e:	2301      	movs	r3, #1
 8004970:	607b      	str	r3, [r7, #4]
 8004972:	e008      	b.n	8004986 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004974:	4b08      	ldr	r3, [pc, #32]	; (8004998 <xTaskGetSchedulerState+0x38>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d102      	bne.n	8004982 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800497c:	2302      	movs	r3, #2
 800497e:	607b      	str	r3, [r7, #4]
 8004980:	e001      	b.n	8004986 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004982:	2300      	movs	r3, #0
 8004984:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004986:	687b      	ldr	r3, [r7, #4]
	}
 8004988:	4618      	mov	r0, r3
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr
 8004994:	24009fd8 	.word	0x24009fd8
 8004998:	24009ff4 	.word	0x24009ff4

0800499c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80049a8:	2300      	movs	r3, #0
 80049aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d056      	beq.n	8004a60 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80049b2:	4b2e      	ldr	r3, [pc, #184]	; (8004a6c <xTaskPriorityDisinherit+0xd0>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d00a      	beq.n	80049d2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80049bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c0:	f383 8811 	msr	BASEPRI, r3
 80049c4:	f3bf 8f6f 	isb	sy
 80049c8:	f3bf 8f4f 	dsb	sy
 80049cc:	60fb      	str	r3, [r7, #12]
}
 80049ce:	bf00      	nop
 80049d0:	e7fe      	b.n	80049d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10a      	bne.n	80049f0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80049da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049de:	f383 8811 	msr	BASEPRI, r3
 80049e2:	f3bf 8f6f 	isb	sy
 80049e6:	f3bf 8f4f 	dsb	sy
 80049ea:	60bb      	str	r3, [r7, #8]
}
 80049ec:	bf00      	nop
 80049ee:	e7fe      	b.n	80049ee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049f4:	1e5a      	subs	r2, r3, #1
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d02c      	beq.n	8004a60 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d128      	bne.n	8004a60 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	3304      	adds	r3, #4
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7fe f9f8 	bl	8002e08 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a24:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a30:	4b0f      	ldr	r3, [pc, #60]	; (8004a70 <xTaskPriorityDisinherit+0xd4>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d903      	bls.n	8004a40 <xTaskPriorityDisinherit+0xa4>
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3c:	4a0c      	ldr	r2, [pc, #48]	; (8004a70 <xTaskPriorityDisinherit+0xd4>)
 8004a3e:	6013      	str	r3, [r2, #0]
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a44:	4613      	mov	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4a09      	ldr	r2, [pc, #36]	; (8004a74 <xTaskPriorityDisinherit+0xd8>)
 8004a4e:	441a      	add	r2, r3
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	3304      	adds	r3, #4
 8004a54:	4619      	mov	r1, r3
 8004a56:	4610      	mov	r0, r2
 8004a58:	f7fe f979 	bl	8002d4e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004a60:	697b      	ldr	r3, [r7, #20]
	}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3718      	adds	r7, #24
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	24009af8 	.word	0x24009af8
 8004a70:	24009fd4 	.word	0x24009fd4
 8004a74:	24009afc 	.word	0x24009afc

08004a78 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a82:	4b21      	ldr	r3, [pc, #132]	; (8004b08 <prvAddCurrentTaskToDelayedList+0x90>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a88:	4b20      	ldr	r3, [pc, #128]	; (8004b0c <prvAddCurrentTaskToDelayedList+0x94>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	3304      	adds	r3, #4
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7fe f9ba 	bl	8002e08 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a9a:	d10a      	bne.n	8004ab2 <prvAddCurrentTaskToDelayedList+0x3a>
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d007      	beq.n	8004ab2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004aa2:	4b1a      	ldr	r3, [pc, #104]	; (8004b0c <prvAddCurrentTaskToDelayedList+0x94>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	3304      	adds	r3, #4
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	4819      	ldr	r0, [pc, #100]	; (8004b10 <prvAddCurrentTaskToDelayedList+0x98>)
 8004aac:	f7fe f94f 	bl	8002d4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ab0:	e026      	b.n	8004b00 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004aba:	4b14      	ldr	r3, [pc, #80]	; (8004b0c <prvAddCurrentTaskToDelayedList+0x94>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d209      	bcs.n	8004ade <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004aca:	4b12      	ldr	r3, [pc, #72]	; (8004b14 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	4b0f      	ldr	r3, [pc, #60]	; (8004b0c <prvAddCurrentTaskToDelayedList+0x94>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	4610      	mov	r0, r2
 8004ad8:	f7fe f95d 	bl	8002d96 <vListInsert>
}
 8004adc:	e010      	b.n	8004b00 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ade:	4b0e      	ldr	r3, [pc, #56]	; (8004b18 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	4b0a      	ldr	r3, [pc, #40]	; (8004b0c <prvAddCurrentTaskToDelayedList+0x94>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	3304      	adds	r3, #4
 8004ae8:	4619      	mov	r1, r3
 8004aea:	4610      	mov	r0, r2
 8004aec:	f7fe f953 	bl	8002d96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004af0:	4b0a      	ldr	r3, [pc, #40]	; (8004b1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d202      	bcs.n	8004b00 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004afa:	4a08      	ldr	r2, [pc, #32]	; (8004b1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	6013      	str	r3, [r2, #0]
}
 8004b00:	bf00      	nop
 8004b02:	3710      	adds	r7, #16
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	24009fd0 	.word	0x24009fd0
 8004b0c:	24009af8 	.word	0x24009af8
 8004b10:	24009fb8 	.word	0x24009fb8
 8004b14:	24009f88 	.word	0x24009f88
 8004b18:	24009f84 	.word	0x24009f84
 8004b1c:	24009fec 	.word	0x24009fec

08004b20 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b08a      	sub	sp, #40	; 0x28
 8004b24:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004b26:	2300      	movs	r3, #0
 8004b28:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004b2a:	f000 fb07 	bl	800513c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004b2e:	4b1c      	ldr	r3, [pc, #112]	; (8004ba0 <xTimerCreateTimerTask+0x80>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d021      	beq.n	8004b7a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004b36:	2300      	movs	r3, #0
 8004b38:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004b3e:	1d3a      	adds	r2, r7, #4
 8004b40:	f107 0108 	add.w	r1, r7, #8
 8004b44:	f107 030c 	add.w	r3, r7, #12
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7fd fecf 	bl	80028ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004b4e:	6879      	ldr	r1, [r7, #4]
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	9202      	str	r2, [sp, #8]
 8004b56:	9301      	str	r3, [sp, #4]
 8004b58:	2302      	movs	r3, #2
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	460a      	mov	r2, r1
 8004b60:	4910      	ldr	r1, [pc, #64]	; (8004ba4 <xTimerCreateTimerTask+0x84>)
 8004b62:	4811      	ldr	r0, [pc, #68]	; (8004ba8 <xTimerCreateTimerTask+0x88>)
 8004b64:	f7ff f8b4 	bl	8003cd0 <xTaskCreateStatic>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	4a10      	ldr	r2, [pc, #64]	; (8004bac <xTimerCreateTimerTask+0x8c>)
 8004b6c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004b6e:	4b0f      	ldr	r3, [pc, #60]	; (8004bac <xTimerCreateTimerTask+0x8c>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004b76:	2301      	movs	r3, #1
 8004b78:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10a      	bne.n	8004b96 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b84:	f383 8811 	msr	BASEPRI, r3
 8004b88:	f3bf 8f6f 	isb	sy
 8004b8c:	f3bf 8f4f 	dsb	sy
 8004b90:	613b      	str	r3, [r7, #16]
}
 8004b92:	bf00      	nop
 8004b94:	e7fe      	b.n	8004b94 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004b96:	697b      	ldr	r3, [r7, #20]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3718      	adds	r7, #24
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	2400a028 	.word	0x2400a028
 8004ba4:	080053ec 	.word	0x080053ec
 8004ba8:	08004ce5 	.word	0x08004ce5
 8004bac:	2400a02c 	.word	0x2400a02c

08004bb0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b08a      	sub	sp, #40	; 0x28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
 8004bbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10a      	bne.n	8004bde <xTimerGenericCommand+0x2e>
	__asm volatile
 8004bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bcc:	f383 8811 	msr	BASEPRI, r3
 8004bd0:	f3bf 8f6f 	isb	sy
 8004bd4:	f3bf 8f4f 	dsb	sy
 8004bd8:	623b      	str	r3, [r7, #32]
}
 8004bda:	bf00      	nop
 8004bdc:	e7fe      	b.n	8004bdc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004bde:	4b1a      	ldr	r3, [pc, #104]	; (8004c48 <xTimerGenericCommand+0x98>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d02a      	beq.n	8004c3c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	2b05      	cmp	r3, #5
 8004bf6:	dc18      	bgt.n	8004c2a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004bf8:	f7ff feb2 	bl	8004960 <xTaskGetSchedulerState>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d109      	bne.n	8004c16 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004c02:	4b11      	ldr	r3, [pc, #68]	; (8004c48 <xTimerGenericCommand+0x98>)
 8004c04:	6818      	ldr	r0, [r3, #0]
 8004c06:	f107 0110 	add.w	r1, r7, #16
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c0e:	f7fe fc77 	bl	8003500 <xQueueGenericSend>
 8004c12:	6278      	str	r0, [r7, #36]	; 0x24
 8004c14:	e012      	b.n	8004c3c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004c16:	4b0c      	ldr	r3, [pc, #48]	; (8004c48 <xTimerGenericCommand+0x98>)
 8004c18:	6818      	ldr	r0, [r3, #0]
 8004c1a:	f107 0110 	add.w	r1, r7, #16
 8004c1e:	2300      	movs	r3, #0
 8004c20:	2200      	movs	r2, #0
 8004c22:	f7fe fc6d 	bl	8003500 <xQueueGenericSend>
 8004c26:	6278      	str	r0, [r7, #36]	; 0x24
 8004c28:	e008      	b.n	8004c3c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004c2a:	4b07      	ldr	r3, [pc, #28]	; (8004c48 <xTimerGenericCommand+0x98>)
 8004c2c:	6818      	ldr	r0, [r3, #0]
 8004c2e:	f107 0110 	add.w	r1, r7, #16
 8004c32:	2300      	movs	r3, #0
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	f7fe fd61 	bl	80036fc <xQueueGenericSendFromISR>
 8004c3a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3728      	adds	r7, #40	; 0x28
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	2400a028 	.word	0x2400a028

08004c4c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b088      	sub	sp, #32
 8004c50:	af02      	add	r7, sp, #8
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c56:	4b22      	ldr	r3, [pc, #136]	; (8004ce0 <prvProcessExpiredTimer+0x94>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	3304      	adds	r3, #4
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7fe f8cf 	bl	8002e08 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d022      	beq.n	8004cbe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	699a      	ldr	r2, [r3, #24]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	18d1      	adds	r1, r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	683a      	ldr	r2, [r7, #0]
 8004c84:	6978      	ldr	r0, [r7, #20]
 8004c86:	f000 f8d1 	bl	8004e2c <prvInsertTimerInActiveList>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d01f      	beq.n	8004cd0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c90:	2300      	movs	r3, #0
 8004c92:	9300      	str	r3, [sp, #0]
 8004c94:	2300      	movs	r3, #0
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	2100      	movs	r1, #0
 8004c9a:	6978      	ldr	r0, [r7, #20]
 8004c9c:	f7ff ff88 	bl	8004bb0 <xTimerGenericCommand>
 8004ca0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d113      	bne.n	8004cd0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cac:	f383 8811 	msr	BASEPRI, r3
 8004cb0:	f3bf 8f6f 	isb	sy
 8004cb4:	f3bf 8f4f 	dsb	sy
 8004cb8:	60fb      	str	r3, [r7, #12]
}
 8004cba:	bf00      	nop
 8004cbc:	e7fe      	b.n	8004cbc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cc4:	f023 0301 	bic.w	r3, r3, #1
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	6a1b      	ldr	r3, [r3, #32]
 8004cd4:	6978      	ldr	r0, [r7, #20]
 8004cd6:	4798      	blx	r3
}
 8004cd8:	bf00      	nop
 8004cda:	3718      	adds	r7, #24
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	2400a020 	.word	0x2400a020

08004ce4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004cec:	f107 0308 	add.w	r3, r7, #8
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f000 f857 	bl	8004da4 <prvGetNextExpireTime>
 8004cf6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f000 f803 	bl	8004d08 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004d02:	f000 f8d5 	bl	8004eb0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d06:	e7f1      	b.n	8004cec <prvTimerTask+0x8>

08004d08 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004d12:	f7ff fa39 	bl	8004188 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d16:	f107 0308 	add.w	r3, r7, #8
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 f866 	bl	8004dec <prvSampleTimeNow>
 8004d20:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d130      	bne.n	8004d8a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10a      	bne.n	8004d44 <prvProcessTimerOrBlockTask+0x3c>
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d806      	bhi.n	8004d44 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004d36:	f7ff fa35 	bl	80041a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004d3a:	68f9      	ldr	r1, [r7, #12]
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f7ff ff85 	bl	8004c4c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004d42:	e024      	b.n	8004d8e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d008      	beq.n	8004d5c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004d4a:	4b13      	ldr	r3, [pc, #76]	; (8004d98 <prvProcessTimerOrBlockTask+0x90>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <prvProcessTimerOrBlockTask+0x50>
 8004d54:	2301      	movs	r3, #1
 8004d56:	e000      	b.n	8004d5a <prvProcessTimerOrBlockTask+0x52>
 8004d58:	2300      	movs	r3, #0
 8004d5a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004d5c:	4b0f      	ldr	r3, [pc, #60]	; (8004d9c <prvProcessTimerOrBlockTask+0x94>)
 8004d5e:	6818      	ldr	r0, [r3, #0]
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	683a      	ldr	r2, [r7, #0]
 8004d68:	4619      	mov	r1, r3
 8004d6a:	f7fe ff7d 	bl	8003c68 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004d6e:	f7ff fa19 	bl	80041a4 <xTaskResumeAll>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10a      	bne.n	8004d8e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004d78:	4b09      	ldr	r3, [pc, #36]	; (8004da0 <prvProcessTimerOrBlockTask+0x98>)
 8004d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d7e:	601a      	str	r2, [r3, #0]
 8004d80:	f3bf 8f4f 	dsb	sy
 8004d84:	f3bf 8f6f 	isb	sy
}
 8004d88:	e001      	b.n	8004d8e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004d8a:	f7ff fa0b 	bl	80041a4 <xTaskResumeAll>
}
 8004d8e:	bf00      	nop
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	2400a024 	.word	0x2400a024
 8004d9c:	2400a028 	.word	0x2400a028
 8004da0:	e000ed04 	.word	0xe000ed04

08004da4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004dac:	4b0e      	ldr	r3, [pc, #56]	; (8004de8 <prvGetNextExpireTime+0x44>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d101      	bne.n	8004dba <prvGetNextExpireTime+0x16>
 8004db6:	2201      	movs	r2, #1
 8004db8:	e000      	b.n	8004dbc <prvGetNextExpireTime+0x18>
 8004dba:	2200      	movs	r2, #0
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d105      	bne.n	8004dd4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004dc8:	4b07      	ldr	r3, [pc, #28]	; (8004de8 <prvGetNextExpireTime+0x44>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	60fb      	str	r3, [r7, #12]
 8004dd2:	e001      	b.n	8004dd8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3714      	adds	r7, #20
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	2400a020 	.word	0x2400a020

08004dec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004df4:	f7ff fa74 	bl	80042e0 <xTaskGetTickCount>
 8004df8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004dfa:	4b0b      	ldr	r3, [pc, #44]	; (8004e28 <prvSampleTimeNow+0x3c>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d205      	bcs.n	8004e10 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004e04:	f000 f936 	bl	8005074 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	601a      	str	r2, [r3, #0]
 8004e0e:	e002      	b.n	8004e16 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004e16:	4a04      	ldr	r2, [pc, #16]	; (8004e28 <prvSampleTimeNow+0x3c>)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	2400a030 	.word	0x2400a030

08004e2c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
 8004e38:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d812      	bhi.n	8004e78 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	1ad2      	subs	r2, r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d302      	bcc.n	8004e66 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004e60:	2301      	movs	r3, #1
 8004e62:	617b      	str	r3, [r7, #20]
 8004e64:	e01b      	b.n	8004e9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004e66:	4b10      	ldr	r3, [pc, #64]	; (8004ea8 <prvInsertTimerInActiveList+0x7c>)
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	3304      	adds	r3, #4
 8004e6e:	4619      	mov	r1, r3
 8004e70:	4610      	mov	r0, r2
 8004e72:	f7fd ff90 	bl	8002d96 <vListInsert>
 8004e76:	e012      	b.n	8004e9e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d206      	bcs.n	8004e8e <prvInsertTimerInActiveList+0x62>
 8004e80:	68ba      	ldr	r2, [r7, #8]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d302      	bcc.n	8004e8e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	617b      	str	r3, [r7, #20]
 8004e8c:	e007      	b.n	8004e9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e8e:	4b07      	ldr	r3, [pc, #28]	; (8004eac <prvInsertTimerInActiveList+0x80>)
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	3304      	adds	r3, #4
 8004e96:	4619      	mov	r1, r3
 8004e98:	4610      	mov	r0, r2
 8004e9a:	f7fd ff7c 	bl	8002d96 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004e9e:	697b      	ldr	r3, [r7, #20]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3718      	adds	r7, #24
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	2400a024 	.word	0x2400a024
 8004eac:	2400a020 	.word	0x2400a020

08004eb0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b08e      	sub	sp, #56	; 0x38
 8004eb4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004eb6:	e0ca      	b.n	800504e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	da18      	bge.n	8004ef0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004ebe:	1d3b      	adds	r3, r7, #4
 8004ec0:	3304      	adds	r3, #4
 8004ec2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10a      	bne.n	8004ee0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ece:	f383 8811 	msr	BASEPRI, r3
 8004ed2:	f3bf 8f6f 	isb	sy
 8004ed6:	f3bf 8f4f 	dsb	sy
 8004eda:	61fb      	str	r3, [r7, #28]
}
 8004edc:	bf00      	nop
 8004ede:	e7fe      	b.n	8004ede <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ee6:	6850      	ldr	r0, [r2, #4]
 8004ee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004eea:	6892      	ldr	r2, [r2, #8]
 8004eec:	4611      	mov	r1, r2
 8004eee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f2c0 80aa 	blt.w	800504c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efe:	695b      	ldr	r3, [r3, #20]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d004      	beq.n	8004f0e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f06:	3304      	adds	r3, #4
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7fd ff7d 	bl	8002e08 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f0e:	463b      	mov	r3, r7
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7ff ff6b 	bl	8004dec <prvSampleTimeNow>
 8004f16:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b09      	cmp	r3, #9
 8004f1c:	f200 8097 	bhi.w	800504e <prvProcessReceivedCommands+0x19e>
 8004f20:	a201      	add	r2, pc, #4	; (adr r2, 8004f28 <prvProcessReceivedCommands+0x78>)
 8004f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f26:	bf00      	nop
 8004f28:	08004f51 	.word	0x08004f51
 8004f2c:	08004f51 	.word	0x08004f51
 8004f30:	08004f51 	.word	0x08004f51
 8004f34:	08004fc5 	.word	0x08004fc5
 8004f38:	08004fd9 	.word	0x08004fd9
 8004f3c:	08005023 	.word	0x08005023
 8004f40:	08004f51 	.word	0x08004f51
 8004f44:	08004f51 	.word	0x08004f51
 8004f48:	08004fc5 	.word	0x08004fc5
 8004f4c:	08004fd9 	.word	0x08004fd9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f56:	f043 0301 	orr.w	r3, r3, #1
 8004f5a:	b2da      	uxtb	r2, r3
 8004f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	18d1      	adds	r1, r2, r3
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f70:	f7ff ff5c 	bl	8004e2c <prvInsertTimerInActiveList>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d069      	beq.n	800504e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f80:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f88:	f003 0304 	and.w	r3, r3, #4
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d05e      	beq.n	800504e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	441a      	add	r2, r3
 8004f98:	2300      	movs	r3, #0
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fa2:	f7ff fe05 	bl	8004bb0 <xTimerGenericCommand>
 8004fa6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d14f      	bne.n	800504e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb2:	f383 8811 	msr	BASEPRI, r3
 8004fb6:	f3bf 8f6f 	isb	sy
 8004fba:	f3bf 8f4f 	dsb	sy
 8004fbe:	61bb      	str	r3, [r7, #24]
}
 8004fc0:	bf00      	nop
 8004fc2:	e7fe      	b.n	8004fc2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fca:	f023 0301 	bic.w	r3, r3, #1
 8004fce:	b2da      	uxtb	r2, r3
 8004fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004fd6:	e03a      	b.n	800504e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fde:	f043 0301 	orr.w	r3, r3, #1
 8004fe2:	b2da      	uxtb	r2, r3
 8004fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d10a      	bne.n	800500e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffc:	f383 8811 	msr	BASEPRI, r3
 8005000:	f3bf 8f6f 	isb	sy
 8005004:	f3bf 8f4f 	dsb	sy
 8005008:	617b      	str	r3, [r7, #20]
}
 800500a:	bf00      	nop
 800500c:	e7fe      	b.n	800500c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800500e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005010:	699a      	ldr	r2, [r3, #24]
 8005012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005014:	18d1      	adds	r1, r2, r3
 8005016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800501a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800501c:	f7ff ff06 	bl	8004e2c <prvInsertTimerInActiveList>
					break;
 8005020:	e015      	b.n	800504e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005024:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d103      	bne.n	8005038 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005030:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005032:	f7fd fd41 	bl	8002ab8 <vPortFree>
 8005036:	e00a      	b.n	800504e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800503e:	f023 0301 	bic.w	r3, r3, #1
 8005042:	b2da      	uxtb	r2, r3
 8005044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005046:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800504a:	e000      	b.n	800504e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800504c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800504e:	4b08      	ldr	r3, [pc, #32]	; (8005070 <prvProcessReceivedCommands+0x1c0>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	1d39      	adds	r1, r7, #4
 8005054:	2200      	movs	r2, #0
 8005056:	4618      	mov	r0, r3
 8005058:	f7fe fbec 	bl	8003834 <xQueueReceive>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	f47f af2a 	bne.w	8004eb8 <prvProcessReceivedCommands+0x8>
	}
}
 8005064:	bf00      	nop
 8005066:	bf00      	nop
 8005068:	3730      	adds	r7, #48	; 0x30
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	2400a028 	.word	0x2400a028

08005074 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b088      	sub	sp, #32
 8005078:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800507a:	e048      	b.n	800510e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800507c:	4b2d      	ldr	r3, [pc, #180]	; (8005134 <prvSwitchTimerLists+0xc0>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005086:	4b2b      	ldr	r3, [pc, #172]	; (8005134 <prvSwitchTimerLists+0xc0>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	3304      	adds	r3, #4
 8005094:	4618      	mov	r0, r3
 8005096:	f7fd feb7 	bl	8002e08 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050a8:	f003 0304 	and.w	r3, r3, #4
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d02e      	beq.n	800510e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	4413      	add	r3, r2
 80050b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d90e      	bls.n	80050e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80050ce:	4b19      	ldr	r3, [pc, #100]	; (8005134 <prvSwitchTimerLists+0xc0>)
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	3304      	adds	r3, #4
 80050d6:	4619      	mov	r1, r3
 80050d8:	4610      	mov	r0, r2
 80050da:	f7fd fe5c 	bl	8002d96 <vListInsert>
 80050de:	e016      	b.n	800510e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80050e0:	2300      	movs	r3, #0
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	2300      	movs	r3, #0
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	2100      	movs	r1, #0
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f7ff fd60 	bl	8004bb0 <xTimerGenericCommand>
 80050f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10a      	bne.n	800510e <prvSwitchTimerLists+0x9a>
	__asm volatile
 80050f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fc:	f383 8811 	msr	BASEPRI, r3
 8005100:	f3bf 8f6f 	isb	sy
 8005104:	f3bf 8f4f 	dsb	sy
 8005108:	603b      	str	r3, [r7, #0]
}
 800510a:	bf00      	nop
 800510c:	e7fe      	b.n	800510c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800510e:	4b09      	ldr	r3, [pc, #36]	; (8005134 <prvSwitchTimerLists+0xc0>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1b1      	bne.n	800507c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005118:	4b06      	ldr	r3, [pc, #24]	; (8005134 <prvSwitchTimerLists+0xc0>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800511e:	4b06      	ldr	r3, [pc, #24]	; (8005138 <prvSwitchTimerLists+0xc4>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a04      	ldr	r2, [pc, #16]	; (8005134 <prvSwitchTimerLists+0xc0>)
 8005124:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005126:	4a04      	ldr	r2, [pc, #16]	; (8005138 <prvSwitchTimerLists+0xc4>)
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	6013      	str	r3, [r2, #0]
}
 800512c:	bf00      	nop
 800512e:	3718      	adds	r7, #24
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	2400a020 	.word	0x2400a020
 8005138:	2400a024 	.word	0x2400a024

0800513c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005142:	f7fd ffb7 	bl	80030b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005146:	4b15      	ldr	r3, [pc, #84]	; (800519c <prvCheckForValidListAndQueue+0x60>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d120      	bne.n	8005190 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800514e:	4814      	ldr	r0, [pc, #80]	; (80051a0 <prvCheckForValidListAndQueue+0x64>)
 8005150:	f7fd fdd0 	bl	8002cf4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005154:	4813      	ldr	r0, [pc, #76]	; (80051a4 <prvCheckForValidListAndQueue+0x68>)
 8005156:	f7fd fdcd 	bl	8002cf4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800515a:	4b13      	ldr	r3, [pc, #76]	; (80051a8 <prvCheckForValidListAndQueue+0x6c>)
 800515c:	4a10      	ldr	r2, [pc, #64]	; (80051a0 <prvCheckForValidListAndQueue+0x64>)
 800515e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005160:	4b12      	ldr	r3, [pc, #72]	; (80051ac <prvCheckForValidListAndQueue+0x70>)
 8005162:	4a10      	ldr	r2, [pc, #64]	; (80051a4 <prvCheckForValidListAndQueue+0x68>)
 8005164:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005166:	2300      	movs	r3, #0
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	4b11      	ldr	r3, [pc, #68]	; (80051b0 <prvCheckForValidListAndQueue+0x74>)
 800516c:	4a11      	ldr	r2, [pc, #68]	; (80051b4 <prvCheckForValidListAndQueue+0x78>)
 800516e:	2110      	movs	r1, #16
 8005170:	200a      	movs	r0, #10
 8005172:	f7fe f929 	bl	80033c8 <xQueueGenericCreateStatic>
 8005176:	4603      	mov	r3, r0
 8005178:	4a08      	ldr	r2, [pc, #32]	; (800519c <prvCheckForValidListAndQueue+0x60>)
 800517a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800517c:	4b07      	ldr	r3, [pc, #28]	; (800519c <prvCheckForValidListAndQueue+0x60>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d005      	beq.n	8005190 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005184:	4b05      	ldr	r3, [pc, #20]	; (800519c <prvCheckForValidListAndQueue+0x60>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	490b      	ldr	r1, [pc, #44]	; (80051b8 <prvCheckForValidListAndQueue+0x7c>)
 800518a:	4618      	mov	r0, r3
 800518c:	f7fe fd42 	bl	8003c14 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005190:	f7fd ffc0 	bl	8003114 <vPortExitCritical>
}
 8005194:	bf00      	nop
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	2400a028 	.word	0x2400a028
 80051a0:	24009ff8 	.word	0x24009ff8
 80051a4:	2400a00c 	.word	0x2400a00c
 80051a8:	2400a020 	.word	0x2400a020
 80051ac:	2400a024 	.word	0x2400a024
 80051b0:	2400a0d4 	.word	0x2400a0d4
 80051b4:	2400a034 	.word	0x2400a034
 80051b8:	080053f4 	.word	0x080053f4

080051bc <__libc_init_array>:
 80051bc:	b570      	push	{r4, r5, r6, lr}
 80051be:	4d0d      	ldr	r5, [pc, #52]	; (80051f4 <__libc_init_array+0x38>)
 80051c0:	4c0d      	ldr	r4, [pc, #52]	; (80051f8 <__libc_init_array+0x3c>)
 80051c2:	1b64      	subs	r4, r4, r5
 80051c4:	10a4      	asrs	r4, r4, #2
 80051c6:	2600      	movs	r6, #0
 80051c8:	42a6      	cmp	r6, r4
 80051ca:	d109      	bne.n	80051e0 <__libc_init_array+0x24>
 80051cc:	4d0b      	ldr	r5, [pc, #44]	; (80051fc <__libc_init_array+0x40>)
 80051ce:	4c0c      	ldr	r4, [pc, #48]	; (8005200 <__libc_init_array+0x44>)
 80051d0:	f000 f8f6 	bl	80053c0 <_init>
 80051d4:	1b64      	subs	r4, r4, r5
 80051d6:	10a4      	asrs	r4, r4, #2
 80051d8:	2600      	movs	r6, #0
 80051da:	42a6      	cmp	r6, r4
 80051dc:	d105      	bne.n	80051ea <__libc_init_array+0x2e>
 80051de:	bd70      	pop	{r4, r5, r6, pc}
 80051e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80051e4:	4798      	blx	r3
 80051e6:	3601      	adds	r6, #1
 80051e8:	e7ee      	b.n	80051c8 <__libc_init_array+0xc>
 80051ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80051ee:	4798      	blx	r3
 80051f0:	3601      	adds	r6, #1
 80051f2:	e7f2      	b.n	80051da <__libc_init_array+0x1e>
 80051f4:	08005490 	.word	0x08005490
 80051f8:	08005490 	.word	0x08005490
 80051fc:	08005490 	.word	0x08005490
 8005200:	08005494 	.word	0x08005494

08005204 <__retarget_lock_acquire_recursive>:
 8005204:	4770      	bx	lr

08005206 <__retarget_lock_release_recursive>:
 8005206:	4770      	bx	lr

08005208 <memcpy>:
 8005208:	440a      	add	r2, r1
 800520a:	4291      	cmp	r1, r2
 800520c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005210:	d100      	bne.n	8005214 <memcpy+0xc>
 8005212:	4770      	bx	lr
 8005214:	b510      	push	{r4, lr}
 8005216:	f811 4b01 	ldrb.w	r4, [r1], #1
 800521a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800521e:	4291      	cmp	r1, r2
 8005220:	d1f9      	bne.n	8005216 <memcpy+0xe>
 8005222:	bd10      	pop	{r4, pc}

08005224 <memset>:
 8005224:	4402      	add	r2, r0
 8005226:	4603      	mov	r3, r0
 8005228:	4293      	cmp	r3, r2
 800522a:	d100      	bne.n	800522e <memset+0xa>
 800522c:	4770      	bx	lr
 800522e:	f803 1b01 	strb.w	r1, [r3], #1
 8005232:	e7f9      	b.n	8005228 <memset+0x4>

08005234 <cleanup_glue>:
 8005234:	b538      	push	{r3, r4, r5, lr}
 8005236:	460c      	mov	r4, r1
 8005238:	6809      	ldr	r1, [r1, #0]
 800523a:	4605      	mov	r5, r0
 800523c:	b109      	cbz	r1, 8005242 <cleanup_glue+0xe>
 800523e:	f7ff fff9 	bl	8005234 <cleanup_glue>
 8005242:	4621      	mov	r1, r4
 8005244:	4628      	mov	r0, r5
 8005246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800524a:	f000 b869 	b.w	8005320 <_free_r>
	...

08005250 <_reclaim_reent>:
 8005250:	4b2c      	ldr	r3, [pc, #176]	; (8005304 <_reclaim_reent+0xb4>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4283      	cmp	r3, r0
 8005256:	b570      	push	{r4, r5, r6, lr}
 8005258:	4604      	mov	r4, r0
 800525a:	d051      	beq.n	8005300 <_reclaim_reent+0xb0>
 800525c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800525e:	b143      	cbz	r3, 8005272 <_reclaim_reent+0x22>
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d14a      	bne.n	80052fc <_reclaim_reent+0xac>
 8005266:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005268:	6819      	ldr	r1, [r3, #0]
 800526a:	b111      	cbz	r1, 8005272 <_reclaim_reent+0x22>
 800526c:	4620      	mov	r0, r4
 800526e:	f000 f857 	bl	8005320 <_free_r>
 8005272:	6961      	ldr	r1, [r4, #20]
 8005274:	b111      	cbz	r1, 800527c <_reclaim_reent+0x2c>
 8005276:	4620      	mov	r0, r4
 8005278:	f000 f852 	bl	8005320 <_free_r>
 800527c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800527e:	b111      	cbz	r1, 8005286 <_reclaim_reent+0x36>
 8005280:	4620      	mov	r0, r4
 8005282:	f000 f84d 	bl	8005320 <_free_r>
 8005286:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005288:	b111      	cbz	r1, 8005290 <_reclaim_reent+0x40>
 800528a:	4620      	mov	r0, r4
 800528c:	f000 f848 	bl	8005320 <_free_r>
 8005290:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005292:	b111      	cbz	r1, 800529a <_reclaim_reent+0x4a>
 8005294:	4620      	mov	r0, r4
 8005296:	f000 f843 	bl	8005320 <_free_r>
 800529a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800529c:	b111      	cbz	r1, 80052a4 <_reclaim_reent+0x54>
 800529e:	4620      	mov	r0, r4
 80052a0:	f000 f83e 	bl	8005320 <_free_r>
 80052a4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80052a6:	b111      	cbz	r1, 80052ae <_reclaim_reent+0x5e>
 80052a8:	4620      	mov	r0, r4
 80052aa:	f000 f839 	bl	8005320 <_free_r>
 80052ae:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80052b0:	b111      	cbz	r1, 80052b8 <_reclaim_reent+0x68>
 80052b2:	4620      	mov	r0, r4
 80052b4:	f000 f834 	bl	8005320 <_free_r>
 80052b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052ba:	b111      	cbz	r1, 80052c2 <_reclaim_reent+0x72>
 80052bc:	4620      	mov	r0, r4
 80052be:	f000 f82f 	bl	8005320 <_free_r>
 80052c2:	69a3      	ldr	r3, [r4, #24]
 80052c4:	b1e3      	cbz	r3, 8005300 <_reclaim_reent+0xb0>
 80052c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80052c8:	4620      	mov	r0, r4
 80052ca:	4798      	blx	r3
 80052cc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80052ce:	b1b9      	cbz	r1, 8005300 <_reclaim_reent+0xb0>
 80052d0:	4620      	mov	r0, r4
 80052d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80052d6:	f7ff bfad 	b.w	8005234 <cleanup_glue>
 80052da:	5949      	ldr	r1, [r1, r5]
 80052dc:	b941      	cbnz	r1, 80052f0 <_reclaim_reent+0xa0>
 80052de:	3504      	adds	r5, #4
 80052e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052e2:	2d80      	cmp	r5, #128	; 0x80
 80052e4:	68d9      	ldr	r1, [r3, #12]
 80052e6:	d1f8      	bne.n	80052da <_reclaim_reent+0x8a>
 80052e8:	4620      	mov	r0, r4
 80052ea:	f000 f819 	bl	8005320 <_free_r>
 80052ee:	e7ba      	b.n	8005266 <_reclaim_reent+0x16>
 80052f0:	680e      	ldr	r6, [r1, #0]
 80052f2:	4620      	mov	r0, r4
 80052f4:	f000 f814 	bl	8005320 <_free_r>
 80052f8:	4631      	mov	r1, r6
 80052fa:	e7ef      	b.n	80052dc <_reclaim_reent+0x8c>
 80052fc:	2500      	movs	r5, #0
 80052fe:	e7ef      	b.n	80052e0 <_reclaim_reent+0x90>
 8005300:	bd70      	pop	{r4, r5, r6, pc}
 8005302:	bf00      	nop
 8005304:	24000014 	.word	0x24000014

08005308 <__malloc_lock>:
 8005308:	4801      	ldr	r0, [pc, #4]	; (8005310 <__malloc_lock+0x8>)
 800530a:	f7ff bf7b 	b.w	8005204 <__retarget_lock_acquire_recursive>
 800530e:	bf00      	nop
 8005310:	2400a1c0 	.word	0x2400a1c0

08005314 <__malloc_unlock>:
 8005314:	4801      	ldr	r0, [pc, #4]	; (800531c <__malloc_unlock+0x8>)
 8005316:	f7ff bf76 	b.w	8005206 <__retarget_lock_release_recursive>
 800531a:	bf00      	nop
 800531c:	2400a1c0 	.word	0x2400a1c0

08005320 <_free_r>:
 8005320:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005322:	2900      	cmp	r1, #0
 8005324:	d048      	beq.n	80053b8 <_free_r+0x98>
 8005326:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800532a:	9001      	str	r0, [sp, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	f1a1 0404 	sub.w	r4, r1, #4
 8005332:	bfb8      	it	lt
 8005334:	18e4      	addlt	r4, r4, r3
 8005336:	f7ff ffe7 	bl	8005308 <__malloc_lock>
 800533a:	4a20      	ldr	r2, [pc, #128]	; (80053bc <_free_r+0x9c>)
 800533c:	9801      	ldr	r0, [sp, #4]
 800533e:	6813      	ldr	r3, [r2, #0]
 8005340:	4615      	mov	r5, r2
 8005342:	b933      	cbnz	r3, 8005352 <_free_r+0x32>
 8005344:	6063      	str	r3, [r4, #4]
 8005346:	6014      	str	r4, [r2, #0]
 8005348:	b003      	add	sp, #12
 800534a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800534e:	f7ff bfe1 	b.w	8005314 <__malloc_unlock>
 8005352:	42a3      	cmp	r3, r4
 8005354:	d90b      	bls.n	800536e <_free_r+0x4e>
 8005356:	6821      	ldr	r1, [r4, #0]
 8005358:	1862      	adds	r2, r4, r1
 800535a:	4293      	cmp	r3, r2
 800535c:	bf04      	itt	eq
 800535e:	681a      	ldreq	r2, [r3, #0]
 8005360:	685b      	ldreq	r3, [r3, #4]
 8005362:	6063      	str	r3, [r4, #4]
 8005364:	bf04      	itt	eq
 8005366:	1852      	addeq	r2, r2, r1
 8005368:	6022      	streq	r2, [r4, #0]
 800536a:	602c      	str	r4, [r5, #0]
 800536c:	e7ec      	b.n	8005348 <_free_r+0x28>
 800536e:	461a      	mov	r2, r3
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	b10b      	cbz	r3, 8005378 <_free_r+0x58>
 8005374:	42a3      	cmp	r3, r4
 8005376:	d9fa      	bls.n	800536e <_free_r+0x4e>
 8005378:	6811      	ldr	r1, [r2, #0]
 800537a:	1855      	adds	r5, r2, r1
 800537c:	42a5      	cmp	r5, r4
 800537e:	d10b      	bne.n	8005398 <_free_r+0x78>
 8005380:	6824      	ldr	r4, [r4, #0]
 8005382:	4421      	add	r1, r4
 8005384:	1854      	adds	r4, r2, r1
 8005386:	42a3      	cmp	r3, r4
 8005388:	6011      	str	r1, [r2, #0]
 800538a:	d1dd      	bne.n	8005348 <_free_r+0x28>
 800538c:	681c      	ldr	r4, [r3, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	6053      	str	r3, [r2, #4]
 8005392:	4421      	add	r1, r4
 8005394:	6011      	str	r1, [r2, #0]
 8005396:	e7d7      	b.n	8005348 <_free_r+0x28>
 8005398:	d902      	bls.n	80053a0 <_free_r+0x80>
 800539a:	230c      	movs	r3, #12
 800539c:	6003      	str	r3, [r0, #0]
 800539e:	e7d3      	b.n	8005348 <_free_r+0x28>
 80053a0:	6825      	ldr	r5, [r4, #0]
 80053a2:	1961      	adds	r1, r4, r5
 80053a4:	428b      	cmp	r3, r1
 80053a6:	bf04      	itt	eq
 80053a8:	6819      	ldreq	r1, [r3, #0]
 80053aa:	685b      	ldreq	r3, [r3, #4]
 80053ac:	6063      	str	r3, [r4, #4]
 80053ae:	bf04      	itt	eq
 80053b0:	1949      	addeq	r1, r1, r5
 80053b2:	6021      	streq	r1, [r4, #0]
 80053b4:	6054      	str	r4, [r2, #4]
 80053b6:	e7c7      	b.n	8005348 <_free_r+0x28>
 80053b8:	b003      	add	sp, #12
 80053ba:	bd30      	pop	{r4, r5, pc}
 80053bc:	2400a124 	.word	0x2400a124

080053c0 <_init>:
 80053c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c2:	bf00      	nop
 80053c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053c6:	bc08      	pop	{r3}
 80053c8:	469e      	mov	lr, r3
 80053ca:	4770      	bx	lr

080053cc <_fini>:
 80053cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ce:	bf00      	nop
 80053d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053d2:	bc08      	pop	{r3}
 80053d4:	469e      	mov	lr, r3
 80053d6:	4770      	bx	lr
