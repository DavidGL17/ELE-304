
LAB_1_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fcc4  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  0810ff64  0810ff64  0001ff64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0811033c  0811033c  0002033c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08110344  08110344  00020344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08110348  08110348  00020348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000080  10000000  0811034c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00022a44  10000080  081103cc  00030080  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  10022ac4  081103cc  00032ac4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003fea1  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006565  00000000  00000000  0006ff51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ee8  00000000  00000000  000764b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001cd0  00000000  00000000  000783a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ffac  00000000  00000000  0007a070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000285e0  00000000  00000000  000ba01c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001a132b  00000000  00000000  000e25fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00283927  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000086a8  00000000  00000000  0028397c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000080 	.word	0x10000080
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810ff4c 	.word	0x0810ff4c

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000084 	.word	0x10000084
 81002dc:	0810ff4c 	.word	0x0810ff4c

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_uldivmod>:
 8100390:	b953      	cbnz	r3, 81003a8 <__aeabi_uldivmod+0x18>
 8100392:	b94a      	cbnz	r2, 81003a8 <__aeabi_uldivmod+0x18>
 8100394:	2900      	cmp	r1, #0
 8100396:	bf08      	it	eq
 8100398:	2800      	cmpeq	r0, #0
 810039a:	bf1c      	itt	ne
 810039c:	f04f 31ff 	movne.w	r1, #4294967295
 81003a0:	f04f 30ff 	movne.w	r0, #4294967295
 81003a4:	f000 b96e 	b.w	8100684 <__aeabi_idiv0>
 81003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 81003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81003b0:	f000 f806 	bl	81003c0 <__udivmoddi4>
 81003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 81003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81003bc:	b004      	add	sp, #16
 81003be:	4770      	bx	lr

081003c0 <__udivmoddi4>:
 81003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81003c4:	9d08      	ldr	r5, [sp, #32]
 81003c6:	4604      	mov	r4, r0
 81003c8:	468c      	mov	ip, r1
 81003ca:	2b00      	cmp	r3, #0
 81003cc:	f040 8083 	bne.w	81004d6 <__udivmoddi4+0x116>
 81003d0:	428a      	cmp	r2, r1
 81003d2:	4617      	mov	r7, r2
 81003d4:	d947      	bls.n	8100466 <__udivmoddi4+0xa6>
 81003d6:	fab2 f282 	clz	r2, r2
 81003da:	b142      	cbz	r2, 81003ee <__udivmoddi4+0x2e>
 81003dc:	f1c2 0020 	rsb	r0, r2, #32
 81003e0:	fa24 f000 	lsr.w	r0, r4, r0
 81003e4:	4091      	lsls	r1, r2
 81003e6:	4097      	lsls	r7, r2
 81003e8:	ea40 0c01 	orr.w	ip, r0, r1
 81003ec:	4094      	lsls	r4, r2
 81003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 81003f2:	0c23      	lsrs	r3, r4, #16
 81003f4:	fbbc f6f8 	udiv	r6, ip, r8
 81003f8:	fa1f fe87 	uxth.w	lr, r7
 81003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8100400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100404:	fb06 f10e 	mul.w	r1, r6, lr
 8100408:	4299      	cmp	r1, r3
 810040a:	d909      	bls.n	8100420 <__udivmoddi4+0x60>
 810040c:	18fb      	adds	r3, r7, r3
 810040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8100412:	f080 8119 	bcs.w	8100648 <__udivmoddi4+0x288>
 8100416:	4299      	cmp	r1, r3
 8100418:	f240 8116 	bls.w	8100648 <__udivmoddi4+0x288>
 810041c:	3e02      	subs	r6, #2
 810041e:	443b      	add	r3, r7
 8100420:	1a5b      	subs	r3, r3, r1
 8100422:	b2a4      	uxth	r4, r4
 8100424:	fbb3 f0f8 	udiv	r0, r3, r8
 8100428:	fb08 3310 	mls	r3, r8, r0, r3
 810042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100430:	fb00 fe0e 	mul.w	lr, r0, lr
 8100434:	45a6      	cmp	lr, r4
 8100436:	d909      	bls.n	810044c <__udivmoddi4+0x8c>
 8100438:	193c      	adds	r4, r7, r4
 810043a:	f100 33ff 	add.w	r3, r0, #4294967295
 810043e:	f080 8105 	bcs.w	810064c <__udivmoddi4+0x28c>
 8100442:	45a6      	cmp	lr, r4
 8100444:	f240 8102 	bls.w	810064c <__udivmoddi4+0x28c>
 8100448:	3802      	subs	r0, #2
 810044a:	443c      	add	r4, r7
 810044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100450:	eba4 040e 	sub.w	r4, r4, lr
 8100454:	2600      	movs	r6, #0
 8100456:	b11d      	cbz	r5, 8100460 <__udivmoddi4+0xa0>
 8100458:	40d4      	lsrs	r4, r2
 810045a:	2300      	movs	r3, #0
 810045c:	e9c5 4300 	strd	r4, r3, [r5]
 8100460:	4631      	mov	r1, r6
 8100462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100466:	b902      	cbnz	r2, 810046a <__udivmoddi4+0xaa>
 8100468:	deff      	udf	#255	; 0xff
 810046a:	fab2 f282 	clz	r2, r2
 810046e:	2a00      	cmp	r2, #0
 8100470:	d150      	bne.n	8100514 <__udivmoddi4+0x154>
 8100472:	1bcb      	subs	r3, r1, r7
 8100474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100478:	fa1f f887 	uxth.w	r8, r7
 810047c:	2601      	movs	r6, #1
 810047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8100482:	0c21      	lsrs	r1, r4, #16
 8100484:	fb0e 331c 	mls	r3, lr, ip, r3
 8100488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 810048c:	fb08 f30c 	mul.w	r3, r8, ip
 8100490:	428b      	cmp	r3, r1
 8100492:	d907      	bls.n	81004a4 <__udivmoddi4+0xe4>
 8100494:	1879      	adds	r1, r7, r1
 8100496:	f10c 30ff 	add.w	r0, ip, #4294967295
 810049a:	d202      	bcs.n	81004a2 <__udivmoddi4+0xe2>
 810049c:	428b      	cmp	r3, r1
 810049e:	f200 80e9 	bhi.w	8100674 <__udivmoddi4+0x2b4>
 81004a2:	4684      	mov	ip, r0
 81004a4:	1ac9      	subs	r1, r1, r3
 81004a6:	b2a3      	uxth	r3, r4
 81004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 81004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 81004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 81004b4:	fb08 f800 	mul.w	r8, r8, r0
 81004b8:	45a0      	cmp	r8, r4
 81004ba:	d907      	bls.n	81004cc <__udivmoddi4+0x10c>
 81004bc:	193c      	adds	r4, r7, r4
 81004be:	f100 33ff 	add.w	r3, r0, #4294967295
 81004c2:	d202      	bcs.n	81004ca <__udivmoddi4+0x10a>
 81004c4:	45a0      	cmp	r8, r4
 81004c6:	f200 80d9 	bhi.w	810067c <__udivmoddi4+0x2bc>
 81004ca:	4618      	mov	r0, r3
 81004cc:	eba4 0408 	sub.w	r4, r4, r8
 81004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 81004d4:	e7bf      	b.n	8100456 <__udivmoddi4+0x96>
 81004d6:	428b      	cmp	r3, r1
 81004d8:	d909      	bls.n	81004ee <__udivmoddi4+0x12e>
 81004da:	2d00      	cmp	r5, #0
 81004dc:	f000 80b1 	beq.w	8100642 <__udivmoddi4+0x282>
 81004e0:	2600      	movs	r6, #0
 81004e2:	e9c5 0100 	strd	r0, r1, [r5]
 81004e6:	4630      	mov	r0, r6
 81004e8:	4631      	mov	r1, r6
 81004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81004ee:	fab3 f683 	clz	r6, r3
 81004f2:	2e00      	cmp	r6, #0
 81004f4:	d14a      	bne.n	810058c <__udivmoddi4+0x1cc>
 81004f6:	428b      	cmp	r3, r1
 81004f8:	d302      	bcc.n	8100500 <__udivmoddi4+0x140>
 81004fa:	4282      	cmp	r2, r0
 81004fc:	f200 80b8 	bhi.w	8100670 <__udivmoddi4+0x2b0>
 8100500:	1a84      	subs	r4, r0, r2
 8100502:	eb61 0103 	sbc.w	r1, r1, r3
 8100506:	2001      	movs	r0, #1
 8100508:	468c      	mov	ip, r1
 810050a:	2d00      	cmp	r5, #0
 810050c:	d0a8      	beq.n	8100460 <__udivmoddi4+0xa0>
 810050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8100512:	e7a5      	b.n	8100460 <__udivmoddi4+0xa0>
 8100514:	f1c2 0320 	rsb	r3, r2, #32
 8100518:	fa20 f603 	lsr.w	r6, r0, r3
 810051c:	4097      	lsls	r7, r2
 810051e:	fa01 f002 	lsl.w	r0, r1, r2
 8100522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100526:	40d9      	lsrs	r1, r3
 8100528:	4330      	orrs	r0, r6
 810052a:	0c03      	lsrs	r3, r0, #16
 810052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8100530:	fa1f f887 	uxth.w	r8, r7
 8100534:	fb0e 1116 	mls	r1, lr, r6, r1
 8100538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 810053c:	fb06 f108 	mul.w	r1, r6, r8
 8100540:	4299      	cmp	r1, r3
 8100542:	fa04 f402 	lsl.w	r4, r4, r2
 8100546:	d909      	bls.n	810055c <__udivmoddi4+0x19c>
 8100548:	18fb      	adds	r3, r7, r3
 810054a:	f106 3cff 	add.w	ip, r6, #4294967295
 810054e:	f080 808d 	bcs.w	810066c <__udivmoddi4+0x2ac>
 8100552:	4299      	cmp	r1, r3
 8100554:	f240 808a 	bls.w	810066c <__udivmoddi4+0x2ac>
 8100558:	3e02      	subs	r6, #2
 810055a:	443b      	add	r3, r7
 810055c:	1a5b      	subs	r3, r3, r1
 810055e:	b281      	uxth	r1, r0
 8100560:	fbb3 f0fe 	udiv	r0, r3, lr
 8100564:	fb0e 3310 	mls	r3, lr, r0, r3
 8100568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 810056c:	fb00 f308 	mul.w	r3, r0, r8
 8100570:	428b      	cmp	r3, r1
 8100572:	d907      	bls.n	8100584 <__udivmoddi4+0x1c4>
 8100574:	1879      	adds	r1, r7, r1
 8100576:	f100 3cff 	add.w	ip, r0, #4294967295
 810057a:	d273      	bcs.n	8100664 <__udivmoddi4+0x2a4>
 810057c:	428b      	cmp	r3, r1
 810057e:	d971      	bls.n	8100664 <__udivmoddi4+0x2a4>
 8100580:	3802      	subs	r0, #2
 8100582:	4439      	add	r1, r7
 8100584:	1acb      	subs	r3, r1, r3
 8100586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 810058a:	e778      	b.n	810047e <__udivmoddi4+0xbe>
 810058c:	f1c6 0c20 	rsb	ip, r6, #32
 8100590:	fa03 f406 	lsl.w	r4, r3, r6
 8100594:	fa22 f30c 	lsr.w	r3, r2, ip
 8100598:	431c      	orrs	r4, r3
 810059a:	fa20 f70c 	lsr.w	r7, r0, ip
 810059e:	fa01 f306 	lsl.w	r3, r1, r6
 81005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 81005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 81005aa:	431f      	orrs	r7, r3
 81005ac:	0c3b      	lsrs	r3, r7, #16
 81005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 81005b2:	fa1f f884 	uxth.w	r8, r4
 81005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 81005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 81005be:	fb09 fa08 	mul.w	sl, r9, r8
 81005c2:	458a      	cmp	sl, r1
 81005c4:	fa02 f206 	lsl.w	r2, r2, r6
 81005c8:	fa00 f306 	lsl.w	r3, r0, r6
 81005cc:	d908      	bls.n	81005e0 <__udivmoddi4+0x220>
 81005ce:	1861      	adds	r1, r4, r1
 81005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 81005d4:	d248      	bcs.n	8100668 <__udivmoddi4+0x2a8>
 81005d6:	458a      	cmp	sl, r1
 81005d8:	d946      	bls.n	8100668 <__udivmoddi4+0x2a8>
 81005da:	f1a9 0902 	sub.w	r9, r9, #2
 81005de:	4421      	add	r1, r4
 81005e0:	eba1 010a 	sub.w	r1, r1, sl
 81005e4:	b2bf      	uxth	r7, r7
 81005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 81005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 81005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 81005f2:	fb00 f808 	mul.w	r8, r0, r8
 81005f6:	45b8      	cmp	r8, r7
 81005f8:	d907      	bls.n	810060a <__udivmoddi4+0x24a>
 81005fa:	19e7      	adds	r7, r4, r7
 81005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8100600:	d22e      	bcs.n	8100660 <__udivmoddi4+0x2a0>
 8100602:	45b8      	cmp	r8, r7
 8100604:	d92c      	bls.n	8100660 <__udivmoddi4+0x2a0>
 8100606:	3802      	subs	r0, #2
 8100608:	4427      	add	r7, r4
 810060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 810060e:	eba7 0708 	sub.w	r7, r7, r8
 8100612:	fba0 8902 	umull	r8, r9, r0, r2
 8100616:	454f      	cmp	r7, r9
 8100618:	46c6      	mov	lr, r8
 810061a:	4649      	mov	r1, r9
 810061c:	d31a      	bcc.n	8100654 <__udivmoddi4+0x294>
 810061e:	d017      	beq.n	8100650 <__udivmoddi4+0x290>
 8100620:	b15d      	cbz	r5, 810063a <__udivmoddi4+0x27a>
 8100622:	ebb3 020e 	subs.w	r2, r3, lr
 8100626:	eb67 0701 	sbc.w	r7, r7, r1
 810062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 810062e:	40f2      	lsrs	r2, r6
 8100630:	ea4c 0202 	orr.w	r2, ip, r2
 8100634:	40f7      	lsrs	r7, r6
 8100636:	e9c5 2700 	strd	r2, r7, [r5]
 810063a:	2600      	movs	r6, #0
 810063c:	4631      	mov	r1, r6
 810063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100642:	462e      	mov	r6, r5
 8100644:	4628      	mov	r0, r5
 8100646:	e70b      	b.n	8100460 <__udivmoddi4+0xa0>
 8100648:	4606      	mov	r6, r0
 810064a:	e6e9      	b.n	8100420 <__udivmoddi4+0x60>
 810064c:	4618      	mov	r0, r3
 810064e:	e6fd      	b.n	810044c <__udivmoddi4+0x8c>
 8100650:	4543      	cmp	r3, r8
 8100652:	d2e5      	bcs.n	8100620 <__udivmoddi4+0x260>
 8100654:	ebb8 0e02 	subs.w	lr, r8, r2
 8100658:	eb69 0104 	sbc.w	r1, r9, r4
 810065c:	3801      	subs	r0, #1
 810065e:	e7df      	b.n	8100620 <__udivmoddi4+0x260>
 8100660:	4608      	mov	r0, r1
 8100662:	e7d2      	b.n	810060a <__udivmoddi4+0x24a>
 8100664:	4660      	mov	r0, ip
 8100666:	e78d      	b.n	8100584 <__udivmoddi4+0x1c4>
 8100668:	4681      	mov	r9, r0
 810066a:	e7b9      	b.n	81005e0 <__udivmoddi4+0x220>
 810066c:	4666      	mov	r6, ip
 810066e:	e775      	b.n	810055c <__udivmoddi4+0x19c>
 8100670:	4630      	mov	r0, r6
 8100672:	e74a      	b.n	810050a <__udivmoddi4+0x14a>
 8100674:	f1ac 0c02 	sub.w	ip, ip, #2
 8100678:	4439      	add	r1, r7
 810067a:	e713      	b.n	81004a4 <__udivmoddi4+0xe4>
 810067c:	3802      	subs	r0, #2
 810067e:	443c      	add	r4, r7
 8100680:	e724      	b.n	81004cc <__udivmoddi4+0x10c>
 8100682:	bf00      	nop

08100684 <__aeabi_idiv0>:
 8100684:	4770      	bx	lr
 8100686:	bf00      	nop

08100688 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100688:	b480      	push	{r7}
 810068a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 810068c:	4b0b      	ldr	r3, [pc, #44]	; (81006bc <SystemInit+0x34>)
 810068e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8100692:	4a0a      	ldr	r2, [pc, #40]	; (81006bc <SystemInit+0x34>)
 8100694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 810069c:	4b07      	ldr	r3, [pc, #28]	; (81006bc <SystemInit+0x34>)
 810069e:	691b      	ldr	r3, [r3, #16]
 81006a0:	4a06      	ldr	r2, [pc, #24]	; (81006bc <SystemInit+0x34>)
 81006a2:	f043 0310 	orr.w	r3, r3, #16
 81006a6:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 81006a8:	4b04      	ldr	r3, [pc, #16]	; (81006bc <SystemInit+0x34>)
 81006aa:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 81006ae:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 81006b0:	bf00      	nop
 81006b2:	46bd      	mov	sp, r7
 81006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006b8:	4770      	bx	lr
 81006ba:	bf00      	nop
 81006bc:	e000ed00 	.word	0xe000ed00

081006c0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 81006c0:	b580      	push	{r7, lr}
 81006c2:	b08a      	sub	sp, #40	; 0x28
 81006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 81006c6:	f107 031c 	add.w	r3, r7, #28
 81006ca:	2200      	movs	r2, #0
 81006cc:	601a      	str	r2, [r3, #0]
 81006ce:	605a      	str	r2, [r3, #4]
 81006d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 81006d2:	463b      	mov	r3, r7
 81006d4:	2200      	movs	r2, #0
 81006d6:	601a      	str	r2, [r3, #0]
 81006d8:	605a      	str	r2, [r3, #4]
 81006da:	609a      	str	r2, [r3, #8]
 81006dc:	60da      	str	r2, [r3, #12]
 81006de:	611a      	str	r2, [r3, #16]
 81006e0:	615a      	str	r2, [r3, #20]
 81006e2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 81006e4:	4b31      	ldr	r3, [pc, #196]	; (81007ac <MX_ADC1_Init+0xec>)
 81006e6:	4a32      	ldr	r2, [pc, #200]	; (81007b0 <MX_ADC1_Init+0xf0>)
 81006e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 81006ea:	4b30      	ldr	r3, [pc, #192]	; (81007ac <MX_ADC1_Init+0xec>)
 81006ec:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 81006f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 81006f2:	4b2e      	ldr	r3, [pc, #184]	; (81007ac <MX_ADC1_Init+0xec>)
 81006f4:	2200      	movs	r2, #0
 81006f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 81006f8:	4b2c      	ldr	r3, [pc, #176]	; (81007ac <MX_ADC1_Init+0xec>)
 81006fa:	2200      	movs	r2, #0
 81006fc:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 81006fe:	4b2b      	ldr	r3, [pc, #172]	; (81007ac <MX_ADC1_Init+0xec>)
 8100700:	2204      	movs	r2, #4
 8100702:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8100704:	4b29      	ldr	r3, [pc, #164]	; (81007ac <MX_ADC1_Init+0xec>)
 8100706:	2200      	movs	r2, #0
 8100708:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 810070a:	4b28      	ldr	r3, [pc, #160]	; (81007ac <MX_ADC1_Init+0xec>)
 810070c:	2200      	movs	r2, #0
 810070e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8100710:	4b26      	ldr	r3, [pc, #152]	; (81007ac <MX_ADC1_Init+0xec>)
 8100712:	2201      	movs	r2, #1
 8100714:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8100716:	4b25      	ldr	r3, [pc, #148]	; (81007ac <MX_ADC1_Init+0xec>)
 8100718:	2200      	movs	r2, #0
 810071a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 810071c:	4b23      	ldr	r3, [pc, #140]	; (81007ac <MX_ADC1_Init+0xec>)
 810071e:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8100722:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8100724:	4b21      	ldr	r3, [pc, #132]	; (81007ac <MX_ADC1_Init+0xec>)
 8100726:	f44f 6280 	mov.w	r2, #1024	; 0x400
 810072a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 810072c:	4b1f      	ldr	r3, [pc, #124]	; (81007ac <MX_ADC1_Init+0xec>)
 810072e:	2203      	movs	r2, #3
 8100730:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8100732:	4b1e      	ldr	r3, [pc, #120]	; (81007ac <MX_ADC1_Init+0xec>)
 8100734:	2200      	movs	r2, #0
 8100736:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8100738:	4b1c      	ldr	r3, [pc, #112]	; (81007ac <MX_ADC1_Init+0xec>)
 810073a:	2200      	movs	r2, #0
 810073c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 810073e:	4b1b      	ldr	r3, [pc, #108]	; (81007ac <MX_ADC1_Init+0xec>)
 8100740:	2200      	movs	r2, #0
 8100742:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8100746:	4819      	ldr	r0, [pc, #100]	; (81007ac <MX_ADC1_Init+0xec>)
 8100748:	f001 fa92 	bl	8101c70 <HAL_ADC_Init>
 810074c:	4603      	mov	r3, r0
 810074e:	2b00      	cmp	r3, #0
 8100750:	d001      	beq.n	8100756 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8100752:	f000 f9df 	bl	8100b14 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8100756:	2300      	movs	r3, #0
 8100758:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 810075a:	f107 031c 	add.w	r3, r7, #28
 810075e:	4619      	mov	r1, r3
 8100760:	4812      	ldr	r0, [pc, #72]	; (81007ac <MX_ADC1_Init+0xec>)
 8100762:	f002 ff13 	bl	810358c <HAL_ADCEx_MultiModeConfigChannel>
 8100766:	4603      	mov	r3, r0
 8100768:	2b00      	cmp	r3, #0
 810076a:	d001      	beq.n	8100770 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 810076c:	f000 f9d2 	bl	8100b14 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8100770:	4b10      	ldr	r3, [pc, #64]	; (81007b4 <MX_ADC1_Init+0xf4>)
 8100772:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8100774:	2306      	movs	r3, #6
 8100776:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8100778:	2300      	movs	r3, #0
 810077a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 810077c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8100780:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8100782:	2304      	movs	r3, #4
 8100784:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8100786:	2300      	movs	r3, #0
 8100788:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 810078a:	2300      	movs	r3, #0
 810078c:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 810078e:	463b      	mov	r3, r7
 8100790:	4619      	mov	r1, r3
 8100792:	4806      	ldr	r0, [pc, #24]	; (81007ac <MX_ADC1_Init+0xec>)
 8100794:	f001 ff76 	bl	8102684 <HAL_ADC_ConfigChannel>
 8100798:	4603      	mov	r3, r0
 810079a:	2b00      	cmp	r3, #0
 810079c:	d001      	beq.n	81007a2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 810079e:	f000 f9b9 	bl	8100b14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 81007a2:	bf00      	nop
 81007a4:	3728      	adds	r7, #40	; 0x28
 81007a6:	46bd      	mov	sp, r7
 81007a8:	bd80      	pop	{r7, pc}
 81007aa:	bf00      	nop
 81007ac:	100227e8 	.word	0x100227e8
 81007b0:	40022000 	.word	0x40022000
 81007b4:	08600004 	.word	0x08600004

081007b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 81007b8:	b580      	push	{r7, lr}
 81007ba:	b0b8      	sub	sp, #224	; 0xe0
 81007bc:	af00      	add	r7, sp, #0
 81007be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81007c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81007c4:	2200      	movs	r2, #0
 81007c6:	601a      	str	r2, [r3, #0]
 81007c8:	605a      	str	r2, [r3, #4]
 81007ca:	609a      	str	r2, [r3, #8]
 81007cc:	60da      	str	r2, [r3, #12]
 81007ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81007d0:	f107 0310 	add.w	r3, r7, #16
 81007d4:	22bc      	movs	r2, #188	; 0xbc
 81007d6:	2100      	movs	r1, #0
 81007d8:	4618      	mov	r0, r3
 81007da:	f00e ff0d 	bl	810f5f8 <memset>
  if(adcHandle->Instance==ADC1)
 81007de:	687b      	ldr	r3, [r7, #4]
 81007e0:	681b      	ldr	r3, [r3, #0]
 81007e2:	4a47      	ldr	r2, [pc, #284]	; (8100900 <HAL_ADC_MspInit+0x148>)
 81007e4:	4293      	cmp	r3, r2
 81007e6:	f040 8086 	bne.w	81008f6 <HAL_ADC_MspInit+0x13e>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 81007ea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 81007ee:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 81007f0:	2304      	movs	r3, #4
 81007f2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 81007f4:	230a      	movs	r3, #10
 81007f6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 81007f8:	2304      	movs	r3, #4
 81007fa:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 81007fc:	2302      	movs	r3, #2
 81007fe:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8100800:	2302      	movs	r3, #2
 8100802:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8100804:	23c0      	movs	r3, #192	; 0xc0
 8100806:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8100808:	2320      	movs	r3, #32
 810080a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 810080c:	2300      	movs	r3, #0
 810080e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8100810:	2300      	movs	r3, #0
 8100812:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100816:	f107 0310 	add.w	r3, r7, #16
 810081a:	4618      	mov	r0, r3
 810081c:	f006 fb5c 	bl	8106ed8 <HAL_RCCEx_PeriphCLKConfig>
 8100820:	4603      	mov	r3, r0
 8100822:	2b00      	cmp	r3, #0
 8100824:	d001      	beq.n	810082a <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8100826:	f000 f975 	bl	8100b14 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 810082a:	4b36      	ldr	r3, [pc, #216]	; (8100904 <HAL_ADC_MspInit+0x14c>)
 810082c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100830:	4a34      	ldr	r2, [pc, #208]	; (8100904 <HAL_ADC_MspInit+0x14c>)
 8100832:	f043 0320 	orr.w	r3, r3, #32
 8100836:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810083a:	4b32      	ldr	r3, [pc, #200]	; (8100904 <HAL_ADC_MspInit+0x14c>)
 810083c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100840:	f003 0320 	and.w	r3, r3, #32
 8100844:	60fb      	str	r3, [r7, #12]
 8100846:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8100848:	4b2e      	ldr	r3, [pc, #184]	; (8100904 <HAL_ADC_MspInit+0x14c>)
 810084a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810084e:	4a2d      	ldr	r2, [pc, #180]	; (8100904 <HAL_ADC_MspInit+0x14c>)
 8100850:	f043 0320 	orr.w	r3, r3, #32
 8100854:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100858:	4b2a      	ldr	r3, [pc, #168]	; (8100904 <HAL_ADC_MspInit+0x14c>)
 810085a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810085e:	f003 0320 	and.w	r3, r3, #32
 8100862:	60bb      	str	r3, [r7, #8]
 8100864:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8100866:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810086a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 810086e:	2303      	movs	r3, #3
 8100870:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100874:	2300      	movs	r3, #0
 8100876:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 810087a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 810087e:	4619      	mov	r1, r3
 8100880:	4821      	ldr	r0, [pc, #132]	; (8100908 <HAL_ADC_MspInit+0x150>)
 8100882:	f005 fe91 	bl	81065a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream1;
 8100886:	4b21      	ldr	r3, [pc, #132]	; (810090c <HAL_ADC_MspInit+0x154>)
 8100888:	4a21      	ldr	r2, [pc, #132]	; (8100910 <HAL_ADC_MspInit+0x158>)
 810088a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 810088c:	4b1f      	ldr	r3, [pc, #124]	; (810090c <HAL_ADC_MspInit+0x154>)
 810088e:	2209      	movs	r2, #9
 8100890:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8100892:	4b1e      	ldr	r3, [pc, #120]	; (810090c <HAL_ADC_MspInit+0x154>)
 8100894:	2200      	movs	r2, #0
 8100896:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8100898:	4b1c      	ldr	r3, [pc, #112]	; (810090c <HAL_ADC_MspInit+0x154>)
 810089a:	2200      	movs	r2, #0
 810089c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 810089e:	4b1b      	ldr	r3, [pc, #108]	; (810090c <HAL_ADC_MspInit+0x154>)
 81008a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81008a4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 81008a6:	4b19      	ldr	r3, [pc, #100]	; (810090c <HAL_ADC_MspInit+0x154>)
 81008a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81008ac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 81008ae:	4b17      	ldr	r3, [pc, #92]	; (810090c <HAL_ADC_MspInit+0x154>)
 81008b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 81008b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 81008b6:	4b15      	ldr	r3, [pc, #84]	; (810090c <HAL_ADC_MspInit+0x154>)
 81008b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 81008bc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 81008be:	4b13      	ldr	r3, [pc, #76]	; (810090c <HAL_ADC_MspInit+0x154>)
 81008c0:	2200      	movs	r2, #0
 81008c2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81008c4:	4b11      	ldr	r3, [pc, #68]	; (810090c <HAL_ADC_MspInit+0x154>)
 81008c6:	2200      	movs	r2, #0
 81008c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 81008ca:	4810      	ldr	r0, [pc, #64]	; (810090c <HAL_ADC_MspInit+0x154>)
 81008cc:	f003 f834 	bl	8103938 <HAL_DMA_Init>
 81008d0:	4603      	mov	r3, r0
 81008d2:	2b00      	cmp	r3, #0
 81008d4:	d001      	beq.n	81008da <HAL_ADC_MspInit+0x122>
    {
      Error_Handler();
 81008d6:	f000 f91d 	bl	8100b14 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 81008da:	687b      	ldr	r3, [r7, #4]
 81008dc:	4a0b      	ldr	r2, [pc, #44]	; (810090c <HAL_ADC_MspInit+0x154>)
 81008de:	64da      	str	r2, [r3, #76]	; 0x4c
 81008e0:	4a0a      	ldr	r2, [pc, #40]	; (810090c <HAL_ADC_MspInit+0x154>)
 81008e2:	687b      	ldr	r3, [r7, #4]
 81008e4:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 81008e6:	2200      	movs	r2, #0
 81008e8:	2105      	movs	r1, #5
 81008ea:	2012      	movs	r0, #18
 81008ec:	f002 ffe8 	bl	81038c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 81008f0:	2012      	movs	r0, #18
 81008f2:	f002 ffff 	bl	81038f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 81008f6:	bf00      	nop
 81008f8:	37e0      	adds	r7, #224	; 0xe0
 81008fa:	46bd      	mov	sp, r7
 81008fc:	bd80      	pop	{r7, pc}
 81008fe:	bf00      	nop
 8100900:	40022000 	.word	0x40022000
 8100904:	58024400 	.word	0x58024400
 8100908:	58021400 	.word	0x58021400
 810090c:	1002284c 	.word	0x1002284c
 8100910:	40020028 	.word	0x40020028

08100914 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8100914:	b580      	push	{r7, lr}
 8100916:	b082      	sub	sp, #8
 8100918:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 810091a:	4b11      	ldr	r3, [pc, #68]	; (8100960 <MX_DMA_Init+0x4c>)
 810091c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100920:	4a0f      	ldr	r2, [pc, #60]	; (8100960 <MX_DMA_Init+0x4c>)
 8100922:	f043 0301 	orr.w	r3, r3, #1
 8100926:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810092a:	4b0d      	ldr	r3, [pc, #52]	; (8100960 <MX_DMA_Init+0x4c>)
 810092c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100930:	f003 0301 	and.w	r3, r3, #1
 8100934:	607b      	str	r3, [r7, #4]
 8100936:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8100938:	2200      	movs	r2, #0
 810093a:	2105      	movs	r1, #5
 810093c:	200b      	movs	r0, #11
 810093e:	f002 ffbf 	bl	81038c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8100942:	200b      	movs	r0, #11
 8100944:	f002 ffd6 	bl	81038f4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8100948:	2200      	movs	r2, #0
 810094a:	2105      	movs	r1, #5
 810094c:	200c      	movs	r0, #12
 810094e:	f002 ffb7 	bl	81038c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8100952:	200c      	movs	r0, #12
 8100954:	f002 ffce 	bl	81038f4 <HAL_NVIC_EnableIRQ>

}
 8100958:	bf00      	nop
 810095a:	3708      	adds	r7, #8
 810095c:	46bd      	mov	sp, r7
 810095e:	bd80      	pop	{r7, pc}
 8100960:	58024400 	.word	0x58024400

08100964 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8100964:	b580      	push	{r7, lr}
 8100966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	AppInit();
 8100968:	f000 fce0 	bl	810132c <AppInit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 810096c:	4a04      	ldr	r2, [pc, #16]	; (8100980 <MX_FREERTOS_Init+0x1c>)
 810096e:	2100      	movs	r1, #0
 8100970:	4804      	ldr	r0, [pc, #16]	; (8100984 <MX_FREERTOS_Init+0x20>)
 8100972:	f00a fec3 	bl	810b6fc <osThreadNew>
 8100976:	4603      	mov	r3, r0
 8100978:	4a03      	ldr	r2, [pc, #12]	; (8100988 <MX_FREERTOS_Init+0x24>)
 810097a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 810097c:	bf00      	nop
 810097e:	bd80      	pop	{r7, pc}
 8100980:	08110254 	.word	0x08110254
 8100984:	0810098d 	.word	0x0810098d
 8100988:	100228c4 	.word	0x100228c4

0810098c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 810098c:	b580      	push	{r7, lr}
 810098e:	b082      	sub	sp, #8
 8100990:	af00      	add	r7, sp, #0
 8100992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */

  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(Yellow_LED_CM4_Running_GPIO_Port, Yellow_LED_CM4_Running_Pin);
 8100994:	2102      	movs	r1, #2
 8100996:	4804      	ldr	r0, [pc, #16]	; (81009a8 <StartDefaultTask+0x1c>)
 8100998:	f005 ffcf 	bl	810693a <HAL_GPIO_TogglePin>
    osDelay(1000);
 810099c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 81009a0:	f00b f80f 	bl	810b9c2 <osDelay>
	  HAL_GPIO_TogglePin(Yellow_LED_CM4_Running_GPIO_Port, Yellow_LED_CM4_Running_Pin);
 81009a4:	e7f6      	b.n	8100994 <StartDefaultTask+0x8>
 81009a6:	bf00      	nop
 81009a8:	58021000 	.word	0x58021000

081009ac <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 81009ac:	b580      	push	{r7, lr}
 81009ae:	b088      	sub	sp, #32
 81009b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81009b2:	f107 030c 	add.w	r3, r7, #12
 81009b6:	2200      	movs	r2, #0
 81009b8:	601a      	str	r2, [r3, #0]
 81009ba:	605a      	str	r2, [r3, #4]
 81009bc:	609a      	str	r2, [r3, #8]
 81009be:	60da      	str	r2, [r3, #12]
 81009c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 81009c2:	4b22      	ldr	r3, [pc, #136]	; (8100a4c <MX_GPIO_Init+0xa0>)
 81009c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81009c8:	4a20      	ldr	r2, [pc, #128]	; (8100a4c <MX_GPIO_Init+0xa0>)
 81009ca:	f043 0320 	orr.w	r3, r3, #32
 81009ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81009d2:	4b1e      	ldr	r3, [pc, #120]	; (8100a4c <MX_GPIO_Init+0xa0>)
 81009d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81009d8:	f003 0320 	and.w	r3, r3, #32
 81009dc:	60bb      	str	r3, [r7, #8]
 81009de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81009e0:	4b1a      	ldr	r3, [pc, #104]	; (8100a4c <MX_GPIO_Init+0xa0>)
 81009e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81009e6:	4a19      	ldr	r2, [pc, #100]	; (8100a4c <MX_GPIO_Init+0xa0>)
 81009e8:	f043 0308 	orr.w	r3, r3, #8
 81009ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81009f0:	4b16      	ldr	r3, [pc, #88]	; (8100a4c <MX_GPIO_Init+0xa0>)
 81009f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81009f6:	f003 0308 	and.w	r3, r3, #8
 81009fa:	607b      	str	r3, [r7, #4]
 81009fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 81009fe:	4b13      	ldr	r3, [pc, #76]	; (8100a4c <MX_GPIO_Init+0xa0>)
 8100a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100a04:	4a11      	ldr	r2, [pc, #68]	; (8100a4c <MX_GPIO_Init+0xa0>)
 8100a06:	f043 0310 	orr.w	r3, r3, #16
 8100a0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100a0e:	4b0f      	ldr	r3, [pc, #60]	; (8100a4c <MX_GPIO_Init+0xa0>)
 8100a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100a14:	f003 0310 	and.w	r3, r3, #16
 8100a18:	603b      	str	r3, [r7, #0]
 8100a1a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Yellow_LED_CM4_Running_GPIO_Port, Yellow_LED_CM4_Running_Pin, GPIO_PIN_RESET);
 8100a1c:	2200      	movs	r2, #0
 8100a1e:	2102      	movs	r1, #2
 8100a20:	480b      	ldr	r0, [pc, #44]	; (8100a50 <MX_GPIO_Init+0xa4>)
 8100a22:	f005 ff71 	bl	8106908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Yellow_LED_CM4_Running_Pin;
 8100a26:	2302      	movs	r3, #2
 8100a28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100a2a:	2301      	movs	r3, #1
 8100a2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100a2e:	2300      	movs	r3, #0
 8100a30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100a32:	2300      	movs	r3, #0
 8100a34:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Yellow_LED_CM4_Running_GPIO_Port, &GPIO_InitStruct);
 8100a36:	f107 030c 	add.w	r3, r7, #12
 8100a3a:	4619      	mov	r1, r3
 8100a3c:	4804      	ldr	r0, [pc, #16]	; (8100a50 <MX_GPIO_Init+0xa4>)
 8100a3e:	f005 fdb3 	bl	81065a8 <HAL_GPIO_Init>

}
 8100a42:	bf00      	nop
 8100a44:	3720      	adds	r7, #32
 8100a46:	46bd      	mov	sp, r7
 8100a48:	bd80      	pop	{r7, pc}
 8100a4a:	bf00      	nop
 8100a4c:	58024400 	.word	0x58024400
 8100a50:	58021000 	.word	0x58021000

08100a54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100a54:	b580      	push	{r7, lr}
 8100a56:	b082      	sub	sp, #8
 8100a58:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8100a5a:	4b22      	ldr	r3, [pc, #136]	; (8100ae4 <main+0x90>)
 8100a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100a60:	4a20      	ldr	r2, [pc, #128]	; (8100ae4 <main+0x90>)
 8100a62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8100a66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100a6a:	4b1e      	ldr	r3, [pc, #120]	; (8100ae4 <main+0x90>)
 8100a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100a74:	607b      	str	r3, [r7, #4]
 8100a76:	687b      	ldr	r3, [r7, #4]
	/* Activate HSEM notification for Cortex-M4*/
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100a78:	2001      	movs	r0, #1
 8100a7a:	f005 ff79 	bl	8106970 <HAL_HSEM_ActivateNotification>
	/*
	 Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
	 perform system initialization (system clock config, external memory configuration.. )
	 */
	HAL_PWREx_ClearPendingEvent();
 8100a7e:	f006 f803 	bl	8106a88 <HAL_PWREx_ClearPendingEvent>
	HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE,
 8100a82:	2201      	movs	r2, #1
 8100a84:	2102      	movs	r1, #2
 8100a86:	2000      	movs	r0, #0
 8100a88:	f005 ff84 	bl	8106994 <HAL_PWREx_EnterSTOPMode>
	PWR_D2_DOMAIN);
	/* Clear HSEM flag */
	__HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100a8c:	4b16      	ldr	r3, [pc, #88]	; (8100ae8 <main+0x94>)
 8100a8e:	681b      	ldr	r3, [r3, #0]
 8100a90:	091b      	lsrs	r3, r3, #4
 8100a92:	f003 030f 	and.w	r3, r3, #15
 8100a96:	2b07      	cmp	r3, #7
 8100a98:	d108      	bne.n	8100aac <main+0x58>
 8100a9a:	4b14      	ldr	r3, [pc, #80]	; (8100aec <main+0x98>)
 8100a9c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100aa0:	4a12      	ldr	r2, [pc, #72]	; (8100aec <main+0x98>)
 8100aa2:	f043 0301 	orr.w	r3, r3, #1
 8100aa6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8100aaa:	e007      	b.n	8100abc <main+0x68>
 8100aac:	4b0f      	ldr	r3, [pc, #60]	; (8100aec <main+0x98>)
 8100aae:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100ab2:	4a0e      	ldr	r2, [pc, #56]	; (8100aec <main+0x98>)
 8100ab4:	f043 0301 	orr.w	r3, r3, #1
 8100ab8:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100abc:	f000 fdf8 	bl	81016b0 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100ac0:	f7ff ff74 	bl	81009ac <MX_GPIO_Init>
  MX_DMA_Init();
 8100ac4:	f7ff ff26 	bl	8100914 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8100ac8:	f000 f9a2 	bl	8100e10 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8100acc:	f7ff fdf8 	bl	81006c0 <MX_ADC1_Init>
  MX_TIM3_Init();
 8100ad0:	f000 f92e 	bl	8100d30 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8100ad4:	f00a fdc8 	bl	810b668 <osKernelInitialize>
  MX_FREERTOS_Init();
 8100ad8:	f7ff ff44 	bl	8100964 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8100adc:	f00a fde8 	bl	810b6b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8100ae0:	e7fe      	b.n	8100ae0 <main+0x8c>
 8100ae2:	bf00      	nop
 8100ae4:	58024400 	.word	0x58024400
 8100ae8:	e000ed00 	.word	0xe000ed00
 8100aec:	58026400 	.word	0x58026400

08100af0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8100af0:	b580      	push	{r7, lr}
 8100af2:	b082      	sub	sp, #8
 8100af4:	af00      	add	r7, sp, #0
 8100af6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8100af8:	687b      	ldr	r3, [r7, #4]
 8100afa:	681b      	ldr	r3, [r3, #0]
 8100afc:	4a04      	ldr	r2, [pc, #16]	; (8100b10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8100afe:	4293      	cmp	r3, r2
 8100b00:	d101      	bne.n	8100b06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8100b02:	f000 fe33 	bl	810176c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8100b06:	bf00      	nop
 8100b08:	3708      	adds	r7, #8
 8100b0a:	46bd      	mov	sp, r7
 8100b0c:	bd80      	pop	{r7, pc}
 8100b0e:	bf00      	nop
 8100b10:	40001000 	.word	0x40001000

08100b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100b14:	b480      	push	{r7}
 8100b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100b18:	b672      	cpsid	i
}
 8100b1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8100b1c:	e7fe      	b.n	8100b1c <Error_Handler+0x8>
	...

08100b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100b20:	b580      	push	{r7, lr}
 8100b22:	b082      	sub	sp, #8
 8100b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100b26:	4b0c      	ldr	r3, [pc, #48]	; (8100b58 <HAL_MspInit+0x38>)
 8100b28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100b2c:	4a0a      	ldr	r2, [pc, #40]	; (8100b58 <HAL_MspInit+0x38>)
 8100b2e:	f043 0302 	orr.w	r3, r3, #2
 8100b32:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100b36:	4b08      	ldr	r3, [pc, #32]	; (8100b58 <HAL_MspInit+0x38>)
 8100b38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100b3c:	f003 0302 	and.w	r3, r3, #2
 8100b40:	607b      	str	r3, [r7, #4]
 8100b42:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8100b44:	2200      	movs	r2, #0
 8100b46:	210f      	movs	r1, #15
 8100b48:	f06f 0001 	mvn.w	r0, #1
 8100b4c:	f002 feb8 	bl	81038c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100b50:	bf00      	nop
 8100b52:	3708      	adds	r7, #8
 8100b54:	46bd      	mov	sp, r7
 8100b56:	bd80      	pop	{r7, pc}
 8100b58:	58024400 	.word	0x58024400

08100b5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100b5c:	b580      	push	{r7, lr}
 8100b5e:	b090      	sub	sp, #64	; 0x40
 8100b60:	af00      	add	r7, sp, #0
 8100b62:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100b64:	687b      	ldr	r3, [r7, #4]
 8100b66:	2b0f      	cmp	r3, #15
 8100b68:	d827      	bhi.n	8100bba <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8100b6a:	2200      	movs	r2, #0
 8100b6c:	6879      	ldr	r1, [r7, #4]
 8100b6e:	2036      	movs	r0, #54	; 0x36
 8100b70:	f002 fea6 	bl	81038c0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8100b74:	2036      	movs	r0, #54	; 0x36
 8100b76:	f002 febd 	bl	81038f4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8100b7a:	4a29      	ldr	r2, [pc, #164]	; (8100c20 <HAL_InitTick+0xc4>)
 8100b7c:	687b      	ldr	r3, [r7, #4]
 8100b7e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8100b80:	4b28      	ldr	r3, [pc, #160]	; (8100c24 <HAL_InitTick+0xc8>)
 8100b82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100b86:	4a27      	ldr	r2, [pc, #156]	; (8100c24 <HAL_InitTick+0xc8>)
 8100b88:	f043 0310 	orr.w	r3, r3, #16
 8100b8c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100b90:	4b24      	ldr	r3, [pc, #144]	; (8100c24 <HAL_InitTick+0xc8>)
 8100b92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100b96:	f003 0310 	and.w	r3, r3, #16
 8100b9a:	60fb      	str	r3, [r7, #12]
 8100b9c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8100b9e:	f107 0210 	add.w	r2, r7, #16
 8100ba2:	f107 0314 	add.w	r3, r7, #20
 8100ba6:	4611      	mov	r1, r2
 8100ba8:	4618      	mov	r0, r3
 8100baa:	f006 f953 	bl	8106e54 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8100bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8100bb0:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8100bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8100bb4:	2b00      	cmp	r3, #0
 8100bb6:	d106      	bne.n	8100bc6 <HAL_InitTick+0x6a>
 8100bb8:	e001      	b.n	8100bbe <HAL_InitTick+0x62>
    return HAL_ERROR;
 8100bba:	2301      	movs	r3, #1
 8100bbc:	e02b      	b.n	8100c16 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8100bbe:	f006 f91d 	bl	8106dfc <HAL_RCC_GetPCLK1Freq>
 8100bc2:	63f8      	str	r0, [r7, #60]	; 0x3c
 8100bc4:	e004      	b.n	8100bd0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8100bc6:	f006 f919 	bl	8106dfc <HAL_RCC_GetPCLK1Freq>
 8100bca:	4603      	mov	r3, r0
 8100bcc:	005b      	lsls	r3, r3, #1
 8100bce:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8100bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8100bd2:	4a15      	ldr	r2, [pc, #84]	; (8100c28 <HAL_InitTick+0xcc>)
 8100bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8100bd8:	0c9b      	lsrs	r3, r3, #18
 8100bda:	3b01      	subs	r3, #1
 8100bdc:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8100bde:	4b13      	ldr	r3, [pc, #76]	; (8100c2c <HAL_InitTick+0xd0>)
 8100be0:	4a13      	ldr	r2, [pc, #76]	; (8100c30 <HAL_InitTick+0xd4>)
 8100be2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8100be4:	4b11      	ldr	r3, [pc, #68]	; (8100c2c <HAL_InitTick+0xd0>)
 8100be6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8100bea:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8100bec:	4a0f      	ldr	r2, [pc, #60]	; (8100c2c <HAL_InitTick+0xd0>)
 8100bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8100bf0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8100bf2:	4b0e      	ldr	r3, [pc, #56]	; (8100c2c <HAL_InitTick+0xd0>)
 8100bf4:	2200      	movs	r2, #0
 8100bf6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100bf8:	4b0c      	ldr	r3, [pc, #48]	; (8100c2c <HAL_InitTick+0xd0>)
 8100bfa:	2200      	movs	r2, #0
 8100bfc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8100bfe:	480b      	ldr	r0, [pc, #44]	; (8100c2c <HAL_InitTick+0xd0>)
 8100c00:	f008 faf0 	bl	81091e4 <HAL_TIM_Base_Init>
 8100c04:	4603      	mov	r3, r0
 8100c06:	2b00      	cmp	r3, #0
 8100c08:	d104      	bne.n	8100c14 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8100c0a:	4808      	ldr	r0, [pc, #32]	; (8100c2c <HAL_InitTick+0xd0>)
 8100c0c:	f008 fbd2 	bl	81093b4 <HAL_TIM_Base_Start_IT>
 8100c10:	4603      	mov	r3, r0
 8100c12:	e000      	b.n	8100c16 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8100c14:	2301      	movs	r3, #1
}
 8100c16:	4618      	mov	r0, r3
 8100c18:	3740      	adds	r7, #64	; 0x40
 8100c1a:	46bd      	mov	sp, r7
 8100c1c:	bd80      	pop	{r7, pc}
 8100c1e:	bf00      	nop
 8100c20:	10000010 	.word	0x10000010
 8100c24:	58024400 	.word	0x58024400
 8100c28:	431bde83 	.word	0x431bde83
 8100c2c:	100228cc 	.word	0x100228cc
 8100c30:	40001000 	.word	0x40001000

08100c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100c34:	b480      	push	{r7}
 8100c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100c38:	e7fe      	b.n	8100c38 <NMI_Handler+0x4>

08100c3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100c3a:	b480      	push	{r7}
 8100c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100c3e:	e7fe      	b.n	8100c3e <HardFault_Handler+0x4>

08100c40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100c40:	b480      	push	{r7}
 8100c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100c44:	e7fe      	b.n	8100c44 <MemManage_Handler+0x4>

08100c46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100c46:	b480      	push	{r7}
 8100c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100c4a:	e7fe      	b.n	8100c4a <BusFault_Handler+0x4>

08100c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100c4c:	b480      	push	{r7}
 8100c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100c50:	e7fe      	b.n	8100c50 <UsageFault_Handler+0x4>

08100c52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100c52:	b480      	push	{r7}
 8100c54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100c56:	bf00      	nop
 8100c58:	46bd      	mov	sp, r7
 8100c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c5e:	4770      	bx	lr

08100c60 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8100c60:	b580      	push	{r7, lr}
 8100c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8100c64:	4802      	ldr	r0, [pc, #8]	; (8100c70 <DMA1_Stream0_IRQHandler+0x10>)
 8100c66:	f004 f98d 	bl	8104f84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8100c6a:	bf00      	nop
 8100c6c:	bd80      	pop	{r7, pc}
 8100c6e:	bf00      	nop
 8100c70:	100229f4 	.word	0x100229f4

08100c74 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8100c74:	b580      	push	{r7, lr}
 8100c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8100c78:	4802      	ldr	r0, [pc, #8]	; (8100c84 <DMA1_Stream1_IRQHandler+0x10>)
 8100c7a:	f004 f983 	bl	8104f84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8100c7e:	bf00      	nop
 8100c80:	bd80      	pop	{r7, pc}
 8100c82:	bf00      	nop
 8100c84:	1002284c 	.word	0x1002284c

08100c88 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8100c88:	b580      	push	{r7, lr}
 8100c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8100c8c:	4802      	ldr	r0, [pc, #8]	; (8100c98 <ADC_IRQHandler+0x10>)
 8100c8e:	f001 fab5 	bl	81021fc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8100c92:	bf00      	nop
 8100c94:	bd80      	pop	{r7, pc}
 8100c96:	bf00      	nop
 8100c98:	100227e8 	.word	0x100227e8

08100c9c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8100c9c:	b580      	push	{r7, lr}
 8100c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8100ca0:	4802      	ldr	r0, [pc, #8]	; (8100cac <USART3_IRQHandler+0x10>)
 8100ca2:	f009 f8df 	bl	8109e64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8100ca6:	bf00      	nop
 8100ca8:	bd80      	pop	{r7, pc}
 8100caa:	bf00      	nop
 8100cac:	10022964 	.word	0x10022964

08100cb0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8100cb0:	b580      	push	{r7, lr}
 8100cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8100cb4:	4802      	ldr	r0, [pc, #8]	; (8100cc0 <TIM6_DAC_IRQHandler+0x10>)
 8100cb6:	f008 fbed 	bl	8109494 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8100cba:	bf00      	nop
 8100cbc:	bd80      	pop	{r7, pc}
 8100cbe:	bf00      	nop
 8100cc0:	100228cc 	.word	0x100228cc

08100cc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8100cc4:	b580      	push	{r7, lr}
 8100cc6:	b086      	sub	sp, #24
 8100cc8:	af00      	add	r7, sp, #0
 8100cca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8100ccc:	4a14      	ldr	r2, [pc, #80]	; (8100d20 <_sbrk+0x5c>)
 8100cce:	4b15      	ldr	r3, [pc, #84]	; (8100d24 <_sbrk+0x60>)
 8100cd0:	1ad3      	subs	r3, r2, r3
 8100cd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8100cd4:	697b      	ldr	r3, [r7, #20]
 8100cd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8100cd8:	4b13      	ldr	r3, [pc, #76]	; (8100d28 <_sbrk+0x64>)
 8100cda:	681b      	ldr	r3, [r3, #0]
 8100cdc:	2b00      	cmp	r3, #0
 8100cde:	d102      	bne.n	8100ce6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8100ce0:	4b11      	ldr	r3, [pc, #68]	; (8100d28 <_sbrk+0x64>)
 8100ce2:	4a12      	ldr	r2, [pc, #72]	; (8100d2c <_sbrk+0x68>)
 8100ce4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8100ce6:	4b10      	ldr	r3, [pc, #64]	; (8100d28 <_sbrk+0x64>)
 8100ce8:	681a      	ldr	r2, [r3, #0]
 8100cea:	687b      	ldr	r3, [r7, #4]
 8100cec:	4413      	add	r3, r2
 8100cee:	693a      	ldr	r2, [r7, #16]
 8100cf0:	429a      	cmp	r2, r3
 8100cf2:	d207      	bcs.n	8100d04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8100cf4:	f00e fc46 	bl	810f584 <__errno>
 8100cf8:	4603      	mov	r3, r0
 8100cfa:	220c      	movs	r2, #12
 8100cfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8100cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8100d02:	e009      	b.n	8100d18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8100d04:	4b08      	ldr	r3, [pc, #32]	; (8100d28 <_sbrk+0x64>)
 8100d06:	681b      	ldr	r3, [r3, #0]
 8100d08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8100d0a:	4b07      	ldr	r3, [pc, #28]	; (8100d28 <_sbrk+0x64>)
 8100d0c:	681a      	ldr	r2, [r3, #0]
 8100d0e:	687b      	ldr	r3, [r7, #4]
 8100d10:	4413      	add	r3, r2
 8100d12:	4a05      	ldr	r2, [pc, #20]	; (8100d28 <_sbrk+0x64>)
 8100d14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8100d16:	68fb      	ldr	r3, [r7, #12]
}
 8100d18:	4618      	mov	r0, r3
 8100d1a:	3718      	adds	r7, #24
 8100d1c:	46bd      	mov	sp, r7
 8100d1e:	bd80      	pop	{r7, pc}
 8100d20:	10048000 	.word	0x10048000
 8100d24:	00000400 	.word	0x00000400
 8100d28:	1000009c 	.word	0x1000009c
 8100d2c:	10022ac8 	.word	0x10022ac8

08100d30 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8100d30:	b580      	push	{r7, lr}
 8100d32:	b088      	sub	sp, #32
 8100d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8100d36:	f107 0310 	add.w	r3, r7, #16
 8100d3a:	2200      	movs	r2, #0
 8100d3c:	601a      	str	r2, [r3, #0]
 8100d3e:	605a      	str	r2, [r3, #4]
 8100d40:	609a      	str	r2, [r3, #8]
 8100d42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8100d44:	1d3b      	adds	r3, r7, #4
 8100d46:	2200      	movs	r2, #0
 8100d48:	601a      	str	r2, [r3, #0]
 8100d4a:	605a      	str	r2, [r3, #4]
 8100d4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8100d4e:	4b1d      	ldr	r3, [pc, #116]	; (8100dc4 <MX_TIM3_Init+0x94>)
 8100d50:	4a1d      	ldr	r2, [pc, #116]	; (8100dc8 <MX_TIM3_Init+0x98>)
 8100d52:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8100d54:	4b1b      	ldr	r3, [pc, #108]	; (8100dc4 <MX_TIM3_Init+0x94>)
 8100d56:	2200      	movs	r2, #0
 8100d58:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100d5a:	4b1a      	ldr	r3, [pc, #104]	; (8100dc4 <MX_TIM3_Init+0x94>)
 8100d5c:	2200      	movs	r2, #0
 8100d5e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 480;
 8100d60:	4b18      	ldr	r3, [pc, #96]	; (8100dc4 <MX_TIM3_Init+0x94>)
 8100d62:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8100d66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100d68:	4b16      	ldr	r3, [pc, #88]	; (8100dc4 <MX_TIM3_Init+0x94>)
 8100d6a:	2200      	movs	r2, #0
 8100d6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8100d6e:	4b15      	ldr	r3, [pc, #84]	; (8100dc4 <MX_TIM3_Init+0x94>)
 8100d70:	2200      	movs	r2, #0
 8100d72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8100d74:	4813      	ldr	r0, [pc, #76]	; (8100dc4 <MX_TIM3_Init+0x94>)
 8100d76:	f008 fa35 	bl	81091e4 <HAL_TIM_Base_Init>
 8100d7a:	4603      	mov	r3, r0
 8100d7c:	2b00      	cmp	r3, #0
 8100d7e:	d001      	beq.n	8100d84 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8100d80:	f7ff fec8 	bl	8100b14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8100d84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8100d88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8100d8a:	f107 0310 	add.w	r3, r7, #16
 8100d8e:	4619      	mov	r1, r3
 8100d90:	480c      	ldr	r0, [pc, #48]	; (8100dc4 <MX_TIM3_Init+0x94>)
 8100d92:	f008 fc9f 	bl	81096d4 <HAL_TIM_ConfigClockSource>
 8100d96:	4603      	mov	r3, r0
 8100d98:	2b00      	cmp	r3, #0
 8100d9a:	d001      	beq.n	8100da0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8100d9c:	f7ff feba 	bl	8100b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8100da0:	2320      	movs	r3, #32
 8100da2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8100da4:	2300      	movs	r3, #0
 8100da6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8100da8:	1d3b      	adds	r3, r7, #4
 8100daa:	4619      	mov	r1, r3
 8100dac:	4805      	ldr	r0, [pc, #20]	; (8100dc4 <MX_TIM3_Init+0x94>)
 8100dae:	f008 fee3 	bl	8109b78 <HAL_TIMEx_MasterConfigSynchronization>
 8100db2:	4603      	mov	r3, r0
 8100db4:	2b00      	cmp	r3, #0
 8100db6:	d001      	beq.n	8100dbc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8100db8:	f7ff feac 	bl	8100b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8100dbc:	bf00      	nop
 8100dbe:	3720      	adds	r7, #32
 8100dc0:	46bd      	mov	sp, r7
 8100dc2:	bd80      	pop	{r7, pc}
 8100dc4:	10022918 	.word	0x10022918
 8100dc8:	40000400 	.word	0x40000400

08100dcc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8100dcc:	b480      	push	{r7}
 8100dce:	b085      	sub	sp, #20
 8100dd0:	af00      	add	r7, sp, #0
 8100dd2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8100dd4:	687b      	ldr	r3, [r7, #4]
 8100dd6:	681b      	ldr	r3, [r3, #0]
 8100dd8:	4a0b      	ldr	r2, [pc, #44]	; (8100e08 <HAL_TIM_Base_MspInit+0x3c>)
 8100dda:	4293      	cmp	r3, r2
 8100ddc:	d10e      	bne.n	8100dfc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8100dde:	4b0b      	ldr	r3, [pc, #44]	; (8100e0c <HAL_TIM_Base_MspInit+0x40>)
 8100de0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100de4:	4a09      	ldr	r2, [pc, #36]	; (8100e0c <HAL_TIM_Base_MspInit+0x40>)
 8100de6:	f043 0302 	orr.w	r3, r3, #2
 8100dea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100dee:	4b07      	ldr	r3, [pc, #28]	; (8100e0c <HAL_TIM_Base_MspInit+0x40>)
 8100df0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100df4:	f003 0302 	and.w	r3, r3, #2
 8100df8:	60fb      	str	r3, [r7, #12]
 8100dfa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8100dfc:	bf00      	nop
 8100dfe:	3714      	adds	r7, #20
 8100e00:	46bd      	mov	sp, r7
 8100e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e06:	4770      	bx	lr
 8100e08:	40000400 	.word	0x40000400
 8100e0c:	58024400 	.word	0x58024400

08100e10 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8100e10:	b580      	push	{r7, lr}
 8100e12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8100e14:	4b22      	ldr	r3, [pc, #136]	; (8100ea0 <MX_USART3_UART_Init+0x90>)
 8100e16:	4a23      	ldr	r2, [pc, #140]	; (8100ea4 <MX_USART3_UART_Init+0x94>)
 8100e18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8100e1a:	4b21      	ldr	r3, [pc, #132]	; (8100ea0 <MX_USART3_UART_Init+0x90>)
 8100e1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8100e20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8100e22:	4b1f      	ldr	r3, [pc, #124]	; (8100ea0 <MX_USART3_UART_Init+0x90>)
 8100e24:	2200      	movs	r2, #0
 8100e26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8100e28:	4b1d      	ldr	r3, [pc, #116]	; (8100ea0 <MX_USART3_UART_Init+0x90>)
 8100e2a:	2200      	movs	r2, #0
 8100e2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8100e2e:	4b1c      	ldr	r3, [pc, #112]	; (8100ea0 <MX_USART3_UART_Init+0x90>)
 8100e30:	2200      	movs	r2, #0
 8100e32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8100e34:	4b1a      	ldr	r3, [pc, #104]	; (8100ea0 <MX_USART3_UART_Init+0x90>)
 8100e36:	220c      	movs	r2, #12
 8100e38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8100e3a:	4b19      	ldr	r3, [pc, #100]	; (8100ea0 <MX_USART3_UART_Init+0x90>)
 8100e3c:	2200      	movs	r2, #0
 8100e3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8100e40:	4b17      	ldr	r3, [pc, #92]	; (8100ea0 <MX_USART3_UART_Init+0x90>)
 8100e42:	2200      	movs	r2, #0
 8100e44:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8100e46:	4b16      	ldr	r3, [pc, #88]	; (8100ea0 <MX_USART3_UART_Init+0x90>)
 8100e48:	2200      	movs	r2, #0
 8100e4a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8100e4c:	4b14      	ldr	r3, [pc, #80]	; (8100ea0 <MX_USART3_UART_Init+0x90>)
 8100e4e:	2200      	movs	r2, #0
 8100e50:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8100e52:	4b13      	ldr	r3, [pc, #76]	; (8100ea0 <MX_USART3_UART_Init+0x90>)
 8100e54:	2200      	movs	r2, #0
 8100e56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8100e58:	4811      	ldr	r0, [pc, #68]	; (8100ea0 <MX_USART3_UART_Init+0x90>)
 8100e5a:	f008 ff33 	bl	8109cc4 <HAL_UART_Init>
 8100e5e:	4603      	mov	r3, r0
 8100e60:	2b00      	cmp	r3, #0
 8100e62:	d001      	beq.n	8100e68 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8100e64:	f7ff fe56 	bl	8100b14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100e68:	2100      	movs	r1, #0
 8100e6a:	480d      	ldr	r0, [pc, #52]	; (8100ea0 <MX_USART3_UART_Init+0x90>)
 8100e6c:	f00a faee 	bl	810b44c <HAL_UARTEx_SetTxFifoThreshold>
 8100e70:	4603      	mov	r3, r0
 8100e72:	2b00      	cmp	r3, #0
 8100e74:	d001      	beq.n	8100e7a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8100e76:	f7ff fe4d 	bl	8100b14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100e7a:	2100      	movs	r1, #0
 8100e7c:	4808      	ldr	r0, [pc, #32]	; (8100ea0 <MX_USART3_UART_Init+0x90>)
 8100e7e:	f00a fb23 	bl	810b4c8 <HAL_UARTEx_SetRxFifoThreshold>
 8100e82:	4603      	mov	r3, r0
 8100e84:	2b00      	cmp	r3, #0
 8100e86:	d001      	beq.n	8100e8c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8100e88:	f7ff fe44 	bl	8100b14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8100e8c:	4804      	ldr	r0, [pc, #16]	; (8100ea0 <MX_USART3_UART_Init+0x90>)
 8100e8e:	f00a faa4 	bl	810b3da <HAL_UARTEx_DisableFifoMode>
 8100e92:	4603      	mov	r3, r0
 8100e94:	2b00      	cmp	r3, #0
 8100e96:	d001      	beq.n	8100e9c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8100e98:	f7ff fe3c 	bl	8100b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8100e9c:	bf00      	nop
 8100e9e:	bd80      	pop	{r7, pc}
 8100ea0:	10022964 	.word	0x10022964
 8100ea4:	40004800 	.word	0x40004800

08100ea8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8100ea8:	b580      	push	{r7, lr}
 8100eaa:	b0b8      	sub	sp, #224	; 0xe0
 8100eac:	af00      	add	r7, sp, #0
 8100eae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100eb0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100eb4:	2200      	movs	r2, #0
 8100eb6:	601a      	str	r2, [r3, #0]
 8100eb8:	605a      	str	r2, [r3, #4]
 8100eba:	609a      	str	r2, [r3, #8]
 8100ebc:	60da      	str	r2, [r3, #12]
 8100ebe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100ec0:	f107 0310 	add.w	r3, r7, #16
 8100ec4:	22bc      	movs	r2, #188	; 0xbc
 8100ec6:	2100      	movs	r1, #0
 8100ec8:	4618      	mov	r0, r3
 8100eca:	f00e fb95 	bl	810f5f8 <memset>
  if(uartHandle->Instance==USART3)
 8100ece:	687b      	ldr	r3, [r7, #4]
 8100ed0:	681b      	ldr	r3, [r3, #0]
 8100ed2:	4a3f      	ldr	r2, [pc, #252]	; (8100fd0 <HAL_UART_MspInit+0x128>)
 8100ed4:	4293      	cmp	r3, r2
 8100ed6:	d177      	bne.n	8100fc8 <HAL_UART_MspInit+0x120>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8100ed8:	2302      	movs	r3, #2
 8100eda:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8100edc:	2300      	movs	r3, #0
 8100ede:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100ee2:	f107 0310 	add.w	r3, r7, #16
 8100ee6:	4618      	mov	r0, r3
 8100ee8:	f005 fff6 	bl	8106ed8 <HAL_RCCEx_PeriphCLKConfig>
 8100eec:	4603      	mov	r3, r0
 8100eee:	2b00      	cmp	r3, #0
 8100ef0:	d001      	beq.n	8100ef6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8100ef2:	f7ff fe0f 	bl	8100b14 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8100ef6:	4b37      	ldr	r3, [pc, #220]	; (8100fd4 <HAL_UART_MspInit+0x12c>)
 8100ef8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100efc:	4a35      	ldr	r2, [pc, #212]	; (8100fd4 <HAL_UART_MspInit+0x12c>)
 8100efe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8100f02:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100f06:	4b33      	ldr	r3, [pc, #204]	; (8100fd4 <HAL_UART_MspInit+0x12c>)
 8100f08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100f0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8100f10:	60fb      	str	r3, [r7, #12]
 8100f12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8100f14:	4b2f      	ldr	r3, [pc, #188]	; (8100fd4 <HAL_UART_MspInit+0x12c>)
 8100f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f1a:	4a2e      	ldr	r2, [pc, #184]	; (8100fd4 <HAL_UART_MspInit+0x12c>)
 8100f1c:	f043 0308 	orr.w	r3, r3, #8
 8100f20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100f24:	4b2b      	ldr	r3, [pc, #172]	; (8100fd4 <HAL_UART_MspInit+0x12c>)
 8100f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f2a:	f003 0308 	and.w	r3, r3, #8
 8100f2e:	60bb      	str	r3, [r7, #8]
 8100f30:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8100f32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8100f36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100f3a:	2302      	movs	r3, #2
 8100f3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100f40:	2300      	movs	r3, #0
 8100f42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100f46:	2300      	movs	r3, #0
 8100f48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8100f4c:	2307      	movs	r3, #7
 8100f4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8100f52:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100f56:	4619      	mov	r1, r3
 8100f58:	481f      	ldr	r0, [pc, #124]	; (8100fd8 <HAL_UART_MspInit+0x130>)
 8100f5a:	f005 fb25 	bl	81065a8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream0;
 8100f5e:	4b1f      	ldr	r3, [pc, #124]	; (8100fdc <HAL_UART_MspInit+0x134>)
 8100f60:	4a1f      	ldr	r2, [pc, #124]	; (8100fe0 <HAL_UART_MspInit+0x138>)
 8100f62:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8100f64:	4b1d      	ldr	r3, [pc, #116]	; (8100fdc <HAL_UART_MspInit+0x134>)
 8100f66:	222e      	movs	r2, #46	; 0x2e
 8100f68:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8100f6a:	4b1c      	ldr	r3, [pc, #112]	; (8100fdc <HAL_UART_MspInit+0x134>)
 8100f6c:	2240      	movs	r2, #64	; 0x40
 8100f6e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8100f70:	4b1a      	ldr	r3, [pc, #104]	; (8100fdc <HAL_UART_MspInit+0x134>)
 8100f72:	2200      	movs	r2, #0
 8100f74:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8100f76:	4b19      	ldr	r3, [pc, #100]	; (8100fdc <HAL_UART_MspInit+0x134>)
 8100f78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8100f7c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8100f7e:	4b17      	ldr	r3, [pc, #92]	; (8100fdc <HAL_UART_MspInit+0x134>)
 8100f80:	2200      	movs	r2, #0
 8100f82:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8100f84:	4b15      	ldr	r3, [pc, #84]	; (8100fdc <HAL_UART_MspInit+0x134>)
 8100f86:	2200      	movs	r2, #0
 8100f88:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8100f8a:	4b14      	ldr	r3, [pc, #80]	; (8100fdc <HAL_UART_MspInit+0x134>)
 8100f8c:	2200      	movs	r2, #0
 8100f8e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8100f90:	4b12      	ldr	r3, [pc, #72]	; (8100fdc <HAL_UART_MspInit+0x134>)
 8100f92:	2200      	movs	r2, #0
 8100f94:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8100f96:	4b11      	ldr	r3, [pc, #68]	; (8100fdc <HAL_UART_MspInit+0x134>)
 8100f98:	2200      	movs	r2, #0
 8100f9a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8100f9c:	480f      	ldr	r0, [pc, #60]	; (8100fdc <HAL_UART_MspInit+0x134>)
 8100f9e:	f002 fccb 	bl	8103938 <HAL_DMA_Init>
 8100fa2:	4603      	mov	r3, r0
 8100fa4:	2b00      	cmp	r3, #0
 8100fa6:	d001      	beq.n	8100fac <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 8100fa8:	f7ff fdb4 	bl	8100b14 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8100fac:	687b      	ldr	r3, [r7, #4]
 8100fae:	4a0b      	ldr	r2, [pc, #44]	; (8100fdc <HAL_UART_MspInit+0x134>)
 8100fb0:	679a      	str	r2, [r3, #120]	; 0x78
 8100fb2:	4a0a      	ldr	r2, [pc, #40]	; (8100fdc <HAL_UART_MspInit+0x134>)
 8100fb4:	687b      	ldr	r3, [r7, #4]
 8100fb6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8100fb8:	2200      	movs	r2, #0
 8100fba:	2105      	movs	r1, #5
 8100fbc:	2027      	movs	r0, #39	; 0x27
 8100fbe:	f002 fc7f 	bl	81038c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8100fc2:	2027      	movs	r0, #39	; 0x27
 8100fc4:	f002 fc96 	bl	81038f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8100fc8:	bf00      	nop
 8100fca:	37e0      	adds	r7, #224	; 0xe0
 8100fcc:	46bd      	mov	sp, r7
 8100fce:	bd80      	pop	{r7, pc}
 8100fd0:	40004800 	.word	0x40004800
 8100fd4:	58024400 	.word	0x58024400
 8100fd8:	58020c00 	.word	0x58020c00
 8100fdc:	100229f4 	.word	0x100229f4
 8100fe0:	40020010 	.word	0x40020010

08100fe4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100fe4:	f8df d034 	ldr.w	sp, [pc, #52]	; 810101c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8100fe8:	f7ff fb4e 	bl	8100688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100fec:	480c      	ldr	r0, [pc, #48]	; (8101020 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8100fee:	490d      	ldr	r1, [pc, #52]	; (8101024 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100ff0:	4a0d      	ldr	r2, [pc, #52]	; (8101028 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8100ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100ff4:	e002      	b.n	8100ffc <LoopCopyDataInit>

08100ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8100ffa:	3304      	adds	r3, #4

08100ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101000:	d3f9      	bcc.n	8100ff6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101002:	4a0a      	ldr	r2, [pc, #40]	; (810102c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101004:	4c0a      	ldr	r4, [pc, #40]	; (8101030 <LoopFillZerobss+0x22>)
  movs r3, #0
 8101006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101008:	e001      	b.n	810100e <LoopFillZerobss>

0810100a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810100a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 810100c:	3204      	adds	r2, #4

0810100e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810100e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101010:	d3fb      	bcc.n	810100a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101012:	f00e fabd 	bl	810f590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101016:	f7ff fd1d 	bl	8100a54 <main>
  bx  lr
 810101a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 810101c:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101020:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101024:	10000080 	.word	0x10000080
  ldr r2, =_sidata
 8101028:	0811034c 	.word	0x0811034c
  ldr r2, =_sbss
 810102c:	10000080 	.word	0x10000080
  ldr r4, =_ebss
 8101030:	10022ac4 	.word	0x10022ac4

08101034 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101034:	e7fe      	b.n	8101034 <ADC3_IRQHandler>
	...

08101038 <adcAppInit>:
TIM_HandleTypeDef *timPointer = &htim3;

// Indicates if the adc is currently running
bool isAdcRunning;

bool adcAppInit(void) {
 8101038:	b580      	push	{r7, lr}
 810103a:	b090      	sub	sp, #64	; 0x40
 810103c:	af00      	add	r7, sp, #0
	// Initialize the adc message queue
	osMessageQueueAttr_t adc_message_queue_attributes = { .name = "adc_message_queue" };
 810103e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8101042:	2200      	movs	r2, #0
 8101044:	601a      	str	r2, [r3, #0]
 8101046:	605a      	str	r2, [r3, #4]
 8101048:	609a      	str	r2, [r3, #8]
 810104a:	60da      	str	r2, [r3, #12]
 810104c:	611a      	str	r2, [r3, #16]
 810104e:	615a      	str	r2, [r3, #20]
 8101050:	4b22      	ldr	r3, [pc, #136]	; (81010dc <adcAppInit+0xa4>)
 8101052:	62bb      	str	r3, [r7, #40]	; 0x28
	adcMessageQueueId = osMessageQueueNew(16, sizeof(uint), &adc_message_queue_attributes);
 8101054:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8101058:	461a      	mov	r2, r3
 810105a:	2104      	movs	r1, #4
 810105c:	2010      	movs	r0, #16
 810105e:	f00a fccb 	bl	810b9f8 <osMessageQueueNew>
 8101062:	4603      	mov	r3, r0
 8101064:	4a1e      	ldr	r2, [pc, #120]	; (81010e0 <adcAppInit+0xa8>)
 8101066:	6013      	str	r3, [r2, #0]

	if (adcMessageQueueId == NULL) {
 8101068:	4b1d      	ldr	r3, [pc, #116]	; (81010e0 <adcAppInit+0xa8>)
 810106a:	681b      	ldr	r3, [r3, #0]
 810106c:	2b00      	cmp	r3, #0
 810106e:	d104      	bne.n	810107a <adcAppInit+0x42>
		PRINTF("Error initializing the adc message queue");
 8101070:	481c      	ldr	r0, [pc, #112]	; (81010e4 <adcAppInit+0xac>)
 8101072:	f000 fa81 	bl	8101578 <PrintServerPrintf>
		return false;
 8101076:	2300      	movs	r3, #0
 8101078:	e02b      	b.n	81010d2 <adcAppInit+0x9a>
	}

	// Calibrate ADC
	if (HAL_ADCEx_Calibration_Start(adcPointer, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK) {
 810107a:	4b1b      	ldr	r3, [pc, #108]	; (81010e8 <adcAppInit+0xb0>)
 810107c:	681b      	ldr	r3, [r3, #0]
 810107e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8101082:	2100      	movs	r1, #0
 8101084:	4618      	mov	r0, r3
 8101086:	f002 f9eb 	bl	8103460 <HAL_ADCEx_Calibration_Start>
 810108a:	4603      	mov	r3, r0
 810108c:	2b00      	cmp	r3, #0
 810108e:	d004      	beq.n	810109a <adcAppInit+0x62>
		PRINTF("Error while callibrating the adc");
 8101090:	4816      	ldr	r0, [pc, #88]	; (81010ec <adcAppInit+0xb4>)
 8101092:	f000 fa71 	bl	8101578 <PrintServerPrintf>
		return false;
 8101096:	2300      	movs	r3, #0
 8101098:	e01b      	b.n	81010d2 <adcAppInit+0x9a>
	}

	osThreadAttr_t adc_app_thread_attributes = { .name = "adcHandlerThread", .priority = osPriorityNormal };
 810109a:	1d3b      	adds	r3, r7, #4
 810109c:	2224      	movs	r2, #36	; 0x24
 810109e:	2100      	movs	r1, #0
 81010a0:	4618      	mov	r0, r3
 81010a2:	f00e faa9 	bl	810f5f8 <memset>
 81010a6:	4b12      	ldr	r3, [pc, #72]	; (81010f0 <adcAppInit+0xb8>)
 81010a8:	607b      	str	r3, [r7, #4]
 81010aa:	2318      	movs	r3, #24
 81010ac:	61fb      	str	r3, [r7, #28]

	if (!osThreadNew(adcHandlerThread, NULL, &adc_app_thread_attributes)) {
 81010ae:	1d3b      	adds	r3, r7, #4
 81010b0:	461a      	mov	r2, r3
 81010b2:	2100      	movs	r1, #0
 81010b4:	480f      	ldr	r0, [pc, #60]	; (81010f4 <adcAppInit+0xbc>)
 81010b6:	f00a fb21 	bl	810b6fc <osThreadNew>
 81010ba:	4603      	mov	r3, r0
 81010bc:	2b00      	cmp	r3, #0
 81010be:	d104      	bne.n	81010ca <adcAppInit+0x92>
		PRINTF("Error creating the adc app thread");
 81010c0:	480d      	ldr	r0, [pc, #52]	; (81010f8 <adcAppInit+0xc0>)
 81010c2:	f000 fa59 	bl	8101578 <PrintServerPrintf>
		return false;
 81010c6:	2300      	movs	r3, #0
 81010c8:	e003      	b.n	81010d2 <adcAppInit+0x9a>
	}
	isAdcRunning = false;
 81010ca:	4b0c      	ldr	r3, [pc, #48]	; (81010fc <adcAppInit+0xc4>)
 81010cc:	2200      	movs	r2, #0
 81010ce:	701a      	strb	r2, [r3, #0]

	return true;
 81010d0:	2301      	movs	r3, #1
}
 81010d2:	4618      	mov	r0, r3
 81010d4:	3740      	adds	r7, #64	; 0x40
 81010d6:	46bd      	mov	sp, r7
 81010d8:	bd80      	pop	{r7, pc}
 81010da:	bf00      	nop
 81010dc:	0810ff70 	.word	0x0810ff70
 81010e0:	100228c8 	.word	0x100228c8
 81010e4:	0810ff84 	.word	0x0810ff84
 81010e8:	10000008 	.word	0x10000008
 81010ec:	0810ffb0 	.word	0x0810ffb0
 81010f0:	0810ffd4 	.word	0x0810ffd4
 81010f4:	08101101 	.word	0x08101101
 81010f8:	0810ffe8 	.word	0x0810ffe8
 81010fc:	10022a6c 	.word	0x10022a6c

08101100 <adcHandlerThread>:

void adcHandlerThread() {
 8101100:	b580      	push	{r7, lr}
 8101102:	b08a      	sub	sp, #40	; 0x28
 8101104:	af00      	add	r7, sp, #0
	uint16_t *sampleStart;
	uint32_t lastTick = 0;
 8101106:	2300      	movs	r3, #0
 8101108:	623b      	str	r3, [r7, #32]

	const uint32_t mvReference = 3300,resolutionBits = 65535;
 810110a:	f640 43e4 	movw	r3, #3300	; 0xce4
 810110e:	617b      	str	r3, [r7, #20]
 8101110:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8101114:	613b      	str	r3, [r7, #16]

	while (1) {
		uint32_t msg;
		if (osMessageQueueGet(adcMessageQueueId, &msg, NULL, osWaitForever) != osOK) {
 8101116:	4b57      	ldr	r3, [pc, #348]	; (8101274 <adcHandlerThread+0x174>)
 8101118:	6818      	ldr	r0, [r3, #0]
 810111a:	1d39      	adds	r1, r7, #4
 810111c:	f04f 33ff 	mov.w	r3, #4294967295
 8101120:	2200      	movs	r2, #0
 8101122:	f00a fd3d 	bl	810bba0 <osMessageQueueGet>
 8101126:	4603      	mov	r3, r0
 8101128:	2b00      	cmp	r3, #0
 810112a:	d003      	beq.n	8101134 <adcHandlerThread+0x34>
			PRINTF("Error while receiving a message in adc app thread");
 810112c:	4852      	ldr	r0, [pc, #328]	; (8101278 <adcHandlerThread+0x178>)
 810112e:	f000 fa23 	bl	8101578 <PrintServerPrintf>
			continue;
 8101132:	e09e      	b.n	8101272 <adcHandlerThread+0x172>
		}

		// Process msg
		switch (msg) {
 8101134:	687b      	ldr	r3, [r7, #4]
 8101136:	3b01      	subs	r3, #1
 8101138:	2b04      	cmp	r3, #4
 810113a:	d864      	bhi.n	8101206 <adcHandlerThread+0x106>
 810113c:	a201      	add	r2, pc, #4	; (adr r2, 8101144 <adcHandlerThread+0x44>)
 810113e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101142:	bf00      	nop
 8101144:	08101159 	.word	0x08101159
 8101148:	081011a7 	.word	0x081011a7
 810114c:	081011f3 	.word	0x081011f3
 8101150:	081011f9 	.word	0x081011f9
 8101154:	081011ff 	.word	0x081011ff
		case MSG_ADC_CONVERSION_START:
			if (isAdcRunning) { // ADC already started
 8101158:	4b48      	ldr	r3, [pc, #288]	; (810127c <adcHandlerThread+0x17c>)
 810115a:	781b      	ldrb	r3, [r3, #0]
 810115c:	2b00      	cmp	r3, #0
 810115e:	f040 8085 	bne.w	810126c <adcHandlerThread+0x16c>
				continue;
			}

			// Start DMA transfer and timer
			if (HAL_ADC_Start_DMA(adcPointer, (uint32_t*) double_1ch_conversion_data,
 8101162:	4b47      	ldr	r3, [pc, #284]	; (8101280 <adcHandlerThread+0x180>)
 8101164:	681b      	ldr	r3, [r3, #0]
 8101166:	f24c 3250 	movw	r2, #50000	; 0xc350
 810116a:	4946      	ldr	r1, [pc, #280]	; (8101284 <adcHandlerThread+0x184>)
 810116c:	4618      	mov	r0, r3
 810116e:	f000 ff1f 	bl	8101fb0 <HAL_ADC_Start_DMA>
 8101172:	4603      	mov	r3, r0
 8101174:	2b00      	cmp	r3, #0
 8101176:	d003      	beq.n	8101180 <adcHandlerThread+0x80>
			ADC_DOUBLE_BUFFER_SIZE) != HAL_OK) {
				PRINTF("ADC_THREAD : Error while starting the DMA");
 8101178:	4843      	ldr	r0, [pc, #268]	; (8101288 <adcHandlerThread+0x188>)
 810117a:	f000 f9fd 	bl	8101578 <PrintServerPrintf>
				PRINTF("ADC_THREAD : Error while starting the timer");
			} else {
				PRINTF("ADC conversion started...");
				isAdcRunning = true;
			}
			continue;
 810117e:	e078      	b.n	8101272 <adcHandlerThread+0x172>
			} else if (HAL_TIM_Base_Start(timPointer) != HAL_OK) {
 8101180:	4b42      	ldr	r3, [pc, #264]	; (810128c <adcHandlerThread+0x18c>)
 8101182:	681b      	ldr	r3, [r3, #0]
 8101184:	4618      	mov	r0, r3
 8101186:	f008 f885 	bl	8109294 <HAL_TIM_Base_Start>
 810118a:	4603      	mov	r3, r0
 810118c:	2b00      	cmp	r3, #0
 810118e:	d003      	beq.n	8101198 <adcHandlerThread+0x98>
				PRINTF("ADC_THREAD : Error while starting the timer");
 8101190:	483f      	ldr	r0, [pc, #252]	; (8101290 <adcHandlerThread+0x190>)
 8101192:	f000 f9f1 	bl	8101578 <PrintServerPrintf>
			continue;
 8101196:	e06c      	b.n	8101272 <adcHandlerThread+0x172>
				PRINTF("ADC conversion started...");
 8101198:	483e      	ldr	r0, [pc, #248]	; (8101294 <adcHandlerThread+0x194>)
 810119a:	f000 f9ed 	bl	8101578 <PrintServerPrintf>
				isAdcRunning = true;
 810119e:	4b37      	ldr	r3, [pc, #220]	; (810127c <adcHandlerThread+0x17c>)
 81011a0:	2201      	movs	r2, #1
 81011a2:	701a      	strb	r2, [r3, #0]
			continue;
 81011a4:	e065      	b.n	8101272 <adcHandlerThread+0x172>
		case MSG_ADC_CONVERSION_STOP:
			if (!isAdcRunning) { // ADC already stopped
 81011a6:	4b35      	ldr	r3, [pc, #212]	; (810127c <adcHandlerThread+0x17c>)
 81011a8:	781b      	ldrb	r3, [r3, #0]
 81011aa:	f083 0301 	eor.w	r3, r3, #1
 81011ae:	b2db      	uxtb	r3, r3
 81011b0:	2b00      	cmp	r3, #0
 81011b2:	d15d      	bne.n	8101270 <adcHandlerThread+0x170>
				continue;
			}

			// Stop DMA transfer and timer
			if (HAL_ADC_Stop_DMA(adcPointer) != HAL_OK) {
 81011b4:	4b32      	ldr	r3, [pc, #200]	; (8101280 <adcHandlerThread+0x180>)
 81011b6:	681b      	ldr	r3, [r3, #0]
 81011b8:	4618      	mov	r0, r3
 81011ba:	f000 ffbd 	bl	8102138 <HAL_ADC_Stop_DMA>
 81011be:	4603      	mov	r3, r0
 81011c0:	2b00      	cmp	r3, #0
 81011c2:	d003      	beq.n	81011cc <adcHandlerThread+0xcc>
				PRINTF("ADC_THREAD : Error while stopping the DMA");
 81011c4:	4834      	ldr	r0, [pc, #208]	; (8101298 <adcHandlerThread+0x198>)
 81011c6:	f000 f9d7 	bl	8101578 <PrintServerPrintf>
				PRINTF("ADC_THREAD : Error while stopping the timer");
			} else {
				PRINTF("ADC conversion stopped...");
				isAdcRunning = false;
			}
			continue;
 81011ca:	e052      	b.n	8101272 <adcHandlerThread+0x172>
			} else if (HAL_TIM_Base_Stop(timPointer) != HAL_OK) {
 81011cc:	4b2f      	ldr	r3, [pc, #188]	; (810128c <adcHandlerThread+0x18c>)
 81011ce:	681b      	ldr	r3, [r3, #0]
 81011d0:	4618      	mov	r0, r3
 81011d2:	f008 f8c7 	bl	8109364 <HAL_TIM_Base_Stop>
 81011d6:	4603      	mov	r3, r0
 81011d8:	2b00      	cmp	r3, #0
 81011da:	d003      	beq.n	81011e4 <adcHandlerThread+0xe4>
				PRINTF("ADC_THREAD : Error while stopping the timer");
 81011dc:	482f      	ldr	r0, [pc, #188]	; (810129c <adcHandlerThread+0x19c>)
 81011de:	f000 f9cb 	bl	8101578 <PrintServerPrintf>
			continue;
 81011e2:	e046      	b.n	8101272 <adcHandlerThread+0x172>
				PRINTF("ADC conversion stopped...");
 81011e4:	482e      	ldr	r0, [pc, #184]	; (81012a0 <adcHandlerThread+0x1a0>)
 81011e6:	f000 f9c7 	bl	8101578 <PrintServerPrintf>
				isAdcRunning = false;
 81011ea:	4b24      	ldr	r3, [pc, #144]	; (810127c <adcHandlerThread+0x17c>)
 81011ec:	2200      	movs	r2, #0
 81011ee:	701a      	strb	r2, [r3, #0]
			continue;
 81011f0:	e03f      	b.n	8101272 <adcHandlerThread+0x172>
		case MSG_ADC_BUFFER_HALF_COMPLETE:
			sampleStart = (uint16_t*) &double_1ch_conversion_data[0];
 81011f2:	4b24      	ldr	r3, [pc, #144]	; (8101284 <adcHandlerThread+0x184>)
 81011f4:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 81011f6:	e006      	b.n	8101206 <adcHandlerThread+0x106>
		case MSG_ADC_BUFFER_COMPLETE:
			sampleStart = (uint16_t*) &double_1ch_conversion_data[ADC_DOUBLE_BUFFER_BLOCK_SIZE];
 81011f8:	4b2a      	ldr	r3, [pc, #168]	; (81012a4 <adcHandlerThread+0x1a4>)
 81011fa:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 81011fc:	e003      	b.n	8101206 <adcHandlerThread+0x106>
		case MSG_ADC_ERROR:
			PRINTF("ADC_THREAD : Error while sampling");
 81011fe:	482a      	ldr	r0, [pc, #168]	; (81012a8 <adcHandlerThread+0x1a8>)
 8101200:	f000 f9ba 	bl	8101578 <PrintServerPrintf>
			continue;
 8101204:	e035      	b.n	8101272 <adcHandlerThread+0x172>
		}

		// Compute average
		uint32_t average = 0;
 8101206:	2300      	movs	r3, #0
 8101208:	61fb      	str	r3, [r7, #28]
		for (uint i = 0; i < ADC_DOUBLE_BUFFER_BLOCK_SIZE; ++i) {
 810120a:	2300      	movs	r3, #0
 810120c:	61bb      	str	r3, [r7, #24]
 810120e:	e00b      	b.n	8101228 <adcHandlerThread+0x128>
			average += *(sampleStart + i);
 8101210:	69bb      	ldr	r3, [r7, #24]
 8101212:	005b      	lsls	r3, r3, #1
 8101214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8101216:	4413      	add	r3, r2
 8101218:	881b      	ldrh	r3, [r3, #0]
 810121a:	461a      	mov	r2, r3
 810121c:	69fb      	ldr	r3, [r7, #28]
 810121e:	4413      	add	r3, r2
 8101220:	61fb      	str	r3, [r7, #28]
		for (uint i = 0; i < ADC_DOUBLE_BUFFER_BLOCK_SIZE; ++i) {
 8101222:	69bb      	ldr	r3, [r7, #24]
 8101224:	3301      	adds	r3, #1
 8101226:	61bb      	str	r3, [r7, #24]
 8101228:	69bb      	ldr	r3, [r7, #24]
 810122a:	f246 12a7 	movw	r2, #24999	; 0x61a7
 810122e:	4293      	cmp	r3, r2
 8101230:	d9ee      	bls.n	8101210 <adcHandlerThread+0x110>
		}
		average /= ADC_DOUBLE_BUFFER_BLOCK_SIZE;
 8101232:	69fb      	ldr	r3, [r7, #28]
 8101234:	08db      	lsrs	r3, r3, #3
 8101236:	4a1d      	ldr	r2, [pc, #116]	; (81012ac <adcHandlerThread+0x1ac>)
 8101238:	fba2 2303 	umull	r2, r3, r2, r3
 810123c:	0a1b      	lsrs	r3, r3, #8
 810123e:	61fb      	str	r3, [r7, #28]

		// Convert average into mV
		uint32_t result = (average * mvReference) / resolutionBits;
 8101240:	69fb      	ldr	r3, [r7, #28]
 8101242:	697a      	ldr	r2, [r7, #20]
 8101244:	fb02 f203 	mul.w	r2, r2, r3
 8101248:	693b      	ldr	r3, [r7, #16]
 810124a:	fbb2 f3f3 	udiv	r3, r2, r3
 810124e:	60fb      	str	r3, [r7, #12]
		uint32_t currentTick = HAL_GetTick();
 8101250:	f000 faa0 	bl	8101794 <HAL_GetTick>
 8101254:	60b8      	str	r0, [r7, #8]
		PRINTF("Average Volt : %u mV. Time since last printout is %u ms.", result, currentTick - lastTick);
 8101256:	68ba      	ldr	r2, [r7, #8]
 8101258:	6a3b      	ldr	r3, [r7, #32]
 810125a:	1ad3      	subs	r3, r2, r3
 810125c:	461a      	mov	r2, r3
 810125e:	68f9      	ldr	r1, [r7, #12]
 8101260:	4813      	ldr	r0, [pc, #76]	; (81012b0 <adcHandlerThread+0x1b0>)
 8101262:	f000 f989 	bl	8101578 <PrintServerPrintf>
		lastTick = currentTick;
 8101266:	68bb      	ldr	r3, [r7, #8]
 8101268:	623b      	str	r3, [r7, #32]
 810126a:	e754      	b.n	8101116 <adcHandlerThread+0x16>
				continue;
 810126c:	bf00      	nop
 810126e:	e752      	b.n	8101116 <adcHandlerThread+0x16>
				continue;
 8101270:	bf00      	nop
	while (1) {
 8101272:	e750      	b.n	8101116 <adcHandlerThread+0x16>
 8101274:	100228c8 	.word	0x100228c8
 8101278:	0811000c 	.word	0x0811000c
 810127c:	10022a6c 	.word	0x10022a6c
 8101280:	10000008 	.word	0x10000008
 8101284:	100000a0 	.word	0x100000a0
 8101288:	08110040 	.word	0x08110040
 810128c:	1000000c 	.word	0x1000000c
 8101290:	0811006c 	.word	0x0811006c
 8101294:	08110098 	.word	0x08110098
 8101298:	081100b4 	.word	0x081100b4
 810129c:	081100e0 	.word	0x081100e0
 81012a0:	0811010c 	.word	0x0811010c
 81012a4:	1000c3f0 	.word	0x1000c3f0
 81012a8:	08110128 	.word	0x08110128
 81012ac:	14f8b589 	.word	0x14f8b589
 81012b0:	0811014c 	.word	0x0811014c

081012b4 <HAL_ADC_ConvHalfCpltCallback>:
	}
}

// Overide of the interuption routines functions of the adc

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 81012b4:	b580      	push	{r7, lr}
 81012b6:	b084      	sub	sp, #16
 81012b8:	af00      	add	r7, sp, #0
 81012ba:	6078      	str	r0, [r7, #4]
	uint msg = MSG_ADC_BUFFER_HALF_COMPLETE;
 81012bc:	2303      	movs	r3, #3
 81012be:	60fb      	str	r3, [r7, #12]
	osMessageQueuePut(adcMessageQueueId, &msg, 0, 0);
 81012c0:	4b05      	ldr	r3, [pc, #20]	; (81012d8 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 81012c2:	6818      	ldr	r0, [r3, #0]
 81012c4:	f107 010c 	add.w	r1, r7, #12
 81012c8:	2300      	movs	r3, #0
 81012ca:	2200      	movs	r2, #0
 81012cc:	f00a fc08 	bl	810bae0 <osMessageQueuePut>
}
 81012d0:	bf00      	nop
 81012d2:	3710      	adds	r7, #16
 81012d4:	46bd      	mov	sp, r7
 81012d6:	bd80      	pop	{r7, pc}
 81012d8:	100228c8 	.word	0x100228c8

081012dc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 81012dc:	b580      	push	{r7, lr}
 81012de:	b084      	sub	sp, #16
 81012e0:	af00      	add	r7, sp, #0
 81012e2:	6078      	str	r0, [r7, #4]
	uint msg = MSG_ADC_BUFFER_COMPLETE;
 81012e4:	2304      	movs	r3, #4
 81012e6:	60fb      	str	r3, [r7, #12]
	osMessageQueuePut(adcMessageQueueId, &msg, 0, 0);
 81012e8:	4b05      	ldr	r3, [pc, #20]	; (8101300 <HAL_ADC_ConvCpltCallback+0x24>)
 81012ea:	6818      	ldr	r0, [r3, #0]
 81012ec:	f107 010c 	add.w	r1, r7, #12
 81012f0:	2300      	movs	r3, #0
 81012f2:	2200      	movs	r2, #0
 81012f4:	f00a fbf4 	bl	810bae0 <osMessageQueuePut>
}
 81012f8:	bf00      	nop
 81012fa:	3710      	adds	r7, #16
 81012fc:	46bd      	mov	sp, r7
 81012fe:	bd80      	pop	{r7, pc}
 8101300:	100228c8 	.word	0x100228c8

08101304 <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc) {
 8101304:	b580      	push	{r7, lr}
 8101306:	b084      	sub	sp, #16
 8101308:	af00      	add	r7, sp, #0
 810130a:	6078      	str	r0, [r7, #4]
	uint msg = MSG_ADC_ERROR;
 810130c:	2305      	movs	r3, #5
 810130e:	60fb      	str	r3, [r7, #12]
	osMessageQueuePut(adcMessageQueueId, &msg, 0, 0);
 8101310:	4b05      	ldr	r3, [pc, #20]	; (8101328 <HAL_ADC_ErrorCallback+0x24>)
 8101312:	6818      	ldr	r0, [r3, #0]
 8101314:	f107 010c 	add.w	r1, r7, #12
 8101318:	2300      	movs	r3, #0
 810131a:	2200      	movs	r2, #0
 810131c:	f00a fbe0 	bl	810bae0 <osMessageQueuePut>
}
 8101320:	bf00      	nop
 8101322:	3710      	adds	r7, #16
 8101324:	46bd      	mov	sp, r7
 8101326:	bd80      	pop	{r7, pc}
 8101328:	100228c8 	.word	0x100228c8

0810132c <AppInit>:
 * @brief The function used in the main thread of the CM4 core
 *
 */
void app_CM4();

void AppInit() {
 810132c:	b580      	push	{r7, lr}
 810132e:	b08a      	sub	sp, #40	; 0x28
 8101330:	af00      	add	r7, sp, #0
	// Initialize uart and adc
	if (PrintServerInit(&huart3)) {
 8101332:	4812      	ldr	r0, [pc, #72]	; (810137c <AppInit+0x50>)
 8101334:	f000 f84e 	bl	81013d4 <PrintServerInit>
 8101338:	4603      	mov	r3, r0
 810133a:	2b00      	cmp	r3, #0
 810133c:	d002      	beq.n	8101344 <AppInit+0x18>
		PRINTF("UART initialized correctly");
 810133e:	4810      	ldr	r0, [pc, #64]	; (8101380 <AppInit+0x54>)
 8101340:	f000 f91a 	bl	8101578 <PrintServerPrintf>
	}

	if (adcAppInit()) {
 8101344:	f7ff fe78 	bl	8101038 <adcAppInit>
 8101348:	4603      	mov	r3, r0
 810134a:	2b00      	cmp	r3, #0
 810134c:	d002      	beq.n	8101354 <AppInit+0x28>
		PRINTF("ADC initialized correctly");
 810134e:	480d      	ldr	r0, [pc, #52]	; (8101384 <AppInit+0x58>)
 8101350:	f000 f912 	bl	8101578 <PrintServerPrintf>
	}

	// Launch main app thread
	osThreadAttr_t app_CM4_attributes = { .name = "app_CM4", .priority = osPriorityNormal };
 8101354:	1d3b      	adds	r3, r7, #4
 8101356:	2224      	movs	r2, #36	; 0x24
 8101358:	2100      	movs	r1, #0
 810135a:	4618      	mov	r0, r3
 810135c:	f00e f94c 	bl	810f5f8 <memset>
 8101360:	4b09      	ldr	r3, [pc, #36]	; (8101388 <AppInit+0x5c>)
 8101362:	607b      	str	r3, [r7, #4]
 8101364:	2318      	movs	r3, #24
 8101366:	61fb      	str	r3, [r7, #28]
	osThreadNew(app_CM4, NULL, &app_CM4_attributes);
 8101368:	1d3b      	adds	r3, r7, #4
 810136a:	461a      	mov	r2, r3
 810136c:	2100      	movs	r1, #0
 810136e:	4807      	ldr	r0, [pc, #28]	; (810138c <AppInit+0x60>)
 8101370:	f00a f9c4 	bl	810b6fc <osThreadNew>
}
 8101374:	bf00      	nop
 8101376:	3728      	adds	r7, #40	; 0x28
 8101378:	46bd      	mov	sp, r7
 810137a:	bd80      	pop	{r7, pc}
 810137c:	10022964 	.word	0x10022964
 8101380:	08110188 	.word	0x08110188
 8101384:	081101a4 	.word	0x081101a4
 8101388:	081101c0 	.word	0x081101c0
 810138c:	08101391 	.word	0x08101391

08101390 <app_CM4>:

void app_CM4() {
 8101390:	b580      	push	{r7, lr}
 8101392:	b082      	sub	sp, #8
 8101394:	af00      	add	r7, sp, #0
	uint msg;
	while (1) {
		msg = MSG_ADC_CONVERSION_START;
 8101396:	2301      	movs	r3, #1
 8101398:	607b      	str	r3, [r7, #4]
		osMessageQueuePut(adcMessageQueueId, &msg, 0, osWaitForever);
 810139a:	4b0d      	ldr	r3, [pc, #52]	; (81013d0 <app_CM4+0x40>)
 810139c:	6818      	ldr	r0, [r3, #0]
 810139e:	1d39      	adds	r1, r7, #4
 81013a0:	f04f 33ff 	mov.w	r3, #4294967295
 81013a4:	2200      	movs	r2, #0
 81013a6:	f00a fb9b 	bl	810bae0 <osMessageQueuePut>
		osDelay(10000);
 81013aa:	f242 7010 	movw	r0, #10000	; 0x2710
 81013ae:	f00a fb08 	bl	810b9c2 <osDelay>

		msg = MSG_ADC_CONVERSION_STOP;
 81013b2:	2302      	movs	r3, #2
 81013b4:	607b      	str	r3, [r7, #4]
		osMessageQueuePut(adcMessageQueueId, &msg, 0, osWaitForever);
 81013b6:	4b06      	ldr	r3, [pc, #24]	; (81013d0 <app_CM4+0x40>)
 81013b8:	6818      	ldr	r0, [r3, #0]
 81013ba:	1d39      	adds	r1, r7, #4
 81013bc:	f04f 33ff 	mov.w	r3, #4294967295
 81013c0:	2200      	movs	r2, #0
 81013c2:	f00a fb8d 	bl	810bae0 <osMessageQueuePut>
		osDelay(10000);
 81013c6:	f242 7010 	movw	r0, #10000	; 0x2710
 81013ca:	f00a fafa 	bl	810b9c2 <osDelay>
		msg = MSG_ADC_CONVERSION_START;
 81013ce:	e7e2      	b.n	8101396 <app_CM4+0x6>
 81013d0:	100228c8 	.word	0x100228c8

081013d4 <PrintServerInit>:

/* Define PrintServer thread id */
osThreadId_t print_server_thread_id = NULL;

bool PrintServerInit(void *huart)
{
 81013d4:	b580      	push	{r7, lr}
 81013d6:	b098      	sub	sp, #96	; 0x60
 81013d8:	af00      	add	r7, sp, #0
 81013da:	6078      	str	r0, [r7, #4]
	/* Define PrintServer thread attributes */
	osThreadAttr_t print_server_thread_attributes = {
 81013dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 81013e0:	2224      	movs	r2, #36	; 0x24
 81013e2:	2100      	movs	r1, #0
 81013e4:	4618      	mov	r0, r3
 81013e6:	f00e f907 	bl	810f5f8 <memset>
 81013ea:	4b2b      	ldr	r3, [pc, #172]	; (8101498 <PrintServerInit+0xc4>)
 81013ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 81013ee:	2318      	movs	r3, #24
 81013f0:	657b      	str	r3, [r7, #84]	; 0x54
		.name = "PrintServerThread", .priority = osPriorityNormal};

	/* Define PrintServer memory pool attributes */
	osMemoryPoolAttr_t print_server_pool_attributes = {
 81013f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81013f6:	2200      	movs	r2, #0
 81013f8:	601a      	str	r2, [r3, #0]
 81013fa:	605a      	str	r2, [r3, #4]
 81013fc:	609a      	str	r2, [r3, #8]
 81013fe:	60da      	str	r2, [r3, #12]
 8101400:	611a      	str	r2, [r3, #16]
 8101402:	615a      	str	r2, [r3, #20]
 8101404:	4b25      	ldr	r3, [pc, #148]	; (810149c <PrintServerInit+0xc8>)
 8101406:	627b      	str	r3, [r7, #36]	; 0x24
		.name = "PrintServerPool"
	};

	/* Define PrintServer message queue attributes */
	osMessageQueueAttr_t print_server_message_queue_attributes = {
 8101408:	f107 030c 	add.w	r3, r7, #12
 810140c:	2200      	movs	r2, #0
 810140e:	601a      	str	r2, [r3, #0]
 8101410:	605a      	str	r2, [r3, #4]
 8101412:	609a      	str	r2, [r3, #8]
 8101414:	60da      	str	r2, [r3, #12]
 8101416:	611a      	str	r2, [r3, #16]
 8101418:	615a      	str	r2, [r3, #20]
 810141a:	4b21      	ldr	r3, [pc, #132]	; (81014a0 <PrintServerInit+0xcc>)
 810141c:	60fb      	str	r3, [r7, #12]
		.name = "PrintServerMessageQueue"
	};

	if (huart == NULL) {
 810141e:	687b      	ldr	r3, [r7, #4]
 8101420:	2b00      	cmp	r3, #0
 8101422:	d101      	bne.n	8101428 <PrintServerInit+0x54>
		return false;
 8101424:	2300      	movs	r3, #0
 8101426:	e033      	b.n	8101490 <PrintServerInit+0xbc>
	}

	/* Store UART handle to Use by PrintServer */
	print_server_uart_handle_p = (UART_HandleTypeDef *)huart;
 8101428:	4a1e      	ldr	r2, [pc, #120]	; (81014a4 <PrintServerInit+0xd0>)
 810142a:	687b      	ldr	r3, [r7, #4]
 810142c:	6013      	str	r3, [r2, #0]

	/* Create PrintServer memory pool */
	print_server_pool_id = osMemoryPoolNew(
 810142e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8101432:	461a      	mov	r2, r3
 8101434:	21e0      	movs	r1, #224	; 0xe0
 8101436:	2028      	movs	r0, #40	; 0x28
 8101438:	f00a fc10 	bl	810bc5c <osMemoryPoolNew>
 810143c:	4603      	mov	r3, r0
 810143e:	4a1a      	ldr	r2, [pc, #104]	; (81014a8 <PrintServerInit+0xd4>)
 8101440:	6013      	str	r3, [r2, #0]
		PS_POOL_AND_MESSAGE_QUEUE_SIZE, sizeof(print_server_block_format_t),
		&print_server_pool_attributes);
	if (print_server_pool_id == NULL) return false;
 8101442:	4b19      	ldr	r3, [pc, #100]	; (81014a8 <PrintServerInit+0xd4>)
 8101444:	681b      	ldr	r3, [r3, #0]
 8101446:	2b00      	cmp	r3, #0
 8101448:	d101      	bne.n	810144e <PrintServerInit+0x7a>
 810144a:	2300      	movs	r3, #0
 810144c:	e020      	b.n	8101490 <PrintServerInit+0xbc>

	/* Create PrintServer message queue */
	print_server_msg_qid = osMessageQueueNew(
 810144e:	f107 030c 	add.w	r3, r7, #12
 8101452:	461a      	mov	r2, r3
 8101454:	2104      	movs	r1, #4
 8101456:	2028      	movs	r0, #40	; 0x28
 8101458:	f00a face 	bl	810b9f8 <osMessageQueueNew>
 810145c:	4603      	mov	r3, r0
 810145e:	4a13      	ldr	r2, [pc, #76]	; (81014ac <PrintServerInit+0xd8>)
 8101460:	6013      	str	r3, [r2, #0]
		PS_POOL_AND_MESSAGE_QUEUE_SIZE, sizeof(uint32_t),
		&print_server_message_queue_attributes);
	if (print_server_msg_qid == NULL) return false;
 8101462:	4b12      	ldr	r3, [pc, #72]	; (81014ac <PrintServerInit+0xd8>)
 8101464:	681b      	ldr	r3, [r3, #0]
 8101466:	2b00      	cmp	r3, #0
 8101468:	d101      	bne.n	810146e <PrintServerInit+0x9a>
 810146a:	2300      	movs	r3, #0
 810146c:	e010      	b.n	8101490 <PrintServerInit+0xbc>
	
	/* Create PrintServer thread */
	print_server_thread_id = osThreadNew(PrintServer, NULL, &print_server_thread_attributes);
 810146e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8101472:	461a      	mov	r2, r3
 8101474:	2100      	movs	r1, #0
 8101476:	480e      	ldr	r0, [pc, #56]	; (81014b0 <PrintServerInit+0xdc>)
 8101478:	f00a f940 	bl	810b6fc <osThreadNew>
 810147c:	4603      	mov	r3, r0
 810147e:	4a0d      	ldr	r2, [pc, #52]	; (81014b4 <PrintServerInit+0xe0>)
 8101480:	6013      	str	r3, [r2, #0]
	if (print_server_thread_id == NULL) return false;
 8101482:	4b0c      	ldr	r3, [pc, #48]	; (81014b4 <PrintServerInit+0xe0>)
 8101484:	681b      	ldr	r3, [r3, #0]
 8101486:	2b00      	cmp	r3, #0
 8101488:	d101      	bne.n	810148e <PrintServerInit+0xba>
 810148a:	2300      	movs	r3, #0
 810148c:	e000      	b.n	8101490 <PrintServerInit+0xbc>

	return true;
 810148e:	2301      	movs	r3, #1
}
 8101490:	4618      	mov	r0, r3
 8101492:	3760      	adds	r7, #96	; 0x60
 8101494:	46bd      	mov	sp, r7
 8101496:	bd80      	pop	{r7, pc}
 8101498:	081101c8 	.word	0x081101c8
 810149c:	081101dc 	.word	0x081101dc
 81014a0:	081101ec 	.word	0x081101ec
 81014a4:	10018740 	.word	0x10018740
 81014a8:	10018744 	.word	0x10018744
 81014ac:	10018748 	.word	0x10018748
 81014b0:	081015f5 	.word	0x081015f5
 81014b4:	1001874c 	.word	0x1001874c

081014b8 <PrintServerCRLF>:

static void PrintServerCRLF(char * const buf)
{
 81014b8:	b580      	push	{r7, lr}
 81014ba:	b084      	sub	sp, #16
 81014bc:	af00      	add	r7, sp, #0
 81014be:	6078      	str	r0, [r7, #4]
	uint32_t len = strlen(buf);
 81014c0:	6878      	ldr	r0, [r7, #4]
 81014c2:	f7fe ff0d 	bl	81002e0 <strlen>
 81014c6:	60f8      	str	r0, [r7, #12]

	if ((len > 1) &&
 81014c8:	68fb      	ldr	r3, [r7, #12]
 81014ca:	2b01      	cmp	r3, #1
 81014cc:	d91b      	bls.n	8101506 <PrintServerCRLF+0x4e>
	    (((buf[len - 2] == '\r') && (buf[len - 1] == '\n')) ||
 81014ce:	68fb      	ldr	r3, [r7, #12]
 81014d0:	3b02      	subs	r3, #2
 81014d2:	687a      	ldr	r2, [r7, #4]
 81014d4:	4413      	add	r3, r2
 81014d6:	781b      	ldrb	r3, [r3, #0]
	if ((len > 1) &&
 81014d8:	2b0d      	cmp	r3, #13
 81014da:	d106      	bne.n	81014ea <PrintServerCRLF+0x32>
	    (((buf[len - 2] == '\r') && (buf[len - 1] == '\n')) ||
 81014dc:	68fb      	ldr	r3, [r7, #12]
 81014de:	3b01      	subs	r3, #1
 81014e0:	687a      	ldr	r2, [r7, #4]
 81014e2:	4413      	add	r3, r2
 81014e4:	781b      	ldrb	r3, [r3, #0]
 81014e6:	2b0a      	cmp	r3, #10
 81014e8:	d041      	beq.n	810156e <PrintServerCRLF+0xb6>
		 ((buf[len - 2] == '\n') && (buf[len - 1] == '\r')))) {
 81014ea:	68fb      	ldr	r3, [r7, #12]
 81014ec:	3b02      	subs	r3, #2
 81014ee:	687a      	ldr	r2, [r7, #4]
 81014f0:	4413      	add	r3, r2
 81014f2:	781b      	ldrb	r3, [r3, #0]
	    (((buf[len - 2] == '\r') && (buf[len - 1] == '\n')) ||
 81014f4:	2b0a      	cmp	r3, #10
 81014f6:	d106      	bne.n	8101506 <PrintServerCRLF+0x4e>
		 ((buf[len - 2] == '\n') && (buf[len - 1] == '\r')))) {
 81014f8:	68fb      	ldr	r3, [r7, #12]
 81014fa:	3b01      	subs	r3, #1
 81014fc:	687a      	ldr	r2, [r7, #4]
 81014fe:	4413      	add	r3, r2
 8101500:	781b      	ldrb	r3, [r3, #0]
 8101502:	2b0d      	cmp	r3, #13
 8101504:	d033      	beq.n	810156e <PrintServerCRLF+0xb6>
		return;
	}

	if ((buf[len - 1] == '\r') ||  (buf[len - 1] == '\n')) {
 8101506:	68fb      	ldr	r3, [r7, #12]
 8101508:	3b01      	subs	r3, #1
 810150a:	687a      	ldr	r2, [r7, #4]
 810150c:	4413      	add	r3, r2
 810150e:	781b      	ldrb	r3, [r3, #0]
 8101510:	2b0d      	cmp	r3, #13
 8101512:	d006      	beq.n	8101522 <PrintServerCRLF+0x6a>
 8101514:	68fb      	ldr	r3, [r7, #12]
 8101516:	3b01      	subs	r3, #1
 8101518:	687a      	ldr	r2, [r7, #4]
 810151a:	4413      	add	r3, r2
 810151c:	781b      	ldrb	r3, [r3, #0]
 810151e:	2b0a      	cmp	r3, #10
 8101520:	d102      	bne.n	8101528 <PrintServerCRLF+0x70>
		len--;
 8101522:	68fb      	ldr	r3, [r7, #12]
 8101524:	3b01      	subs	r3, #1
 8101526:	60fb      	str	r3, [r7, #12]
	}

	if (len == PS_PRINT_BUFFER_SIZE - 1U) {
 8101528:	68fb      	ldr	r3, [r7, #12]
 810152a:	2bdf      	cmp	r3, #223	; 0xdf
 810152c:	d103      	bne.n	8101536 <PrintServerCRLF+0x7e>
		len -= 2U;
 810152e:	68fb      	ldr	r3, [r7, #12]
 8101530:	3b02      	subs	r3, #2
 8101532:	60fb      	str	r3, [r7, #12]
 8101534:	e005      	b.n	8101542 <PrintServerCRLF+0x8a>
	} else if (len == PS_PRINT_BUFFER_SIZE - 2U) {
 8101536:	68fb      	ldr	r3, [r7, #12]
 8101538:	2bde      	cmp	r3, #222	; 0xde
 810153a:	d102      	bne.n	8101542 <PrintServerCRLF+0x8a>
		len -= 1U;
 810153c:	68fb      	ldr	r3, [r7, #12]
 810153e:	3b01      	subs	r3, #1
 8101540:	60fb      	str	r3, [r7, #12]
	}
	buf[len] = '\r';
 8101542:	687a      	ldr	r2, [r7, #4]
 8101544:	68fb      	ldr	r3, [r7, #12]
 8101546:	4413      	add	r3, r2
 8101548:	220d      	movs	r2, #13
 810154a:	701a      	strb	r2, [r3, #0]
	len++;
 810154c:	68fb      	ldr	r3, [r7, #12]
 810154e:	3301      	adds	r3, #1
 8101550:	60fb      	str	r3, [r7, #12]
	buf[len] = '\n';
 8101552:	687a      	ldr	r2, [r7, #4]
 8101554:	68fb      	ldr	r3, [r7, #12]
 8101556:	4413      	add	r3, r2
 8101558:	220a      	movs	r2, #10
 810155a:	701a      	strb	r2, [r3, #0]
	len++;
 810155c:	68fb      	ldr	r3, [r7, #12]
 810155e:	3301      	adds	r3, #1
 8101560:	60fb      	str	r3, [r7, #12]
	buf[len] = '\0';
 8101562:	687a      	ldr	r2, [r7, #4]
 8101564:	68fb      	ldr	r3, [r7, #12]
 8101566:	4413      	add	r3, r2
 8101568:	2200      	movs	r2, #0
 810156a:	701a      	strb	r2, [r3, #0]
 810156c:	e000      	b.n	8101570 <PrintServerCRLF+0xb8>
		return;
 810156e:	bf00      	nop
}
 8101570:	3710      	adds	r7, #16
 8101572:	46bd      	mov	sp, r7
 8101574:	bd80      	pop	{r7, pc}
	...

08101578 <PrintServerPrintf>:

void PrintServerPrintf(const char *fmt, ...)
{
 8101578:	b40f      	push	{r0, r1, r2, r3}
 810157a:	b580      	push	{r7, lr}
 810157c:	b084      	sub	sp, #16
 810157e:	af00      	add	r7, sp, #0
	/* va_list is a type to hold information about variable arguments */
	va_list args;

	osStatus_t status = osError;
 8101580:	f04f 33ff 	mov.w	r3, #4294967295
 8101584:	60fb      	str	r3, [r7, #12]
	
	/* Allocate a memory pool block */
	print_server_block_format_t *block_p = (print_server_block_format_t *)osMemoryPoolAlloc(print_server_pool_id, 0);
 8101586:	4b19      	ldr	r3, [pc, #100]	; (81015ec <PrintServerPrintf+0x74>)
 8101588:	681b      	ldr	r3, [r3, #0]
 810158a:	2100      	movs	r1, #0
 810158c:	4618      	mov	r0, r3
 810158e:	f00a fc3b 	bl	810be08 <osMemoryPoolAlloc>
 8101592:	4603      	mov	r3, r0
 8101594:	607b      	str	r3, [r7, #4]

	if (block_p == NULL) {
 8101596:	687b      	ldr	r3, [r7, #4]
 8101598:	2b00      	cmp	r3, #0
 810159a:	d020      	beq.n	81015de <PrintServerPrintf+0x66>
		/* Pool is empty, bail out */
		return;
	}

	/* va_start must be called before accessing variable argument list */
	va_start(args, fmt);
 810159c:	f107 031c 	add.w	r3, r7, #28
 81015a0:	60bb      	str	r3, [r7, #8]
	 * the number of arguments in that list is fixed when you compile the program.
	 *
	 * The vsnprintf() function converts each entry in the argument list according
	 * to the corresponding format specifier in format. The format has the same form
	 * and function as the format string for the printf() function. */
	vsnprintf((char *)block_p->buff, PS_PRINT_BUFFER_SIZE, fmt, args);
 81015a2:	687b      	ldr	r3, [r7, #4]
 81015a4:	4618      	mov	r0, r3
 81015a6:	68bb      	ldr	r3, [r7, #8]
 81015a8:	69ba      	ldr	r2, [r7, #24]
 81015aa:	21e0      	movs	r1, #224	; 0xe0
 81015ac:	f00e f92c 	bl	810f808 <vsniprintf>
	/* va_end should be executed before the function returns whenever
	 * va_start has been previously used in that function */
	va_end(args);

	/* Make sure formatted printout ends with \r\n */
	PrintServerCRLF((char *)block_p->buff);
 81015b0:	687b      	ldr	r3, [r7, #4]
 81015b2:	4618      	mov	r0, r3
 81015b4:	f7ff ff80 	bl	81014b8 <PrintServerCRLF>

	/* Put the formatted printout on to the message queue */
	status = osMessageQueuePut(print_server_msg_qid, &block_p, 0, 0);
 81015b8:	4b0d      	ldr	r3, [pc, #52]	; (81015f0 <PrintServerPrintf+0x78>)
 81015ba:	6818      	ldr	r0, [r3, #0]
 81015bc:	1d39      	adds	r1, r7, #4
 81015be:	2300      	movs	r3, #0
 81015c0:	2200      	movs	r2, #0
 81015c2:	f00a fa8d 	bl	810bae0 <osMessageQueuePut>
 81015c6:	60f8      	str	r0, [r7, #12]

	if (status != osOK) {
 81015c8:	68fb      	ldr	r3, [r7, #12]
 81015ca:	2b00      	cmp	r3, #0
 81015cc:	d008      	beq.n	81015e0 <PrintServerPrintf+0x68>
		/* Free pool buffer and bail out */
		osMemoryPoolFree(print_server_pool_id, block_p);
 81015ce:	4b07      	ldr	r3, [pc, #28]	; (81015ec <PrintServerPrintf+0x74>)
 81015d0:	681b      	ldr	r3, [r3, #0]
 81015d2:	687a      	ldr	r2, [r7, #4]
 81015d4:	4611      	mov	r1, r2
 81015d6:	4618      	mov	r0, r3
 81015d8:	f00a fc8c 	bl	810bef4 <osMemoryPoolFree>
 81015dc:	e000      	b.n	81015e0 <PrintServerPrintf+0x68>
		return;
 81015de:	bf00      	nop
	}
}
 81015e0:	3710      	adds	r7, #16
 81015e2:	46bd      	mov	sp, r7
 81015e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 81015e8:	b004      	add	sp, #16
 81015ea:	4770      	bx	lr
 81015ec:	10018744 	.word	0x10018744
 81015f0:	10018748 	.word	0x10018748

081015f4 <PrintServer>:

void PrintServer(void *arg)
{
 81015f4:	b5b0      	push	{r4, r5, r7, lr}
 81015f6:	b086      	sub	sp, #24
 81015f8:	af00      	add	r7, sp, #0
 81015fa:	6078      	str	r0, [r7, #4]
	while (1)
	{
		print_server_block_format_t *block_p;
		osStatus_t status = osMessageQueueGet(print_server_msg_qid, (void *)&block_p, NULL, osWaitForever);
 81015fc:	4b1c      	ldr	r3, [pc, #112]	; (8101670 <PrintServer+0x7c>)
 81015fe:	6818      	ldr	r0, [r3, #0]
 8101600:	f107 010c 	add.w	r1, r7, #12
 8101604:	f04f 33ff 	mov.w	r3, #4294967295
 8101608:	2200      	movs	r2, #0
 810160a:	f00a fac9 	bl	810bba0 <osMessageQueueGet>
 810160e:	6178      	str	r0, [r7, #20]

		if (status == osOK) {
 8101610:	697b      	ldr	r3, [r7, #20]
 8101612:	2b00      	cmp	r3, #0
 8101614:	d1f2      	bne.n	81015fc <PrintServer+0x8>
			if (HAL_UART_Transmit_DMA(print_server_uart_handle_p, block_p->buff, strlen((char *)block_p->buff)) == HAL_OK) {
 8101616:	4b17      	ldr	r3, [pc, #92]	; (8101674 <PrintServer+0x80>)
 8101618:	681c      	ldr	r4, [r3, #0]
 810161a:	68fb      	ldr	r3, [r7, #12]
 810161c:	461d      	mov	r5, r3
 810161e:	68fb      	ldr	r3, [r7, #12]
 8101620:	4618      	mov	r0, r3
 8101622:	f7fe fe5d 	bl	81002e0 <strlen>
 8101626:	4603      	mov	r3, r0
 8101628:	b29b      	uxth	r3, r3
 810162a:	461a      	mov	r2, r3
 810162c:	4629      	mov	r1, r5
 810162e:	4620      	mov	r0, r4
 8101630:	f008 fb98 	bl	8109d64 <HAL_UART_Transmit_DMA>
 8101634:	4603      	mov	r3, r0
 8101636:	2b00      	cmp	r3, #0
 8101638:	d112      	bne.n	8101660 <PrintServer+0x6c>
				uint32_t flag = osThreadFlagsWait(UART_TX_COMPLETED, osFlagsWaitAny, osWaitForever);
 810163a:	f04f 32ff 	mov.w	r2, #4294967295
 810163e:	2100      	movs	r1, #0
 8101640:	2004      	movs	r0, #4
 8101642:	f00a f93d 	bl	810b8c0 <osThreadFlagsWait>
 8101646:	6138      	str	r0, [r7, #16]

				if ((flag & osFlagsError) || !(flag & UART_TX_COMPLETED)) {
 8101648:	693b      	ldr	r3, [r7, #16]
 810164a:	2b00      	cmp	r3, #0
 810164c:	db04      	blt.n	8101658 <PrintServer+0x64>
 810164e:	693b      	ldr	r3, [r7, #16]
 8101650:	f003 0304 	and.w	r3, r3, #4
 8101654:	2b00      	cmp	r3, #0
 8101656:	d103      	bne.n	8101660 <PrintServer+0x6c>
					PrintServerPrintf("Error: Received unexpected flag 0x%x", flag);
 8101658:	6939      	ldr	r1, [r7, #16]
 810165a:	4807      	ldr	r0, [pc, #28]	; (8101678 <PrintServer+0x84>)
 810165c:	f7ff ff8c 	bl	8101578 <PrintServerPrintf>
				}
			}
			osMemoryPoolFree(print_server_pool_id, block_p);
 8101660:	4b06      	ldr	r3, [pc, #24]	; (810167c <PrintServer+0x88>)
 8101662:	681b      	ldr	r3, [r3, #0]
 8101664:	68fa      	ldr	r2, [r7, #12]
 8101666:	4611      	mov	r1, r2
 8101668:	4618      	mov	r0, r3
 810166a:	f00a fc43 	bl	810bef4 <osMemoryPoolFree>
	{
 810166e:	e7c5      	b.n	81015fc <PrintServer+0x8>
 8101670:	10018748 	.word	0x10018748
 8101674:	10018740 	.word	0x10018740
 8101678:	08110204 	.word	0x08110204
 810167c:	10018744 	.word	0x10018744

08101680 <HAL_UART_TxCpltCallback>:

/* Take over the weak defined HAL_UART_TxCpltCallback() */
#define PrintServerTxCompletedCB HAL_UART_TxCpltCallback

void PrintServerTxCompletedCB(UART_HandleTypeDef *huart)
{
 8101680:	b580      	push	{r7, lr}
 8101682:	b082      	sub	sp, #8
 8101684:	af00      	add	r7, sp, #0
 8101686:	6078      	str	r0, [r7, #4]
	if (huart == print_server_uart_handle_p) {
 8101688:	4b07      	ldr	r3, [pc, #28]	; (81016a8 <HAL_UART_TxCpltCallback+0x28>)
 810168a:	681b      	ldr	r3, [r3, #0]
 810168c:	687a      	ldr	r2, [r7, #4]
 810168e:	429a      	cmp	r2, r3
 8101690:	d105      	bne.n	810169e <HAL_UART_TxCpltCallback+0x1e>
		/* Set PrintServer thread flag */
		osThreadFlagsSet(print_server_thread_id, UART_TX_COMPLETED);
 8101692:	4b06      	ldr	r3, [pc, #24]	; (81016ac <HAL_UART_TxCpltCallback+0x2c>)
 8101694:	681b      	ldr	r3, [r3, #0]
 8101696:	2104      	movs	r1, #4
 8101698:	4618      	mov	r0, r3
 810169a:	f00a f8c3 	bl	810b824 <osThreadFlagsSet>
	}
}
 810169e:	bf00      	nop
 81016a0:	3708      	adds	r7, #8
 81016a2:	46bd      	mov	sp, r7
 81016a4:	bd80      	pop	{r7, pc}
 81016a6:	bf00      	nop
 81016a8:	10018740 	.word	0x10018740
 81016ac:	1001874c 	.word	0x1001874c

081016b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81016b0:	b580      	push	{r7, lr}
 81016b2:	b082      	sub	sp, #8
 81016b4:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81016b6:	4b28      	ldr	r3, [pc, #160]	; (8101758 <HAL_Init+0xa8>)
 81016b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81016bc:	4a26      	ldr	r2, [pc, #152]	; (8101758 <HAL_Init+0xa8>)
 81016be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81016c2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81016c6:	4b24      	ldr	r3, [pc, #144]	; (8101758 <HAL_Init+0xa8>)
 81016c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81016cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81016d0:	603b      	str	r3, [r7, #0]
 81016d2:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81016d4:	4b21      	ldr	r3, [pc, #132]	; (810175c <HAL_Init+0xac>)
 81016d6:	681b      	ldr	r3, [r3, #0]
 81016d8:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 81016dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81016e0:	4a1e      	ldr	r2, [pc, #120]	; (810175c <HAL_Init+0xac>)
 81016e2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 81016e6:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81016e8:	4b1c      	ldr	r3, [pc, #112]	; (810175c <HAL_Init+0xac>)
 81016ea:	681b      	ldr	r3, [r3, #0]
 81016ec:	4a1b      	ldr	r2, [pc, #108]	; (810175c <HAL_Init+0xac>)
 81016ee:	f043 0301 	orr.w	r3, r3, #1
 81016f2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81016f4:	2003      	movs	r0, #3
 81016f6:	f002 f8d8 	bl	81038aa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81016fa:	f005 f9d3 	bl	8106aa4 <HAL_RCC_GetSysClockFreq>
 81016fe:	4602      	mov	r2, r0
 8101700:	4b15      	ldr	r3, [pc, #84]	; (8101758 <HAL_Init+0xa8>)
 8101702:	699b      	ldr	r3, [r3, #24]
 8101704:	0a1b      	lsrs	r3, r3, #8
 8101706:	f003 030f 	and.w	r3, r3, #15
 810170a:	4915      	ldr	r1, [pc, #84]	; (8101760 <HAL_Init+0xb0>)
 810170c:	5ccb      	ldrb	r3, [r1, r3]
 810170e:	f003 031f 	and.w	r3, r3, #31
 8101712:	fa22 f303 	lsr.w	r3, r2, r3
 8101716:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101718:	4b0f      	ldr	r3, [pc, #60]	; (8101758 <HAL_Init+0xa8>)
 810171a:	699b      	ldr	r3, [r3, #24]
 810171c:	f003 030f 	and.w	r3, r3, #15
 8101720:	4a0f      	ldr	r2, [pc, #60]	; (8101760 <HAL_Init+0xb0>)
 8101722:	5cd3      	ldrb	r3, [r2, r3]
 8101724:	f003 031f 	and.w	r3, r3, #31
 8101728:	687a      	ldr	r2, [r7, #4]
 810172a:	fa22 f303 	lsr.w	r3, r2, r3
 810172e:	4a0d      	ldr	r2, [pc, #52]	; (8101764 <HAL_Init+0xb4>)
 8101730:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101732:	4b0c      	ldr	r3, [pc, #48]	; (8101764 <HAL_Init+0xb4>)
 8101734:	681b      	ldr	r3, [r3, #0]
 8101736:	4a0c      	ldr	r2, [pc, #48]	; (8101768 <HAL_Init+0xb8>)
 8101738:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810173a:	200f      	movs	r0, #15
 810173c:	f7ff fa0e 	bl	8100b5c <HAL_InitTick>
 8101740:	4603      	mov	r3, r0
 8101742:	2b00      	cmp	r3, #0
 8101744:	d001      	beq.n	810174a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101746:	2301      	movs	r3, #1
 8101748:	e002      	b.n	8101750 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810174a:	f7ff f9e9 	bl	8100b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810174e:	2300      	movs	r3, #0
}
 8101750:	4618      	mov	r0, r3
 8101752:	3708      	adds	r7, #8
 8101754:	46bd      	mov	sp, r7
 8101756:	bd80      	pop	{r7, pc}
 8101758:	58024400 	.word	0x58024400
 810175c:	40024400 	.word	0x40024400
 8101760:	08110244 	.word	0x08110244
 8101764:	10000004 	.word	0x10000004
 8101768:	10000000 	.word	0x10000000

0810176c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 810176c:	b480      	push	{r7}
 810176e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101770:	4b06      	ldr	r3, [pc, #24]	; (810178c <HAL_IncTick+0x20>)
 8101772:	781b      	ldrb	r3, [r3, #0]
 8101774:	461a      	mov	r2, r3
 8101776:	4b06      	ldr	r3, [pc, #24]	; (8101790 <HAL_IncTick+0x24>)
 8101778:	681b      	ldr	r3, [r3, #0]
 810177a:	4413      	add	r3, r2
 810177c:	4a04      	ldr	r2, [pc, #16]	; (8101790 <HAL_IncTick+0x24>)
 810177e:	6013      	str	r3, [r2, #0]
}
 8101780:	bf00      	nop
 8101782:	46bd      	mov	sp, r7
 8101784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101788:	4770      	bx	lr
 810178a:	bf00      	nop
 810178c:	10000014 	.word	0x10000014
 8101790:	10022a70 	.word	0x10022a70

08101794 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101794:	b480      	push	{r7}
 8101796:	af00      	add	r7, sp, #0
  return uwTick;
 8101798:	4b03      	ldr	r3, [pc, #12]	; (81017a8 <HAL_GetTick+0x14>)
 810179a:	681b      	ldr	r3, [r3, #0]
}
 810179c:	4618      	mov	r0, r3
 810179e:	46bd      	mov	sp, r7
 81017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017a4:	4770      	bx	lr
 81017a6:	bf00      	nop
 81017a8:	10022a70 	.word	0x10022a70

081017ac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 81017ac:	b480      	push	{r7}
 81017ae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 81017b0:	4b03      	ldr	r3, [pc, #12]	; (81017c0 <HAL_GetREVID+0x14>)
 81017b2:	681b      	ldr	r3, [r3, #0]
 81017b4:	0c1b      	lsrs	r3, r3, #16
}
 81017b6:	4618      	mov	r0, r3
 81017b8:	46bd      	mov	sp, r7
 81017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017be:	4770      	bx	lr
 81017c0:	5c001000 	.word	0x5c001000

081017c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 81017c4:	b480      	push	{r7}
 81017c6:	b083      	sub	sp, #12
 81017c8:	af00      	add	r7, sp, #0
 81017ca:	6078      	str	r0, [r7, #4]
 81017cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 81017ce:	687b      	ldr	r3, [r7, #4]
 81017d0:	689b      	ldr	r3, [r3, #8]
 81017d2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 81017d6:	683b      	ldr	r3, [r7, #0]
 81017d8:	431a      	orrs	r2, r3
 81017da:	687b      	ldr	r3, [r7, #4]
 81017dc:	609a      	str	r2, [r3, #8]
}
 81017de:	bf00      	nop
 81017e0:	370c      	adds	r7, #12
 81017e2:	46bd      	mov	sp, r7
 81017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017e8:	4770      	bx	lr

081017ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 81017ea:	b480      	push	{r7}
 81017ec:	b083      	sub	sp, #12
 81017ee:	af00      	add	r7, sp, #0
 81017f0:	6078      	str	r0, [r7, #4]
 81017f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 81017f4:	687b      	ldr	r3, [r7, #4]
 81017f6:	689b      	ldr	r3, [r3, #8]
 81017f8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 81017fc:	683b      	ldr	r3, [r7, #0]
 81017fe:	431a      	orrs	r2, r3
 8101800:	687b      	ldr	r3, [r7, #4]
 8101802:	609a      	str	r2, [r3, #8]
}
 8101804:	bf00      	nop
 8101806:	370c      	adds	r7, #12
 8101808:	46bd      	mov	sp, r7
 810180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810180e:	4770      	bx	lr

08101810 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8101810:	b480      	push	{r7}
 8101812:	b083      	sub	sp, #12
 8101814:	af00      	add	r7, sp, #0
 8101816:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8101818:	687b      	ldr	r3, [r7, #4]
 810181a:	689b      	ldr	r3, [r3, #8]
 810181c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8101820:	4618      	mov	r0, r3
 8101822:	370c      	adds	r7, #12
 8101824:	46bd      	mov	sp, r7
 8101826:	f85d 7b04 	ldr.w	r7, [sp], #4
 810182a:	4770      	bx	lr

0810182c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 810182c:	b480      	push	{r7}
 810182e:	b087      	sub	sp, #28
 8101830:	af00      	add	r7, sp, #0
 8101832:	60f8      	str	r0, [r7, #12]
 8101834:	60b9      	str	r1, [r7, #8]
 8101836:	607a      	str	r2, [r7, #4]
 8101838:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 810183a:	68fb      	ldr	r3, [r7, #12]
 810183c:	3360      	adds	r3, #96	; 0x60
 810183e:	461a      	mov	r2, r3
 8101840:	68bb      	ldr	r3, [r7, #8]
 8101842:	009b      	lsls	r3, r3, #2
 8101844:	4413      	add	r3, r2
 8101846:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8101848:	697b      	ldr	r3, [r7, #20]
 810184a:	681b      	ldr	r3, [r3, #0]
 810184c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8101850:	687b      	ldr	r3, [r7, #4]
 8101852:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8101856:	683b      	ldr	r3, [r7, #0]
 8101858:	430b      	orrs	r3, r1
 810185a:	431a      	orrs	r2, r3
 810185c:	697b      	ldr	r3, [r7, #20]
 810185e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8101860:	bf00      	nop
 8101862:	371c      	adds	r7, #28
 8101864:	46bd      	mov	sp, r7
 8101866:	f85d 7b04 	ldr.w	r7, [sp], #4
 810186a:	4770      	bx	lr

0810186c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 810186c:	b480      	push	{r7}
 810186e:	b085      	sub	sp, #20
 8101870:	af00      	add	r7, sp, #0
 8101872:	60f8      	str	r0, [r7, #12]
 8101874:	60b9      	str	r1, [r7, #8]
 8101876:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8101878:	68fb      	ldr	r3, [r7, #12]
 810187a:	691b      	ldr	r3, [r3, #16]
 810187c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8101880:	68bb      	ldr	r3, [r7, #8]
 8101882:	f003 031f 	and.w	r3, r3, #31
 8101886:	6879      	ldr	r1, [r7, #4]
 8101888:	fa01 f303 	lsl.w	r3, r1, r3
 810188c:	431a      	orrs	r2, r3
 810188e:	68fb      	ldr	r3, [r7, #12]
 8101890:	611a      	str	r2, [r3, #16]
}
 8101892:	bf00      	nop
 8101894:	3714      	adds	r7, #20
 8101896:	46bd      	mov	sp, r7
 8101898:	f85d 7b04 	ldr.w	r7, [sp], #4
 810189c:	4770      	bx	lr

0810189e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 810189e:	b480      	push	{r7}
 81018a0:	b087      	sub	sp, #28
 81018a2:	af00      	add	r7, sp, #0
 81018a4:	60f8      	str	r0, [r7, #12]
 81018a6:	60b9      	str	r1, [r7, #8]
 81018a8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 81018aa:	68fb      	ldr	r3, [r7, #12]
 81018ac:	3360      	adds	r3, #96	; 0x60
 81018ae:	461a      	mov	r2, r3
 81018b0:	68bb      	ldr	r3, [r7, #8]
 81018b2:	009b      	lsls	r3, r3, #2
 81018b4:	4413      	add	r3, r2
 81018b6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 81018b8:	697b      	ldr	r3, [r7, #20]
 81018ba:	681b      	ldr	r3, [r3, #0]
 81018bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 81018c0:	687b      	ldr	r3, [r7, #4]
 81018c2:	431a      	orrs	r2, r3
 81018c4:	697b      	ldr	r3, [r7, #20]
 81018c6:	601a      	str	r2, [r3, #0]
  }
}
 81018c8:	bf00      	nop
 81018ca:	371c      	adds	r7, #28
 81018cc:	46bd      	mov	sp, r7
 81018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018d2:	4770      	bx	lr

081018d4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 81018d4:	b480      	push	{r7}
 81018d6:	b083      	sub	sp, #12
 81018d8:	af00      	add	r7, sp, #0
 81018da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 81018dc:	687b      	ldr	r3, [r7, #4]
 81018de:	68db      	ldr	r3, [r3, #12]
 81018e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 81018e4:	2b00      	cmp	r3, #0
 81018e6:	d101      	bne.n	81018ec <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 81018e8:	2301      	movs	r3, #1
 81018ea:	e000      	b.n	81018ee <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 81018ec:	2300      	movs	r3, #0
}
 81018ee:	4618      	mov	r0, r3
 81018f0:	370c      	adds	r7, #12
 81018f2:	46bd      	mov	sp, r7
 81018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018f8:	4770      	bx	lr

081018fa <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 81018fa:	b480      	push	{r7}
 81018fc:	b087      	sub	sp, #28
 81018fe:	af00      	add	r7, sp, #0
 8101900:	60f8      	str	r0, [r7, #12]
 8101902:	60b9      	str	r1, [r7, #8]
 8101904:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8101906:	68fb      	ldr	r3, [r7, #12]
 8101908:	3330      	adds	r3, #48	; 0x30
 810190a:	461a      	mov	r2, r3
 810190c:	68bb      	ldr	r3, [r7, #8]
 810190e:	0a1b      	lsrs	r3, r3, #8
 8101910:	009b      	lsls	r3, r3, #2
 8101912:	f003 030c 	and.w	r3, r3, #12
 8101916:	4413      	add	r3, r2
 8101918:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 810191a:	697b      	ldr	r3, [r7, #20]
 810191c:	681a      	ldr	r2, [r3, #0]
 810191e:	68bb      	ldr	r3, [r7, #8]
 8101920:	f003 031f 	and.w	r3, r3, #31
 8101924:	211f      	movs	r1, #31
 8101926:	fa01 f303 	lsl.w	r3, r1, r3
 810192a:	43db      	mvns	r3, r3
 810192c:	401a      	ands	r2, r3
 810192e:	687b      	ldr	r3, [r7, #4]
 8101930:	0e9b      	lsrs	r3, r3, #26
 8101932:	f003 011f 	and.w	r1, r3, #31
 8101936:	68bb      	ldr	r3, [r7, #8]
 8101938:	f003 031f 	and.w	r3, r3, #31
 810193c:	fa01 f303 	lsl.w	r3, r1, r3
 8101940:	431a      	orrs	r2, r3
 8101942:	697b      	ldr	r3, [r7, #20]
 8101944:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8101946:	bf00      	nop
 8101948:	371c      	adds	r7, #28
 810194a:	46bd      	mov	sp, r7
 810194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101950:	4770      	bx	lr

08101952 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8101952:	b480      	push	{r7}
 8101954:	b083      	sub	sp, #12
 8101956:	af00      	add	r7, sp, #0
 8101958:	6078      	str	r0, [r7, #4]
 810195a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 810195c:	687b      	ldr	r3, [r7, #4]
 810195e:	68db      	ldr	r3, [r3, #12]
 8101960:	f023 0203 	bic.w	r2, r3, #3
 8101964:	683b      	ldr	r3, [r7, #0]
 8101966:	431a      	orrs	r2, r3
 8101968:	687b      	ldr	r3, [r7, #4]
 810196a:	60da      	str	r2, [r3, #12]
}
 810196c:	bf00      	nop
 810196e:	370c      	adds	r7, #12
 8101970:	46bd      	mov	sp, r7
 8101972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101976:	4770      	bx	lr

08101978 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8101978:	b480      	push	{r7}
 810197a:	b083      	sub	sp, #12
 810197c:	af00      	add	r7, sp, #0
 810197e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8101980:	687b      	ldr	r3, [r7, #4]
 8101982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8101984:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8101988:	2b00      	cmp	r3, #0
 810198a:	d101      	bne.n	8101990 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 810198c:	2301      	movs	r3, #1
 810198e:	e000      	b.n	8101992 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8101990:	2300      	movs	r3, #0
}
 8101992:	4618      	mov	r0, r3
 8101994:	370c      	adds	r7, #12
 8101996:	46bd      	mov	sp, r7
 8101998:	f85d 7b04 	ldr.w	r7, [sp], #4
 810199c:	4770      	bx	lr

0810199e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 810199e:	b480      	push	{r7}
 81019a0:	b087      	sub	sp, #28
 81019a2:	af00      	add	r7, sp, #0
 81019a4:	60f8      	str	r0, [r7, #12]
 81019a6:	60b9      	str	r1, [r7, #8]
 81019a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 81019aa:	68fb      	ldr	r3, [r7, #12]
 81019ac:	3314      	adds	r3, #20
 81019ae:	461a      	mov	r2, r3
 81019b0:	68bb      	ldr	r3, [r7, #8]
 81019b2:	0e5b      	lsrs	r3, r3, #25
 81019b4:	009b      	lsls	r3, r3, #2
 81019b6:	f003 0304 	and.w	r3, r3, #4
 81019ba:	4413      	add	r3, r2
 81019bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 81019be:	697b      	ldr	r3, [r7, #20]
 81019c0:	681a      	ldr	r2, [r3, #0]
 81019c2:	68bb      	ldr	r3, [r7, #8]
 81019c4:	0d1b      	lsrs	r3, r3, #20
 81019c6:	f003 031f 	and.w	r3, r3, #31
 81019ca:	2107      	movs	r1, #7
 81019cc:	fa01 f303 	lsl.w	r3, r1, r3
 81019d0:	43db      	mvns	r3, r3
 81019d2:	401a      	ands	r2, r3
 81019d4:	68bb      	ldr	r3, [r7, #8]
 81019d6:	0d1b      	lsrs	r3, r3, #20
 81019d8:	f003 031f 	and.w	r3, r3, #31
 81019dc:	6879      	ldr	r1, [r7, #4]
 81019de:	fa01 f303 	lsl.w	r3, r1, r3
 81019e2:	431a      	orrs	r2, r3
 81019e4:	697b      	ldr	r3, [r7, #20]
 81019e6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 81019e8:	bf00      	nop
 81019ea:	371c      	adds	r7, #28
 81019ec:	46bd      	mov	sp, r7
 81019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019f2:	4770      	bx	lr

081019f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 81019f4:	b480      	push	{r7}
 81019f6:	b085      	sub	sp, #20
 81019f8:	af00      	add	r7, sp, #0
 81019fa:	60f8      	str	r0, [r7, #12]
 81019fc:	60b9      	str	r1, [r7, #8]
 81019fe:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8101a00:	68fb      	ldr	r3, [r7, #12]
 8101a02:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8101a06:	68bb      	ldr	r3, [r7, #8]
 8101a08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101a0c:	43db      	mvns	r3, r3
 8101a0e:	401a      	ands	r2, r3
 8101a10:	687b      	ldr	r3, [r7, #4]
 8101a12:	f003 0318 	and.w	r3, r3, #24
 8101a16:	4908      	ldr	r1, [pc, #32]	; (8101a38 <LL_ADC_SetChannelSingleDiff+0x44>)
 8101a18:	40d9      	lsrs	r1, r3
 8101a1a:	68bb      	ldr	r3, [r7, #8]
 8101a1c:	400b      	ands	r3, r1
 8101a1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101a22:	431a      	orrs	r2, r3
 8101a24:	68fb      	ldr	r3, [r7, #12]
 8101a26:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8101a2a:	bf00      	nop
 8101a2c:	3714      	adds	r7, #20
 8101a2e:	46bd      	mov	sp, r7
 8101a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a34:	4770      	bx	lr
 8101a36:	bf00      	nop
 8101a38:	000fffff 	.word	0x000fffff

08101a3c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8101a3c:	b480      	push	{r7}
 8101a3e:	b083      	sub	sp, #12
 8101a40:	af00      	add	r7, sp, #0
 8101a42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8101a44:	687b      	ldr	r3, [r7, #4]
 8101a46:	689b      	ldr	r3, [r3, #8]
 8101a48:	f003 031f 	and.w	r3, r3, #31
}
 8101a4c:	4618      	mov	r0, r3
 8101a4e:	370c      	adds	r7, #12
 8101a50:	46bd      	mov	sp, r7
 8101a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a56:	4770      	bx	lr

08101a58 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8101a58:	b480      	push	{r7}
 8101a5a:	b083      	sub	sp, #12
 8101a5c:	af00      	add	r7, sp, #0
 8101a5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8101a60:	687b      	ldr	r3, [r7, #4]
 8101a62:	689b      	ldr	r3, [r3, #8]
 8101a64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8101a68:	4618      	mov	r0, r3
 8101a6a:	370c      	adds	r7, #12
 8101a6c:	46bd      	mov	sp, r7
 8101a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a72:	4770      	bx	lr

08101a74 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8101a74:	b480      	push	{r7}
 8101a76:	b083      	sub	sp, #12
 8101a78:	af00      	add	r7, sp, #0
 8101a7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8101a7c:	687b      	ldr	r3, [r7, #4]
 8101a7e:	689b      	ldr	r3, [r3, #8]
 8101a80:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8101a84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8101a88:	687a      	ldr	r2, [r7, #4]
 8101a8a:	6093      	str	r3, [r2, #8]
}
 8101a8c:	bf00      	nop
 8101a8e:	370c      	adds	r7, #12
 8101a90:	46bd      	mov	sp, r7
 8101a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a96:	4770      	bx	lr

08101a98 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8101a98:	b480      	push	{r7}
 8101a9a:	b083      	sub	sp, #12
 8101a9c:	af00      	add	r7, sp, #0
 8101a9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8101aa0:	687b      	ldr	r3, [r7, #4]
 8101aa2:	689b      	ldr	r3, [r3, #8]
 8101aa4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8101aa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101aac:	d101      	bne.n	8101ab2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8101aae:	2301      	movs	r3, #1
 8101ab0:	e000      	b.n	8101ab4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8101ab2:	2300      	movs	r3, #0
}
 8101ab4:	4618      	mov	r0, r3
 8101ab6:	370c      	adds	r7, #12
 8101ab8:	46bd      	mov	sp, r7
 8101aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101abe:	4770      	bx	lr

08101ac0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8101ac0:	b480      	push	{r7}
 8101ac2:	b083      	sub	sp, #12
 8101ac4:	af00      	add	r7, sp, #0
 8101ac6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8101ac8:	687b      	ldr	r3, [r7, #4]
 8101aca:	689b      	ldr	r3, [r3, #8]
 8101acc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8101ad0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8101ad4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8101ad8:	687b      	ldr	r3, [r7, #4]
 8101ada:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8101adc:	bf00      	nop
 8101ade:	370c      	adds	r7, #12
 8101ae0:	46bd      	mov	sp, r7
 8101ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ae6:	4770      	bx	lr

08101ae8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8101ae8:	b480      	push	{r7}
 8101aea:	b083      	sub	sp, #12
 8101aec:	af00      	add	r7, sp, #0
 8101aee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8101af0:	687b      	ldr	r3, [r7, #4]
 8101af2:	689b      	ldr	r3, [r3, #8]
 8101af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8101af8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8101afc:	d101      	bne.n	8101b02 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8101afe:	2301      	movs	r3, #1
 8101b00:	e000      	b.n	8101b04 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8101b02:	2300      	movs	r3, #0
}
 8101b04:	4618      	mov	r0, r3
 8101b06:	370c      	adds	r7, #12
 8101b08:	46bd      	mov	sp, r7
 8101b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b0e:	4770      	bx	lr

08101b10 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8101b10:	b480      	push	{r7}
 8101b12:	b083      	sub	sp, #12
 8101b14:	af00      	add	r7, sp, #0
 8101b16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8101b18:	687b      	ldr	r3, [r7, #4]
 8101b1a:	689b      	ldr	r3, [r3, #8]
 8101b1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8101b20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8101b24:	f043 0201 	orr.w	r2, r3, #1
 8101b28:	687b      	ldr	r3, [r7, #4]
 8101b2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8101b2c:	bf00      	nop
 8101b2e:	370c      	adds	r7, #12
 8101b30:	46bd      	mov	sp, r7
 8101b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b36:	4770      	bx	lr

08101b38 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8101b38:	b480      	push	{r7}
 8101b3a:	b083      	sub	sp, #12
 8101b3c:	af00      	add	r7, sp, #0
 8101b3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8101b40:	687b      	ldr	r3, [r7, #4]
 8101b42:	689b      	ldr	r3, [r3, #8]
 8101b44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8101b48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8101b4c:	f043 0202 	orr.w	r2, r3, #2
 8101b50:	687b      	ldr	r3, [r7, #4]
 8101b52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8101b54:	bf00      	nop
 8101b56:	370c      	adds	r7, #12
 8101b58:	46bd      	mov	sp, r7
 8101b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b5e:	4770      	bx	lr

08101b60 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8101b60:	b480      	push	{r7}
 8101b62:	b083      	sub	sp, #12
 8101b64:	af00      	add	r7, sp, #0
 8101b66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8101b68:	687b      	ldr	r3, [r7, #4]
 8101b6a:	689b      	ldr	r3, [r3, #8]
 8101b6c:	f003 0301 	and.w	r3, r3, #1
 8101b70:	2b01      	cmp	r3, #1
 8101b72:	d101      	bne.n	8101b78 <LL_ADC_IsEnabled+0x18>
 8101b74:	2301      	movs	r3, #1
 8101b76:	e000      	b.n	8101b7a <LL_ADC_IsEnabled+0x1a>
 8101b78:	2300      	movs	r3, #0
}
 8101b7a:	4618      	mov	r0, r3
 8101b7c:	370c      	adds	r7, #12
 8101b7e:	46bd      	mov	sp, r7
 8101b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b84:	4770      	bx	lr

08101b86 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8101b86:	b480      	push	{r7}
 8101b88:	b083      	sub	sp, #12
 8101b8a:	af00      	add	r7, sp, #0
 8101b8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8101b8e:	687b      	ldr	r3, [r7, #4]
 8101b90:	689b      	ldr	r3, [r3, #8]
 8101b92:	f003 0302 	and.w	r3, r3, #2
 8101b96:	2b02      	cmp	r3, #2
 8101b98:	d101      	bne.n	8101b9e <LL_ADC_IsDisableOngoing+0x18>
 8101b9a:	2301      	movs	r3, #1
 8101b9c:	e000      	b.n	8101ba0 <LL_ADC_IsDisableOngoing+0x1a>
 8101b9e:	2300      	movs	r3, #0
}
 8101ba0:	4618      	mov	r0, r3
 8101ba2:	370c      	adds	r7, #12
 8101ba4:	46bd      	mov	sp, r7
 8101ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101baa:	4770      	bx	lr

08101bac <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8101bac:	b480      	push	{r7}
 8101bae:	b083      	sub	sp, #12
 8101bb0:	af00      	add	r7, sp, #0
 8101bb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8101bb4:	687b      	ldr	r3, [r7, #4]
 8101bb6:	689b      	ldr	r3, [r3, #8]
 8101bb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8101bbc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8101bc0:	f043 0204 	orr.w	r2, r3, #4
 8101bc4:	687b      	ldr	r3, [r7, #4]
 8101bc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8101bc8:	bf00      	nop
 8101bca:	370c      	adds	r7, #12
 8101bcc:	46bd      	mov	sp, r7
 8101bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bd2:	4770      	bx	lr

08101bd4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8101bd4:	b480      	push	{r7}
 8101bd6:	b083      	sub	sp, #12
 8101bd8:	af00      	add	r7, sp, #0
 8101bda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8101bdc:	687b      	ldr	r3, [r7, #4]
 8101bde:	689b      	ldr	r3, [r3, #8]
 8101be0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8101be4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8101be8:	f043 0210 	orr.w	r2, r3, #16
 8101bec:	687b      	ldr	r3, [r7, #4]
 8101bee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8101bf0:	bf00      	nop
 8101bf2:	370c      	adds	r7, #12
 8101bf4:	46bd      	mov	sp, r7
 8101bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bfa:	4770      	bx	lr

08101bfc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8101bfc:	b480      	push	{r7}
 8101bfe:	b083      	sub	sp, #12
 8101c00:	af00      	add	r7, sp, #0
 8101c02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8101c04:	687b      	ldr	r3, [r7, #4]
 8101c06:	689b      	ldr	r3, [r3, #8]
 8101c08:	f003 0304 	and.w	r3, r3, #4
 8101c0c:	2b04      	cmp	r3, #4
 8101c0e:	d101      	bne.n	8101c14 <LL_ADC_REG_IsConversionOngoing+0x18>
 8101c10:	2301      	movs	r3, #1
 8101c12:	e000      	b.n	8101c16 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8101c14:	2300      	movs	r3, #0
}
 8101c16:	4618      	mov	r0, r3
 8101c18:	370c      	adds	r7, #12
 8101c1a:	46bd      	mov	sp, r7
 8101c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c20:	4770      	bx	lr

08101c22 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8101c22:	b480      	push	{r7}
 8101c24:	b083      	sub	sp, #12
 8101c26:	af00      	add	r7, sp, #0
 8101c28:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8101c2a:	687b      	ldr	r3, [r7, #4]
 8101c2c:	689b      	ldr	r3, [r3, #8]
 8101c2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8101c32:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8101c36:	f043 0220 	orr.w	r2, r3, #32
 8101c3a:	687b      	ldr	r3, [r7, #4]
 8101c3c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8101c3e:	bf00      	nop
 8101c40:	370c      	adds	r7, #12
 8101c42:	46bd      	mov	sp, r7
 8101c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c48:	4770      	bx	lr

08101c4a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8101c4a:	b480      	push	{r7}
 8101c4c:	b083      	sub	sp, #12
 8101c4e:	af00      	add	r7, sp, #0
 8101c50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8101c52:	687b      	ldr	r3, [r7, #4]
 8101c54:	689b      	ldr	r3, [r3, #8]
 8101c56:	f003 0308 	and.w	r3, r3, #8
 8101c5a:	2b08      	cmp	r3, #8
 8101c5c:	d101      	bne.n	8101c62 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8101c5e:	2301      	movs	r3, #1
 8101c60:	e000      	b.n	8101c64 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8101c62:	2300      	movs	r3, #0
}
 8101c64:	4618      	mov	r0, r3
 8101c66:	370c      	adds	r7, #12
 8101c68:	46bd      	mov	sp, r7
 8101c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c6e:	4770      	bx	lr

08101c70 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8101c70:	b590      	push	{r4, r7, lr}
 8101c72:	b089      	sub	sp, #36	; 0x24
 8101c74:	af00      	add	r7, sp, #0
 8101c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8101c78:	2300      	movs	r3, #0
 8101c7a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8101c7c:	2300      	movs	r3, #0
 8101c7e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8101c80:	687b      	ldr	r3, [r7, #4]
 8101c82:	2b00      	cmp	r3, #0
 8101c84:	d101      	bne.n	8101c8a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8101c86:	2301      	movs	r3, #1
 8101c88:	e18e      	b.n	8101fa8 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8101c8a:	687b      	ldr	r3, [r7, #4]
 8101c8c:	68db      	ldr	r3, [r3, #12]
 8101c8e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8101c90:	687b      	ldr	r3, [r7, #4]
 8101c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101c94:	2b00      	cmp	r3, #0
 8101c96:	d109      	bne.n	8101cac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8101c98:	6878      	ldr	r0, [r7, #4]
 8101c9a:	f7fe fd8d 	bl	81007b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8101c9e:	687b      	ldr	r3, [r7, #4]
 8101ca0:	2200      	movs	r2, #0
 8101ca2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8101ca4:	687b      	ldr	r3, [r7, #4]
 8101ca6:	2200      	movs	r2, #0
 8101ca8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8101cac:	687b      	ldr	r3, [r7, #4]
 8101cae:	681b      	ldr	r3, [r3, #0]
 8101cb0:	4618      	mov	r0, r3
 8101cb2:	f7ff fef1 	bl	8101a98 <LL_ADC_IsDeepPowerDownEnabled>
 8101cb6:	4603      	mov	r3, r0
 8101cb8:	2b00      	cmp	r3, #0
 8101cba:	d004      	beq.n	8101cc6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8101cbc:	687b      	ldr	r3, [r7, #4]
 8101cbe:	681b      	ldr	r3, [r3, #0]
 8101cc0:	4618      	mov	r0, r3
 8101cc2:	f7ff fed7 	bl	8101a74 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8101cc6:	687b      	ldr	r3, [r7, #4]
 8101cc8:	681b      	ldr	r3, [r3, #0]
 8101cca:	4618      	mov	r0, r3
 8101ccc:	f7ff ff0c 	bl	8101ae8 <LL_ADC_IsInternalRegulatorEnabled>
 8101cd0:	4603      	mov	r3, r0
 8101cd2:	2b00      	cmp	r3, #0
 8101cd4:	d114      	bne.n	8101d00 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8101cd6:	687b      	ldr	r3, [r7, #4]
 8101cd8:	681b      	ldr	r3, [r3, #0]
 8101cda:	4618      	mov	r0, r3
 8101cdc:	f7ff fef0 	bl	8101ac0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8101ce0:	4b9b      	ldr	r3, [pc, #620]	; (8101f50 <HAL_ADC_Init+0x2e0>)
 8101ce2:	681b      	ldr	r3, [r3, #0]
 8101ce4:	099b      	lsrs	r3, r3, #6
 8101ce6:	4a9b      	ldr	r2, [pc, #620]	; (8101f54 <HAL_ADC_Init+0x2e4>)
 8101ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8101cec:	099b      	lsrs	r3, r3, #6
 8101cee:	3301      	adds	r3, #1
 8101cf0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8101cf2:	e002      	b.n	8101cfa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8101cf4:	68bb      	ldr	r3, [r7, #8]
 8101cf6:	3b01      	subs	r3, #1
 8101cf8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8101cfa:	68bb      	ldr	r3, [r7, #8]
 8101cfc:	2b00      	cmp	r3, #0
 8101cfe:	d1f9      	bne.n	8101cf4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8101d00:	687b      	ldr	r3, [r7, #4]
 8101d02:	681b      	ldr	r3, [r3, #0]
 8101d04:	4618      	mov	r0, r3
 8101d06:	f7ff feef 	bl	8101ae8 <LL_ADC_IsInternalRegulatorEnabled>
 8101d0a:	4603      	mov	r3, r0
 8101d0c:	2b00      	cmp	r3, #0
 8101d0e:	d10d      	bne.n	8101d2c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8101d10:	687b      	ldr	r3, [r7, #4]
 8101d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101d14:	f043 0210 	orr.w	r2, r3, #16
 8101d18:	687b      	ldr	r3, [r7, #4]
 8101d1a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8101d1c:	687b      	ldr	r3, [r7, #4]
 8101d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101d20:	f043 0201 	orr.w	r2, r3, #1
 8101d24:	687b      	ldr	r3, [r7, #4]
 8101d26:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8101d28:	2301      	movs	r3, #1
 8101d2a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8101d2c:	687b      	ldr	r3, [r7, #4]
 8101d2e:	681b      	ldr	r3, [r3, #0]
 8101d30:	4618      	mov	r0, r3
 8101d32:	f7ff ff63 	bl	8101bfc <LL_ADC_REG_IsConversionOngoing>
 8101d36:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8101d38:	687b      	ldr	r3, [r7, #4]
 8101d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101d3c:	f003 0310 	and.w	r3, r3, #16
 8101d40:	2b00      	cmp	r3, #0
 8101d42:	f040 8128 	bne.w	8101f96 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8101d46:	697b      	ldr	r3, [r7, #20]
 8101d48:	2b00      	cmp	r3, #0
 8101d4a:	f040 8124 	bne.w	8101f96 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8101d4e:	687b      	ldr	r3, [r7, #4]
 8101d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101d52:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8101d56:	f043 0202 	orr.w	r2, r3, #2
 8101d5a:	687b      	ldr	r3, [r7, #4]
 8101d5c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8101d5e:	687b      	ldr	r3, [r7, #4]
 8101d60:	681b      	ldr	r3, [r3, #0]
 8101d62:	4618      	mov	r0, r3
 8101d64:	f7ff fefc 	bl	8101b60 <LL_ADC_IsEnabled>
 8101d68:	4603      	mov	r3, r0
 8101d6a:	2b00      	cmp	r3, #0
 8101d6c:	d136      	bne.n	8101ddc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8101d6e:	687b      	ldr	r3, [r7, #4]
 8101d70:	681b      	ldr	r3, [r3, #0]
 8101d72:	4a79      	ldr	r2, [pc, #484]	; (8101f58 <HAL_ADC_Init+0x2e8>)
 8101d74:	4293      	cmp	r3, r2
 8101d76:	d004      	beq.n	8101d82 <HAL_ADC_Init+0x112>
 8101d78:	687b      	ldr	r3, [r7, #4]
 8101d7a:	681b      	ldr	r3, [r3, #0]
 8101d7c:	4a77      	ldr	r2, [pc, #476]	; (8101f5c <HAL_ADC_Init+0x2ec>)
 8101d7e:	4293      	cmp	r3, r2
 8101d80:	d10e      	bne.n	8101da0 <HAL_ADC_Init+0x130>
 8101d82:	4875      	ldr	r0, [pc, #468]	; (8101f58 <HAL_ADC_Init+0x2e8>)
 8101d84:	f7ff feec 	bl	8101b60 <LL_ADC_IsEnabled>
 8101d88:	4604      	mov	r4, r0
 8101d8a:	4874      	ldr	r0, [pc, #464]	; (8101f5c <HAL_ADC_Init+0x2ec>)
 8101d8c:	f7ff fee8 	bl	8101b60 <LL_ADC_IsEnabled>
 8101d90:	4603      	mov	r3, r0
 8101d92:	4323      	orrs	r3, r4
 8101d94:	2b00      	cmp	r3, #0
 8101d96:	bf0c      	ite	eq
 8101d98:	2301      	moveq	r3, #1
 8101d9a:	2300      	movne	r3, #0
 8101d9c:	b2db      	uxtb	r3, r3
 8101d9e:	e008      	b.n	8101db2 <HAL_ADC_Init+0x142>
 8101da0:	486f      	ldr	r0, [pc, #444]	; (8101f60 <HAL_ADC_Init+0x2f0>)
 8101da2:	f7ff fedd 	bl	8101b60 <LL_ADC_IsEnabled>
 8101da6:	4603      	mov	r3, r0
 8101da8:	2b00      	cmp	r3, #0
 8101daa:	bf0c      	ite	eq
 8101dac:	2301      	moveq	r3, #1
 8101dae:	2300      	movne	r3, #0
 8101db0:	b2db      	uxtb	r3, r3
 8101db2:	2b00      	cmp	r3, #0
 8101db4:	d012      	beq.n	8101ddc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8101db6:	687b      	ldr	r3, [r7, #4]
 8101db8:	681b      	ldr	r3, [r3, #0]
 8101dba:	4a67      	ldr	r2, [pc, #412]	; (8101f58 <HAL_ADC_Init+0x2e8>)
 8101dbc:	4293      	cmp	r3, r2
 8101dbe:	d004      	beq.n	8101dca <HAL_ADC_Init+0x15a>
 8101dc0:	687b      	ldr	r3, [r7, #4]
 8101dc2:	681b      	ldr	r3, [r3, #0]
 8101dc4:	4a65      	ldr	r2, [pc, #404]	; (8101f5c <HAL_ADC_Init+0x2ec>)
 8101dc6:	4293      	cmp	r3, r2
 8101dc8:	d101      	bne.n	8101dce <HAL_ADC_Init+0x15e>
 8101dca:	4a66      	ldr	r2, [pc, #408]	; (8101f64 <HAL_ADC_Init+0x2f4>)
 8101dcc:	e000      	b.n	8101dd0 <HAL_ADC_Init+0x160>
 8101dce:	4a66      	ldr	r2, [pc, #408]	; (8101f68 <HAL_ADC_Init+0x2f8>)
 8101dd0:	687b      	ldr	r3, [r7, #4]
 8101dd2:	685b      	ldr	r3, [r3, #4]
 8101dd4:	4619      	mov	r1, r3
 8101dd6:	4610      	mov	r0, r2
 8101dd8:	f7ff fcf4 	bl	81017c4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8101ddc:	f7ff fce6 	bl	81017ac <HAL_GetREVID>
 8101de0:	4603      	mov	r3, r0
 8101de2:	f241 0203 	movw	r2, #4099	; 0x1003
 8101de6:	4293      	cmp	r3, r2
 8101de8:	d914      	bls.n	8101e14 <HAL_ADC_Init+0x1a4>
 8101dea:	687b      	ldr	r3, [r7, #4]
 8101dec:	689b      	ldr	r3, [r3, #8]
 8101dee:	2b10      	cmp	r3, #16
 8101df0:	d110      	bne.n	8101e14 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101df2:	687b      	ldr	r3, [r7, #4]
 8101df4:	7d5b      	ldrb	r3, [r3, #21]
 8101df6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8101df8:	687b      	ldr	r3, [r7, #4]
 8101dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101dfc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8101dfe:	687b      	ldr	r3, [r7, #4]
 8101e00:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8101e02:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8101e04:	687b      	ldr	r3, [r7, #4]
 8101e06:	7f1b      	ldrb	r3, [r3, #28]
 8101e08:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8101e0a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101e0c:	f043 030c 	orr.w	r3, r3, #12
 8101e10:	61bb      	str	r3, [r7, #24]
 8101e12:	e00d      	b.n	8101e30 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101e14:	687b      	ldr	r3, [r7, #4]
 8101e16:	7d5b      	ldrb	r3, [r3, #21]
 8101e18:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8101e1a:	687b      	ldr	r3, [r7, #4]
 8101e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101e1e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8101e20:	687b      	ldr	r3, [r7, #4]
 8101e22:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8101e24:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8101e26:	687b      	ldr	r3, [r7, #4]
 8101e28:	7f1b      	ldrb	r3, [r3, #28]
 8101e2a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101e2c:	4313      	orrs	r3, r2
 8101e2e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8101e30:	687b      	ldr	r3, [r7, #4]
 8101e32:	7f1b      	ldrb	r3, [r3, #28]
 8101e34:	2b01      	cmp	r3, #1
 8101e36:	d106      	bne.n	8101e46 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8101e38:	687b      	ldr	r3, [r7, #4]
 8101e3a:	6a1b      	ldr	r3, [r3, #32]
 8101e3c:	3b01      	subs	r3, #1
 8101e3e:	045b      	lsls	r3, r3, #17
 8101e40:	69ba      	ldr	r2, [r7, #24]
 8101e42:	4313      	orrs	r3, r2
 8101e44:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8101e46:	687b      	ldr	r3, [r7, #4]
 8101e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101e4a:	2b00      	cmp	r3, #0
 8101e4c:	d009      	beq.n	8101e62 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8101e4e:	687b      	ldr	r3, [r7, #4]
 8101e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101e52:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8101e56:	687b      	ldr	r3, [r7, #4]
 8101e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101e5a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8101e5c:	69ba      	ldr	r2, [r7, #24]
 8101e5e:	4313      	orrs	r3, r2
 8101e60:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8101e62:	687b      	ldr	r3, [r7, #4]
 8101e64:	681b      	ldr	r3, [r3, #0]
 8101e66:	68da      	ldr	r2, [r3, #12]
 8101e68:	4b40      	ldr	r3, [pc, #256]	; (8101f6c <HAL_ADC_Init+0x2fc>)
 8101e6a:	4013      	ands	r3, r2
 8101e6c:	687a      	ldr	r2, [r7, #4]
 8101e6e:	6812      	ldr	r2, [r2, #0]
 8101e70:	69b9      	ldr	r1, [r7, #24]
 8101e72:	430b      	orrs	r3, r1
 8101e74:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8101e76:	687b      	ldr	r3, [r7, #4]
 8101e78:	681b      	ldr	r3, [r3, #0]
 8101e7a:	4618      	mov	r0, r3
 8101e7c:	f7ff febe 	bl	8101bfc <LL_ADC_REG_IsConversionOngoing>
 8101e80:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8101e82:	687b      	ldr	r3, [r7, #4]
 8101e84:	681b      	ldr	r3, [r3, #0]
 8101e86:	4618      	mov	r0, r3
 8101e88:	f7ff fedf 	bl	8101c4a <LL_ADC_INJ_IsConversionOngoing>
 8101e8c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8101e8e:	693b      	ldr	r3, [r7, #16]
 8101e90:	2b00      	cmp	r3, #0
 8101e92:	d14c      	bne.n	8101f2e <HAL_ADC_Init+0x2be>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8101e94:	68fb      	ldr	r3, [r7, #12]
 8101e96:	2b00      	cmp	r3, #0
 8101e98:	d149      	bne.n	8101f2e <HAL_ADC_Init+0x2be>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8101e9a:	687b      	ldr	r3, [r7, #4]
 8101e9c:	7d1b      	ldrb	r3, [r3, #20]
 8101e9e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8101ea0:	687b      	ldr	r3, [r7, #4]
 8101ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8101ea4:	4313      	orrs	r3, r2
 8101ea6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8101ea8:	687b      	ldr	r3, [r7, #4]
 8101eaa:	681b      	ldr	r3, [r3, #0]
 8101eac:	68db      	ldr	r3, [r3, #12]
 8101eae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8101eb2:	f023 0303 	bic.w	r3, r3, #3
 8101eb6:	687a      	ldr	r2, [r7, #4]
 8101eb8:	6812      	ldr	r2, [r2, #0]
 8101eba:	69b9      	ldr	r1, [r7, #24]
 8101ebc:	430b      	orrs	r3, r1
 8101ebe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8101ec0:	687b      	ldr	r3, [r7, #4]
 8101ec2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8101ec6:	2b01      	cmp	r3, #1
 8101ec8:	d11b      	bne.n	8101f02 <HAL_ADC_Init+0x292>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8101eca:	687b      	ldr	r3, [r7, #4]
 8101ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101ece:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8101ed0:	687b      	ldr	r3, [r7, #4]
 8101ed2:	681b      	ldr	r3, [r3, #0]
 8101ed4:	691a      	ldr	r2, [r3, #16]
 8101ed6:	4b26      	ldr	r3, [pc, #152]	; (8101f70 <HAL_ADC_Init+0x300>)
 8101ed8:	4013      	ands	r3, r2
 8101eda:	687a      	ldr	r2, [r7, #4]
 8101edc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8101ede:	3a01      	subs	r2, #1
 8101ee0:	0411      	lsls	r1, r2, #16
 8101ee2:	687a      	ldr	r2, [r7, #4]
 8101ee4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8101ee6:	4311      	orrs	r1, r2
 8101ee8:	687a      	ldr	r2, [r7, #4]
 8101eea:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8101eec:	4311      	orrs	r1, r2
 8101eee:	687a      	ldr	r2, [r7, #4]
 8101ef0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8101ef2:	430a      	orrs	r2, r1
 8101ef4:	431a      	orrs	r2, r3
 8101ef6:	687b      	ldr	r3, [r7, #4]
 8101ef8:	681b      	ldr	r3, [r3, #0]
 8101efa:	f042 0201 	orr.w	r2, r2, #1
 8101efe:	611a      	str	r2, [r3, #16]
 8101f00:	e007      	b.n	8101f12 <HAL_ADC_Init+0x2a2>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8101f02:	687b      	ldr	r3, [r7, #4]
 8101f04:	681b      	ldr	r3, [r3, #0]
 8101f06:	691a      	ldr	r2, [r3, #16]
 8101f08:	687b      	ldr	r3, [r7, #4]
 8101f0a:	681b      	ldr	r3, [r3, #0]
 8101f0c:	f022 0201 	bic.w	r2, r2, #1
 8101f10:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8101f12:	687b      	ldr	r3, [r7, #4]
 8101f14:	681b      	ldr	r3, [r3, #0]
 8101f16:	691b      	ldr	r3, [r3, #16]
 8101f18:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8101f1c:	687b      	ldr	r3, [r7, #4]
 8101f1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8101f20:	687b      	ldr	r3, [r7, #4]
 8101f22:	681b      	ldr	r3, [r3, #0]
 8101f24:	430a      	orrs	r2, r1
 8101f26:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8101f28:	6878      	ldr	r0, [r7, #4]
 8101f2a:	f001 f935 	bl	8103198 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8101f2e:	687b      	ldr	r3, [r7, #4]
 8101f30:	68db      	ldr	r3, [r3, #12]
 8101f32:	2b01      	cmp	r3, #1
 8101f34:	d11e      	bne.n	8101f74 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8101f36:	687b      	ldr	r3, [r7, #4]
 8101f38:	681b      	ldr	r3, [r3, #0]
 8101f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101f3c:	f023 010f 	bic.w	r1, r3, #15
 8101f40:	687b      	ldr	r3, [r7, #4]
 8101f42:	699b      	ldr	r3, [r3, #24]
 8101f44:	1e5a      	subs	r2, r3, #1
 8101f46:	687b      	ldr	r3, [r7, #4]
 8101f48:	681b      	ldr	r3, [r3, #0]
 8101f4a:	430a      	orrs	r2, r1
 8101f4c:	631a      	str	r2, [r3, #48]	; 0x30
 8101f4e:	e019      	b.n	8101f84 <HAL_ADC_Init+0x314>
 8101f50:	10000000 	.word	0x10000000
 8101f54:	053e2d63 	.word	0x053e2d63
 8101f58:	40022000 	.word	0x40022000
 8101f5c:	40022100 	.word	0x40022100
 8101f60:	58026000 	.word	0x58026000
 8101f64:	40022300 	.word	0x40022300
 8101f68:	58026300 	.word	0x58026300
 8101f6c:	fff0c003 	.word	0xfff0c003
 8101f70:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8101f74:	687b      	ldr	r3, [r7, #4]
 8101f76:	681b      	ldr	r3, [r3, #0]
 8101f78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8101f7a:	687b      	ldr	r3, [r7, #4]
 8101f7c:	681b      	ldr	r3, [r3, #0]
 8101f7e:	f022 020f 	bic.w	r2, r2, #15
 8101f82:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8101f84:	687b      	ldr	r3, [r7, #4]
 8101f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101f88:	f023 0303 	bic.w	r3, r3, #3
 8101f8c:	f043 0201 	orr.w	r2, r3, #1
 8101f90:	687b      	ldr	r3, [r7, #4]
 8101f92:	655a      	str	r2, [r3, #84]	; 0x54
 8101f94:	e007      	b.n	8101fa6 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8101f96:	687b      	ldr	r3, [r7, #4]
 8101f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101f9a:	f043 0210 	orr.w	r2, r3, #16
 8101f9e:	687b      	ldr	r3, [r7, #4]
 8101fa0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8101fa2:	2301      	movs	r3, #1
 8101fa4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8101fa6:	7ffb      	ldrb	r3, [r7, #31]
}
 8101fa8:	4618      	mov	r0, r3
 8101faa:	3724      	adds	r7, #36	; 0x24
 8101fac:	46bd      	mov	sp, r7
 8101fae:	bd90      	pop	{r4, r7, pc}

08101fb0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8101fb0:	b580      	push	{r7, lr}
 8101fb2:	b086      	sub	sp, #24
 8101fb4:	af00      	add	r7, sp, #0
 8101fb6:	60f8      	str	r0, [r7, #12]
 8101fb8:	60b9      	str	r1, [r7, #8]
 8101fba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8101fbc:	68fb      	ldr	r3, [r7, #12]
 8101fbe:	681b      	ldr	r3, [r3, #0]
 8101fc0:	4a56      	ldr	r2, [pc, #344]	; (810211c <HAL_ADC_Start_DMA+0x16c>)
 8101fc2:	4293      	cmp	r3, r2
 8101fc4:	d004      	beq.n	8101fd0 <HAL_ADC_Start_DMA+0x20>
 8101fc6:	68fb      	ldr	r3, [r7, #12]
 8101fc8:	681b      	ldr	r3, [r3, #0]
 8101fca:	4a55      	ldr	r2, [pc, #340]	; (8102120 <HAL_ADC_Start_DMA+0x170>)
 8101fcc:	4293      	cmp	r3, r2
 8101fce:	d101      	bne.n	8101fd4 <HAL_ADC_Start_DMA+0x24>
 8101fd0:	4b54      	ldr	r3, [pc, #336]	; (8102124 <HAL_ADC_Start_DMA+0x174>)
 8101fd2:	e000      	b.n	8101fd6 <HAL_ADC_Start_DMA+0x26>
 8101fd4:	4b54      	ldr	r3, [pc, #336]	; (8102128 <HAL_ADC_Start_DMA+0x178>)
 8101fd6:	4618      	mov	r0, r3
 8101fd8:	f7ff fd30 	bl	8101a3c <LL_ADC_GetMultimode>
 8101fdc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8101fde:	68fb      	ldr	r3, [r7, #12]
 8101fe0:	681b      	ldr	r3, [r3, #0]
 8101fe2:	4618      	mov	r0, r3
 8101fe4:	f7ff fe0a 	bl	8101bfc <LL_ADC_REG_IsConversionOngoing>
 8101fe8:	4603      	mov	r3, r0
 8101fea:	2b00      	cmp	r3, #0
 8101fec:	f040 808e 	bne.w	810210c <HAL_ADC_Start_DMA+0x15c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8101ff0:	68fb      	ldr	r3, [r7, #12]
 8101ff2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8101ff6:	2b01      	cmp	r3, #1
 8101ff8:	d101      	bne.n	8101ffe <HAL_ADC_Start_DMA+0x4e>
 8101ffa:	2302      	movs	r3, #2
 8101ffc:	e089      	b.n	8102112 <HAL_ADC_Start_DMA+0x162>
 8101ffe:	68fb      	ldr	r3, [r7, #12]
 8102000:	2201      	movs	r2, #1
 8102002:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8102006:	693b      	ldr	r3, [r7, #16]
 8102008:	2b00      	cmp	r3, #0
 810200a:	d005      	beq.n	8102018 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 810200c:	693b      	ldr	r3, [r7, #16]
 810200e:	2b05      	cmp	r3, #5
 8102010:	d002      	beq.n	8102018 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8102012:	693b      	ldr	r3, [r7, #16]
 8102014:	2b09      	cmp	r3, #9
 8102016:	d172      	bne.n	81020fe <HAL_ADC_Start_DMA+0x14e>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8102018:	68f8      	ldr	r0, [r7, #12]
 810201a:	f000 ff3f 	bl	8102e9c <ADC_Enable>
 810201e:	4603      	mov	r3, r0
 8102020:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8102022:	7dfb      	ldrb	r3, [r7, #23]
 8102024:	2b00      	cmp	r3, #0
 8102026:	d165      	bne.n	81020f4 <HAL_ADC_Start_DMA+0x144>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8102028:	68fb      	ldr	r3, [r7, #12]
 810202a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810202c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102030:	f023 0301 	bic.w	r3, r3, #1
 8102034:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8102038:	68fb      	ldr	r3, [r7, #12]
 810203a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 810203c:	68fb      	ldr	r3, [r7, #12]
 810203e:	681b      	ldr	r3, [r3, #0]
 8102040:	4a37      	ldr	r2, [pc, #220]	; (8102120 <HAL_ADC_Start_DMA+0x170>)
 8102042:	4293      	cmp	r3, r2
 8102044:	d002      	beq.n	810204c <HAL_ADC_Start_DMA+0x9c>
 8102046:	68fb      	ldr	r3, [r7, #12]
 8102048:	681b      	ldr	r3, [r3, #0]
 810204a:	e000      	b.n	810204e <HAL_ADC_Start_DMA+0x9e>
 810204c:	4b33      	ldr	r3, [pc, #204]	; (810211c <HAL_ADC_Start_DMA+0x16c>)
 810204e:	68fa      	ldr	r2, [r7, #12]
 8102050:	6812      	ldr	r2, [r2, #0]
 8102052:	4293      	cmp	r3, r2
 8102054:	d002      	beq.n	810205c <HAL_ADC_Start_DMA+0xac>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8102056:	693b      	ldr	r3, [r7, #16]
 8102058:	2b00      	cmp	r3, #0
 810205a:	d105      	bne.n	8102068 <HAL_ADC_Start_DMA+0xb8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 810205c:	68fb      	ldr	r3, [r7, #12]
 810205e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102060:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8102064:	68fb      	ldr	r3, [r7, #12]
 8102066:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8102068:	68fb      	ldr	r3, [r7, #12]
 810206a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810206c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8102070:	2b00      	cmp	r3, #0
 8102072:	d006      	beq.n	8102082 <HAL_ADC_Start_DMA+0xd2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8102074:	68fb      	ldr	r3, [r7, #12]
 8102076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102078:	f023 0206 	bic.w	r2, r3, #6
 810207c:	68fb      	ldr	r3, [r7, #12]
 810207e:	659a      	str	r2, [r3, #88]	; 0x58
 8102080:	e002      	b.n	8102088 <HAL_ADC_Start_DMA+0xd8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8102082:	68fb      	ldr	r3, [r7, #12]
 8102084:	2200      	movs	r2, #0
 8102086:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8102088:	68fb      	ldr	r3, [r7, #12]
 810208a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810208c:	4a27      	ldr	r2, [pc, #156]	; (810212c <HAL_ADC_Start_DMA+0x17c>)
 810208e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8102090:	68fb      	ldr	r3, [r7, #12]
 8102092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102094:	4a26      	ldr	r2, [pc, #152]	; (8102130 <HAL_ADC_Start_DMA+0x180>)
 8102096:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8102098:	68fb      	ldr	r3, [r7, #12]
 810209a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810209c:	4a25      	ldr	r2, [pc, #148]	; (8102134 <HAL_ADC_Start_DMA+0x184>)
 810209e:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 81020a0:	68fb      	ldr	r3, [r7, #12]
 81020a2:	681b      	ldr	r3, [r3, #0]
 81020a4:	221c      	movs	r2, #28
 81020a6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 81020a8:	68fb      	ldr	r3, [r7, #12]
 81020aa:	2200      	movs	r2, #0
 81020ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 81020b0:	68fb      	ldr	r3, [r7, #12]
 81020b2:	681b      	ldr	r3, [r3, #0]
 81020b4:	685a      	ldr	r2, [r3, #4]
 81020b6:	68fb      	ldr	r3, [r7, #12]
 81020b8:	681b      	ldr	r3, [r3, #0]
 81020ba:	f042 0210 	orr.w	r2, r2, #16
 81020be:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 81020c0:	68fb      	ldr	r3, [r7, #12]
 81020c2:	681a      	ldr	r2, [r3, #0]
 81020c4:	68fb      	ldr	r3, [r7, #12]
 81020c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81020c8:	4619      	mov	r1, r3
 81020ca:	4610      	mov	r0, r2
 81020cc:	f7ff fc41 	bl	8101952 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 81020d0:	68fb      	ldr	r3, [r7, #12]
 81020d2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 81020d4:	68fb      	ldr	r3, [r7, #12]
 81020d6:	681b      	ldr	r3, [r3, #0]
 81020d8:	3340      	adds	r3, #64	; 0x40
 81020da:	4619      	mov	r1, r3
 81020dc:	68ba      	ldr	r2, [r7, #8]
 81020de:	687b      	ldr	r3, [r7, #4]
 81020e0:	f001 ff84 	bl	8103fec <HAL_DMA_Start_IT>
 81020e4:	4603      	mov	r3, r0
 81020e6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 81020e8:	68fb      	ldr	r3, [r7, #12]
 81020ea:	681b      	ldr	r3, [r3, #0]
 81020ec:	4618      	mov	r0, r3
 81020ee:	f7ff fd5d 	bl	8101bac <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 81020f2:	e00d      	b.n	8102110 <HAL_ADC_Start_DMA+0x160>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 81020f4:	68fb      	ldr	r3, [r7, #12]
 81020f6:	2200      	movs	r2, #0
 81020f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 81020fc:	e008      	b.n	8102110 <HAL_ADC_Start_DMA+0x160>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 81020fe:	2301      	movs	r3, #1
 8102100:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8102102:	68fb      	ldr	r3, [r7, #12]
 8102104:	2200      	movs	r2, #0
 8102106:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 810210a:	e001      	b.n	8102110 <HAL_ADC_Start_DMA+0x160>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 810210c:	2302      	movs	r3, #2
 810210e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8102110:	7dfb      	ldrb	r3, [r7, #23]
}
 8102112:	4618      	mov	r0, r3
 8102114:	3718      	adds	r7, #24
 8102116:	46bd      	mov	sp, r7
 8102118:	bd80      	pop	{r7, pc}
 810211a:	bf00      	nop
 810211c:	40022000 	.word	0x40022000
 8102120:	40022100 	.word	0x40022100
 8102124:	40022300 	.word	0x40022300
 8102128:	58026300 	.word	0x58026300
 810212c:	0810306f 	.word	0x0810306f
 8102130:	08103147 	.word	0x08103147
 8102134:	08103163 	.word	0x08103163

08102138 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8102138:	b580      	push	{r7, lr}
 810213a:	b084      	sub	sp, #16
 810213c:	af00      	add	r7, sp, #0
 810213e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8102140:	687b      	ldr	r3, [r7, #4]
 8102142:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8102146:	2b01      	cmp	r3, #1
 8102148:	d101      	bne.n	810214e <HAL_ADC_Stop_DMA+0x16>
 810214a:	2302      	movs	r3, #2
 810214c:	e051      	b.n	81021f2 <HAL_ADC_Stop_DMA+0xba>
 810214e:	687b      	ldr	r3, [r7, #4]
 8102150:	2201      	movs	r2, #1
 8102152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8102156:	2103      	movs	r1, #3
 8102158:	6878      	ldr	r0, [r7, #4]
 810215a:	f000 fde3 	bl	8102d24 <ADC_ConversionStop>
 810215e:	4603      	mov	r3, r0
 8102160:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8102162:	7bfb      	ldrb	r3, [r7, #15]
 8102164:	2b00      	cmp	r3, #0
 8102166:	d13f      	bne.n	81021e8 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8102168:	687b      	ldr	r3, [r7, #4]
 810216a:	681b      	ldr	r3, [r3, #0]
 810216c:	68da      	ldr	r2, [r3, #12]
 810216e:	687b      	ldr	r3, [r7, #4]
 8102170:	681b      	ldr	r3, [r3, #0]
 8102172:	f022 0203 	bic.w	r2, r2, #3
 8102176:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8102178:	687b      	ldr	r3, [r7, #4]
 810217a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810217c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8102180:	b2db      	uxtb	r3, r3
 8102182:	2b02      	cmp	r3, #2
 8102184:	d10f      	bne.n	81021a6 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8102186:	687b      	ldr	r3, [r7, #4]
 8102188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810218a:	4618      	mov	r0, r3
 810218c:	f002 f998 	bl	81044c0 <HAL_DMA_Abort>
 8102190:	4603      	mov	r3, r0
 8102192:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8102194:	7bfb      	ldrb	r3, [r7, #15]
 8102196:	2b00      	cmp	r3, #0
 8102198:	d005      	beq.n	81021a6 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 810219a:	687b      	ldr	r3, [r7, #4]
 810219c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810219e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 81021a2:	687b      	ldr	r3, [r7, #4]
 81021a4:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 81021a6:	687b      	ldr	r3, [r7, #4]
 81021a8:	681b      	ldr	r3, [r3, #0]
 81021aa:	685a      	ldr	r2, [r3, #4]
 81021ac:	687b      	ldr	r3, [r7, #4]
 81021ae:	681b      	ldr	r3, [r3, #0]
 81021b0:	f022 0210 	bic.w	r2, r2, #16
 81021b4:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 81021b6:	7bfb      	ldrb	r3, [r7, #15]
 81021b8:	2b00      	cmp	r3, #0
 81021ba:	d105      	bne.n	81021c8 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 81021bc:	6878      	ldr	r0, [r7, #4]
 81021be:	f000 fef7 	bl	8102fb0 <ADC_Disable>
 81021c2:	4603      	mov	r3, r0
 81021c4:	73fb      	strb	r3, [r7, #15]
 81021c6:	e002      	b.n	81021ce <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 81021c8:	6878      	ldr	r0, [r7, #4]
 81021ca:	f000 fef1 	bl	8102fb0 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 81021ce:	7bfb      	ldrb	r3, [r7, #15]
 81021d0:	2b00      	cmp	r3, #0
 81021d2:	d109      	bne.n	81021e8 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 81021d4:	687b      	ldr	r3, [r7, #4]
 81021d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81021d8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 81021dc:	f023 0301 	bic.w	r3, r3, #1
 81021e0:	f043 0201 	orr.w	r2, r3, #1
 81021e4:	687b      	ldr	r3, [r7, #4]
 81021e6:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 81021e8:	687b      	ldr	r3, [r7, #4]
 81021ea:	2200      	movs	r2, #0
 81021ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 81021f0:	7bfb      	ldrb	r3, [r7, #15]
}
 81021f2:	4618      	mov	r0, r3
 81021f4:	3710      	adds	r7, #16
 81021f6:	46bd      	mov	sp, r7
 81021f8:	bd80      	pop	{r7, pc}
	...

081021fc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 81021fc:	b580      	push	{r7, lr}
 81021fe:	b08a      	sub	sp, #40	; 0x28
 8102200:	af00      	add	r7, sp, #0
 8102202:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8102204:	2300      	movs	r3, #0
 8102206:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8102208:	687b      	ldr	r3, [r7, #4]
 810220a:	681b      	ldr	r3, [r3, #0]
 810220c:	681b      	ldr	r3, [r3, #0]
 810220e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8102210:	687b      	ldr	r3, [r7, #4]
 8102212:	681b      	ldr	r3, [r3, #0]
 8102214:	685b      	ldr	r3, [r3, #4]
 8102216:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8102218:	687b      	ldr	r3, [r7, #4]
 810221a:	681b      	ldr	r3, [r3, #0]
 810221c:	4a87      	ldr	r2, [pc, #540]	; (810243c <HAL_ADC_IRQHandler+0x240>)
 810221e:	4293      	cmp	r3, r2
 8102220:	d004      	beq.n	810222c <HAL_ADC_IRQHandler+0x30>
 8102222:	687b      	ldr	r3, [r7, #4]
 8102224:	681b      	ldr	r3, [r3, #0]
 8102226:	4a86      	ldr	r2, [pc, #536]	; (8102440 <HAL_ADC_IRQHandler+0x244>)
 8102228:	4293      	cmp	r3, r2
 810222a:	d101      	bne.n	8102230 <HAL_ADC_IRQHandler+0x34>
 810222c:	4b85      	ldr	r3, [pc, #532]	; (8102444 <HAL_ADC_IRQHandler+0x248>)
 810222e:	e000      	b.n	8102232 <HAL_ADC_IRQHandler+0x36>
 8102230:	4b85      	ldr	r3, [pc, #532]	; (8102448 <HAL_ADC_IRQHandler+0x24c>)
 8102232:	4618      	mov	r0, r3
 8102234:	f7ff fc02 	bl	8101a3c <LL_ADC_GetMultimode>
 8102238:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 810223a:	69fb      	ldr	r3, [r7, #28]
 810223c:	f003 0302 	and.w	r3, r3, #2
 8102240:	2b00      	cmp	r3, #0
 8102242:	d017      	beq.n	8102274 <HAL_ADC_IRQHandler+0x78>
 8102244:	69bb      	ldr	r3, [r7, #24]
 8102246:	f003 0302 	and.w	r3, r3, #2
 810224a:	2b00      	cmp	r3, #0
 810224c:	d012      	beq.n	8102274 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 810224e:	687b      	ldr	r3, [r7, #4]
 8102250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102252:	f003 0310 	and.w	r3, r3, #16
 8102256:	2b00      	cmp	r3, #0
 8102258:	d105      	bne.n	8102266 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 810225a:	687b      	ldr	r3, [r7, #4]
 810225c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810225e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8102262:	687b      	ldr	r3, [r7, #4]
 8102264:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8102266:	6878      	ldr	r0, [r7, #4]
 8102268:	f001 f986 	bl	8103578 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 810226c:	687b      	ldr	r3, [r7, #4]
 810226e:	681b      	ldr	r3, [r3, #0]
 8102270:	2202      	movs	r2, #2
 8102272:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8102274:	69fb      	ldr	r3, [r7, #28]
 8102276:	f003 0304 	and.w	r3, r3, #4
 810227a:	2b00      	cmp	r3, #0
 810227c:	d004      	beq.n	8102288 <HAL_ADC_IRQHandler+0x8c>
 810227e:	69bb      	ldr	r3, [r7, #24]
 8102280:	f003 0304 	and.w	r3, r3, #4
 8102284:	2b00      	cmp	r3, #0
 8102286:	d10a      	bne.n	810229e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8102288:	69fb      	ldr	r3, [r7, #28]
 810228a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 810228e:	2b00      	cmp	r3, #0
 8102290:	f000 8083 	beq.w	810239a <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8102294:	69bb      	ldr	r3, [r7, #24]
 8102296:	f003 0308 	and.w	r3, r3, #8
 810229a:	2b00      	cmp	r3, #0
 810229c:	d07d      	beq.n	810239a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 810229e:	687b      	ldr	r3, [r7, #4]
 81022a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81022a2:	f003 0310 	and.w	r3, r3, #16
 81022a6:	2b00      	cmp	r3, #0
 81022a8:	d105      	bne.n	81022b6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 81022aa:	687b      	ldr	r3, [r7, #4]
 81022ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81022ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 81022b2:	687b      	ldr	r3, [r7, #4]
 81022b4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 81022b6:	687b      	ldr	r3, [r7, #4]
 81022b8:	681b      	ldr	r3, [r3, #0]
 81022ba:	4618      	mov	r0, r3
 81022bc:	f7ff fb0a 	bl	81018d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 81022c0:	4603      	mov	r3, r0
 81022c2:	2b00      	cmp	r3, #0
 81022c4:	d062      	beq.n	810238c <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 81022c6:	687b      	ldr	r3, [r7, #4]
 81022c8:	681b      	ldr	r3, [r3, #0]
 81022ca:	4a5d      	ldr	r2, [pc, #372]	; (8102440 <HAL_ADC_IRQHandler+0x244>)
 81022cc:	4293      	cmp	r3, r2
 81022ce:	d002      	beq.n	81022d6 <HAL_ADC_IRQHandler+0xda>
 81022d0:	687b      	ldr	r3, [r7, #4]
 81022d2:	681b      	ldr	r3, [r3, #0]
 81022d4:	e000      	b.n	81022d8 <HAL_ADC_IRQHandler+0xdc>
 81022d6:	4b59      	ldr	r3, [pc, #356]	; (810243c <HAL_ADC_IRQHandler+0x240>)
 81022d8:	687a      	ldr	r2, [r7, #4]
 81022da:	6812      	ldr	r2, [r2, #0]
 81022dc:	4293      	cmp	r3, r2
 81022de:	d008      	beq.n	81022f2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 81022e0:	697b      	ldr	r3, [r7, #20]
 81022e2:	2b00      	cmp	r3, #0
 81022e4:	d005      	beq.n	81022f2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 81022e6:	697b      	ldr	r3, [r7, #20]
 81022e8:	2b05      	cmp	r3, #5
 81022ea:	d002      	beq.n	81022f2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 81022ec:	697b      	ldr	r3, [r7, #20]
 81022ee:	2b09      	cmp	r3, #9
 81022f0:	d104      	bne.n	81022fc <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 81022f2:	687b      	ldr	r3, [r7, #4]
 81022f4:	681b      	ldr	r3, [r3, #0]
 81022f6:	68db      	ldr	r3, [r3, #12]
 81022f8:	623b      	str	r3, [r7, #32]
 81022fa:	e00c      	b.n	8102316 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 81022fc:	687b      	ldr	r3, [r7, #4]
 81022fe:	681b      	ldr	r3, [r3, #0]
 8102300:	4a4f      	ldr	r2, [pc, #316]	; (8102440 <HAL_ADC_IRQHandler+0x244>)
 8102302:	4293      	cmp	r3, r2
 8102304:	d002      	beq.n	810230c <HAL_ADC_IRQHandler+0x110>
 8102306:	687b      	ldr	r3, [r7, #4]
 8102308:	681b      	ldr	r3, [r3, #0]
 810230a:	e000      	b.n	810230e <HAL_ADC_IRQHandler+0x112>
 810230c:	4b4b      	ldr	r3, [pc, #300]	; (810243c <HAL_ADC_IRQHandler+0x240>)
 810230e:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8102310:	693b      	ldr	r3, [r7, #16]
 8102312:	68db      	ldr	r3, [r3, #12]
 8102314:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8102316:	6a3b      	ldr	r3, [r7, #32]
 8102318:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 810231c:	2b00      	cmp	r3, #0
 810231e:	d135      	bne.n	810238c <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8102320:	687b      	ldr	r3, [r7, #4]
 8102322:	681b      	ldr	r3, [r3, #0]
 8102324:	681b      	ldr	r3, [r3, #0]
 8102326:	f003 0308 	and.w	r3, r3, #8
 810232a:	2b08      	cmp	r3, #8
 810232c:	d12e      	bne.n	810238c <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 810232e:	687b      	ldr	r3, [r7, #4]
 8102330:	681b      	ldr	r3, [r3, #0]
 8102332:	4618      	mov	r0, r3
 8102334:	f7ff fc62 	bl	8101bfc <LL_ADC_REG_IsConversionOngoing>
 8102338:	4603      	mov	r3, r0
 810233a:	2b00      	cmp	r3, #0
 810233c:	d11a      	bne.n	8102374 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 810233e:	687b      	ldr	r3, [r7, #4]
 8102340:	681b      	ldr	r3, [r3, #0]
 8102342:	685a      	ldr	r2, [r3, #4]
 8102344:	687b      	ldr	r3, [r7, #4]
 8102346:	681b      	ldr	r3, [r3, #0]
 8102348:	f022 020c 	bic.w	r2, r2, #12
 810234c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 810234e:	687b      	ldr	r3, [r7, #4]
 8102350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102352:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8102356:	687b      	ldr	r3, [r7, #4]
 8102358:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 810235a:	687b      	ldr	r3, [r7, #4]
 810235c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810235e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8102362:	2b00      	cmp	r3, #0
 8102364:	d112      	bne.n	810238c <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8102366:	687b      	ldr	r3, [r7, #4]
 8102368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810236a:	f043 0201 	orr.w	r2, r3, #1
 810236e:	687b      	ldr	r3, [r7, #4]
 8102370:	655a      	str	r2, [r3, #84]	; 0x54
 8102372:	e00b      	b.n	810238c <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102374:	687b      	ldr	r3, [r7, #4]
 8102376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102378:	f043 0210 	orr.w	r2, r3, #16
 810237c:	687b      	ldr	r3, [r7, #4]
 810237e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8102380:	687b      	ldr	r3, [r7, #4]
 8102382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102384:	f043 0201 	orr.w	r2, r3, #1
 8102388:	687b      	ldr	r3, [r7, #4]
 810238a:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 810238c:	6878      	ldr	r0, [r7, #4]
 810238e:	f7fe ffa5 	bl	81012dc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8102392:	687b      	ldr	r3, [r7, #4]
 8102394:	681b      	ldr	r3, [r3, #0]
 8102396:	220c      	movs	r2, #12
 8102398:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 810239a:	69fb      	ldr	r3, [r7, #28]
 810239c:	f003 0320 	and.w	r3, r3, #32
 81023a0:	2b00      	cmp	r3, #0
 81023a2:	d004      	beq.n	81023ae <HAL_ADC_IRQHandler+0x1b2>
 81023a4:	69bb      	ldr	r3, [r7, #24]
 81023a6:	f003 0320 	and.w	r3, r3, #32
 81023aa:	2b00      	cmp	r3, #0
 81023ac:	d10b      	bne.n	81023c6 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 81023ae:	69fb      	ldr	r3, [r7, #28]
 81023b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 81023b4:	2b00      	cmp	r3, #0
 81023b6:	f000 80a0 	beq.w	81024fa <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 81023ba:	69bb      	ldr	r3, [r7, #24]
 81023bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81023c0:	2b00      	cmp	r3, #0
 81023c2:	f000 809a 	beq.w	81024fa <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 81023c6:	687b      	ldr	r3, [r7, #4]
 81023c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81023ca:	f003 0310 	and.w	r3, r3, #16
 81023ce:	2b00      	cmp	r3, #0
 81023d0:	d105      	bne.n	81023de <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 81023d2:	687b      	ldr	r3, [r7, #4]
 81023d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81023d6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 81023da:	687b      	ldr	r3, [r7, #4]
 81023dc:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 81023de:	687b      	ldr	r3, [r7, #4]
 81023e0:	681b      	ldr	r3, [r3, #0]
 81023e2:	4618      	mov	r0, r3
 81023e4:	f7ff fac8 	bl	8101978 <LL_ADC_INJ_IsTriggerSourceSWStart>
 81023e8:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 81023ea:	687b      	ldr	r3, [r7, #4]
 81023ec:	681b      	ldr	r3, [r3, #0]
 81023ee:	4618      	mov	r0, r3
 81023f0:	f7ff fa70 	bl	81018d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 81023f4:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 81023f6:	687b      	ldr	r3, [r7, #4]
 81023f8:	681b      	ldr	r3, [r3, #0]
 81023fa:	4a11      	ldr	r2, [pc, #68]	; (8102440 <HAL_ADC_IRQHandler+0x244>)
 81023fc:	4293      	cmp	r3, r2
 81023fe:	d002      	beq.n	8102406 <HAL_ADC_IRQHandler+0x20a>
 8102400:	687b      	ldr	r3, [r7, #4]
 8102402:	681b      	ldr	r3, [r3, #0]
 8102404:	e000      	b.n	8102408 <HAL_ADC_IRQHandler+0x20c>
 8102406:	4b0d      	ldr	r3, [pc, #52]	; (810243c <HAL_ADC_IRQHandler+0x240>)
 8102408:	687a      	ldr	r2, [r7, #4]
 810240a:	6812      	ldr	r2, [r2, #0]
 810240c:	4293      	cmp	r3, r2
 810240e:	d008      	beq.n	8102422 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8102410:	697b      	ldr	r3, [r7, #20]
 8102412:	2b00      	cmp	r3, #0
 8102414:	d005      	beq.n	8102422 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8102416:	697b      	ldr	r3, [r7, #20]
 8102418:	2b06      	cmp	r3, #6
 810241a:	d002      	beq.n	8102422 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 810241c:	697b      	ldr	r3, [r7, #20]
 810241e:	2b07      	cmp	r3, #7
 8102420:	d104      	bne.n	810242c <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8102422:	687b      	ldr	r3, [r7, #4]
 8102424:	681b      	ldr	r3, [r3, #0]
 8102426:	68db      	ldr	r3, [r3, #12]
 8102428:	623b      	str	r3, [r7, #32]
 810242a:	e014      	b.n	8102456 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 810242c:	687b      	ldr	r3, [r7, #4]
 810242e:	681b      	ldr	r3, [r3, #0]
 8102430:	4a03      	ldr	r2, [pc, #12]	; (8102440 <HAL_ADC_IRQHandler+0x244>)
 8102432:	4293      	cmp	r3, r2
 8102434:	d00a      	beq.n	810244c <HAL_ADC_IRQHandler+0x250>
 8102436:	687b      	ldr	r3, [r7, #4]
 8102438:	681b      	ldr	r3, [r3, #0]
 810243a:	e008      	b.n	810244e <HAL_ADC_IRQHandler+0x252>
 810243c:	40022000 	.word	0x40022000
 8102440:	40022100 	.word	0x40022100
 8102444:	40022300 	.word	0x40022300
 8102448:	58026300 	.word	0x58026300
 810244c:	4b84      	ldr	r3, [pc, #528]	; (8102660 <HAL_ADC_IRQHandler+0x464>)
 810244e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8102450:	693b      	ldr	r3, [r7, #16]
 8102452:	68db      	ldr	r3, [r3, #12]
 8102454:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8102456:	68fb      	ldr	r3, [r7, #12]
 8102458:	2b00      	cmp	r3, #0
 810245a:	d10c      	bne.n	8102476 <HAL_ADC_IRQHandler+0x27a>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 810245c:	6a3b      	ldr	r3, [r7, #32]
 810245e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8102462:	2b00      	cmp	r3, #0
 8102464:	d142      	bne.n	81024ec <HAL_ADC_IRQHandler+0x2f0>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8102466:	68bb      	ldr	r3, [r7, #8]
 8102468:	2b00      	cmp	r3, #0
 810246a:	d03f      	beq.n	81024ec <HAL_ADC_IRQHandler+0x2f0>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 810246c:	6a3b      	ldr	r3, [r7, #32]
 810246e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8102472:	2b00      	cmp	r3, #0
 8102474:	d13a      	bne.n	81024ec <HAL_ADC_IRQHandler+0x2f0>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8102476:	687b      	ldr	r3, [r7, #4]
 8102478:	681b      	ldr	r3, [r3, #0]
 810247a:	681b      	ldr	r3, [r3, #0]
 810247c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8102480:	2b40      	cmp	r3, #64	; 0x40
 8102482:	d133      	bne.n	81024ec <HAL_ADC_IRQHandler+0x2f0>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8102484:	6a3b      	ldr	r3, [r7, #32]
 8102486:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810248a:	2b00      	cmp	r3, #0
 810248c:	d12e      	bne.n	81024ec <HAL_ADC_IRQHandler+0x2f0>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 810248e:	687b      	ldr	r3, [r7, #4]
 8102490:	681b      	ldr	r3, [r3, #0]
 8102492:	4618      	mov	r0, r3
 8102494:	f7ff fbd9 	bl	8101c4a <LL_ADC_INJ_IsConversionOngoing>
 8102498:	4603      	mov	r3, r0
 810249a:	2b00      	cmp	r3, #0
 810249c:	d11a      	bne.n	81024d4 <HAL_ADC_IRQHandler+0x2d8>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 810249e:	687b      	ldr	r3, [r7, #4]
 81024a0:	681b      	ldr	r3, [r3, #0]
 81024a2:	685a      	ldr	r2, [r3, #4]
 81024a4:	687b      	ldr	r3, [r7, #4]
 81024a6:	681b      	ldr	r3, [r3, #0]
 81024a8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 81024ac:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 81024ae:	687b      	ldr	r3, [r7, #4]
 81024b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81024b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 81024b6:	687b      	ldr	r3, [r7, #4]
 81024b8:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 81024ba:	687b      	ldr	r3, [r7, #4]
 81024bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81024be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81024c2:	2b00      	cmp	r3, #0
 81024c4:	d112      	bne.n	81024ec <HAL_ADC_IRQHandler+0x2f0>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 81024c6:	687b      	ldr	r3, [r7, #4]
 81024c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81024ca:	f043 0201 	orr.w	r2, r3, #1
 81024ce:	687b      	ldr	r3, [r7, #4]
 81024d0:	655a      	str	r2, [r3, #84]	; 0x54
 81024d2:	e00b      	b.n	81024ec <HAL_ADC_IRQHandler+0x2f0>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81024d4:	687b      	ldr	r3, [r7, #4]
 81024d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81024d8:	f043 0210 	orr.w	r2, r3, #16
 81024dc:	687b      	ldr	r3, [r7, #4]
 81024de:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81024e0:	687b      	ldr	r3, [r7, #4]
 81024e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81024e4:	f043 0201 	orr.w	r2, r3, #1
 81024e8:	687b      	ldr	r3, [r7, #4]
 81024ea:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 81024ec:	6878      	ldr	r0, [r7, #4]
 81024ee:	f001 f81b 	bl	8103528 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 81024f2:	687b      	ldr	r3, [r7, #4]
 81024f4:	681b      	ldr	r3, [r3, #0]
 81024f6:	2260      	movs	r2, #96	; 0x60
 81024f8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 81024fa:	69fb      	ldr	r3, [r7, #28]
 81024fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102500:	2b00      	cmp	r3, #0
 8102502:	d011      	beq.n	8102528 <HAL_ADC_IRQHandler+0x32c>
 8102504:	69bb      	ldr	r3, [r7, #24]
 8102506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810250a:	2b00      	cmp	r3, #0
 810250c:	d00c      	beq.n	8102528 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 810250e:	687b      	ldr	r3, [r7, #4]
 8102510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102512:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8102516:	687b      	ldr	r3, [r7, #4]
 8102518:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 810251a:	6878      	ldr	r0, [r7, #4]
 810251c:	f000 f8a8 	bl	8102670 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8102520:	687b      	ldr	r3, [r7, #4]
 8102522:	681b      	ldr	r3, [r3, #0]
 8102524:	2280      	movs	r2, #128	; 0x80
 8102526:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8102528:	69fb      	ldr	r3, [r7, #28]
 810252a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810252e:	2b00      	cmp	r3, #0
 8102530:	d012      	beq.n	8102558 <HAL_ADC_IRQHandler+0x35c>
 8102532:	69bb      	ldr	r3, [r7, #24]
 8102534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102538:	2b00      	cmp	r3, #0
 810253a:	d00d      	beq.n	8102558 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 810253c:	687b      	ldr	r3, [r7, #4]
 810253e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102540:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8102544:	687b      	ldr	r3, [r7, #4]
 8102546:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8102548:	6878      	ldr	r0, [r7, #4]
 810254a:	f001 f801 	bl	8103550 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 810254e:	687b      	ldr	r3, [r7, #4]
 8102550:	681b      	ldr	r3, [r3, #0]
 8102552:	f44f 7280 	mov.w	r2, #256	; 0x100
 8102556:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8102558:	69fb      	ldr	r3, [r7, #28]
 810255a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810255e:	2b00      	cmp	r3, #0
 8102560:	d012      	beq.n	8102588 <HAL_ADC_IRQHandler+0x38c>
 8102562:	69bb      	ldr	r3, [r7, #24]
 8102564:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8102568:	2b00      	cmp	r3, #0
 810256a:	d00d      	beq.n	8102588 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 810256c:	687b      	ldr	r3, [r7, #4]
 810256e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102570:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8102574:	687b      	ldr	r3, [r7, #4]
 8102576:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8102578:	6878      	ldr	r0, [r7, #4]
 810257a:	f000 fff3 	bl	8103564 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 810257e:	687b      	ldr	r3, [r7, #4]
 8102580:	681b      	ldr	r3, [r3, #0]
 8102582:	f44f 7200 	mov.w	r2, #512	; 0x200
 8102586:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8102588:	69fb      	ldr	r3, [r7, #28]
 810258a:	f003 0310 	and.w	r3, r3, #16
 810258e:	2b00      	cmp	r3, #0
 8102590:	d043      	beq.n	810261a <HAL_ADC_IRQHandler+0x41e>
 8102592:	69bb      	ldr	r3, [r7, #24]
 8102594:	f003 0310 	and.w	r3, r3, #16
 8102598:	2b00      	cmp	r3, #0
 810259a:	d03e      	beq.n	810261a <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 810259c:	687b      	ldr	r3, [r7, #4]
 810259e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81025a0:	2b00      	cmp	r3, #0
 81025a2:	d102      	bne.n	81025aa <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 81025a4:	2301      	movs	r3, #1
 81025a6:	627b      	str	r3, [r7, #36]	; 0x24
 81025a8:	e021      	b.n	81025ee <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 81025aa:	697b      	ldr	r3, [r7, #20]
 81025ac:	2b00      	cmp	r3, #0
 81025ae:	d015      	beq.n	81025dc <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 81025b0:	687b      	ldr	r3, [r7, #4]
 81025b2:	681b      	ldr	r3, [r3, #0]
 81025b4:	4a2a      	ldr	r2, [pc, #168]	; (8102660 <HAL_ADC_IRQHandler+0x464>)
 81025b6:	4293      	cmp	r3, r2
 81025b8:	d004      	beq.n	81025c4 <HAL_ADC_IRQHandler+0x3c8>
 81025ba:	687b      	ldr	r3, [r7, #4]
 81025bc:	681b      	ldr	r3, [r3, #0]
 81025be:	4a29      	ldr	r2, [pc, #164]	; (8102664 <HAL_ADC_IRQHandler+0x468>)
 81025c0:	4293      	cmp	r3, r2
 81025c2:	d101      	bne.n	81025c8 <HAL_ADC_IRQHandler+0x3cc>
 81025c4:	4b28      	ldr	r3, [pc, #160]	; (8102668 <HAL_ADC_IRQHandler+0x46c>)
 81025c6:	e000      	b.n	81025ca <HAL_ADC_IRQHandler+0x3ce>
 81025c8:	4b28      	ldr	r3, [pc, #160]	; (810266c <HAL_ADC_IRQHandler+0x470>)
 81025ca:	4618      	mov	r0, r3
 81025cc:	f7ff fa44 	bl	8101a58 <LL_ADC_GetMultiDMATransfer>
 81025d0:	4603      	mov	r3, r0
 81025d2:	2b00      	cmp	r3, #0
 81025d4:	d00b      	beq.n	81025ee <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 81025d6:	2301      	movs	r3, #1
 81025d8:	627b      	str	r3, [r7, #36]	; 0x24
 81025da:	e008      	b.n	81025ee <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 81025dc:	687b      	ldr	r3, [r7, #4]
 81025de:	681b      	ldr	r3, [r3, #0]
 81025e0:	68db      	ldr	r3, [r3, #12]
 81025e2:	f003 0303 	and.w	r3, r3, #3
 81025e6:	2b00      	cmp	r3, #0
 81025e8:	d001      	beq.n	81025ee <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 81025ea:	2301      	movs	r3, #1
 81025ec:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 81025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81025f0:	2b01      	cmp	r3, #1
 81025f2:	d10e      	bne.n	8102612 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 81025f4:	687b      	ldr	r3, [r7, #4]
 81025f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81025f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 81025fc:	687b      	ldr	r3, [r7, #4]
 81025fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8102600:	687b      	ldr	r3, [r7, #4]
 8102602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102604:	f043 0202 	orr.w	r2, r3, #2
 8102608:	687b      	ldr	r3, [r7, #4]
 810260a:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 810260c:	6878      	ldr	r0, [r7, #4]
 810260e:	f7fe fe79 	bl	8101304 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8102612:	687b      	ldr	r3, [r7, #4]
 8102614:	681b      	ldr	r3, [r3, #0]
 8102616:	2210      	movs	r2, #16
 8102618:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 810261a:	69fb      	ldr	r3, [r7, #28]
 810261c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8102620:	2b00      	cmp	r3, #0
 8102622:	d018      	beq.n	8102656 <HAL_ADC_IRQHandler+0x45a>
 8102624:	69bb      	ldr	r3, [r7, #24]
 8102626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 810262a:	2b00      	cmp	r3, #0
 810262c:	d013      	beq.n	8102656 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 810262e:	687b      	ldr	r3, [r7, #4]
 8102630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102632:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8102636:	687b      	ldr	r3, [r7, #4]
 8102638:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 810263a:	687b      	ldr	r3, [r7, #4]
 810263c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810263e:	f043 0208 	orr.w	r2, r3, #8
 8102642:	687b      	ldr	r3, [r7, #4]
 8102644:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8102646:	687b      	ldr	r3, [r7, #4]
 8102648:	681b      	ldr	r3, [r3, #0]
 810264a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 810264e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8102650:	6878      	ldr	r0, [r7, #4]
 8102652:	f000 ff73 	bl	810353c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8102656:	bf00      	nop
 8102658:	3728      	adds	r7, #40	; 0x28
 810265a:	46bd      	mov	sp, r7
 810265c:	bd80      	pop	{r7, pc}
 810265e:	bf00      	nop
 8102660:	40022000 	.word	0x40022000
 8102664:	40022100 	.word	0x40022100
 8102668:	40022300 	.word	0x40022300
 810266c:	58026300 	.word	0x58026300

08102670 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8102670:	b480      	push	{r7}
 8102672:	b083      	sub	sp, #12
 8102674:	af00      	add	r7, sp, #0
 8102676:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8102678:	bf00      	nop
 810267a:	370c      	adds	r7, #12
 810267c:	46bd      	mov	sp, r7
 810267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102682:	4770      	bx	lr

08102684 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8102684:	b590      	push	{r4, r7, lr}
 8102686:	b0a1      	sub	sp, #132	; 0x84
 8102688:	af00      	add	r7, sp, #0
 810268a:	6078      	str	r0, [r7, #4]
 810268c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 810268e:	2300      	movs	r3, #0
 8102690:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8102694:	2300      	movs	r3, #0
 8102696:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8102698:	683b      	ldr	r3, [r7, #0]
 810269a:	68db      	ldr	r3, [r3, #12]
 810269c:	4a9d      	ldr	r2, [pc, #628]	; (8102914 <HAL_ADC_ConfigChannel+0x290>)
 810269e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 81026a0:	687b      	ldr	r3, [r7, #4]
 81026a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 81026a6:	2b01      	cmp	r3, #1
 81026a8:	d101      	bne.n	81026ae <HAL_ADC_ConfigChannel+0x2a>
 81026aa:	2302      	movs	r3, #2
 81026ac:	e321      	b.n	8102cf2 <HAL_ADC_ConfigChannel+0x66e>
 81026ae:	687b      	ldr	r3, [r7, #4]
 81026b0:	2201      	movs	r2, #1
 81026b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 81026b6:	687b      	ldr	r3, [r7, #4]
 81026b8:	681b      	ldr	r3, [r3, #0]
 81026ba:	4618      	mov	r0, r3
 81026bc:	f7ff fa9e 	bl	8101bfc <LL_ADC_REG_IsConversionOngoing>
 81026c0:	4603      	mov	r3, r0
 81026c2:	2b00      	cmp	r3, #0
 81026c4:	f040 8306 	bne.w	8102cd4 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 81026c8:	683b      	ldr	r3, [r7, #0]
 81026ca:	681b      	ldr	r3, [r3, #0]
 81026cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81026d0:	2b00      	cmp	r3, #0
 81026d2:	d108      	bne.n	81026e6 <HAL_ADC_ConfigChannel+0x62>
 81026d4:	683b      	ldr	r3, [r7, #0]
 81026d6:	681b      	ldr	r3, [r3, #0]
 81026d8:	0e9b      	lsrs	r3, r3, #26
 81026da:	f003 031f 	and.w	r3, r3, #31
 81026de:	2201      	movs	r2, #1
 81026e0:	fa02 f303 	lsl.w	r3, r2, r3
 81026e4:	e016      	b.n	8102714 <HAL_ADC_ConfigChannel+0x90>
 81026e6:	683b      	ldr	r3, [r7, #0]
 81026e8:	681b      	ldr	r3, [r3, #0]
 81026ea:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81026ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 81026ee:	fa93 f3a3 	rbit	r3, r3
 81026f2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 81026f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 81026f6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 81026f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 81026fa:	2b00      	cmp	r3, #0
 81026fc:	d101      	bne.n	8102702 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 81026fe:	2320      	movs	r3, #32
 8102700:	e003      	b.n	810270a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8102702:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8102704:	fab3 f383 	clz	r3, r3
 8102708:	b2db      	uxtb	r3, r3
 810270a:	f003 031f 	and.w	r3, r3, #31
 810270e:	2201      	movs	r2, #1
 8102710:	fa02 f303 	lsl.w	r3, r2, r3
 8102714:	687a      	ldr	r2, [r7, #4]
 8102716:	6812      	ldr	r2, [r2, #0]
 8102718:	69d1      	ldr	r1, [r2, #28]
 810271a:	687a      	ldr	r2, [r7, #4]
 810271c:	6812      	ldr	r2, [r2, #0]
 810271e:	430b      	orrs	r3, r1
 8102720:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8102722:	687b      	ldr	r3, [r7, #4]
 8102724:	6818      	ldr	r0, [r3, #0]
 8102726:	683b      	ldr	r3, [r7, #0]
 8102728:	6859      	ldr	r1, [r3, #4]
 810272a:	683b      	ldr	r3, [r7, #0]
 810272c:	681b      	ldr	r3, [r3, #0]
 810272e:	461a      	mov	r2, r3
 8102730:	f7ff f8e3 	bl	81018fa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8102734:	687b      	ldr	r3, [r7, #4]
 8102736:	681b      	ldr	r3, [r3, #0]
 8102738:	4618      	mov	r0, r3
 810273a:	f7ff fa5f 	bl	8101bfc <LL_ADC_REG_IsConversionOngoing>
 810273e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8102740:	687b      	ldr	r3, [r7, #4]
 8102742:	681b      	ldr	r3, [r3, #0]
 8102744:	4618      	mov	r0, r3
 8102746:	f7ff fa80 	bl	8101c4a <LL_ADC_INJ_IsConversionOngoing>
 810274a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 810274c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 810274e:	2b00      	cmp	r3, #0
 8102750:	f040 80b3 	bne.w	81028ba <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8102754:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8102756:	2b00      	cmp	r3, #0
 8102758:	f040 80af 	bne.w	81028ba <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 810275c:	687b      	ldr	r3, [r7, #4]
 810275e:	6818      	ldr	r0, [r3, #0]
 8102760:	683b      	ldr	r3, [r7, #0]
 8102762:	6819      	ldr	r1, [r3, #0]
 8102764:	683b      	ldr	r3, [r7, #0]
 8102766:	689b      	ldr	r3, [r3, #8]
 8102768:	461a      	mov	r2, r3
 810276a:	f7ff f918 	bl	810199e <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 810276e:	4b6a      	ldr	r3, [pc, #424]	; (8102918 <HAL_ADC_ConfigChannel+0x294>)
 8102770:	681b      	ldr	r3, [r3, #0]
 8102772:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8102776:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810277a:	d10b      	bne.n	8102794 <HAL_ADC_ConfigChannel+0x110>
 810277c:	683b      	ldr	r3, [r7, #0]
 810277e:	695a      	ldr	r2, [r3, #20]
 8102780:	687b      	ldr	r3, [r7, #4]
 8102782:	681b      	ldr	r3, [r3, #0]
 8102784:	68db      	ldr	r3, [r3, #12]
 8102786:	089b      	lsrs	r3, r3, #2
 8102788:	f003 0307 	and.w	r3, r3, #7
 810278c:	005b      	lsls	r3, r3, #1
 810278e:	fa02 f303 	lsl.w	r3, r2, r3
 8102792:	e01d      	b.n	81027d0 <HAL_ADC_ConfigChannel+0x14c>
 8102794:	687b      	ldr	r3, [r7, #4]
 8102796:	681b      	ldr	r3, [r3, #0]
 8102798:	68db      	ldr	r3, [r3, #12]
 810279a:	f003 0310 	and.w	r3, r3, #16
 810279e:	2b00      	cmp	r3, #0
 81027a0:	d10b      	bne.n	81027ba <HAL_ADC_ConfigChannel+0x136>
 81027a2:	683b      	ldr	r3, [r7, #0]
 81027a4:	695a      	ldr	r2, [r3, #20]
 81027a6:	687b      	ldr	r3, [r7, #4]
 81027a8:	681b      	ldr	r3, [r3, #0]
 81027aa:	68db      	ldr	r3, [r3, #12]
 81027ac:	089b      	lsrs	r3, r3, #2
 81027ae:	f003 0307 	and.w	r3, r3, #7
 81027b2:	005b      	lsls	r3, r3, #1
 81027b4:	fa02 f303 	lsl.w	r3, r2, r3
 81027b8:	e00a      	b.n	81027d0 <HAL_ADC_ConfigChannel+0x14c>
 81027ba:	683b      	ldr	r3, [r7, #0]
 81027bc:	695a      	ldr	r2, [r3, #20]
 81027be:	687b      	ldr	r3, [r7, #4]
 81027c0:	681b      	ldr	r3, [r3, #0]
 81027c2:	68db      	ldr	r3, [r3, #12]
 81027c4:	089b      	lsrs	r3, r3, #2
 81027c6:	f003 0304 	and.w	r3, r3, #4
 81027ca:	005b      	lsls	r3, r3, #1
 81027cc:	fa02 f303 	lsl.w	r3, r2, r3
 81027d0:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 81027d2:	683b      	ldr	r3, [r7, #0]
 81027d4:	691b      	ldr	r3, [r3, #16]
 81027d6:	2b04      	cmp	r3, #4
 81027d8:	d027      	beq.n	810282a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 81027da:	687b      	ldr	r3, [r7, #4]
 81027dc:	6818      	ldr	r0, [r3, #0]
 81027de:	683b      	ldr	r3, [r7, #0]
 81027e0:	6919      	ldr	r1, [r3, #16]
 81027e2:	683b      	ldr	r3, [r7, #0]
 81027e4:	681a      	ldr	r2, [r3, #0]
 81027e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 81027e8:	f7ff f820 	bl	810182c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 81027ec:	687b      	ldr	r3, [r7, #4]
 81027ee:	6818      	ldr	r0, [r3, #0]
 81027f0:	683b      	ldr	r3, [r7, #0]
 81027f2:	6919      	ldr	r1, [r3, #16]
 81027f4:	683b      	ldr	r3, [r7, #0]
 81027f6:	7e5b      	ldrb	r3, [r3, #25]
 81027f8:	2b01      	cmp	r3, #1
 81027fa:	d102      	bne.n	8102802 <HAL_ADC_ConfigChannel+0x17e>
 81027fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8102800:	e000      	b.n	8102804 <HAL_ADC_ConfigChannel+0x180>
 8102802:	2300      	movs	r3, #0
 8102804:	461a      	mov	r2, r3
 8102806:	f7ff f84a 	bl	810189e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 810280a:	687b      	ldr	r3, [r7, #4]
 810280c:	6818      	ldr	r0, [r3, #0]
 810280e:	683b      	ldr	r3, [r7, #0]
 8102810:	6919      	ldr	r1, [r3, #16]
 8102812:	683b      	ldr	r3, [r7, #0]
 8102814:	7e1b      	ldrb	r3, [r3, #24]
 8102816:	2b01      	cmp	r3, #1
 8102818:	d102      	bne.n	8102820 <HAL_ADC_ConfigChannel+0x19c>
 810281a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810281e:	e000      	b.n	8102822 <HAL_ADC_ConfigChannel+0x19e>
 8102820:	2300      	movs	r3, #0
 8102822:	461a      	mov	r2, r3
 8102824:	f7ff f822 	bl	810186c <LL_ADC_SetDataRightShift>
 8102828:	e047      	b.n	81028ba <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 810282a:	687b      	ldr	r3, [r7, #4]
 810282c:	681b      	ldr	r3, [r3, #0]
 810282e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102830:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102834:	683b      	ldr	r3, [r7, #0]
 8102836:	681b      	ldr	r3, [r3, #0]
 8102838:	069b      	lsls	r3, r3, #26
 810283a:	429a      	cmp	r2, r3
 810283c:	d107      	bne.n	810284e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 810283e:	687b      	ldr	r3, [r7, #4]
 8102840:	681b      	ldr	r3, [r3, #0]
 8102842:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8102844:	687b      	ldr	r3, [r7, #4]
 8102846:	681b      	ldr	r3, [r3, #0]
 8102848:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 810284c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 810284e:	687b      	ldr	r3, [r7, #4]
 8102850:	681b      	ldr	r3, [r3, #0]
 8102852:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102854:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102858:	683b      	ldr	r3, [r7, #0]
 810285a:	681b      	ldr	r3, [r3, #0]
 810285c:	069b      	lsls	r3, r3, #26
 810285e:	429a      	cmp	r2, r3
 8102860:	d107      	bne.n	8102872 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8102862:	687b      	ldr	r3, [r7, #4]
 8102864:	681b      	ldr	r3, [r3, #0]
 8102866:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8102868:	687b      	ldr	r3, [r7, #4]
 810286a:	681b      	ldr	r3, [r3, #0]
 810286c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8102870:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102872:	687b      	ldr	r3, [r7, #4]
 8102874:	681b      	ldr	r3, [r3, #0]
 8102876:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8102878:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 810287c:	683b      	ldr	r3, [r7, #0]
 810287e:	681b      	ldr	r3, [r3, #0]
 8102880:	069b      	lsls	r3, r3, #26
 8102882:	429a      	cmp	r2, r3
 8102884:	d107      	bne.n	8102896 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8102886:	687b      	ldr	r3, [r7, #4]
 8102888:	681b      	ldr	r3, [r3, #0]
 810288a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 810288c:	687b      	ldr	r3, [r7, #4]
 810288e:	681b      	ldr	r3, [r3, #0]
 8102890:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8102894:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102896:	687b      	ldr	r3, [r7, #4]
 8102898:	681b      	ldr	r3, [r3, #0]
 810289a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810289c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81028a0:	683b      	ldr	r3, [r7, #0]
 81028a2:	681b      	ldr	r3, [r3, #0]
 81028a4:	069b      	lsls	r3, r3, #26
 81028a6:	429a      	cmp	r2, r3
 81028a8:	d107      	bne.n	81028ba <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 81028aa:	687b      	ldr	r3, [r7, #4]
 81028ac:	681b      	ldr	r3, [r3, #0]
 81028ae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 81028b0:	687b      	ldr	r3, [r7, #4]
 81028b2:	681b      	ldr	r3, [r3, #0]
 81028b4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 81028b8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81028ba:	687b      	ldr	r3, [r7, #4]
 81028bc:	681b      	ldr	r3, [r3, #0]
 81028be:	4618      	mov	r0, r3
 81028c0:	f7ff f94e 	bl	8101b60 <LL_ADC_IsEnabled>
 81028c4:	4603      	mov	r3, r0
 81028c6:	2b00      	cmp	r3, #0
 81028c8:	f040 820d 	bne.w	8102ce6 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 81028cc:	687b      	ldr	r3, [r7, #4]
 81028ce:	6818      	ldr	r0, [r3, #0]
 81028d0:	683b      	ldr	r3, [r7, #0]
 81028d2:	6819      	ldr	r1, [r3, #0]
 81028d4:	683b      	ldr	r3, [r7, #0]
 81028d6:	68db      	ldr	r3, [r3, #12]
 81028d8:	461a      	mov	r2, r3
 81028da:	f7ff f88b 	bl	81019f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 81028de:	683b      	ldr	r3, [r7, #0]
 81028e0:	68db      	ldr	r3, [r3, #12]
 81028e2:	4a0c      	ldr	r2, [pc, #48]	; (8102914 <HAL_ADC_ConfigChannel+0x290>)
 81028e4:	4293      	cmp	r3, r2
 81028e6:	f040 8133 	bne.w	8102b50 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81028ea:	687b      	ldr	r3, [r7, #4]
 81028ec:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 81028ee:	683b      	ldr	r3, [r7, #0]
 81028f0:	681b      	ldr	r3, [r3, #0]
 81028f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81028f6:	2b00      	cmp	r3, #0
 81028f8:	d110      	bne.n	810291c <HAL_ADC_ConfigChannel+0x298>
 81028fa:	683b      	ldr	r3, [r7, #0]
 81028fc:	681b      	ldr	r3, [r3, #0]
 81028fe:	0e9b      	lsrs	r3, r3, #26
 8102900:	3301      	adds	r3, #1
 8102902:	f003 031f 	and.w	r3, r3, #31
 8102906:	2b09      	cmp	r3, #9
 8102908:	bf94      	ite	ls
 810290a:	2301      	movls	r3, #1
 810290c:	2300      	movhi	r3, #0
 810290e:	b2db      	uxtb	r3, r3
 8102910:	e01e      	b.n	8102950 <HAL_ADC_ConfigChannel+0x2cc>
 8102912:	bf00      	nop
 8102914:	47ff0000 	.word	0x47ff0000
 8102918:	5c001000 	.word	0x5c001000
 810291c:	683b      	ldr	r3, [r7, #0]
 810291e:	681b      	ldr	r3, [r3, #0]
 8102920:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102922:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8102924:	fa93 f3a3 	rbit	r3, r3
 8102928:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 810292a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810292c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 810292e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8102930:	2b00      	cmp	r3, #0
 8102932:	d101      	bne.n	8102938 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8102934:	2320      	movs	r3, #32
 8102936:	e003      	b.n	8102940 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8102938:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 810293a:	fab3 f383 	clz	r3, r3
 810293e:	b2db      	uxtb	r3, r3
 8102940:	3301      	adds	r3, #1
 8102942:	f003 031f 	and.w	r3, r3, #31
 8102946:	2b09      	cmp	r3, #9
 8102948:	bf94      	ite	ls
 810294a:	2301      	movls	r3, #1
 810294c:	2300      	movhi	r3, #0
 810294e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102950:	2b00      	cmp	r3, #0
 8102952:	d079      	beq.n	8102a48 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102954:	683b      	ldr	r3, [r7, #0]
 8102956:	681b      	ldr	r3, [r3, #0]
 8102958:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810295c:	2b00      	cmp	r3, #0
 810295e:	d107      	bne.n	8102970 <HAL_ADC_ConfigChannel+0x2ec>
 8102960:	683b      	ldr	r3, [r7, #0]
 8102962:	681b      	ldr	r3, [r3, #0]
 8102964:	0e9b      	lsrs	r3, r3, #26
 8102966:	3301      	adds	r3, #1
 8102968:	069b      	lsls	r3, r3, #26
 810296a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 810296e:	e015      	b.n	810299c <HAL_ADC_ConfigChannel+0x318>
 8102970:	683b      	ldr	r3, [r7, #0]
 8102972:	681b      	ldr	r3, [r3, #0]
 8102974:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8102978:	fa93 f3a3 	rbit	r3, r3
 810297c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 810297e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8102980:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8102982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8102984:	2b00      	cmp	r3, #0
 8102986:	d101      	bne.n	810298c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8102988:	2320      	movs	r3, #32
 810298a:	e003      	b.n	8102994 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 810298c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810298e:	fab3 f383 	clz	r3, r3
 8102992:	b2db      	uxtb	r3, r3
 8102994:	3301      	adds	r3, #1
 8102996:	069b      	lsls	r3, r3, #26
 8102998:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 810299c:	683b      	ldr	r3, [r7, #0]
 810299e:	681b      	ldr	r3, [r3, #0]
 81029a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81029a4:	2b00      	cmp	r3, #0
 81029a6:	d109      	bne.n	81029bc <HAL_ADC_ConfigChannel+0x338>
 81029a8:	683b      	ldr	r3, [r7, #0]
 81029aa:	681b      	ldr	r3, [r3, #0]
 81029ac:	0e9b      	lsrs	r3, r3, #26
 81029ae:	3301      	adds	r3, #1
 81029b0:	f003 031f 	and.w	r3, r3, #31
 81029b4:	2101      	movs	r1, #1
 81029b6:	fa01 f303 	lsl.w	r3, r1, r3
 81029ba:	e017      	b.n	81029ec <HAL_ADC_ConfigChannel+0x368>
 81029bc:	683b      	ldr	r3, [r7, #0]
 81029be:	681b      	ldr	r3, [r3, #0]
 81029c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81029c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81029c4:	fa93 f3a3 	rbit	r3, r3
 81029c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 81029ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81029cc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 81029ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81029d0:	2b00      	cmp	r3, #0
 81029d2:	d101      	bne.n	81029d8 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 81029d4:	2320      	movs	r3, #32
 81029d6:	e003      	b.n	81029e0 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 81029d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81029da:	fab3 f383 	clz	r3, r3
 81029de:	b2db      	uxtb	r3, r3
 81029e0:	3301      	adds	r3, #1
 81029e2:	f003 031f 	and.w	r3, r3, #31
 81029e6:	2101      	movs	r1, #1
 81029e8:	fa01 f303 	lsl.w	r3, r1, r3
 81029ec:	ea42 0103 	orr.w	r1, r2, r3
 81029f0:	683b      	ldr	r3, [r7, #0]
 81029f2:	681b      	ldr	r3, [r3, #0]
 81029f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81029f8:	2b00      	cmp	r3, #0
 81029fa:	d10a      	bne.n	8102a12 <HAL_ADC_ConfigChannel+0x38e>
 81029fc:	683b      	ldr	r3, [r7, #0]
 81029fe:	681b      	ldr	r3, [r3, #0]
 8102a00:	0e9b      	lsrs	r3, r3, #26
 8102a02:	3301      	adds	r3, #1
 8102a04:	f003 021f 	and.w	r2, r3, #31
 8102a08:	4613      	mov	r3, r2
 8102a0a:	005b      	lsls	r3, r3, #1
 8102a0c:	4413      	add	r3, r2
 8102a0e:	051b      	lsls	r3, r3, #20
 8102a10:	e018      	b.n	8102a44 <HAL_ADC_ConfigChannel+0x3c0>
 8102a12:	683b      	ldr	r3, [r7, #0]
 8102a14:	681b      	ldr	r3, [r3, #0]
 8102a16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102a1a:	fa93 f3a3 	rbit	r3, r3
 8102a1e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8102a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102a22:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8102a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102a26:	2b00      	cmp	r3, #0
 8102a28:	d101      	bne.n	8102a2e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8102a2a:	2320      	movs	r3, #32
 8102a2c:	e003      	b.n	8102a36 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8102a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102a30:	fab3 f383 	clz	r3, r3
 8102a34:	b2db      	uxtb	r3, r3
 8102a36:	3301      	adds	r3, #1
 8102a38:	f003 021f 	and.w	r2, r3, #31
 8102a3c:	4613      	mov	r3, r2
 8102a3e:	005b      	lsls	r3, r3, #1
 8102a40:	4413      	add	r3, r2
 8102a42:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102a44:	430b      	orrs	r3, r1
 8102a46:	e07e      	b.n	8102b46 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102a48:	683b      	ldr	r3, [r7, #0]
 8102a4a:	681b      	ldr	r3, [r3, #0]
 8102a4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102a50:	2b00      	cmp	r3, #0
 8102a52:	d107      	bne.n	8102a64 <HAL_ADC_ConfigChannel+0x3e0>
 8102a54:	683b      	ldr	r3, [r7, #0]
 8102a56:	681b      	ldr	r3, [r3, #0]
 8102a58:	0e9b      	lsrs	r3, r3, #26
 8102a5a:	3301      	adds	r3, #1
 8102a5c:	069b      	lsls	r3, r3, #26
 8102a5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102a62:	e015      	b.n	8102a90 <HAL_ADC_ConfigChannel+0x40c>
 8102a64:	683b      	ldr	r3, [r7, #0]
 8102a66:	681b      	ldr	r3, [r3, #0]
 8102a68:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102a6c:	fa93 f3a3 	rbit	r3, r3
 8102a70:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8102a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8102a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102a78:	2b00      	cmp	r3, #0
 8102a7a:	d101      	bne.n	8102a80 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8102a7c:	2320      	movs	r3, #32
 8102a7e:	e003      	b.n	8102a88 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8102a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102a82:	fab3 f383 	clz	r3, r3
 8102a86:	b2db      	uxtb	r3, r3
 8102a88:	3301      	adds	r3, #1
 8102a8a:	069b      	lsls	r3, r3, #26
 8102a8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102a90:	683b      	ldr	r3, [r7, #0]
 8102a92:	681b      	ldr	r3, [r3, #0]
 8102a94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102a98:	2b00      	cmp	r3, #0
 8102a9a:	d109      	bne.n	8102ab0 <HAL_ADC_ConfigChannel+0x42c>
 8102a9c:	683b      	ldr	r3, [r7, #0]
 8102a9e:	681b      	ldr	r3, [r3, #0]
 8102aa0:	0e9b      	lsrs	r3, r3, #26
 8102aa2:	3301      	adds	r3, #1
 8102aa4:	f003 031f 	and.w	r3, r3, #31
 8102aa8:	2101      	movs	r1, #1
 8102aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8102aae:	e017      	b.n	8102ae0 <HAL_ADC_ConfigChannel+0x45c>
 8102ab0:	683b      	ldr	r3, [r7, #0]
 8102ab2:	681b      	ldr	r3, [r3, #0]
 8102ab4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102ab6:	69fb      	ldr	r3, [r7, #28]
 8102ab8:	fa93 f3a3 	rbit	r3, r3
 8102abc:	61bb      	str	r3, [r7, #24]
  return result;
 8102abe:	69bb      	ldr	r3, [r7, #24]
 8102ac0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8102ac2:	6a3b      	ldr	r3, [r7, #32]
 8102ac4:	2b00      	cmp	r3, #0
 8102ac6:	d101      	bne.n	8102acc <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8102ac8:	2320      	movs	r3, #32
 8102aca:	e003      	b.n	8102ad4 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8102acc:	6a3b      	ldr	r3, [r7, #32]
 8102ace:	fab3 f383 	clz	r3, r3
 8102ad2:	b2db      	uxtb	r3, r3
 8102ad4:	3301      	adds	r3, #1
 8102ad6:	f003 031f 	and.w	r3, r3, #31
 8102ada:	2101      	movs	r1, #1
 8102adc:	fa01 f303 	lsl.w	r3, r1, r3
 8102ae0:	ea42 0103 	orr.w	r1, r2, r3
 8102ae4:	683b      	ldr	r3, [r7, #0]
 8102ae6:	681b      	ldr	r3, [r3, #0]
 8102ae8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102aec:	2b00      	cmp	r3, #0
 8102aee:	d10d      	bne.n	8102b0c <HAL_ADC_ConfigChannel+0x488>
 8102af0:	683b      	ldr	r3, [r7, #0]
 8102af2:	681b      	ldr	r3, [r3, #0]
 8102af4:	0e9b      	lsrs	r3, r3, #26
 8102af6:	3301      	adds	r3, #1
 8102af8:	f003 021f 	and.w	r2, r3, #31
 8102afc:	4613      	mov	r3, r2
 8102afe:	005b      	lsls	r3, r3, #1
 8102b00:	4413      	add	r3, r2
 8102b02:	3b1e      	subs	r3, #30
 8102b04:	051b      	lsls	r3, r3, #20
 8102b06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8102b0a:	e01b      	b.n	8102b44 <HAL_ADC_ConfigChannel+0x4c0>
 8102b0c:	683b      	ldr	r3, [r7, #0]
 8102b0e:	681b      	ldr	r3, [r3, #0]
 8102b10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102b12:	693b      	ldr	r3, [r7, #16]
 8102b14:	fa93 f3a3 	rbit	r3, r3
 8102b18:	60fb      	str	r3, [r7, #12]
  return result;
 8102b1a:	68fb      	ldr	r3, [r7, #12]
 8102b1c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8102b1e:	697b      	ldr	r3, [r7, #20]
 8102b20:	2b00      	cmp	r3, #0
 8102b22:	d101      	bne.n	8102b28 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8102b24:	2320      	movs	r3, #32
 8102b26:	e003      	b.n	8102b30 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8102b28:	697b      	ldr	r3, [r7, #20]
 8102b2a:	fab3 f383 	clz	r3, r3
 8102b2e:	b2db      	uxtb	r3, r3
 8102b30:	3301      	adds	r3, #1
 8102b32:	f003 021f 	and.w	r2, r3, #31
 8102b36:	4613      	mov	r3, r2
 8102b38:	005b      	lsls	r3, r3, #1
 8102b3a:	4413      	add	r3, r2
 8102b3c:	3b1e      	subs	r3, #30
 8102b3e:	051b      	lsls	r3, r3, #20
 8102b40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102b44:	430b      	orrs	r3, r1
 8102b46:	683a      	ldr	r2, [r7, #0]
 8102b48:	6892      	ldr	r2, [r2, #8]
 8102b4a:	4619      	mov	r1, r3
 8102b4c:	f7fe ff27 	bl	810199e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8102b50:	683b      	ldr	r3, [r7, #0]
 8102b52:	681b      	ldr	r3, [r3, #0]
 8102b54:	2b00      	cmp	r3, #0
 8102b56:	f280 80c6 	bge.w	8102ce6 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8102b5a:	687b      	ldr	r3, [r7, #4]
 8102b5c:	681b      	ldr	r3, [r3, #0]
 8102b5e:	4a67      	ldr	r2, [pc, #412]	; (8102cfc <HAL_ADC_ConfigChannel+0x678>)
 8102b60:	4293      	cmp	r3, r2
 8102b62:	d004      	beq.n	8102b6e <HAL_ADC_ConfigChannel+0x4ea>
 8102b64:	687b      	ldr	r3, [r7, #4]
 8102b66:	681b      	ldr	r3, [r3, #0]
 8102b68:	4a65      	ldr	r2, [pc, #404]	; (8102d00 <HAL_ADC_ConfigChannel+0x67c>)
 8102b6a:	4293      	cmp	r3, r2
 8102b6c:	d101      	bne.n	8102b72 <HAL_ADC_ConfigChannel+0x4ee>
 8102b6e:	4b65      	ldr	r3, [pc, #404]	; (8102d04 <HAL_ADC_ConfigChannel+0x680>)
 8102b70:	e000      	b.n	8102b74 <HAL_ADC_ConfigChannel+0x4f0>
 8102b72:	4b65      	ldr	r3, [pc, #404]	; (8102d08 <HAL_ADC_ConfigChannel+0x684>)
 8102b74:	4618      	mov	r0, r3
 8102b76:	f7fe fe4b 	bl	8101810 <LL_ADC_GetCommonPathInternalCh>
 8102b7a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102b7c:	687b      	ldr	r3, [r7, #4]
 8102b7e:	681b      	ldr	r3, [r3, #0]
 8102b80:	4a5e      	ldr	r2, [pc, #376]	; (8102cfc <HAL_ADC_ConfigChannel+0x678>)
 8102b82:	4293      	cmp	r3, r2
 8102b84:	d004      	beq.n	8102b90 <HAL_ADC_ConfigChannel+0x50c>
 8102b86:	687b      	ldr	r3, [r7, #4]
 8102b88:	681b      	ldr	r3, [r3, #0]
 8102b8a:	4a5d      	ldr	r2, [pc, #372]	; (8102d00 <HAL_ADC_ConfigChannel+0x67c>)
 8102b8c:	4293      	cmp	r3, r2
 8102b8e:	d10e      	bne.n	8102bae <HAL_ADC_ConfigChannel+0x52a>
 8102b90:	485a      	ldr	r0, [pc, #360]	; (8102cfc <HAL_ADC_ConfigChannel+0x678>)
 8102b92:	f7fe ffe5 	bl	8101b60 <LL_ADC_IsEnabled>
 8102b96:	4604      	mov	r4, r0
 8102b98:	4859      	ldr	r0, [pc, #356]	; (8102d00 <HAL_ADC_ConfigChannel+0x67c>)
 8102b9a:	f7fe ffe1 	bl	8101b60 <LL_ADC_IsEnabled>
 8102b9e:	4603      	mov	r3, r0
 8102ba0:	4323      	orrs	r3, r4
 8102ba2:	2b00      	cmp	r3, #0
 8102ba4:	bf0c      	ite	eq
 8102ba6:	2301      	moveq	r3, #1
 8102ba8:	2300      	movne	r3, #0
 8102baa:	b2db      	uxtb	r3, r3
 8102bac:	e008      	b.n	8102bc0 <HAL_ADC_ConfigChannel+0x53c>
 8102bae:	4857      	ldr	r0, [pc, #348]	; (8102d0c <HAL_ADC_ConfigChannel+0x688>)
 8102bb0:	f7fe ffd6 	bl	8101b60 <LL_ADC_IsEnabled>
 8102bb4:	4603      	mov	r3, r0
 8102bb6:	2b00      	cmp	r3, #0
 8102bb8:	bf0c      	ite	eq
 8102bba:	2301      	moveq	r3, #1
 8102bbc:	2300      	movne	r3, #0
 8102bbe:	b2db      	uxtb	r3, r3
 8102bc0:	2b00      	cmp	r3, #0
 8102bc2:	d07d      	beq.n	8102cc0 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8102bc4:	683b      	ldr	r3, [r7, #0]
 8102bc6:	681b      	ldr	r3, [r3, #0]
 8102bc8:	4a51      	ldr	r2, [pc, #324]	; (8102d10 <HAL_ADC_ConfigChannel+0x68c>)
 8102bca:	4293      	cmp	r3, r2
 8102bcc:	d130      	bne.n	8102c30 <HAL_ADC_ConfigChannel+0x5ac>
 8102bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102bd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8102bd4:	2b00      	cmp	r3, #0
 8102bd6:	d12b      	bne.n	8102c30 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8102bd8:	687b      	ldr	r3, [r7, #4]
 8102bda:	681b      	ldr	r3, [r3, #0]
 8102bdc:	4a4b      	ldr	r2, [pc, #300]	; (8102d0c <HAL_ADC_ConfigChannel+0x688>)
 8102bde:	4293      	cmp	r3, r2
 8102be0:	f040 8081 	bne.w	8102ce6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8102be4:	687b      	ldr	r3, [r7, #4]
 8102be6:	681b      	ldr	r3, [r3, #0]
 8102be8:	4a44      	ldr	r2, [pc, #272]	; (8102cfc <HAL_ADC_ConfigChannel+0x678>)
 8102bea:	4293      	cmp	r3, r2
 8102bec:	d004      	beq.n	8102bf8 <HAL_ADC_ConfigChannel+0x574>
 8102bee:	687b      	ldr	r3, [r7, #4]
 8102bf0:	681b      	ldr	r3, [r3, #0]
 8102bf2:	4a43      	ldr	r2, [pc, #268]	; (8102d00 <HAL_ADC_ConfigChannel+0x67c>)
 8102bf4:	4293      	cmp	r3, r2
 8102bf6:	d101      	bne.n	8102bfc <HAL_ADC_ConfigChannel+0x578>
 8102bf8:	4a42      	ldr	r2, [pc, #264]	; (8102d04 <HAL_ADC_ConfigChannel+0x680>)
 8102bfa:	e000      	b.n	8102bfe <HAL_ADC_ConfigChannel+0x57a>
 8102bfc:	4a42      	ldr	r2, [pc, #264]	; (8102d08 <HAL_ADC_ConfigChannel+0x684>)
 8102bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102c00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8102c04:	4619      	mov	r1, r3
 8102c06:	4610      	mov	r0, r2
 8102c08:	f7fe fdef 	bl	81017ea <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8102c0c:	4b41      	ldr	r3, [pc, #260]	; (8102d14 <HAL_ADC_ConfigChannel+0x690>)
 8102c0e:	681b      	ldr	r3, [r3, #0]
 8102c10:	099b      	lsrs	r3, r3, #6
 8102c12:	4a41      	ldr	r2, [pc, #260]	; (8102d18 <HAL_ADC_ConfigChannel+0x694>)
 8102c14:	fba2 2303 	umull	r2, r3, r2, r3
 8102c18:	099b      	lsrs	r3, r3, #6
 8102c1a:	3301      	adds	r3, #1
 8102c1c:	005b      	lsls	r3, r3, #1
 8102c1e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8102c20:	e002      	b.n	8102c28 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8102c22:	68bb      	ldr	r3, [r7, #8]
 8102c24:	3b01      	subs	r3, #1
 8102c26:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8102c28:	68bb      	ldr	r3, [r7, #8]
 8102c2a:	2b00      	cmp	r3, #0
 8102c2c:	d1f9      	bne.n	8102c22 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8102c2e:	e05a      	b.n	8102ce6 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8102c30:	683b      	ldr	r3, [r7, #0]
 8102c32:	681b      	ldr	r3, [r3, #0]
 8102c34:	4a39      	ldr	r2, [pc, #228]	; (8102d1c <HAL_ADC_ConfigChannel+0x698>)
 8102c36:	4293      	cmp	r3, r2
 8102c38:	d11e      	bne.n	8102c78 <HAL_ADC_ConfigChannel+0x5f4>
 8102c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102c3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8102c40:	2b00      	cmp	r3, #0
 8102c42:	d119      	bne.n	8102c78 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8102c44:	687b      	ldr	r3, [r7, #4]
 8102c46:	681b      	ldr	r3, [r3, #0]
 8102c48:	4a30      	ldr	r2, [pc, #192]	; (8102d0c <HAL_ADC_ConfigChannel+0x688>)
 8102c4a:	4293      	cmp	r3, r2
 8102c4c:	d14b      	bne.n	8102ce6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8102c4e:	687b      	ldr	r3, [r7, #4]
 8102c50:	681b      	ldr	r3, [r3, #0]
 8102c52:	4a2a      	ldr	r2, [pc, #168]	; (8102cfc <HAL_ADC_ConfigChannel+0x678>)
 8102c54:	4293      	cmp	r3, r2
 8102c56:	d004      	beq.n	8102c62 <HAL_ADC_ConfigChannel+0x5de>
 8102c58:	687b      	ldr	r3, [r7, #4]
 8102c5a:	681b      	ldr	r3, [r3, #0]
 8102c5c:	4a28      	ldr	r2, [pc, #160]	; (8102d00 <HAL_ADC_ConfigChannel+0x67c>)
 8102c5e:	4293      	cmp	r3, r2
 8102c60:	d101      	bne.n	8102c66 <HAL_ADC_ConfigChannel+0x5e2>
 8102c62:	4a28      	ldr	r2, [pc, #160]	; (8102d04 <HAL_ADC_ConfigChannel+0x680>)
 8102c64:	e000      	b.n	8102c68 <HAL_ADC_ConfigChannel+0x5e4>
 8102c66:	4a28      	ldr	r2, [pc, #160]	; (8102d08 <HAL_ADC_ConfigChannel+0x684>)
 8102c68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102c6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8102c6e:	4619      	mov	r1, r3
 8102c70:	4610      	mov	r0, r2
 8102c72:	f7fe fdba 	bl	81017ea <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8102c76:	e036      	b.n	8102ce6 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8102c78:	683b      	ldr	r3, [r7, #0]
 8102c7a:	681b      	ldr	r3, [r3, #0]
 8102c7c:	4a28      	ldr	r2, [pc, #160]	; (8102d20 <HAL_ADC_ConfigChannel+0x69c>)
 8102c7e:	4293      	cmp	r3, r2
 8102c80:	d131      	bne.n	8102ce6 <HAL_ADC_ConfigChannel+0x662>
 8102c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102c84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8102c88:	2b00      	cmp	r3, #0
 8102c8a:	d12c      	bne.n	8102ce6 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8102c8c:	687b      	ldr	r3, [r7, #4]
 8102c8e:	681b      	ldr	r3, [r3, #0]
 8102c90:	4a1e      	ldr	r2, [pc, #120]	; (8102d0c <HAL_ADC_ConfigChannel+0x688>)
 8102c92:	4293      	cmp	r3, r2
 8102c94:	d127      	bne.n	8102ce6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8102c96:	687b      	ldr	r3, [r7, #4]
 8102c98:	681b      	ldr	r3, [r3, #0]
 8102c9a:	4a18      	ldr	r2, [pc, #96]	; (8102cfc <HAL_ADC_ConfigChannel+0x678>)
 8102c9c:	4293      	cmp	r3, r2
 8102c9e:	d004      	beq.n	8102caa <HAL_ADC_ConfigChannel+0x626>
 8102ca0:	687b      	ldr	r3, [r7, #4]
 8102ca2:	681b      	ldr	r3, [r3, #0]
 8102ca4:	4a16      	ldr	r2, [pc, #88]	; (8102d00 <HAL_ADC_ConfigChannel+0x67c>)
 8102ca6:	4293      	cmp	r3, r2
 8102ca8:	d101      	bne.n	8102cae <HAL_ADC_ConfigChannel+0x62a>
 8102caa:	4a16      	ldr	r2, [pc, #88]	; (8102d04 <HAL_ADC_ConfigChannel+0x680>)
 8102cac:	e000      	b.n	8102cb0 <HAL_ADC_ConfigChannel+0x62c>
 8102cae:	4a16      	ldr	r2, [pc, #88]	; (8102d08 <HAL_ADC_ConfigChannel+0x684>)
 8102cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102cb2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8102cb6:	4619      	mov	r1, r3
 8102cb8:	4610      	mov	r0, r2
 8102cba:	f7fe fd96 	bl	81017ea <LL_ADC_SetCommonPathInternalCh>
 8102cbe:	e012      	b.n	8102ce6 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102cc0:	687b      	ldr	r3, [r7, #4]
 8102cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102cc4:	f043 0220 	orr.w	r2, r3, #32
 8102cc8:	687b      	ldr	r3, [r7, #4]
 8102cca:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8102ccc:	2301      	movs	r3, #1
 8102cce:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8102cd2:	e008      	b.n	8102ce6 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102cd4:	687b      	ldr	r3, [r7, #4]
 8102cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102cd8:	f043 0220 	orr.w	r2, r3, #32
 8102cdc:	687b      	ldr	r3, [r7, #4]
 8102cde:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8102ce0:	2301      	movs	r3, #1
 8102ce2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8102ce6:	687b      	ldr	r3, [r7, #4]
 8102ce8:	2200      	movs	r2, #0
 8102cea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8102cee:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8102cf2:	4618      	mov	r0, r3
 8102cf4:	3784      	adds	r7, #132	; 0x84
 8102cf6:	46bd      	mov	sp, r7
 8102cf8:	bd90      	pop	{r4, r7, pc}
 8102cfa:	bf00      	nop
 8102cfc:	40022000 	.word	0x40022000
 8102d00:	40022100 	.word	0x40022100
 8102d04:	40022300 	.word	0x40022300
 8102d08:	58026300 	.word	0x58026300
 8102d0c:	58026000 	.word	0x58026000
 8102d10:	cb840000 	.word	0xcb840000
 8102d14:	10000000 	.word	0x10000000
 8102d18:	053e2d63 	.word	0x053e2d63
 8102d1c:	c7520000 	.word	0xc7520000
 8102d20:	cfb80000 	.word	0xcfb80000

08102d24 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8102d24:	b580      	push	{r7, lr}
 8102d26:	b088      	sub	sp, #32
 8102d28:	af00      	add	r7, sp, #0
 8102d2a:	6078      	str	r0, [r7, #4]
 8102d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8102d2e:	2300      	movs	r3, #0
 8102d30:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8102d32:	683b      	ldr	r3, [r7, #0]
 8102d34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8102d36:	687b      	ldr	r3, [r7, #4]
 8102d38:	681b      	ldr	r3, [r3, #0]
 8102d3a:	4618      	mov	r0, r3
 8102d3c:	f7fe ff5e 	bl	8101bfc <LL_ADC_REG_IsConversionOngoing>
 8102d40:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8102d42:	687b      	ldr	r3, [r7, #4]
 8102d44:	681b      	ldr	r3, [r3, #0]
 8102d46:	4618      	mov	r0, r3
 8102d48:	f7fe ff7f 	bl	8101c4a <LL_ADC_INJ_IsConversionOngoing>
 8102d4c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8102d4e:	693b      	ldr	r3, [r7, #16]
 8102d50:	2b00      	cmp	r3, #0
 8102d52:	d103      	bne.n	8102d5c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8102d54:	68fb      	ldr	r3, [r7, #12]
 8102d56:	2b00      	cmp	r3, #0
 8102d58:	f000 8098 	beq.w	8102e8c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8102d5c:	687b      	ldr	r3, [r7, #4]
 8102d5e:	681b      	ldr	r3, [r3, #0]
 8102d60:	68db      	ldr	r3, [r3, #12]
 8102d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8102d66:	2b00      	cmp	r3, #0
 8102d68:	d02a      	beq.n	8102dc0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8102d6a:	687b      	ldr	r3, [r7, #4]
 8102d6c:	7d5b      	ldrb	r3, [r3, #21]
 8102d6e:	2b01      	cmp	r3, #1
 8102d70:	d126      	bne.n	8102dc0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8102d72:	687b      	ldr	r3, [r7, #4]
 8102d74:	7d1b      	ldrb	r3, [r3, #20]
 8102d76:	2b01      	cmp	r3, #1
 8102d78:	d122      	bne.n	8102dc0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8102d7a:	2301      	movs	r3, #1
 8102d7c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8102d7e:	e014      	b.n	8102daa <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8102d80:	69fb      	ldr	r3, [r7, #28]
 8102d82:	4a45      	ldr	r2, [pc, #276]	; (8102e98 <ADC_ConversionStop+0x174>)
 8102d84:	4293      	cmp	r3, r2
 8102d86:	d90d      	bls.n	8102da4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102d88:	687b      	ldr	r3, [r7, #4]
 8102d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102d8c:	f043 0210 	orr.w	r2, r3, #16
 8102d90:	687b      	ldr	r3, [r7, #4]
 8102d92:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8102d94:	687b      	ldr	r3, [r7, #4]
 8102d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102d98:	f043 0201 	orr.w	r2, r3, #1
 8102d9c:	687b      	ldr	r3, [r7, #4]
 8102d9e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8102da0:	2301      	movs	r3, #1
 8102da2:	e074      	b.n	8102e8e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8102da4:	69fb      	ldr	r3, [r7, #28]
 8102da6:	3301      	adds	r3, #1
 8102da8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8102daa:	687b      	ldr	r3, [r7, #4]
 8102dac:	681b      	ldr	r3, [r3, #0]
 8102dae:	681b      	ldr	r3, [r3, #0]
 8102db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8102db4:	2b40      	cmp	r3, #64	; 0x40
 8102db6:	d1e3      	bne.n	8102d80 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8102db8:	687b      	ldr	r3, [r7, #4]
 8102dba:	681b      	ldr	r3, [r3, #0]
 8102dbc:	2240      	movs	r2, #64	; 0x40
 8102dbe:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8102dc0:	69bb      	ldr	r3, [r7, #24]
 8102dc2:	2b02      	cmp	r3, #2
 8102dc4:	d014      	beq.n	8102df0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8102dc6:	687b      	ldr	r3, [r7, #4]
 8102dc8:	681b      	ldr	r3, [r3, #0]
 8102dca:	4618      	mov	r0, r3
 8102dcc:	f7fe ff16 	bl	8101bfc <LL_ADC_REG_IsConversionOngoing>
 8102dd0:	4603      	mov	r3, r0
 8102dd2:	2b00      	cmp	r3, #0
 8102dd4:	d00c      	beq.n	8102df0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8102dd6:	687b      	ldr	r3, [r7, #4]
 8102dd8:	681b      	ldr	r3, [r3, #0]
 8102dda:	4618      	mov	r0, r3
 8102ddc:	f7fe fed3 	bl	8101b86 <LL_ADC_IsDisableOngoing>
 8102de0:	4603      	mov	r3, r0
 8102de2:	2b00      	cmp	r3, #0
 8102de4:	d104      	bne.n	8102df0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8102de6:	687b      	ldr	r3, [r7, #4]
 8102de8:	681b      	ldr	r3, [r3, #0]
 8102dea:	4618      	mov	r0, r3
 8102dec:	f7fe fef2 	bl	8101bd4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8102df0:	69bb      	ldr	r3, [r7, #24]
 8102df2:	2b01      	cmp	r3, #1
 8102df4:	d014      	beq.n	8102e20 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8102df6:	687b      	ldr	r3, [r7, #4]
 8102df8:	681b      	ldr	r3, [r3, #0]
 8102dfa:	4618      	mov	r0, r3
 8102dfc:	f7fe ff25 	bl	8101c4a <LL_ADC_INJ_IsConversionOngoing>
 8102e00:	4603      	mov	r3, r0
 8102e02:	2b00      	cmp	r3, #0
 8102e04:	d00c      	beq.n	8102e20 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8102e06:	687b      	ldr	r3, [r7, #4]
 8102e08:	681b      	ldr	r3, [r3, #0]
 8102e0a:	4618      	mov	r0, r3
 8102e0c:	f7fe febb 	bl	8101b86 <LL_ADC_IsDisableOngoing>
 8102e10:	4603      	mov	r3, r0
 8102e12:	2b00      	cmp	r3, #0
 8102e14:	d104      	bne.n	8102e20 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8102e16:	687b      	ldr	r3, [r7, #4]
 8102e18:	681b      	ldr	r3, [r3, #0]
 8102e1a:	4618      	mov	r0, r3
 8102e1c:	f7fe ff01 	bl	8101c22 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8102e20:	69bb      	ldr	r3, [r7, #24]
 8102e22:	2b02      	cmp	r3, #2
 8102e24:	d005      	beq.n	8102e32 <ADC_ConversionStop+0x10e>
 8102e26:	69bb      	ldr	r3, [r7, #24]
 8102e28:	2b03      	cmp	r3, #3
 8102e2a:	d105      	bne.n	8102e38 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8102e2c:	230c      	movs	r3, #12
 8102e2e:	617b      	str	r3, [r7, #20]
        break;
 8102e30:	e005      	b.n	8102e3e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8102e32:	2308      	movs	r3, #8
 8102e34:	617b      	str	r3, [r7, #20]
        break;
 8102e36:	e002      	b.n	8102e3e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8102e38:	2304      	movs	r3, #4
 8102e3a:	617b      	str	r3, [r7, #20]
        break;
 8102e3c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8102e3e:	f7fe fca9 	bl	8101794 <HAL_GetTick>
 8102e42:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8102e44:	e01b      	b.n	8102e7e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8102e46:	f7fe fca5 	bl	8101794 <HAL_GetTick>
 8102e4a:	4602      	mov	r2, r0
 8102e4c:	68bb      	ldr	r3, [r7, #8]
 8102e4e:	1ad3      	subs	r3, r2, r3
 8102e50:	2b05      	cmp	r3, #5
 8102e52:	d914      	bls.n	8102e7e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8102e54:	687b      	ldr	r3, [r7, #4]
 8102e56:	681b      	ldr	r3, [r3, #0]
 8102e58:	689a      	ldr	r2, [r3, #8]
 8102e5a:	697b      	ldr	r3, [r7, #20]
 8102e5c:	4013      	ands	r3, r2
 8102e5e:	2b00      	cmp	r3, #0
 8102e60:	d00d      	beq.n	8102e7e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102e62:	687b      	ldr	r3, [r7, #4]
 8102e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102e66:	f043 0210 	orr.w	r2, r3, #16
 8102e6a:	687b      	ldr	r3, [r7, #4]
 8102e6c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8102e6e:	687b      	ldr	r3, [r7, #4]
 8102e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102e72:	f043 0201 	orr.w	r2, r3, #1
 8102e76:	687b      	ldr	r3, [r7, #4]
 8102e78:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8102e7a:	2301      	movs	r3, #1
 8102e7c:	e007      	b.n	8102e8e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8102e7e:	687b      	ldr	r3, [r7, #4]
 8102e80:	681b      	ldr	r3, [r3, #0]
 8102e82:	689a      	ldr	r2, [r3, #8]
 8102e84:	697b      	ldr	r3, [r7, #20]
 8102e86:	4013      	ands	r3, r2
 8102e88:	2b00      	cmp	r3, #0
 8102e8a:	d1dc      	bne.n	8102e46 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8102e8c:	2300      	movs	r3, #0
}
 8102e8e:	4618      	mov	r0, r3
 8102e90:	3720      	adds	r7, #32
 8102e92:	46bd      	mov	sp, r7
 8102e94:	bd80      	pop	{r7, pc}
 8102e96:	bf00      	nop
 8102e98:	000cdbff 	.word	0x000cdbff

08102e9c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8102e9c:	b580      	push	{r7, lr}
 8102e9e:	b084      	sub	sp, #16
 8102ea0:	af00      	add	r7, sp, #0
 8102ea2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102ea4:	687b      	ldr	r3, [r7, #4]
 8102ea6:	681b      	ldr	r3, [r3, #0]
 8102ea8:	4618      	mov	r0, r3
 8102eaa:	f7fe fe59 	bl	8101b60 <LL_ADC_IsEnabled>
 8102eae:	4603      	mov	r3, r0
 8102eb0:	2b00      	cmp	r3, #0
 8102eb2:	d16e      	bne.n	8102f92 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8102eb4:	687b      	ldr	r3, [r7, #4]
 8102eb6:	681b      	ldr	r3, [r3, #0]
 8102eb8:	689a      	ldr	r2, [r3, #8]
 8102eba:	4b38      	ldr	r3, [pc, #224]	; (8102f9c <ADC_Enable+0x100>)
 8102ebc:	4013      	ands	r3, r2
 8102ebe:	2b00      	cmp	r3, #0
 8102ec0:	d00d      	beq.n	8102ede <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102ec2:	687b      	ldr	r3, [r7, #4]
 8102ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102ec6:	f043 0210 	orr.w	r2, r3, #16
 8102eca:	687b      	ldr	r3, [r7, #4]
 8102ecc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8102ece:	687b      	ldr	r3, [r7, #4]
 8102ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102ed2:	f043 0201 	orr.w	r2, r3, #1
 8102ed6:	687b      	ldr	r3, [r7, #4]
 8102ed8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8102eda:	2301      	movs	r3, #1
 8102edc:	e05a      	b.n	8102f94 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8102ede:	687b      	ldr	r3, [r7, #4]
 8102ee0:	681b      	ldr	r3, [r3, #0]
 8102ee2:	4618      	mov	r0, r3
 8102ee4:	f7fe fe14 	bl	8101b10 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8102ee8:	f7fe fc54 	bl	8101794 <HAL_GetTick>
 8102eec:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8102eee:	687b      	ldr	r3, [r7, #4]
 8102ef0:	681b      	ldr	r3, [r3, #0]
 8102ef2:	4a2b      	ldr	r2, [pc, #172]	; (8102fa0 <ADC_Enable+0x104>)
 8102ef4:	4293      	cmp	r3, r2
 8102ef6:	d004      	beq.n	8102f02 <ADC_Enable+0x66>
 8102ef8:	687b      	ldr	r3, [r7, #4]
 8102efa:	681b      	ldr	r3, [r3, #0]
 8102efc:	4a29      	ldr	r2, [pc, #164]	; (8102fa4 <ADC_Enable+0x108>)
 8102efe:	4293      	cmp	r3, r2
 8102f00:	d101      	bne.n	8102f06 <ADC_Enable+0x6a>
 8102f02:	4b29      	ldr	r3, [pc, #164]	; (8102fa8 <ADC_Enable+0x10c>)
 8102f04:	e000      	b.n	8102f08 <ADC_Enable+0x6c>
 8102f06:	4b29      	ldr	r3, [pc, #164]	; (8102fac <ADC_Enable+0x110>)
 8102f08:	4618      	mov	r0, r3
 8102f0a:	f7fe fd97 	bl	8101a3c <LL_ADC_GetMultimode>
 8102f0e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8102f10:	687b      	ldr	r3, [r7, #4]
 8102f12:	681b      	ldr	r3, [r3, #0]
 8102f14:	4a23      	ldr	r2, [pc, #140]	; (8102fa4 <ADC_Enable+0x108>)
 8102f16:	4293      	cmp	r3, r2
 8102f18:	d002      	beq.n	8102f20 <ADC_Enable+0x84>
 8102f1a:	687b      	ldr	r3, [r7, #4]
 8102f1c:	681b      	ldr	r3, [r3, #0]
 8102f1e:	e000      	b.n	8102f22 <ADC_Enable+0x86>
 8102f20:	4b1f      	ldr	r3, [pc, #124]	; (8102fa0 <ADC_Enable+0x104>)
 8102f22:	687a      	ldr	r2, [r7, #4]
 8102f24:	6812      	ldr	r2, [r2, #0]
 8102f26:	4293      	cmp	r3, r2
 8102f28:	d02c      	beq.n	8102f84 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8102f2a:	68bb      	ldr	r3, [r7, #8]
 8102f2c:	2b00      	cmp	r3, #0
 8102f2e:	d130      	bne.n	8102f92 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8102f30:	e028      	b.n	8102f84 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102f32:	687b      	ldr	r3, [r7, #4]
 8102f34:	681b      	ldr	r3, [r3, #0]
 8102f36:	4618      	mov	r0, r3
 8102f38:	f7fe fe12 	bl	8101b60 <LL_ADC_IsEnabled>
 8102f3c:	4603      	mov	r3, r0
 8102f3e:	2b00      	cmp	r3, #0
 8102f40:	d104      	bne.n	8102f4c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8102f42:	687b      	ldr	r3, [r7, #4]
 8102f44:	681b      	ldr	r3, [r3, #0]
 8102f46:	4618      	mov	r0, r3
 8102f48:	f7fe fde2 	bl	8101b10 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8102f4c:	f7fe fc22 	bl	8101794 <HAL_GetTick>
 8102f50:	4602      	mov	r2, r0
 8102f52:	68fb      	ldr	r3, [r7, #12]
 8102f54:	1ad3      	subs	r3, r2, r3
 8102f56:	2b02      	cmp	r3, #2
 8102f58:	d914      	bls.n	8102f84 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8102f5a:	687b      	ldr	r3, [r7, #4]
 8102f5c:	681b      	ldr	r3, [r3, #0]
 8102f5e:	681b      	ldr	r3, [r3, #0]
 8102f60:	f003 0301 	and.w	r3, r3, #1
 8102f64:	2b01      	cmp	r3, #1
 8102f66:	d00d      	beq.n	8102f84 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102f68:	687b      	ldr	r3, [r7, #4]
 8102f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102f6c:	f043 0210 	orr.w	r2, r3, #16
 8102f70:	687b      	ldr	r3, [r7, #4]
 8102f72:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8102f74:	687b      	ldr	r3, [r7, #4]
 8102f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102f78:	f043 0201 	orr.w	r2, r3, #1
 8102f7c:	687b      	ldr	r3, [r7, #4]
 8102f7e:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8102f80:	2301      	movs	r3, #1
 8102f82:	e007      	b.n	8102f94 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8102f84:	687b      	ldr	r3, [r7, #4]
 8102f86:	681b      	ldr	r3, [r3, #0]
 8102f88:	681b      	ldr	r3, [r3, #0]
 8102f8a:	f003 0301 	and.w	r3, r3, #1
 8102f8e:	2b01      	cmp	r3, #1
 8102f90:	d1cf      	bne.n	8102f32 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8102f92:	2300      	movs	r3, #0
}
 8102f94:	4618      	mov	r0, r3
 8102f96:	3710      	adds	r7, #16
 8102f98:	46bd      	mov	sp, r7
 8102f9a:	bd80      	pop	{r7, pc}
 8102f9c:	8000003f 	.word	0x8000003f
 8102fa0:	40022000 	.word	0x40022000
 8102fa4:	40022100 	.word	0x40022100
 8102fa8:	40022300 	.word	0x40022300
 8102fac:	58026300 	.word	0x58026300

08102fb0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8102fb0:	b580      	push	{r7, lr}
 8102fb2:	b084      	sub	sp, #16
 8102fb4:	af00      	add	r7, sp, #0
 8102fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8102fb8:	687b      	ldr	r3, [r7, #4]
 8102fba:	681b      	ldr	r3, [r3, #0]
 8102fbc:	4618      	mov	r0, r3
 8102fbe:	f7fe fde2 	bl	8101b86 <LL_ADC_IsDisableOngoing>
 8102fc2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8102fc4:	687b      	ldr	r3, [r7, #4]
 8102fc6:	681b      	ldr	r3, [r3, #0]
 8102fc8:	4618      	mov	r0, r3
 8102fca:	f7fe fdc9 	bl	8101b60 <LL_ADC_IsEnabled>
 8102fce:	4603      	mov	r3, r0
 8102fd0:	2b00      	cmp	r3, #0
 8102fd2:	d047      	beq.n	8103064 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8102fd4:	68fb      	ldr	r3, [r7, #12]
 8102fd6:	2b00      	cmp	r3, #0
 8102fd8:	d144      	bne.n	8103064 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8102fda:	687b      	ldr	r3, [r7, #4]
 8102fdc:	681b      	ldr	r3, [r3, #0]
 8102fde:	689b      	ldr	r3, [r3, #8]
 8102fe0:	f003 030d 	and.w	r3, r3, #13
 8102fe4:	2b01      	cmp	r3, #1
 8102fe6:	d10c      	bne.n	8103002 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8102fe8:	687b      	ldr	r3, [r7, #4]
 8102fea:	681b      	ldr	r3, [r3, #0]
 8102fec:	4618      	mov	r0, r3
 8102fee:	f7fe fda3 	bl	8101b38 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8102ff2:	687b      	ldr	r3, [r7, #4]
 8102ff4:	681b      	ldr	r3, [r3, #0]
 8102ff6:	2203      	movs	r2, #3
 8102ff8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8102ffa:	f7fe fbcb 	bl	8101794 <HAL_GetTick>
 8102ffe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8103000:	e029      	b.n	8103056 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103002:	687b      	ldr	r3, [r7, #4]
 8103004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103006:	f043 0210 	orr.w	r2, r3, #16
 810300a:	687b      	ldr	r3, [r7, #4]
 810300c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 810300e:	687b      	ldr	r3, [r7, #4]
 8103010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103012:	f043 0201 	orr.w	r2, r3, #1
 8103016:	687b      	ldr	r3, [r7, #4]
 8103018:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 810301a:	2301      	movs	r3, #1
 810301c:	e023      	b.n	8103066 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 810301e:	f7fe fbb9 	bl	8101794 <HAL_GetTick>
 8103022:	4602      	mov	r2, r0
 8103024:	68bb      	ldr	r3, [r7, #8]
 8103026:	1ad3      	subs	r3, r2, r3
 8103028:	2b02      	cmp	r3, #2
 810302a:	d914      	bls.n	8103056 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 810302c:	687b      	ldr	r3, [r7, #4]
 810302e:	681b      	ldr	r3, [r3, #0]
 8103030:	689b      	ldr	r3, [r3, #8]
 8103032:	f003 0301 	and.w	r3, r3, #1
 8103036:	2b00      	cmp	r3, #0
 8103038:	d00d      	beq.n	8103056 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 810303a:	687b      	ldr	r3, [r7, #4]
 810303c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810303e:	f043 0210 	orr.w	r2, r3, #16
 8103042:	687b      	ldr	r3, [r7, #4]
 8103044:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8103046:	687b      	ldr	r3, [r7, #4]
 8103048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810304a:	f043 0201 	orr.w	r2, r3, #1
 810304e:	687b      	ldr	r3, [r7, #4]
 8103050:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8103052:	2301      	movs	r3, #1
 8103054:	e007      	b.n	8103066 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8103056:	687b      	ldr	r3, [r7, #4]
 8103058:	681b      	ldr	r3, [r3, #0]
 810305a:	689b      	ldr	r3, [r3, #8]
 810305c:	f003 0301 	and.w	r3, r3, #1
 8103060:	2b00      	cmp	r3, #0
 8103062:	d1dc      	bne.n	810301e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8103064:	2300      	movs	r3, #0
}
 8103066:	4618      	mov	r0, r3
 8103068:	3710      	adds	r7, #16
 810306a:	46bd      	mov	sp, r7
 810306c:	bd80      	pop	{r7, pc}

0810306e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 810306e:	b580      	push	{r7, lr}
 8103070:	b084      	sub	sp, #16
 8103072:	af00      	add	r7, sp, #0
 8103074:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8103076:	687b      	ldr	r3, [r7, #4]
 8103078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810307a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 810307c:	68fb      	ldr	r3, [r7, #12]
 810307e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103080:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8103084:	2b00      	cmp	r3, #0
 8103086:	d14b      	bne.n	8103120 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8103088:	68fb      	ldr	r3, [r7, #12]
 810308a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810308c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8103090:	68fb      	ldr	r3, [r7, #12]
 8103092:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8103094:	68fb      	ldr	r3, [r7, #12]
 8103096:	681b      	ldr	r3, [r3, #0]
 8103098:	681b      	ldr	r3, [r3, #0]
 810309a:	f003 0308 	and.w	r3, r3, #8
 810309e:	2b00      	cmp	r3, #0
 81030a0:	d021      	beq.n	81030e6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 81030a2:	68fb      	ldr	r3, [r7, #12]
 81030a4:	681b      	ldr	r3, [r3, #0]
 81030a6:	4618      	mov	r0, r3
 81030a8:	f7fe fc14 	bl	81018d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 81030ac:	4603      	mov	r3, r0
 81030ae:	2b00      	cmp	r3, #0
 81030b0:	d032      	beq.n	8103118 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 81030b2:	68fb      	ldr	r3, [r7, #12]
 81030b4:	681b      	ldr	r3, [r3, #0]
 81030b6:	68db      	ldr	r3, [r3, #12]
 81030b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 81030bc:	2b00      	cmp	r3, #0
 81030be:	d12b      	bne.n	8103118 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 81030c0:	68fb      	ldr	r3, [r7, #12]
 81030c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81030c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 81030c8:	68fb      	ldr	r3, [r7, #12]
 81030ca:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 81030cc:	68fb      	ldr	r3, [r7, #12]
 81030ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81030d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81030d4:	2b00      	cmp	r3, #0
 81030d6:	d11f      	bne.n	8103118 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 81030d8:	68fb      	ldr	r3, [r7, #12]
 81030da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81030dc:	f043 0201 	orr.w	r2, r3, #1
 81030e0:	68fb      	ldr	r3, [r7, #12]
 81030e2:	655a      	str	r2, [r3, #84]	; 0x54
 81030e4:	e018      	b.n	8103118 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 81030e6:	68fb      	ldr	r3, [r7, #12]
 81030e8:	681b      	ldr	r3, [r3, #0]
 81030ea:	68db      	ldr	r3, [r3, #12]
 81030ec:	f003 0303 	and.w	r3, r3, #3
 81030f0:	2b00      	cmp	r3, #0
 81030f2:	d111      	bne.n	8103118 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 81030f4:	68fb      	ldr	r3, [r7, #12]
 81030f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81030f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 81030fc:	68fb      	ldr	r3, [r7, #12]
 81030fe:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8103100:	68fb      	ldr	r3, [r7, #12]
 8103102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103104:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8103108:	2b00      	cmp	r3, #0
 810310a:	d105      	bne.n	8103118 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 810310c:	68fb      	ldr	r3, [r7, #12]
 810310e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103110:	f043 0201 	orr.w	r2, r3, #1
 8103114:	68fb      	ldr	r3, [r7, #12]
 8103116:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8103118:	68f8      	ldr	r0, [r7, #12]
 810311a:	f7fe f8df 	bl	81012dc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 810311e:	e00e      	b.n	810313e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8103120:	68fb      	ldr	r3, [r7, #12]
 8103122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103124:	f003 0310 	and.w	r3, r3, #16
 8103128:	2b00      	cmp	r3, #0
 810312a:	d003      	beq.n	8103134 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 810312c:	68f8      	ldr	r0, [r7, #12]
 810312e:	f7fe f8e9 	bl	8101304 <HAL_ADC_ErrorCallback>
}
 8103132:	e004      	b.n	810313e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8103134:	68fb      	ldr	r3, [r7, #12]
 8103136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810313a:	6878      	ldr	r0, [r7, #4]
 810313c:	4798      	blx	r3
}
 810313e:	bf00      	nop
 8103140:	3710      	adds	r7, #16
 8103142:	46bd      	mov	sp, r7
 8103144:	bd80      	pop	{r7, pc}

08103146 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8103146:	b580      	push	{r7, lr}
 8103148:	b084      	sub	sp, #16
 810314a:	af00      	add	r7, sp, #0
 810314c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810314e:	687b      	ldr	r3, [r7, #4]
 8103150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103152:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8103154:	68f8      	ldr	r0, [r7, #12]
 8103156:	f7fe f8ad 	bl	81012b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 810315a:	bf00      	nop
 810315c:	3710      	adds	r7, #16
 810315e:	46bd      	mov	sp, r7
 8103160:	bd80      	pop	{r7, pc}

08103162 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8103162:	b580      	push	{r7, lr}
 8103164:	b084      	sub	sp, #16
 8103166:	af00      	add	r7, sp, #0
 8103168:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810316a:	687b      	ldr	r3, [r7, #4]
 810316c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810316e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8103170:	68fb      	ldr	r3, [r7, #12]
 8103172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103174:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8103178:	68fb      	ldr	r3, [r7, #12]
 810317a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 810317c:	68fb      	ldr	r3, [r7, #12]
 810317e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103180:	f043 0204 	orr.w	r2, r3, #4
 8103184:	68fb      	ldr	r3, [r7, #12]
 8103186:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8103188:	68f8      	ldr	r0, [r7, #12]
 810318a:	f7fe f8bb 	bl	8101304 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 810318e:	bf00      	nop
 8103190:	3710      	adds	r7, #16
 8103192:	46bd      	mov	sp, r7
 8103194:	bd80      	pop	{r7, pc}
	...

08103198 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8103198:	b580      	push	{r7, lr}
 810319a:	b084      	sub	sp, #16
 810319c:	af00      	add	r7, sp, #0
 810319e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 81031a0:	687b      	ldr	r3, [r7, #4]
 81031a2:	681b      	ldr	r3, [r3, #0]
 81031a4:	4a79      	ldr	r2, [pc, #484]	; (810338c <ADC_ConfigureBoostMode+0x1f4>)
 81031a6:	4293      	cmp	r3, r2
 81031a8:	d004      	beq.n	81031b4 <ADC_ConfigureBoostMode+0x1c>
 81031aa:	687b      	ldr	r3, [r7, #4]
 81031ac:	681b      	ldr	r3, [r3, #0]
 81031ae:	4a78      	ldr	r2, [pc, #480]	; (8103390 <ADC_ConfigureBoostMode+0x1f8>)
 81031b0:	4293      	cmp	r3, r2
 81031b2:	d109      	bne.n	81031c8 <ADC_ConfigureBoostMode+0x30>
 81031b4:	4b77      	ldr	r3, [pc, #476]	; (8103394 <ADC_ConfigureBoostMode+0x1fc>)
 81031b6:	689b      	ldr	r3, [r3, #8]
 81031b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81031bc:	2b00      	cmp	r3, #0
 81031be:	bf14      	ite	ne
 81031c0:	2301      	movne	r3, #1
 81031c2:	2300      	moveq	r3, #0
 81031c4:	b2db      	uxtb	r3, r3
 81031c6:	e008      	b.n	81031da <ADC_ConfigureBoostMode+0x42>
 81031c8:	4b73      	ldr	r3, [pc, #460]	; (8103398 <ADC_ConfigureBoostMode+0x200>)
 81031ca:	689b      	ldr	r3, [r3, #8]
 81031cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81031d0:	2b00      	cmp	r3, #0
 81031d2:	bf14      	ite	ne
 81031d4:	2301      	movne	r3, #1
 81031d6:	2300      	moveq	r3, #0
 81031d8:	b2db      	uxtb	r3, r3
 81031da:	2b00      	cmp	r3, #0
 81031dc:	d01c      	beq.n	8103218 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 81031de:	f003 fddb 	bl	8106d98 <HAL_RCC_GetHCLKFreq>
 81031e2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 81031e4:	687b      	ldr	r3, [r7, #4]
 81031e6:	685b      	ldr	r3, [r3, #4]
 81031e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81031ec:	d010      	beq.n	8103210 <ADC_ConfigureBoostMode+0x78>
 81031ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81031f2:	d871      	bhi.n	81032d8 <ADC_ConfigureBoostMode+0x140>
 81031f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81031f8:	d002      	beq.n	8103200 <ADC_ConfigureBoostMode+0x68>
 81031fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81031fe:	d16b      	bne.n	81032d8 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8103200:	687b      	ldr	r3, [r7, #4]
 8103202:	685b      	ldr	r3, [r3, #4]
 8103204:	0c1b      	lsrs	r3, r3, #16
 8103206:	68fa      	ldr	r2, [r7, #12]
 8103208:	fbb2 f3f3 	udiv	r3, r2, r3
 810320c:	60fb      	str	r3, [r7, #12]
        break;
 810320e:	e066      	b.n	81032de <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8103210:	68fb      	ldr	r3, [r7, #12]
 8103212:	089b      	lsrs	r3, r3, #2
 8103214:	60fb      	str	r3, [r7, #12]
        break;
 8103216:	e062      	b.n	81032de <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8103218:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 810321c:	f004 fd9c 	bl	8107d58 <HAL_RCCEx_GetPeriphCLKFreq>
 8103220:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8103222:	687b      	ldr	r3, [r7, #4]
 8103224:	685b      	ldr	r3, [r3, #4]
 8103226:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 810322a:	d051      	beq.n	81032d0 <ADC_ConfigureBoostMode+0x138>
 810322c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8103230:	d854      	bhi.n	81032dc <ADC_ConfigureBoostMode+0x144>
 8103232:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8103236:	d047      	beq.n	81032c8 <ADC_ConfigureBoostMode+0x130>
 8103238:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 810323c:	d84e      	bhi.n	81032dc <ADC_ConfigureBoostMode+0x144>
 810323e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8103242:	d03d      	beq.n	81032c0 <ADC_ConfigureBoostMode+0x128>
 8103244:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8103248:	d848      	bhi.n	81032dc <ADC_ConfigureBoostMode+0x144>
 810324a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810324e:	d033      	beq.n	81032b8 <ADC_ConfigureBoostMode+0x120>
 8103250:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103254:	d842      	bhi.n	81032dc <ADC_ConfigureBoostMode+0x144>
 8103256:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 810325a:	d029      	beq.n	81032b0 <ADC_ConfigureBoostMode+0x118>
 810325c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8103260:	d83c      	bhi.n	81032dc <ADC_ConfigureBoostMode+0x144>
 8103262:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8103266:	d01a      	beq.n	810329e <ADC_ConfigureBoostMode+0x106>
 8103268:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 810326c:	d836      	bhi.n	81032dc <ADC_ConfigureBoostMode+0x144>
 810326e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8103272:	d014      	beq.n	810329e <ADC_ConfigureBoostMode+0x106>
 8103274:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8103278:	d830      	bhi.n	81032dc <ADC_ConfigureBoostMode+0x144>
 810327a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810327e:	d00e      	beq.n	810329e <ADC_ConfigureBoostMode+0x106>
 8103280:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103284:	d82a      	bhi.n	81032dc <ADC_ConfigureBoostMode+0x144>
 8103286:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 810328a:	d008      	beq.n	810329e <ADC_ConfigureBoostMode+0x106>
 810328c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8103290:	d824      	bhi.n	81032dc <ADC_ConfigureBoostMode+0x144>
 8103292:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103296:	d002      	beq.n	810329e <ADC_ConfigureBoostMode+0x106>
 8103298:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 810329c:	d11e      	bne.n	81032dc <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 810329e:	687b      	ldr	r3, [r7, #4]
 81032a0:	685b      	ldr	r3, [r3, #4]
 81032a2:	0c9b      	lsrs	r3, r3, #18
 81032a4:	005b      	lsls	r3, r3, #1
 81032a6:	68fa      	ldr	r2, [r7, #12]
 81032a8:	fbb2 f3f3 	udiv	r3, r2, r3
 81032ac:	60fb      	str	r3, [r7, #12]
        break;
 81032ae:	e016      	b.n	81032de <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 81032b0:	68fb      	ldr	r3, [r7, #12]
 81032b2:	091b      	lsrs	r3, r3, #4
 81032b4:	60fb      	str	r3, [r7, #12]
        break;
 81032b6:	e012      	b.n	81032de <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 81032b8:	68fb      	ldr	r3, [r7, #12]
 81032ba:	095b      	lsrs	r3, r3, #5
 81032bc:	60fb      	str	r3, [r7, #12]
        break;
 81032be:	e00e      	b.n	81032de <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 81032c0:	68fb      	ldr	r3, [r7, #12]
 81032c2:	099b      	lsrs	r3, r3, #6
 81032c4:	60fb      	str	r3, [r7, #12]
        break;
 81032c6:	e00a      	b.n	81032de <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 81032c8:	68fb      	ldr	r3, [r7, #12]
 81032ca:	09db      	lsrs	r3, r3, #7
 81032cc:	60fb      	str	r3, [r7, #12]
        break;
 81032ce:	e006      	b.n	81032de <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 81032d0:	68fb      	ldr	r3, [r7, #12]
 81032d2:	0a1b      	lsrs	r3, r3, #8
 81032d4:	60fb      	str	r3, [r7, #12]
        break;
 81032d6:	e002      	b.n	81032de <ADC_ConfigureBoostMode+0x146>
        break;
 81032d8:	bf00      	nop
 81032da:	e000      	b.n	81032de <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 81032dc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 81032de:	f7fe fa65 	bl	81017ac <HAL_GetREVID>
 81032e2:	4603      	mov	r3, r0
 81032e4:	f241 0203 	movw	r2, #4099	; 0x1003
 81032e8:	4293      	cmp	r3, r2
 81032ea:	d815      	bhi.n	8103318 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 81032ec:	68fb      	ldr	r3, [r7, #12]
 81032ee:	4a2b      	ldr	r2, [pc, #172]	; (810339c <ADC_ConfigureBoostMode+0x204>)
 81032f0:	4293      	cmp	r3, r2
 81032f2:	d908      	bls.n	8103306 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 81032f4:	687b      	ldr	r3, [r7, #4]
 81032f6:	681b      	ldr	r3, [r3, #0]
 81032f8:	689a      	ldr	r2, [r3, #8]
 81032fa:	687b      	ldr	r3, [r7, #4]
 81032fc:	681b      	ldr	r3, [r3, #0]
 81032fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8103302:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8103304:	e03e      	b.n	8103384 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8103306:	687b      	ldr	r3, [r7, #4]
 8103308:	681b      	ldr	r3, [r3, #0]
 810330a:	689a      	ldr	r2, [r3, #8]
 810330c:	687b      	ldr	r3, [r7, #4]
 810330e:	681b      	ldr	r3, [r3, #0]
 8103310:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8103314:	609a      	str	r2, [r3, #8]
}
 8103316:	e035      	b.n	8103384 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8103318:	68fb      	ldr	r3, [r7, #12]
 810331a:	085b      	lsrs	r3, r3, #1
 810331c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 810331e:	68fb      	ldr	r3, [r7, #12]
 8103320:	4a1f      	ldr	r2, [pc, #124]	; (81033a0 <ADC_ConfigureBoostMode+0x208>)
 8103322:	4293      	cmp	r3, r2
 8103324:	d808      	bhi.n	8103338 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8103326:	687b      	ldr	r3, [r7, #4]
 8103328:	681b      	ldr	r3, [r3, #0]
 810332a:	689a      	ldr	r2, [r3, #8]
 810332c:	687b      	ldr	r3, [r7, #4]
 810332e:	681b      	ldr	r3, [r3, #0]
 8103330:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8103334:	609a      	str	r2, [r3, #8]
}
 8103336:	e025      	b.n	8103384 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8103338:	68fb      	ldr	r3, [r7, #12]
 810333a:	4a1a      	ldr	r2, [pc, #104]	; (81033a4 <ADC_ConfigureBoostMode+0x20c>)
 810333c:	4293      	cmp	r3, r2
 810333e:	d80a      	bhi.n	8103356 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8103340:	687b      	ldr	r3, [r7, #4]
 8103342:	681b      	ldr	r3, [r3, #0]
 8103344:	689b      	ldr	r3, [r3, #8]
 8103346:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810334a:	687b      	ldr	r3, [r7, #4]
 810334c:	681b      	ldr	r3, [r3, #0]
 810334e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8103352:	609a      	str	r2, [r3, #8]
}
 8103354:	e016      	b.n	8103384 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8103356:	68fb      	ldr	r3, [r7, #12]
 8103358:	4a13      	ldr	r2, [pc, #76]	; (81033a8 <ADC_ConfigureBoostMode+0x210>)
 810335a:	4293      	cmp	r3, r2
 810335c:	d80a      	bhi.n	8103374 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 810335e:	687b      	ldr	r3, [r7, #4]
 8103360:	681b      	ldr	r3, [r3, #0]
 8103362:	689b      	ldr	r3, [r3, #8]
 8103364:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103368:	687b      	ldr	r3, [r7, #4]
 810336a:	681b      	ldr	r3, [r3, #0]
 810336c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8103370:	609a      	str	r2, [r3, #8]
}
 8103372:	e007      	b.n	8103384 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8103374:	687b      	ldr	r3, [r7, #4]
 8103376:	681b      	ldr	r3, [r3, #0]
 8103378:	689a      	ldr	r2, [r3, #8]
 810337a:	687b      	ldr	r3, [r7, #4]
 810337c:	681b      	ldr	r3, [r3, #0]
 810337e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8103382:	609a      	str	r2, [r3, #8]
}
 8103384:	bf00      	nop
 8103386:	3710      	adds	r7, #16
 8103388:	46bd      	mov	sp, r7
 810338a:	bd80      	pop	{r7, pc}
 810338c:	40022000 	.word	0x40022000
 8103390:	40022100 	.word	0x40022100
 8103394:	40022300 	.word	0x40022300
 8103398:	58026300 	.word	0x58026300
 810339c:	01312d00 	.word	0x01312d00
 81033a0:	005f5e10 	.word	0x005f5e10
 81033a4:	00bebc20 	.word	0x00bebc20
 81033a8:	017d7840 	.word	0x017d7840

081033ac <LL_ADC_IsEnabled>:
{
 81033ac:	b480      	push	{r7}
 81033ae:	b083      	sub	sp, #12
 81033b0:	af00      	add	r7, sp, #0
 81033b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 81033b4:	687b      	ldr	r3, [r7, #4]
 81033b6:	689b      	ldr	r3, [r3, #8]
 81033b8:	f003 0301 	and.w	r3, r3, #1
 81033bc:	2b01      	cmp	r3, #1
 81033be:	d101      	bne.n	81033c4 <LL_ADC_IsEnabled+0x18>
 81033c0:	2301      	movs	r3, #1
 81033c2:	e000      	b.n	81033c6 <LL_ADC_IsEnabled+0x1a>
 81033c4:	2300      	movs	r3, #0
}
 81033c6:	4618      	mov	r0, r3
 81033c8:	370c      	adds	r7, #12
 81033ca:	46bd      	mov	sp, r7
 81033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81033d0:	4770      	bx	lr
	...

081033d4 <LL_ADC_StartCalibration>:
{
 81033d4:	b480      	push	{r7}
 81033d6:	b085      	sub	sp, #20
 81033d8:	af00      	add	r7, sp, #0
 81033da:	60f8      	str	r0, [r7, #12]
 81033dc:	60b9      	str	r1, [r7, #8]
 81033de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 81033e0:	68fb      	ldr	r3, [r7, #12]
 81033e2:	689a      	ldr	r2, [r3, #8]
 81033e4:	4b09      	ldr	r3, [pc, #36]	; (810340c <LL_ADC_StartCalibration+0x38>)
 81033e6:	4013      	ands	r3, r2
 81033e8:	68ba      	ldr	r2, [r7, #8]
 81033ea:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 81033ee:	687a      	ldr	r2, [r7, #4]
 81033f0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 81033f4:	430a      	orrs	r2, r1
 81033f6:	4313      	orrs	r3, r2
 81033f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 81033fc:	68fb      	ldr	r3, [r7, #12]
 81033fe:	609a      	str	r2, [r3, #8]
}
 8103400:	bf00      	nop
 8103402:	3714      	adds	r7, #20
 8103404:	46bd      	mov	sp, r7
 8103406:	f85d 7b04 	ldr.w	r7, [sp], #4
 810340a:	4770      	bx	lr
 810340c:	3ffeffc0 	.word	0x3ffeffc0

08103410 <LL_ADC_IsCalibrationOnGoing>:
{
 8103410:	b480      	push	{r7}
 8103412:	b083      	sub	sp, #12
 8103414:	af00      	add	r7, sp, #0
 8103416:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8103418:	687b      	ldr	r3, [r7, #4]
 810341a:	689b      	ldr	r3, [r3, #8]
 810341c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8103420:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8103424:	d101      	bne.n	810342a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8103426:	2301      	movs	r3, #1
 8103428:	e000      	b.n	810342c <LL_ADC_IsCalibrationOnGoing+0x1c>
 810342a:	2300      	movs	r3, #0
}
 810342c:	4618      	mov	r0, r3
 810342e:	370c      	adds	r7, #12
 8103430:	46bd      	mov	sp, r7
 8103432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103436:	4770      	bx	lr

08103438 <LL_ADC_REG_IsConversionOngoing>:
{
 8103438:	b480      	push	{r7}
 810343a:	b083      	sub	sp, #12
 810343c:	af00      	add	r7, sp, #0
 810343e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8103440:	687b      	ldr	r3, [r7, #4]
 8103442:	689b      	ldr	r3, [r3, #8]
 8103444:	f003 0304 	and.w	r3, r3, #4
 8103448:	2b04      	cmp	r3, #4
 810344a:	d101      	bne.n	8103450 <LL_ADC_REG_IsConversionOngoing+0x18>
 810344c:	2301      	movs	r3, #1
 810344e:	e000      	b.n	8103452 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8103450:	2300      	movs	r3, #0
}
 8103452:	4618      	mov	r0, r3
 8103454:	370c      	adds	r7, #12
 8103456:	46bd      	mov	sp, r7
 8103458:	f85d 7b04 	ldr.w	r7, [sp], #4
 810345c:	4770      	bx	lr
	...

08103460 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8103460:	b580      	push	{r7, lr}
 8103462:	b086      	sub	sp, #24
 8103464:	af00      	add	r7, sp, #0
 8103466:	60f8      	str	r0, [r7, #12]
 8103468:	60b9      	str	r1, [r7, #8]
 810346a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 810346c:	2300      	movs	r3, #0
 810346e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8103470:	68fb      	ldr	r3, [r7, #12]
 8103472:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8103476:	2b01      	cmp	r3, #1
 8103478:	d101      	bne.n	810347e <HAL_ADCEx_Calibration_Start+0x1e>
 810347a:	2302      	movs	r3, #2
 810347c:	e04e      	b.n	810351c <HAL_ADCEx_Calibration_Start+0xbc>
 810347e:	68fb      	ldr	r3, [r7, #12]
 8103480:	2201      	movs	r2, #1
 8103482:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8103486:	68f8      	ldr	r0, [r7, #12]
 8103488:	f7ff fd92 	bl	8102fb0 <ADC_Disable>
 810348c:	4603      	mov	r3, r0
 810348e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8103490:	7dfb      	ldrb	r3, [r7, #23]
 8103492:	2b00      	cmp	r3, #0
 8103494:	d137      	bne.n	8103506 <HAL_ADCEx_Calibration_Start+0xa6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8103496:	68fb      	ldr	r3, [r7, #12]
 8103498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810349a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 810349e:	f023 0302 	bic.w	r3, r3, #2
 81034a2:	f043 0202 	orr.w	r2, r3, #2
 81034a6:	68fb      	ldr	r3, [r7, #12]
 81034a8:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 81034aa:	68fb      	ldr	r3, [r7, #12]
 81034ac:	681b      	ldr	r3, [r3, #0]
 81034ae:	687a      	ldr	r2, [r7, #4]
 81034b0:	68b9      	ldr	r1, [r7, #8]
 81034b2:	4618      	mov	r0, r3
 81034b4:	f7ff ff8e 	bl	81033d4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 81034b8:	e014      	b.n	81034e4 <HAL_ADCEx_Calibration_Start+0x84>
    {
      wait_loop_index++;
 81034ba:	693b      	ldr	r3, [r7, #16]
 81034bc:	3301      	adds	r3, #1
 81034be:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 81034c0:	693b      	ldr	r3, [r7, #16]
 81034c2:	4a18      	ldr	r2, [pc, #96]	; (8103524 <HAL_ADCEx_Calibration_Start+0xc4>)
 81034c4:	4293      	cmp	r3, r2
 81034c6:	d30d      	bcc.n	81034e4 <HAL_ADCEx_Calibration_Start+0x84>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 81034c8:	68fb      	ldr	r3, [r7, #12]
 81034ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81034cc:	f023 0312 	bic.w	r3, r3, #18
 81034d0:	f043 0210 	orr.w	r2, r3, #16
 81034d4:	68fb      	ldr	r3, [r7, #12]
 81034d6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 81034d8:	68fb      	ldr	r3, [r7, #12]
 81034da:	2200      	movs	r2, #0
 81034dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 81034e0:	2301      	movs	r3, #1
 81034e2:	e01b      	b.n	810351c <HAL_ADCEx_Calibration_Start+0xbc>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 81034e4:	68fb      	ldr	r3, [r7, #12]
 81034e6:	681b      	ldr	r3, [r3, #0]
 81034e8:	4618      	mov	r0, r3
 81034ea:	f7ff ff91 	bl	8103410 <LL_ADC_IsCalibrationOnGoing>
 81034ee:	4603      	mov	r3, r0
 81034f0:	2b00      	cmp	r3, #0
 81034f2:	d1e2      	bne.n	81034ba <HAL_ADCEx_Calibration_Start+0x5a>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 81034f4:	68fb      	ldr	r3, [r7, #12]
 81034f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81034f8:	f023 0303 	bic.w	r3, r3, #3
 81034fc:	f043 0201 	orr.w	r2, r3, #1
 8103500:	68fb      	ldr	r3, [r7, #12]
 8103502:	655a      	str	r2, [r3, #84]	; 0x54
 8103504:	e005      	b.n	8103512 <HAL_ADCEx_Calibration_Start+0xb2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103506:	68fb      	ldr	r3, [r7, #12]
 8103508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810350a:	f043 0210 	orr.w	r2, r3, #16
 810350e:	68fb      	ldr	r3, [r7, #12]
 8103510:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8103512:	68fb      	ldr	r3, [r7, #12]
 8103514:	2200      	movs	r2, #0
 8103516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 810351a:	7dfb      	ldrb	r3, [r7, #23]
}
 810351c:	4618      	mov	r0, r3
 810351e:	3718      	adds	r7, #24
 8103520:	46bd      	mov	sp, r7
 8103522:	bd80      	pop	{r7, pc}
 8103524:	25c3f800 	.word	0x25c3f800

08103528 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8103528:	b480      	push	{r7}
 810352a:	b083      	sub	sp, #12
 810352c:	af00      	add	r7, sp, #0
 810352e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8103530:	bf00      	nop
 8103532:	370c      	adds	r7, #12
 8103534:	46bd      	mov	sp, r7
 8103536:	f85d 7b04 	ldr.w	r7, [sp], #4
 810353a:	4770      	bx	lr

0810353c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 810353c:	b480      	push	{r7}
 810353e:	b083      	sub	sp, #12
 8103540:	af00      	add	r7, sp, #0
 8103542:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8103544:	bf00      	nop
 8103546:	370c      	adds	r7, #12
 8103548:	46bd      	mov	sp, r7
 810354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810354e:	4770      	bx	lr

08103550 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8103550:	b480      	push	{r7}
 8103552:	b083      	sub	sp, #12
 8103554:	af00      	add	r7, sp, #0
 8103556:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8103558:	bf00      	nop
 810355a:	370c      	adds	r7, #12
 810355c:	46bd      	mov	sp, r7
 810355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103562:	4770      	bx	lr

08103564 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8103564:	b480      	push	{r7}
 8103566:	b083      	sub	sp, #12
 8103568:	af00      	add	r7, sp, #0
 810356a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 810356c:	bf00      	nop
 810356e:	370c      	adds	r7, #12
 8103570:	46bd      	mov	sp, r7
 8103572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103576:	4770      	bx	lr

08103578 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8103578:	b480      	push	{r7}
 810357a:	b083      	sub	sp, #12
 810357c:	af00      	add	r7, sp, #0
 810357e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8103580:	bf00      	nop
 8103582:	370c      	adds	r7, #12
 8103584:	46bd      	mov	sp, r7
 8103586:	f85d 7b04 	ldr.w	r7, [sp], #4
 810358a:	4770      	bx	lr

0810358c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 810358c:	b590      	push	{r4, r7, lr}
 810358e:	b09f      	sub	sp, #124	; 0x7c
 8103590:	af00      	add	r7, sp, #0
 8103592:	6078      	str	r0, [r7, #4]
 8103594:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8103596:	2300      	movs	r3, #0
 8103598:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 810359c:	687b      	ldr	r3, [r7, #4]
 810359e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 81035a2:	2b01      	cmp	r3, #1
 81035a4:	d101      	bne.n	81035aa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 81035a6:	2302      	movs	r3, #2
 81035a8:	e0c4      	b.n	8103734 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 81035aa:	687b      	ldr	r3, [r7, #4]
 81035ac:	2201      	movs	r2, #1
 81035ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 81035b2:	2300      	movs	r3, #0
 81035b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 81035b6:	2300      	movs	r3, #0
 81035b8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 81035ba:	687b      	ldr	r3, [r7, #4]
 81035bc:	681b      	ldr	r3, [r3, #0]
 81035be:	4a5f      	ldr	r2, [pc, #380]	; (810373c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81035c0:	4293      	cmp	r3, r2
 81035c2:	d102      	bne.n	81035ca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 81035c4:	4b5e      	ldr	r3, [pc, #376]	; (8103740 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81035c6:	60bb      	str	r3, [r7, #8]
 81035c8:	e001      	b.n	81035ce <HAL_ADCEx_MultiModeConfigChannel+0x42>
 81035ca:	2300      	movs	r3, #0
 81035cc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 81035ce:	68bb      	ldr	r3, [r7, #8]
 81035d0:	2b00      	cmp	r3, #0
 81035d2:	d10b      	bne.n	81035ec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81035d4:	687b      	ldr	r3, [r7, #4]
 81035d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81035d8:	f043 0220 	orr.w	r2, r3, #32
 81035dc:	687b      	ldr	r3, [r7, #4]
 81035de:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 81035e0:	687b      	ldr	r3, [r7, #4]
 81035e2:	2200      	movs	r2, #0
 81035e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 81035e8:	2301      	movs	r3, #1
 81035ea:	e0a3      	b.n	8103734 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 81035ec:	68bb      	ldr	r3, [r7, #8]
 81035ee:	4618      	mov	r0, r3
 81035f0:	f7ff ff22 	bl	8103438 <LL_ADC_REG_IsConversionOngoing>
 81035f4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 81035f6:	687b      	ldr	r3, [r7, #4]
 81035f8:	681b      	ldr	r3, [r3, #0]
 81035fa:	4618      	mov	r0, r3
 81035fc:	f7ff ff1c 	bl	8103438 <LL_ADC_REG_IsConversionOngoing>
 8103600:	4603      	mov	r3, r0
 8103602:	2b00      	cmp	r3, #0
 8103604:	f040 8085 	bne.w	8103712 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8103608:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 810360a:	2b00      	cmp	r3, #0
 810360c:	f040 8081 	bne.w	8103712 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8103610:	687b      	ldr	r3, [r7, #4]
 8103612:	681b      	ldr	r3, [r3, #0]
 8103614:	4a49      	ldr	r2, [pc, #292]	; (810373c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103616:	4293      	cmp	r3, r2
 8103618:	d004      	beq.n	8103624 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 810361a:	687b      	ldr	r3, [r7, #4]
 810361c:	681b      	ldr	r3, [r3, #0]
 810361e:	4a48      	ldr	r2, [pc, #288]	; (8103740 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103620:	4293      	cmp	r3, r2
 8103622:	d101      	bne.n	8103628 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8103624:	4b47      	ldr	r3, [pc, #284]	; (8103744 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8103626:	e000      	b.n	810362a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8103628:	4b47      	ldr	r3, [pc, #284]	; (8103748 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 810362a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 810362c:	683b      	ldr	r3, [r7, #0]
 810362e:	681b      	ldr	r3, [r3, #0]
 8103630:	2b00      	cmp	r3, #0
 8103632:	d03b      	beq.n	81036ac <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8103634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103636:	689b      	ldr	r3, [r3, #8]
 8103638:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 810363c:	683b      	ldr	r3, [r7, #0]
 810363e:	685b      	ldr	r3, [r3, #4]
 8103640:	431a      	orrs	r2, r3
 8103642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103644:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103646:	687b      	ldr	r3, [r7, #4]
 8103648:	681b      	ldr	r3, [r3, #0]
 810364a:	4a3c      	ldr	r2, [pc, #240]	; (810373c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810364c:	4293      	cmp	r3, r2
 810364e:	d004      	beq.n	810365a <HAL_ADCEx_MultiModeConfigChannel+0xce>
 8103650:	687b      	ldr	r3, [r7, #4]
 8103652:	681b      	ldr	r3, [r3, #0]
 8103654:	4a3a      	ldr	r2, [pc, #232]	; (8103740 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103656:	4293      	cmp	r3, r2
 8103658:	d10e      	bne.n	8103678 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 810365a:	4838      	ldr	r0, [pc, #224]	; (810373c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810365c:	f7ff fea6 	bl	81033ac <LL_ADC_IsEnabled>
 8103660:	4604      	mov	r4, r0
 8103662:	4837      	ldr	r0, [pc, #220]	; (8103740 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103664:	f7ff fea2 	bl	81033ac <LL_ADC_IsEnabled>
 8103668:	4603      	mov	r3, r0
 810366a:	4323      	orrs	r3, r4
 810366c:	2b00      	cmp	r3, #0
 810366e:	bf0c      	ite	eq
 8103670:	2301      	moveq	r3, #1
 8103672:	2300      	movne	r3, #0
 8103674:	b2db      	uxtb	r3, r3
 8103676:	e008      	b.n	810368a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8103678:	4834      	ldr	r0, [pc, #208]	; (810374c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 810367a:	f7ff fe97 	bl	81033ac <LL_ADC_IsEnabled>
 810367e:	4603      	mov	r3, r0
 8103680:	2b00      	cmp	r3, #0
 8103682:	bf0c      	ite	eq
 8103684:	2301      	moveq	r3, #1
 8103686:	2300      	movne	r3, #0
 8103688:	b2db      	uxtb	r3, r3
 810368a:	2b00      	cmp	r3, #0
 810368c:	d04b      	beq.n	8103726 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 810368e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103690:	689b      	ldr	r3, [r3, #8]
 8103692:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8103696:	f023 030f 	bic.w	r3, r3, #15
 810369a:	683a      	ldr	r2, [r7, #0]
 810369c:	6811      	ldr	r1, [r2, #0]
 810369e:	683a      	ldr	r2, [r7, #0]
 81036a0:	6892      	ldr	r2, [r2, #8]
 81036a2:	430a      	orrs	r2, r1
 81036a4:	431a      	orrs	r2, r3
 81036a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81036a8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81036aa:	e03c      	b.n	8103726 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 81036ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81036ae:	689b      	ldr	r3, [r3, #8]
 81036b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 81036b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81036b6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81036b8:	687b      	ldr	r3, [r7, #4]
 81036ba:	681b      	ldr	r3, [r3, #0]
 81036bc:	4a1f      	ldr	r2, [pc, #124]	; (810373c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81036be:	4293      	cmp	r3, r2
 81036c0:	d004      	beq.n	81036cc <HAL_ADCEx_MultiModeConfigChannel+0x140>
 81036c2:	687b      	ldr	r3, [r7, #4]
 81036c4:	681b      	ldr	r3, [r3, #0]
 81036c6:	4a1e      	ldr	r2, [pc, #120]	; (8103740 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81036c8:	4293      	cmp	r3, r2
 81036ca:	d10e      	bne.n	81036ea <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 81036cc:	481b      	ldr	r0, [pc, #108]	; (810373c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81036ce:	f7ff fe6d 	bl	81033ac <LL_ADC_IsEnabled>
 81036d2:	4604      	mov	r4, r0
 81036d4:	481a      	ldr	r0, [pc, #104]	; (8103740 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81036d6:	f7ff fe69 	bl	81033ac <LL_ADC_IsEnabled>
 81036da:	4603      	mov	r3, r0
 81036dc:	4323      	orrs	r3, r4
 81036de:	2b00      	cmp	r3, #0
 81036e0:	bf0c      	ite	eq
 81036e2:	2301      	moveq	r3, #1
 81036e4:	2300      	movne	r3, #0
 81036e6:	b2db      	uxtb	r3, r3
 81036e8:	e008      	b.n	81036fc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 81036ea:	4818      	ldr	r0, [pc, #96]	; (810374c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 81036ec:	f7ff fe5e 	bl	81033ac <LL_ADC_IsEnabled>
 81036f0:	4603      	mov	r3, r0
 81036f2:	2b00      	cmp	r3, #0
 81036f4:	bf0c      	ite	eq
 81036f6:	2301      	moveq	r3, #1
 81036f8:	2300      	movne	r3, #0
 81036fa:	b2db      	uxtb	r3, r3
 81036fc:	2b00      	cmp	r3, #0
 81036fe:	d012      	beq.n	8103726 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8103700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103702:	689b      	ldr	r3, [r3, #8]
 8103704:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8103708:	f023 030f 	bic.w	r3, r3, #15
 810370c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 810370e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103710:	e009      	b.n	8103726 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103712:	687b      	ldr	r3, [r7, #4]
 8103714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103716:	f043 0220 	orr.w	r2, r3, #32
 810371a:	687b      	ldr	r3, [r7, #4]
 810371c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 810371e:	2301      	movs	r3, #1
 8103720:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8103724:	e000      	b.n	8103728 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103726:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8103728:	687b      	ldr	r3, [r7, #4]
 810372a:	2200      	movs	r2, #0
 810372c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8103730:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8103734:	4618      	mov	r0, r3
 8103736:	377c      	adds	r7, #124	; 0x7c
 8103738:	46bd      	mov	sp, r7
 810373a:	bd90      	pop	{r4, r7, pc}
 810373c:	40022000 	.word	0x40022000
 8103740:	40022100 	.word	0x40022100
 8103744:	40022300 	.word	0x40022300
 8103748:	58026300 	.word	0x58026300
 810374c:	58026000 	.word	0x58026000

08103750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103750:	b480      	push	{r7}
 8103752:	b085      	sub	sp, #20
 8103754:	af00      	add	r7, sp, #0
 8103756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8103758:	687b      	ldr	r3, [r7, #4]
 810375a:	f003 0307 	and.w	r3, r3, #7
 810375e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8103760:	4b0c      	ldr	r3, [pc, #48]	; (8103794 <__NVIC_SetPriorityGrouping+0x44>)
 8103762:	68db      	ldr	r3, [r3, #12]
 8103764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8103766:	68ba      	ldr	r2, [r7, #8]
 8103768:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 810376c:	4013      	ands	r3, r2
 810376e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8103770:	68fb      	ldr	r3, [r7, #12]
 8103772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8103774:	68bb      	ldr	r3, [r7, #8]
 8103776:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8103778:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 810377c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103780:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8103782:	4a04      	ldr	r2, [pc, #16]	; (8103794 <__NVIC_SetPriorityGrouping+0x44>)
 8103784:	68bb      	ldr	r3, [r7, #8]
 8103786:	60d3      	str	r3, [r2, #12]
}
 8103788:	bf00      	nop
 810378a:	3714      	adds	r7, #20
 810378c:	46bd      	mov	sp, r7
 810378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103792:	4770      	bx	lr
 8103794:	e000ed00 	.word	0xe000ed00

08103798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8103798:	b480      	push	{r7}
 810379a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 810379c:	4b04      	ldr	r3, [pc, #16]	; (81037b0 <__NVIC_GetPriorityGrouping+0x18>)
 810379e:	68db      	ldr	r3, [r3, #12]
 81037a0:	0a1b      	lsrs	r3, r3, #8
 81037a2:	f003 0307 	and.w	r3, r3, #7
}
 81037a6:	4618      	mov	r0, r3
 81037a8:	46bd      	mov	sp, r7
 81037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037ae:	4770      	bx	lr
 81037b0:	e000ed00 	.word	0xe000ed00

081037b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81037b4:	b480      	push	{r7}
 81037b6:	b083      	sub	sp, #12
 81037b8:	af00      	add	r7, sp, #0
 81037ba:	4603      	mov	r3, r0
 81037bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81037be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81037c2:	2b00      	cmp	r3, #0
 81037c4:	db0b      	blt.n	81037de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81037c6:	88fb      	ldrh	r3, [r7, #6]
 81037c8:	f003 021f 	and.w	r2, r3, #31
 81037cc:	4907      	ldr	r1, [pc, #28]	; (81037ec <__NVIC_EnableIRQ+0x38>)
 81037ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81037d2:	095b      	lsrs	r3, r3, #5
 81037d4:	2001      	movs	r0, #1
 81037d6:	fa00 f202 	lsl.w	r2, r0, r2
 81037da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81037de:	bf00      	nop
 81037e0:	370c      	adds	r7, #12
 81037e2:	46bd      	mov	sp, r7
 81037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037e8:	4770      	bx	lr
 81037ea:	bf00      	nop
 81037ec:	e000e100 	.word	0xe000e100

081037f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81037f0:	b480      	push	{r7}
 81037f2:	b083      	sub	sp, #12
 81037f4:	af00      	add	r7, sp, #0
 81037f6:	4603      	mov	r3, r0
 81037f8:	6039      	str	r1, [r7, #0]
 81037fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81037fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103800:	2b00      	cmp	r3, #0
 8103802:	db0a      	blt.n	810381a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103804:	683b      	ldr	r3, [r7, #0]
 8103806:	b2da      	uxtb	r2, r3
 8103808:	490c      	ldr	r1, [pc, #48]	; (810383c <__NVIC_SetPriority+0x4c>)
 810380a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810380e:	0112      	lsls	r2, r2, #4
 8103810:	b2d2      	uxtb	r2, r2
 8103812:	440b      	add	r3, r1
 8103814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8103818:	e00a      	b.n	8103830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810381a:	683b      	ldr	r3, [r7, #0]
 810381c:	b2da      	uxtb	r2, r3
 810381e:	4908      	ldr	r1, [pc, #32]	; (8103840 <__NVIC_SetPriority+0x50>)
 8103820:	88fb      	ldrh	r3, [r7, #6]
 8103822:	f003 030f 	and.w	r3, r3, #15
 8103826:	3b04      	subs	r3, #4
 8103828:	0112      	lsls	r2, r2, #4
 810382a:	b2d2      	uxtb	r2, r2
 810382c:	440b      	add	r3, r1
 810382e:	761a      	strb	r2, [r3, #24]
}
 8103830:	bf00      	nop
 8103832:	370c      	adds	r7, #12
 8103834:	46bd      	mov	sp, r7
 8103836:	f85d 7b04 	ldr.w	r7, [sp], #4
 810383a:	4770      	bx	lr
 810383c:	e000e100 	.word	0xe000e100
 8103840:	e000ed00 	.word	0xe000ed00

08103844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103844:	b480      	push	{r7}
 8103846:	b089      	sub	sp, #36	; 0x24
 8103848:	af00      	add	r7, sp, #0
 810384a:	60f8      	str	r0, [r7, #12]
 810384c:	60b9      	str	r1, [r7, #8]
 810384e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8103850:	68fb      	ldr	r3, [r7, #12]
 8103852:	f003 0307 	and.w	r3, r3, #7
 8103856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8103858:	69fb      	ldr	r3, [r7, #28]
 810385a:	f1c3 0307 	rsb	r3, r3, #7
 810385e:	2b04      	cmp	r3, #4
 8103860:	bf28      	it	cs
 8103862:	2304      	movcs	r3, #4
 8103864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8103866:	69fb      	ldr	r3, [r7, #28]
 8103868:	3304      	adds	r3, #4
 810386a:	2b06      	cmp	r3, #6
 810386c:	d902      	bls.n	8103874 <NVIC_EncodePriority+0x30>
 810386e:	69fb      	ldr	r3, [r7, #28]
 8103870:	3b03      	subs	r3, #3
 8103872:	e000      	b.n	8103876 <NVIC_EncodePriority+0x32>
 8103874:	2300      	movs	r3, #0
 8103876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103878:	f04f 32ff 	mov.w	r2, #4294967295
 810387c:	69bb      	ldr	r3, [r7, #24]
 810387e:	fa02 f303 	lsl.w	r3, r2, r3
 8103882:	43da      	mvns	r2, r3
 8103884:	68bb      	ldr	r3, [r7, #8]
 8103886:	401a      	ands	r2, r3
 8103888:	697b      	ldr	r3, [r7, #20]
 810388a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 810388c:	f04f 31ff 	mov.w	r1, #4294967295
 8103890:	697b      	ldr	r3, [r7, #20]
 8103892:	fa01 f303 	lsl.w	r3, r1, r3
 8103896:	43d9      	mvns	r1, r3
 8103898:	687b      	ldr	r3, [r7, #4]
 810389a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810389c:	4313      	orrs	r3, r2
         );
}
 810389e:	4618      	mov	r0, r3
 81038a0:	3724      	adds	r7, #36	; 0x24
 81038a2:	46bd      	mov	sp, r7
 81038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81038a8:	4770      	bx	lr

081038aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81038aa:	b580      	push	{r7, lr}
 81038ac:	b082      	sub	sp, #8
 81038ae:	af00      	add	r7, sp, #0
 81038b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81038b2:	6878      	ldr	r0, [r7, #4]
 81038b4:	f7ff ff4c 	bl	8103750 <__NVIC_SetPriorityGrouping>
}
 81038b8:	bf00      	nop
 81038ba:	3708      	adds	r7, #8
 81038bc:	46bd      	mov	sp, r7
 81038be:	bd80      	pop	{r7, pc}

081038c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81038c0:	b580      	push	{r7, lr}
 81038c2:	b086      	sub	sp, #24
 81038c4:	af00      	add	r7, sp, #0
 81038c6:	4603      	mov	r3, r0
 81038c8:	60b9      	str	r1, [r7, #8]
 81038ca:	607a      	str	r2, [r7, #4]
 81038cc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81038ce:	f7ff ff63 	bl	8103798 <__NVIC_GetPriorityGrouping>
 81038d2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81038d4:	687a      	ldr	r2, [r7, #4]
 81038d6:	68b9      	ldr	r1, [r7, #8]
 81038d8:	6978      	ldr	r0, [r7, #20]
 81038da:	f7ff ffb3 	bl	8103844 <NVIC_EncodePriority>
 81038de:	4602      	mov	r2, r0
 81038e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81038e4:	4611      	mov	r1, r2
 81038e6:	4618      	mov	r0, r3
 81038e8:	f7ff ff82 	bl	81037f0 <__NVIC_SetPriority>
}
 81038ec:	bf00      	nop
 81038ee:	3718      	adds	r7, #24
 81038f0:	46bd      	mov	sp, r7
 81038f2:	bd80      	pop	{r7, pc}

081038f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81038f4:	b580      	push	{r7, lr}
 81038f6:	b082      	sub	sp, #8
 81038f8:	af00      	add	r7, sp, #0
 81038fa:	4603      	mov	r3, r0
 81038fc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81038fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103902:	4618      	mov	r0, r3
 8103904:	f7ff ff56 	bl	81037b4 <__NVIC_EnableIRQ>
}
 8103908:	bf00      	nop
 810390a:	3708      	adds	r7, #8
 810390c:	46bd      	mov	sp, r7
 810390e:	bd80      	pop	{r7, pc}

08103910 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8103910:	b480      	push	{r7}
 8103912:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8103914:	4b07      	ldr	r3, [pc, #28]	; (8103934 <HAL_GetCurrentCPUID+0x24>)
 8103916:	681b      	ldr	r3, [r3, #0]
 8103918:	091b      	lsrs	r3, r3, #4
 810391a:	f003 030f 	and.w	r3, r3, #15
 810391e:	2b07      	cmp	r3, #7
 8103920:	d101      	bne.n	8103926 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8103922:	2303      	movs	r3, #3
 8103924:	e000      	b.n	8103928 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8103926:	2301      	movs	r3, #1
  }
}
 8103928:	4618      	mov	r0, r3
 810392a:	46bd      	mov	sp, r7
 810392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103930:	4770      	bx	lr
 8103932:	bf00      	nop
 8103934:	e000ed00 	.word	0xe000ed00

08103938 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8103938:	b580      	push	{r7, lr}
 810393a:	b086      	sub	sp, #24
 810393c:	af00      	add	r7, sp, #0
 810393e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8103940:	f7fd ff28 	bl	8101794 <HAL_GetTick>
 8103944:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8103946:	687b      	ldr	r3, [r7, #4]
 8103948:	2b00      	cmp	r3, #0
 810394a:	d101      	bne.n	8103950 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 810394c:	2301      	movs	r3, #1
 810394e:	e314      	b.n	8103f7a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103950:	687b      	ldr	r3, [r7, #4]
 8103952:	681b      	ldr	r3, [r3, #0]
 8103954:	4a66      	ldr	r2, [pc, #408]	; (8103af0 <HAL_DMA_Init+0x1b8>)
 8103956:	4293      	cmp	r3, r2
 8103958:	d04a      	beq.n	81039f0 <HAL_DMA_Init+0xb8>
 810395a:	687b      	ldr	r3, [r7, #4]
 810395c:	681b      	ldr	r3, [r3, #0]
 810395e:	4a65      	ldr	r2, [pc, #404]	; (8103af4 <HAL_DMA_Init+0x1bc>)
 8103960:	4293      	cmp	r3, r2
 8103962:	d045      	beq.n	81039f0 <HAL_DMA_Init+0xb8>
 8103964:	687b      	ldr	r3, [r7, #4]
 8103966:	681b      	ldr	r3, [r3, #0]
 8103968:	4a63      	ldr	r2, [pc, #396]	; (8103af8 <HAL_DMA_Init+0x1c0>)
 810396a:	4293      	cmp	r3, r2
 810396c:	d040      	beq.n	81039f0 <HAL_DMA_Init+0xb8>
 810396e:	687b      	ldr	r3, [r7, #4]
 8103970:	681b      	ldr	r3, [r3, #0]
 8103972:	4a62      	ldr	r2, [pc, #392]	; (8103afc <HAL_DMA_Init+0x1c4>)
 8103974:	4293      	cmp	r3, r2
 8103976:	d03b      	beq.n	81039f0 <HAL_DMA_Init+0xb8>
 8103978:	687b      	ldr	r3, [r7, #4]
 810397a:	681b      	ldr	r3, [r3, #0]
 810397c:	4a60      	ldr	r2, [pc, #384]	; (8103b00 <HAL_DMA_Init+0x1c8>)
 810397e:	4293      	cmp	r3, r2
 8103980:	d036      	beq.n	81039f0 <HAL_DMA_Init+0xb8>
 8103982:	687b      	ldr	r3, [r7, #4]
 8103984:	681b      	ldr	r3, [r3, #0]
 8103986:	4a5f      	ldr	r2, [pc, #380]	; (8103b04 <HAL_DMA_Init+0x1cc>)
 8103988:	4293      	cmp	r3, r2
 810398a:	d031      	beq.n	81039f0 <HAL_DMA_Init+0xb8>
 810398c:	687b      	ldr	r3, [r7, #4]
 810398e:	681b      	ldr	r3, [r3, #0]
 8103990:	4a5d      	ldr	r2, [pc, #372]	; (8103b08 <HAL_DMA_Init+0x1d0>)
 8103992:	4293      	cmp	r3, r2
 8103994:	d02c      	beq.n	81039f0 <HAL_DMA_Init+0xb8>
 8103996:	687b      	ldr	r3, [r7, #4]
 8103998:	681b      	ldr	r3, [r3, #0]
 810399a:	4a5c      	ldr	r2, [pc, #368]	; (8103b0c <HAL_DMA_Init+0x1d4>)
 810399c:	4293      	cmp	r3, r2
 810399e:	d027      	beq.n	81039f0 <HAL_DMA_Init+0xb8>
 81039a0:	687b      	ldr	r3, [r7, #4]
 81039a2:	681b      	ldr	r3, [r3, #0]
 81039a4:	4a5a      	ldr	r2, [pc, #360]	; (8103b10 <HAL_DMA_Init+0x1d8>)
 81039a6:	4293      	cmp	r3, r2
 81039a8:	d022      	beq.n	81039f0 <HAL_DMA_Init+0xb8>
 81039aa:	687b      	ldr	r3, [r7, #4]
 81039ac:	681b      	ldr	r3, [r3, #0]
 81039ae:	4a59      	ldr	r2, [pc, #356]	; (8103b14 <HAL_DMA_Init+0x1dc>)
 81039b0:	4293      	cmp	r3, r2
 81039b2:	d01d      	beq.n	81039f0 <HAL_DMA_Init+0xb8>
 81039b4:	687b      	ldr	r3, [r7, #4]
 81039b6:	681b      	ldr	r3, [r3, #0]
 81039b8:	4a57      	ldr	r2, [pc, #348]	; (8103b18 <HAL_DMA_Init+0x1e0>)
 81039ba:	4293      	cmp	r3, r2
 81039bc:	d018      	beq.n	81039f0 <HAL_DMA_Init+0xb8>
 81039be:	687b      	ldr	r3, [r7, #4]
 81039c0:	681b      	ldr	r3, [r3, #0]
 81039c2:	4a56      	ldr	r2, [pc, #344]	; (8103b1c <HAL_DMA_Init+0x1e4>)
 81039c4:	4293      	cmp	r3, r2
 81039c6:	d013      	beq.n	81039f0 <HAL_DMA_Init+0xb8>
 81039c8:	687b      	ldr	r3, [r7, #4]
 81039ca:	681b      	ldr	r3, [r3, #0]
 81039cc:	4a54      	ldr	r2, [pc, #336]	; (8103b20 <HAL_DMA_Init+0x1e8>)
 81039ce:	4293      	cmp	r3, r2
 81039d0:	d00e      	beq.n	81039f0 <HAL_DMA_Init+0xb8>
 81039d2:	687b      	ldr	r3, [r7, #4]
 81039d4:	681b      	ldr	r3, [r3, #0]
 81039d6:	4a53      	ldr	r2, [pc, #332]	; (8103b24 <HAL_DMA_Init+0x1ec>)
 81039d8:	4293      	cmp	r3, r2
 81039da:	d009      	beq.n	81039f0 <HAL_DMA_Init+0xb8>
 81039dc:	687b      	ldr	r3, [r7, #4]
 81039de:	681b      	ldr	r3, [r3, #0]
 81039e0:	4a51      	ldr	r2, [pc, #324]	; (8103b28 <HAL_DMA_Init+0x1f0>)
 81039e2:	4293      	cmp	r3, r2
 81039e4:	d004      	beq.n	81039f0 <HAL_DMA_Init+0xb8>
 81039e6:	687b      	ldr	r3, [r7, #4]
 81039e8:	681b      	ldr	r3, [r3, #0]
 81039ea:	4a50      	ldr	r2, [pc, #320]	; (8103b2c <HAL_DMA_Init+0x1f4>)
 81039ec:	4293      	cmp	r3, r2
 81039ee:	d101      	bne.n	81039f4 <HAL_DMA_Init+0xbc>
 81039f0:	2301      	movs	r3, #1
 81039f2:	e000      	b.n	81039f6 <HAL_DMA_Init+0xbe>
 81039f4:	2300      	movs	r3, #0
 81039f6:	2b00      	cmp	r3, #0
 81039f8:	f000 813b 	beq.w	8103c72 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 81039fc:	687b      	ldr	r3, [r7, #4]
 81039fe:	2200      	movs	r2, #0
 8103a00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8103a04:	687b      	ldr	r3, [r7, #4]
 8103a06:	2202      	movs	r2, #2
 8103a08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8103a0c:	687b      	ldr	r3, [r7, #4]
 8103a0e:	681b      	ldr	r3, [r3, #0]
 8103a10:	4a37      	ldr	r2, [pc, #220]	; (8103af0 <HAL_DMA_Init+0x1b8>)
 8103a12:	4293      	cmp	r3, r2
 8103a14:	d04a      	beq.n	8103aac <HAL_DMA_Init+0x174>
 8103a16:	687b      	ldr	r3, [r7, #4]
 8103a18:	681b      	ldr	r3, [r3, #0]
 8103a1a:	4a36      	ldr	r2, [pc, #216]	; (8103af4 <HAL_DMA_Init+0x1bc>)
 8103a1c:	4293      	cmp	r3, r2
 8103a1e:	d045      	beq.n	8103aac <HAL_DMA_Init+0x174>
 8103a20:	687b      	ldr	r3, [r7, #4]
 8103a22:	681b      	ldr	r3, [r3, #0]
 8103a24:	4a34      	ldr	r2, [pc, #208]	; (8103af8 <HAL_DMA_Init+0x1c0>)
 8103a26:	4293      	cmp	r3, r2
 8103a28:	d040      	beq.n	8103aac <HAL_DMA_Init+0x174>
 8103a2a:	687b      	ldr	r3, [r7, #4]
 8103a2c:	681b      	ldr	r3, [r3, #0]
 8103a2e:	4a33      	ldr	r2, [pc, #204]	; (8103afc <HAL_DMA_Init+0x1c4>)
 8103a30:	4293      	cmp	r3, r2
 8103a32:	d03b      	beq.n	8103aac <HAL_DMA_Init+0x174>
 8103a34:	687b      	ldr	r3, [r7, #4]
 8103a36:	681b      	ldr	r3, [r3, #0]
 8103a38:	4a31      	ldr	r2, [pc, #196]	; (8103b00 <HAL_DMA_Init+0x1c8>)
 8103a3a:	4293      	cmp	r3, r2
 8103a3c:	d036      	beq.n	8103aac <HAL_DMA_Init+0x174>
 8103a3e:	687b      	ldr	r3, [r7, #4]
 8103a40:	681b      	ldr	r3, [r3, #0]
 8103a42:	4a30      	ldr	r2, [pc, #192]	; (8103b04 <HAL_DMA_Init+0x1cc>)
 8103a44:	4293      	cmp	r3, r2
 8103a46:	d031      	beq.n	8103aac <HAL_DMA_Init+0x174>
 8103a48:	687b      	ldr	r3, [r7, #4]
 8103a4a:	681b      	ldr	r3, [r3, #0]
 8103a4c:	4a2e      	ldr	r2, [pc, #184]	; (8103b08 <HAL_DMA_Init+0x1d0>)
 8103a4e:	4293      	cmp	r3, r2
 8103a50:	d02c      	beq.n	8103aac <HAL_DMA_Init+0x174>
 8103a52:	687b      	ldr	r3, [r7, #4]
 8103a54:	681b      	ldr	r3, [r3, #0]
 8103a56:	4a2d      	ldr	r2, [pc, #180]	; (8103b0c <HAL_DMA_Init+0x1d4>)
 8103a58:	4293      	cmp	r3, r2
 8103a5a:	d027      	beq.n	8103aac <HAL_DMA_Init+0x174>
 8103a5c:	687b      	ldr	r3, [r7, #4]
 8103a5e:	681b      	ldr	r3, [r3, #0]
 8103a60:	4a2b      	ldr	r2, [pc, #172]	; (8103b10 <HAL_DMA_Init+0x1d8>)
 8103a62:	4293      	cmp	r3, r2
 8103a64:	d022      	beq.n	8103aac <HAL_DMA_Init+0x174>
 8103a66:	687b      	ldr	r3, [r7, #4]
 8103a68:	681b      	ldr	r3, [r3, #0]
 8103a6a:	4a2a      	ldr	r2, [pc, #168]	; (8103b14 <HAL_DMA_Init+0x1dc>)
 8103a6c:	4293      	cmp	r3, r2
 8103a6e:	d01d      	beq.n	8103aac <HAL_DMA_Init+0x174>
 8103a70:	687b      	ldr	r3, [r7, #4]
 8103a72:	681b      	ldr	r3, [r3, #0]
 8103a74:	4a28      	ldr	r2, [pc, #160]	; (8103b18 <HAL_DMA_Init+0x1e0>)
 8103a76:	4293      	cmp	r3, r2
 8103a78:	d018      	beq.n	8103aac <HAL_DMA_Init+0x174>
 8103a7a:	687b      	ldr	r3, [r7, #4]
 8103a7c:	681b      	ldr	r3, [r3, #0]
 8103a7e:	4a27      	ldr	r2, [pc, #156]	; (8103b1c <HAL_DMA_Init+0x1e4>)
 8103a80:	4293      	cmp	r3, r2
 8103a82:	d013      	beq.n	8103aac <HAL_DMA_Init+0x174>
 8103a84:	687b      	ldr	r3, [r7, #4]
 8103a86:	681b      	ldr	r3, [r3, #0]
 8103a88:	4a25      	ldr	r2, [pc, #148]	; (8103b20 <HAL_DMA_Init+0x1e8>)
 8103a8a:	4293      	cmp	r3, r2
 8103a8c:	d00e      	beq.n	8103aac <HAL_DMA_Init+0x174>
 8103a8e:	687b      	ldr	r3, [r7, #4]
 8103a90:	681b      	ldr	r3, [r3, #0]
 8103a92:	4a24      	ldr	r2, [pc, #144]	; (8103b24 <HAL_DMA_Init+0x1ec>)
 8103a94:	4293      	cmp	r3, r2
 8103a96:	d009      	beq.n	8103aac <HAL_DMA_Init+0x174>
 8103a98:	687b      	ldr	r3, [r7, #4]
 8103a9a:	681b      	ldr	r3, [r3, #0]
 8103a9c:	4a22      	ldr	r2, [pc, #136]	; (8103b28 <HAL_DMA_Init+0x1f0>)
 8103a9e:	4293      	cmp	r3, r2
 8103aa0:	d004      	beq.n	8103aac <HAL_DMA_Init+0x174>
 8103aa2:	687b      	ldr	r3, [r7, #4]
 8103aa4:	681b      	ldr	r3, [r3, #0]
 8103aa6:	4a21      	ldr	r2, [pc, #132]	; (8103b2c <HAL_DMA_Init+0x1f4>)
 8103aa8:	4293      	cmp	r3, r2
 8103aaa:	d108      	bne.n	8103abe <HAL_DMA_Init+0x186>
 8103aac:	687b      	ldr	r3, [r7, #4]
 8103aae:	681b      	ldr	r3, [r3, #0]
 8103ab0:	681a      	ldr	r2, [r3, #0]
 8103ab2:	687b      	ldr	r3, [r7, #4]
 8103ab4:	681b      	ldr	r3, [r3, #0]
 8103ab6:	f022 0201 	bic.w	r2, r2, #1
 8103aba:	601a      	str	r2, [r3, #0]
 8103abc:	e007      	b.n	8103ace <HAL_DMA_Init+0x196>
 8103abe:	687b      	ldr	r3, [r7, #4]
 8103ac0:	681b      	ldr	r3, [r3, #0]
 8103ac2:	681a      	ldr	r2, [r3, #0]
 8103ac4:	687b      	ldr	r3, [r7, #4]
 8103ac6:	681b      	ldr	r3, [r3, #0]
 8103ac8:	f022 0201 	bic.w	r2, r2, #1
 8103acc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8103ace:	e02f      	b.n	8103b30 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8103ad0:	f7fd fe60 	bl	8101794 <HAL_GetTick>
 8103ad4:	4602      	mov	r2, r0
 8103ad6:	693b      	ldr	r3, [r7, #16]
 8103ad8:	1ad3      	subs	r3, r2, r3
 8103ada:	2b05      	cmp	r3, #5
 8103adc:	d928      	bls.n	8103b30 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8103ade:	687b      	ldr	r3, [r7, #4]
 8103ae0:	2220      	movs	r2, #32
 8103ae2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8103ae4:	687b      	ldr	r3, [r7, #4]
 8103ae6:	2203      	movs	r2, #3
 8103ae8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8103aec:	2301      	movs	r3, #1
 8103aee:	e244      	b.n	8103f7a <HAL_DMA_Init+0x642>
 8103af0:	40020010 	.word	0x40020010
 8103af4:	40020028 	.word	0x40020028
 8103af8:	40020040 	.word	0x40020040
 8103afc:	40020058 	.word	0x40020058
 8103b00:	40020070 	.word	0x40020070
 8103b04:	40020088 	.word	0x40020088
 8103b08:	400200a0 	.word	0x400200a0
 8103b0c:	400200b8 	.word	0x400200b8
 8103b10:	40020410 	.word	0x40020410
 8103b14:	40020428 	.word	0x40020428
 8103b18:	40020440 	.word	0x40020440
 8103b1c:	40020458 	.word	0x40020458
 8103b20:	40020470 	.word	0x40020470
 8103b24:	40020488 	.word	0x40020488
 8103b28:	400204a0 	.word	0x400204a0
 8103b2c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8103b30:	687b      	ldr	r3, [r7, #4]
 8103b32:	681b      	ldr	r3, [r3, #0]
 8103b34:	681b      	ldr	r3, [r3, #0]
 8103b36:	f003 0301 	and.w	r3, r3, #1
 8103b3a:	2b00      	cmp	r3, #0
 8103b3c:	d1c8      	bne.n	8103ad0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8103b3e:	687b      	ldr	r3, [r7, #4]
 8103b40:	681b      	ldr	r3, [r3, #0]
 8103b42:	681b      	ldr	r3, [r3, #0]
 8103b44:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8103b46:	697a      	ldr	r2, [r7, #20]
 8103b48:	4b84      	ldr	r3, [pc, #528]	; (8103d5c <HAL_DMA_Init+0x424>)
 8103b4a:	4013      	ands	r3, r2
 8103b4c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8103b4e:	687b      	ldr	r3, [r7, #4]
 8103b50:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8103b52:	687b      	ldr	r3, [r7, #4]
 8103b54:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8103b56:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8103b58:	687b      	ldr	r3, [r7, #4]
 8103b5a:	691b      	ldr	r3, [r3, #16]
 8103b5c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8103b5e:	687b      	ldr	r3, [r7, #4]
 8103b60:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8103b62:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8103b64:	687b      	ldr	r3, [r7, #4]
 8103b66:	699b      	ldr	r3, [r3, #24]
 8103b68:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8103b6a:	687b      	ldr	r3, [r7, #4]
 8103b6c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8103b6e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8103b70:	687b      	ldr	r3, [r7, #4]
 8103b72:	6a1b      	ldr	r3, [r3, #32]
 8103b74:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8103b76:	697a      	ldr	r2, [r7, #20]
 8103b78:	4313      	orrs	r3, r2
 8103b7a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8103b7c:	687b      	ldr	r3, [r7, #4]
 8103b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103b80:	2b04      	cmp	r3, #4
 8103b82:	d107      	bne.n	8103b94 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8103b84:	687b      	ldr	r3, [r7, #4]
 8103b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103b88:	687b      	ldr	r3, [r7, #4]
 8103b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103b8c:	4313      	orrs	r3, r2
 8103b8e:	697a      	ldr	r2, [r7, #20]
 8103b90:	4313      	orrs	r3, r2
 8103b92:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8103b94:	4b72      	ldr	r3, [pc, #456]	; (8103d60 <HAL_DMA_Init+0x428>)
 8103b96:	681b      	ldr	r3, [r3, #0]
 8103b98:	0c1b      	lsrs	r3, r3, #16
 8103b9a:	041b      	lsls	r3, r3, #16
 8103b9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103ba0:	d328      	bcc.n	8103bf4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8103ba2:	687b      	ldr	r3, [r7, #4]
 8103ba4:	685b      	ldr	r3, [r3, #4]
 8103ba6:	2b28      	cmp	r3, #40	; 0x28
 8103ba8:	d903      	bls.n	8103bb2 <HAL_DMA_Init+0x27a>
 8103baa:	687b      	ldr	r3, [r7, #4]
 8103bac:	685b      	ldr	r3, [r3, #4]
 8103bae:	2b2e      	cmp	r3, #46	; 0x2e
 8103bb0:	d917      	bls.n	8103be2 <HAL_DMA_Init+0x2aa>
 8103bb2:	687b      	ldr	r3, [r7, #4]
 8103bb4:	685b      	ldr	r3, [r3, #4]
 8103bb6:	2b3e      	cmp	r3, #62	; 0x3e
 8103bb8:	d903      	bls.n	8103bc2 <HAL_DMA_Init+0x28a>
 8103bba:	687b      	ldr	r3, [r7, #4]
 8103bbc:	685b      	ldr	r3, [r3, #4]
 8103bbe:	2b42      	cmp	r3, #66	; 0x42
 8103bc0:	d90f      	bls.n	8103be2 <HAL_DMA_Init+0x2aa>
 8103bc2:	687b      	ldr	r3, [r7, #4]
 8103bc4:	685b      	ldr	r3, [r3, #4]
 8103bc6:	2b46      	cmp	r3, #70	; 0x46
 8103bc8:	d903      	bls.n	8103bd2 <HAL_DMA_Init+0x29a>
 8103bca:	687b      	ldr	r3, [r7, #4]
 8103bcc:	685b      	ldr	r3, [r3, #4]
 8103bce:	2b48      	cmp	r3, #72	; 0x48
 8103bd0:	d907      	bls.n	8103be2 <HAL_DMA_Init+0x2aa>
 8103bd2:	687b      	ldr	r3, [r7, #4]
 8103bd4:	685b      	ldr	r3, [r3, #4]
 8103bd6:	2b4e      	cmp	r3, #78	; 0x4e
 8103bd8:	d905      	bls.n	8103be6 <HAL_DMA_Init+0x2ae>
 8103bda:	687b      	ldr	r3, [r7, #4]
 8103bdc:	685b      	ldr	r3, [r3, #4]
 8103bde:	2b52      	cmp	r3, #82	; 0x52
 8103be0:	d801      	bhi.n	8103be6 <HAL_DMA_Init+0x2ae>
 8103be2:	2301      	movs	r3, #1
 8103be4:	e000      	b.n	8103be8 <HAL_DMA_Init+0x2b0>
 8103be6:	2300      	movs	r3, #0
 8103be8:	2b00      	cmp	r3, #0
 8103bea:	d003      	beq.n	8103bf4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8103bec:	697b      	ldr	r3, [r7, #20]
 8103bee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8103bf2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8103bf4:	687b      	ldr	r3, [r7, #4]
 8103bf6:	681b      	ldr	r3, [r3, #0]
 8103bf8:	697a      	ldr	r2, [r7, #20]
 8103bfa:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8103bfc:	687b      	ldr	r3, [r7, #4]
 8103bfe:	681b      	ldr	r3, [r3, #0]
 8103c00:	695b      	ldr	r3, [r3, #20]
 8103c02:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8103c04:	697b      	ldr	r3, [r7, #20]
 8103c06:	f023 0307 	bic.w	r3, r3, #7
 8103c0a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8103c0c:	687b      	ldr	r3, [r7, #4]
 8103c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103c10:	697a      	ldr	r2, [r7, #20]
 8103c12:	4313      	orrs	r3, r2
 8103c14:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8103c16:	687b      	ldr	r3, [r7, #4]
 8103c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103c1a:	2b04      	cmp	r3, #4
 8103c1c:	d117      	bne.n	8103c4e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8103c1e:	687b      	ldr	r3, [r7, #4]
 8103c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103c22:	697a      	ldr	r2, [r7, #20]
 8103c24:	4313      	orrs	r3, r2
 8103c26:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8103c28:	687b      	ldr	r3, [r7, #4]
 8103c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103c2c:	2b00      	cmp	r3, #0
 8103c2e:	d00e      	beq.n	8103c4e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8103c30:	6878      	ldr	r0, [r7, #4]
 8103c32:	f002 fb2f 	bl	8106294 <DMA_CheckFifoParam>
 8103c36:	4603      	mov	r3, r0
 8103c38:	2b00      	cmp	r3, #0
 8103c3a:	d008      	beq.n	8103c4e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8103c3c:	687b      	ldr	r3, [r7, #4]
 8103c3e:	2240      	movs	r2, #64	; 0x40
 8103c40:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8103c42:	687b      	ldr	r3, [r7, #4]
 8103c44:	2201      	movs	r2, #1
 8103c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8103c4a:	2301      	movs	r3, #1
 8103c4c:	e195      	b.n	8103f7a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8103c4e:	687b      	ldr	r3, [r7, #4]
 8103c50:	681b      	ldr	r3, [r3, #0]
 8103c52:	697a      	ldr	r2, [r7, #20]
 8103c54:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8103c56:	6878      	ldr	r0, [r7, #4]
 8103c58:	f002 fa6a 	bl	8106130 <DMA_CalcBaseAndBitshift>
 8103c5c:	4603      	mov	r3, r0
 8103c5e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8103c60:	687b      	ldr	r3, [r7, #4]
 8103c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103c64:	f003 031f 	and.w	r3, r3, #31
 8103c68:	223f      	movs	r2, #63	; 0x3f
 8103c6a:	409a      	lsls	r2, r3
 8103c6c:	68bb      	ldr	r3, [r7, #8]
 8103c6e:	609a      	str	r2, [r3, #8]
 8103c70:	e0cb      	b.n	8103e0a <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8103c72:	687b      	ldr	r3, [r7, #4]
 8103c74:	681b      	ldr	r3, [r3, #0]
 8103c76:	4a3b      	ldr	r2, [pc, #236]	; (8103d64 <HAL_DMA_Init+0x42c>)
 8103c78:	4293      	cmp	r3, r2
 8103c7a:	d022      	beq.n	8103cc2 <HAL_DMA_Init+0x38a>
 8103c7c:	687b      	ldr	r3, [r7, #4]
 8103c7e:	681b      	ldr	r3, [r3, #0]
 8103c80:	4a39      	ldr	r2, [pc, #228]	; (8103d68 <HAL_DMA_Init+0x430>)
 8103c82:	4293      	cmp	r3, r2
 8103c84:	d01d      	beq.n	8103cc2 <HAL_DMA_Init+0x38a>
 8103c86:	687b      	ldr	r3, [r7, #4]
 8103c88:	681b      	ldr	r3, [r3, #0]
 8103c8a:	4a38      	ldr	r2, [pc, #224]	; (8103d6c <HAL_DMA_Init+0x434>)
 8103c8c:	4293      	cmp	r3, r2
 8103c8e:	d018      	beq.n	8103cc2 <HAL_DMA_Init+0x38a>
 8103c90:	687b      	ldr	r3, [r7, #4]
 8103c92:	681b      	ldr	r3, [r3, #0]
 8103c94:	4a36      	ldr	r2, [pc, #216]	; (8103d70 <HAL_DMA_Init+0x438>)
 8103c96:	4293      	cmp	r3, r2
 8103c98:	d013      	beq.n	8103cc2 <HAL_DMA_Init+0x38a>
 8103c9a:	687b      	ldr	r3, [r7, #4]
 8103c9c:	681b      	ldr	r3, [r3, #0]
 8103c9e:	4a35      	ldr	r2, [pc, #212]	; (8103d74 <HAL_DMA_Init+0x43c>)
 8103ca0:	4293      	cmp	r3, r2
 8103ca2:	d00e      	beq.n	8103cc2 <HAL_DMA_Init+0x38a>
 8103ca4:	687b      	ldr	r3, [r7, #4]
 8103ca6:	681b      	ldr	r3, [r3, #0]
 8103ca8:	4a33      	ldr	r2, [pc, #204]	; (8103d78 <HAL_DMA_Init+0x440>)
 8103caa:	4293      	cmp	r3, r2
 8103cac:	d009      	beq.n	8103cc2 <HAL_DMA_Init+0x38a>
 8103cae:	687b      	ldr	r3, [r7, #4]
 8103cb0:	681b      	ldr	r3, [r3, #0]
 8103cb2:	4a32      	ldr	r2, [pc, #200]	; (8103d7c <HAL_DMA_Init+0x444>)
 8103cb4:	4293      	cmp	r3, r2
 8103cb6:	d004      	beq.n	8103cc2 <HAL_DMA_Init+0x38a>
 8103cb8:	687b      	ldr	r3, [r7, #4]
 8103cba:	681b      	ldr	r3, [r3, #0]
 8103cbc:	4a30      	ldr	r2, [pc, #192]	; (8103d80 <HAL_DMA_Init+0x448>)
 8103cbe:	4293      	cmp	r3, r2
 8103cc0:	d101      	bne.n	8103cc6 <HAL_DMA_Init+0x38e>
 8103cc2:	2301      	movs	r3, #1
 8103cc4:	e000      	b.n	8103cc8 <HAL_DMA_Init+0x390>
 8103cc6:	2300      	movs	r3, #0
 8103cc8:	2b00      	cmp	r3, #0
 8103cca:	f000 8095 	beq.w	8103df8 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8103cce:	687b      	ldr	r3, [r7, #4]
 8103cd0:	681b      	ldr	r3, [r3, #0]
 8103cd2:	4a24      	ldr	r2, [pc, #144]	; (8103d64 <HAL_DMA_Init+0x42c>)
 8103cd4:	4293      	cmp	r3, r2
 8103cd6:	d021      	beq.n	8103d1c <HAL_DMA_Init+0x3e4>
 8103cd8:	687b      	ldr	r3, [r7, #4]
 8103cda:	681b      	ldr	r3, [r3, #0]
 8103cdc:	4a22      	ldr	r2, [pc, #136]	; (8103d68 <HAL_DMA_Init+0x430>)
 8103cde:	4293      	cmp	r3, r2
 8103ce0:	d01c      	beq.n	8103d1c <HAL_DMA_Init+0x3e4>
 8103ce2:	687b      	ldr	r3, [r7, #4]
 8103ce4:	681b      	ldr	r3, [r3, #0]
 8103ce6:	4a21      	ldr	r2, [pc, #132]	; (8103d6c <HAL_DMA_Init+0x434>)
 8103ce8:	4293      	cmp	r3, r2
 8103cea:	d017      	beq.n	8103d1c <HAL_DMA_Init+0x3e4>
 8103cec:	687b      	ldr	r3, [r7, #4]
 8103cee:	681b      	ldr	r3, [r3, #0]
 8103cf0:	4a1f      	ldr	r2, [pc, #124]	; (8103d70 <HAL_DMA_Init+0x438>)
 8103cf2:	4293      	cmp	r3, r2
 8103cf4:	d012      	beq.n	8103d1c <HAL_DMA_Init+0x3e4>
 8103cf6:	687b      	ldr	r3, [r7, #4]
 8103cf8:	681b      	ldr	r3, [r3, #0]
 8103cfa:	4a1e      	ldr	r2, [pc, #120]	; (8103d74 <HAL_DMA_Init+0x43c>)
 8103cfc:	4293      	cmp	r3, r2
 8103cfe:	d00d      	beq.n	8103d1c <HAL_DMA_Init+0x3e4>
 8103d00:	687b      	ldr	r3, [r7, #4]
 8103d02:	681b      	ldr	r3, [r3, #0]
 8103d04:	4a1c      	ldr	r2, [pc, #112]	; (8103d78 <HAL_DMA_Init+0x440>)
 8103d06:	4293      	cmp	r3, r2
 8103d08:	d008      	beq.n	8103d1c <HAL_DMA_Init+0x3e4>
 8103d0a:	687b      	ldr	r3, [r7, #4]
 8103d0c:	681b      	ldr	r3, [r3, #0]
 8103d0e:	4a1b      	ldr	r2, [pc, #108]	; (8103d7c <HAL_DMA_Init+0x444>)
 8103d10:	4293      	cmp	r3, r2
 8103d12:	d003      	beq.n	8103d1c <HAL_DMA_Init+0x3e4>
 8103d14:	687b      	ldr	r3, [r7, #4]
 8103d16:	681b      	ldr	r3, [r3, #0]
 8103d18:	4a19      	ldr	r2, [pc, #100]	; (8103d80 <HAL_DMA_Init+0x448>)
 8103d1a:	4293      	cmp	r3, r2
 8103d1c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8103d1e:	687b      	ldr	r3, [r7, #4]
 8103d20:	2200      	movs	r2, #0
 8103d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8103d26:	687b      	ldr	r3, [r7, #4]
 8103d28:	2202      	movs	r2, #2
 8103d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8103d2e:	687b      	ldr	r3, [r7, #4]
 8103d30:	681b      	ldr	r3, [r3, #0]
 8103d32:	681b      	ldr	r3, [r3, #0]
 8103d34:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8103d36:	697b      	ldr	r3, [r7, #20]
 8103d38:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8103d3c:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8103d40:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8103d42:	687b      	ldr	r3, [r7, #4]
 8103d44:	689b      	ldr	r3, [r3, #8]
 8103d46:	2b40      	cmp	r3, #64	; 0x40
 8103d48:	d01c      	beq.n	8103d84 <HAL_DMA_Init+0x44c>
 8103d4a:	687b      	ldr	r3, [r7, #4]
 8103d4c:	689b      	ldr	r3, [r3, #8]
 8103d4e:	2b80      	cmp	r3, #128	; 0x80
 8103d50:	d102      	bne.n	8103d58 <HAL_DMA_Init+0x420>
 8103d52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8103d56:	e016      	b.n	8103d86 <HAL_DMA_Init+0x44e>
 8103d58:	2300      	movs	r3, #0
 8103d5a:	e014      	b.n	8103d86 <HAL_DMA_Init+0x44e>
 8103d5c:	fe10803f 	.word	0xfe10803f
 8103d60:	5c001000 	.word	0x5c001000
 8103d64:	58025408 	.word	0x58025408
 8103d68:	5802541c 	.word	0x5802541c
 8103d6c:	58025430 	.word	0x58025430
 8103d70:	58025444 	.word	0x58025444
 8103d74:	58025458 	.word	0x58025458
 8103d78:	5802546c 	.word	0x5802546c
 8103d7c:	58025480 	.word	0x58025480
 8103d80:	58025494 	.word	0x58025494
 8103d84:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8103d86:	687a      	ldr	r2, [r7, #4]
 8103d88:	68d2      	ldr	r2, [r2, #12]
 8103d8a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8103d8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8103d8e:	687b      	ldr	r3, [r7, #4]
 8103d90:	691b      	ldr	r3, [r3, #16]
 8103d92:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8103d94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8103d96:	687b      	ldr	r3, [r7, #4]
 8103d98:	695b      	ldr	r3, [r3, #20]
 8103d9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8103d9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8103d9e:	687b      	ldr	r3, [r7, #4]
 8103da0:	699b      	ldr	r3, [r3, #24]
 8103da2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8103da4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8103da6:	687b      	ldr	r3, [r7, #4]
 8103da8:	69db      	ldr	r3, [r3, #28]
 8103daa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8103dac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8103dae:	687b      	ldr	r3, [r7, #4]
 8103db0:	6a1b      	ldr	r3, [r3, #32]
 8103db2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8103db4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8103db6:	697a      	ldr	r2, [r7, #20]
 8103db8:	4313      	orrs	r3, r2
 8103dba:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8103dbc:	687b      	ldr	r3, [r7, #4]
 8103dbe:	681b      	ldr	r3, [r3, #0]
 8103dc0:	697a      	ldr	r2, [r7, #20]
 8103dc2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8103dc4:	687b      	ldr	r3, [r7, #4]
 8103dc6:	681b      	ldr	r3, [r3, #0]
 8103dc8:	461a      	mov	r2, r3
 8103dca:	4b6e      	ldr	r3, [pc, #440]	; (8103f84 <HAL_DMA_Init+0x64c>)
 8103dcc:	4413      	add	r3, r2
 8103dce:	4a6e      	ldr	r2, [pc, #440]	; (8103f88 <HAL_DMA_Init+0x650>)
 8103dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8103dd4:	091b      	lsrs	r3, r3, #4
 8103dd6:	009a      	lsls	r2, r3, #2
 8103dd8:	687b      	ldr	r3, [r7, #4]
 8103dda:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8103ddc:	6878      	ldr	r0, [r7, #4]
 8103dde:	f002 f9a7 	bl	8106130 <DMA_CalcBaseAndBitshift>
 8103de2:	4603      	mov	r3, r0
 8103de4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8103de6:	687b      	ldr	r3, [r7, #4]
 8103de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103dea:	f003 031f 	and.w	r3, r3, #31
 8103dee:	2201      	movs	r2, #1
 8103df0:	409a      	lsls	r2, r3
 8103df2:	68fb      	ldr	r3, [r7, #12]
 8103df4:	605a      	str	r2, [r3, #4]
 8103df6:	e008      	b.n	8103e0a <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8103df8:	687b      	ldr	r3, [r7, #4]
 8103dfa:	2240      	movs	r2, #64	; 0x40
 8103dfc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8103dfe:	687b      	ldr	r3, [r7, #4]
 8103e00:	2203      	movs	r2, #3
 8103e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8103e06:	2301      	movs	r3, #1
 8103e08:	e0b7      	b.n	8103f7a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103e0a:	687b      	ldr	r3, [r7, #4]
 8103e0c:	681b      	ldr	r3, [r3, #0]
 8103e0e:	4a5f      	ldr	r2, [pc, #380]	; (8103f8c <HAL_DMA_Init+0x654>)
 8103e10:	4293      	cmp	r3, r2
 8103e12:	d072      	beq.n	8103efa <HAL_DMA_Init+0x5c2>
 8103e14:	687b      	ldr	r3, [r7, #4]
 8103e16:	681b      	ldr	r3, [r3, #0]
 8103e18:	4a5d      	ldr	r2, [pc, #372]	; (8103f90 <HAL_DMA_Init+0x658>)
 8103e1a:	4293      	cmp	r3, r2
 8103e1c:	d06d      	beq.n	8103efa <HAL_DMA_Init+0x5c2>
 8103e1e:	687b      	ldr	r3, [r7, #4]
 8103e20:	681b      	ldr	r3, [r3, #0]
 8103e22:	4a5c      	ldr	r2, [pc, #368]	; (8103f94 <HAL_DMA_Init+0x65c>)
 8103e24:	4293      	cmp	r3, r2
 8103e26:	d068      	beq.n	8103efa <HAL_DMA_Init+0x5c2>
 8103e28:	687b      	ldr	r3, [r7, #4]
 8103e2a:	681b      	ldr	r3, [r3, #0]
 8103e2c:	4a5a      	ldr	r2, [pc, #360]	; (8103f98 <HAL_DMA_Init+0x660>)
 8103e2e:	4293      	cmp	r3, r2
 8103e30:	d063      	beq.n	8103efa <HAL_DMA_Init+0x5c2>
 8103e32:	687b      	ldr	r3, [r7, #4]
 8103e34:	681b      	ldr	r3, [r3, #0]
 8103e36:	4a59      	ldr	r2, [pc, #356]	; (8103f9c <HAL_DMA_Init+0x664>)
 8103e38:	4293      	cmp	r3, r2
 8103e3a:	d05e      	beq.n	8103efa <HAL_DMA_Init+0x5c2>
 8103e3c:	687b      	ldr	r3, [r7, #4]
 8103e3e:	681b      	ldr	r3, [r3, #0]
 8103e40:	4a57      	ldr	r2, [pc, #348]	; (8103fa0 <HAL_DMA_Init+0x668>)
 8103e42:	4293      	cmp	r3, r2
 8103e44:	d059      	beq.n	8103efa <HAL_DMA_Init+0x5c2>
 8103e46:	687b      	ldr	r3, [r7, #4]
 8103e48:	681b      	ldr	r3, [r3, #0]
 8103e4a:	4a56      	ldr	r2, [pc, #344]	; (8103fa4 <HAL_DMA_Init+0x66c>)
 8103e4c:	4293      	cmp	r3, r2
 8103e4e:	d054      	beq.n	8103efa <HAL_DMA_Init+0x5c2>
 8103e50:	687b      	ldr	r3, [r7, #4]
 8103e52:	681b      	ldr	r3, [r3, #0]
 8103e54:	4a54      	ldr	r2, [pc, #336]	; (8103fa8 <HAL_DMA_Init+0x670>)
 8103e56:	4293      	cmp	r3, r2
 8103e58:	d04f      	beq.n	8103efa <HAL_DMA_Init+0x5c2>
 8103e5a:	687b      	ldr	r3, [r7, #4]
 8103e5c:	681b      	ldr	r3, [r3, #0]
 8103e5e:	4a53      	ldr	r2, [pc, #332]	; (8103fac <HAL_DMA_Init+0x674>)
 8103e60:	4293      	cmp	r3, r2
 8103e62:	d04a      	beq.n	8103efa <HAL_DMA_Init+0x5c2>
 8103e64:	687b      	ldr	r3, [r7, #4]
 8103e66:	681b      	ldr	r3, [r3, #0]
 8103e68:	4a51      	ldr	r2, [pc, #324]	; (8103fb0 <HAL_DMA_Init+0x678>)
 8103e6a:	4293      	cmp	r3, r2
 8103e6c:	d045      	beq.n	8103efa <HAL_DMA_Init+0x5c2>
 8103e6e:	687b      	ldr	r3, [r7, #4]
 8103e70:	681b      	ldr	r3, [r3, #0]
 8103e72:	4a50      	ldr	r2, [pc, #320]	; (8103fb4 <HAL_DMA_Init+0x67c>)
 8103e74:	4293      	cmp	r3, r2
 8103e76:	d040      	beq.n	8103efa <HAL_DMA_Init+0x5c2>
 8103e78:	687b      	ldr	r3, [r7, #4]
 8103e7a:	681b      	ldr	r3, [r3, #0]
 8103e7c:	4a4e      	ldr	r2, [pc, #312]	; (8103fb8 <HAL_DMA_Init+0x680>)
 8103e7e:	4293      	cmp	r3, r2
 8103e80:	d03b      	beq.n	8103efa <HAL_DMA_Init+0x5c2>
 8103e82:	687b      	ldr	r3, [r7, #4]
 8103e84:	681b      	ldr	r3, [r3, #0]
 8103e86:	4a4d      	ldr	r2, [pc, #308]	; (8103fbc <HAL_DMA_Init+0x684>)
 8103e88:	4293      	cmp	r3, r2
 8103e8a:	d036      	beq.n	8103efa <HAL_DMA_Init+0x5c2>
 8103e8c:	687b      	ldr	r3, [r7, #4]
 8103e8e:	681b      	ldr	r3, [r3, #0]
 8103e90:	4a4b      	ldr	r2, [pc, #300]	; (8103fc0 <HAL_DMA_Init+0x688>)
 8103e92:	4293      	cmp	r3, r2
 8103e94:	d031      	beq.n	8103efa <HAL_DMA_Init+0x5c2>
 8103e96:	687b      	ldr	r3, [r7, #4]
 8103e98:	681b      	ldr	r3, [r3, #0]
 8103e9a:	4a4a      	ldr	r2, [pc, #296]	; (8103fc4 <HAL_DMA_Init+0x68c>)
 8103e9c:	4293      	cmp	r3, r2
 8103e9e:	d02c      	beq.n	8103efa <HAL_DMA_Init+0x5c2>
 8103ea0:	687b      	ldr	r3, [r7, #4]
 8103ea2:	681b      	ldr	r3, [r3, #0]
 8103ea4:	4a48      	ldr	r2, [pc, #288]	; (8103fc8 <HAL_DMA_Init+0x690>)
 8103ea6:	4293      	cmp	r3, r2
 8103ea8:	d027      	beq.n	8103efa <HAL_DMA_Init+0x5c2>
 8103eaa:	687b      	ldr	r3, [r7, #4]
 8103eac:	681b      	ldr	r3, [r3, #0]
 8103eae:	4a47      	ldr	r2, [pc, #284]	; (8103fcc <HAL_DMA_Init+0x694>)
 8103eb0:	4293      	cmp	r3, r2
 8103eb2:	d022      	beq.n	8103efa <HAL_DMA_Init+0x5c2>
 8103eb4:	687b      	ldr	r3, [r7, #4]
 8103eb6:	681b      	ldr	r3, [r3, #0]
 8103eb8:	4a45      	ldr	r2, [pc, #276]	; (8103fd0 <HAL_DMA_Init+0x698>)
 8103eba:	4293      	cmp	r3, r2
 8103ebc:	d01d      	beq.n	8103efa <HAL_DMA_Init+0x5c2>
 8103ebe:	687b      	ldr	r3, [r7, #4]
 8103ec0:	681b      	ldr	r3, [r3, #0]
 8103ec2:	4a44      	ldr	r2, [pc, #272]	; (8103fd4 <HAL_DMA_Init+0x69c>)
 8103ec4:	4293      	cmp	r3, r2
 8103ec6:	d018      	beq.n	8103efa <HAL_DMA_Init+0x5c2>
 8103ec8:	687b      	ldr	r3, [r7, #4]
 8103eca:	681b      	ldr	r3, [r3, #0]
 8103ecc:	4a42      	ldr	r2, [pc, #264]	; (8103fd8 <HAL_DMA_Init+0x6a0>)
 8103ece:	4293      	cmp	r3, r2
 8103ed0:	d013      	beq.n	8103efa <HAL_DMA_Init+0x5c2>
 8103ed2:	687b      	ldr	r3, [r7, #4]
 8103ed4:	681b      	ldr	r3, [r3, #0]
 8103ed6:	4a41      	ldr	r2, [pc, #260]	; (8103fdc <HAL_DMA_Init+0x6a4>)
 8103ed8:	4293      	cmp	r3, r2
 8103eda:	d00e      	beq.n	8103efa <HAL_DMA_Init+0x5c2>
 8103edc:	687b      	ldr	r3, [r7, #4]
 8103ede:	681b      	ldr	r3, [r3, #0]
 8103ee0:	4a3f      	ldr	r2, [pc, #252]	; (8103fe0 <HAL_DMA_Init+0x6a8>)
 8103ee2:	4293      	cmp	r3, r2
 8103ee4:	d009      	beq.n	8103efa <HAL_DMA_Init+0x5c2>
 8103ee6:	687b      	ldr	r3, [r7, #4]
 8103ee8:	681b      	ldr	r3, [r3, #0]
 8103eea:	4a3e      	ldr	r2, [pc, #248]	; (8103fe4 <HAL_DMA_Init+0x6ac>)
 8103eec:	4293      	cmp	r3, r2
 8103eee:	d004      	beq.n	8103efa <HAL_DMA_Init+0x5c2>
 8103ef0:	687b      	ldr	r3, [r7, #4]
 8103ef2:	681b      	ldr	r3, [r3, #0]
 8103ef4:	4a3c      	ldr	r2, [pc, #240]	; (8103fe8 <HAL_DMA_Init+0x6b0>)
 8103ef6:	4293      	cmp	r3, r2
 8103ef8:	d101      	bne.n	8103efe <HAL_DMA_Init+0x5c6>
 8103efa:	2301      	movs	r3, #1
 8103efc:	e000      	b.n	8103f00 <HAL_DMA_Init+0x5c8>
 8103efe:	2300      	movs	r3, #0
 8103f00:	2b00      	cmp	r3, #0
 8103f02:	d032      	beq.n	8103f6a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8103f04:	6878      	ldr	r0, [r7, #4]
 8103f06:	f002 fa41 	bl	810638c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8103f0a:	687b      	ldr	r3, [r7, #4]
 8103f0c:	689b      	ldr	r3, [r3, #8]
 8103f0e:	2b80      	cmp	r3, #128	; 0x80
 8103f10:	d102      	bne.n	8103f18 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8103f12:	687b      	ldr	r3, [r7, #4]
 8103f14:	2200      	movs	r2, #0
 8103f16:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8103f18:	687b      	ldr	r3, [r7, #4]
 8103f1a:	685a      	ldr	r2, [r3, #4]
 8103f1c:	687b      	ldr	r3, [r7, #4]
 8103f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103f20:	b2d2      	uxtb	r2, r2
 8103f22:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103f24:	687b      	ldr	r3, [r7, #4]
 8103f26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103f28:	687a      	ldr	r2, [r7, #4]
 8103f2a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8103f2c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8103f2e:	687b      	ldr	r3, [r7, #4]
 8103f30:	685b      	ldr	r3, [r3, #4]
 8103f32:	2b00      	cmp	r3, #0
 8103f34:	d010      	beq.n	8103f58 <HAL_DMA_Init+0x620>
 8103f36:	687b      	ldr	r3, [r7, #4]
 8103f38:	685b      	ldr	r3, [r3, #4]
 8103f3a:	2b08      	cmp	r3, #8
 8103f3c:	d80c      	bhi.n	8103f58 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8103f3e:	6878      	ldr	r0, [r7, #4]
 8103f40:	f002 fabe 	bl	81064c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8103f44:	687b      	ldr	r3, [r7, #4]
 8103f46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103f48:	2200      	movs	r2, #0
 8103f4a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8103f4c:	687b      	ldr	r3, [r7, #4]
 8103f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103f50:	687a      	ldr	r2, [r7, #4]
 8103f52:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8103f54:	605a      	str	r2, [r3, #4]
 8103f56:	e008      	b.n	8103f6a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8103f58:	687b      	ldr	r3, [r7, #4]
 8103f5a:	2200      	movs	r2, #0
 8103f5c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8103f5e:	687b      	ldr	r3, [r7, #4]
 8103f60:	2200      	movs	r2, #0
 8103f62:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8103f64:	687b      	ldr	r3, [r7, #4]
 8103f66:	2200      	movs	r2, #0
 8103f68:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8103f6a:	687b      	ldr	r3, [r7, #4]
 8103f6c:	2200      	movs	r2, #0
 8103f6e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8103f70:	687b      	ldr	r3, [r7, #4]
 8103f72:	2201      	movs	r2, #1
 8103f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8103f78:	2300      	movs	r3, #0
}
 8103f7a:	4618      	mov	r0, r3
 8103f7c:	3718      	adds	r7, #24
 8103f7e:	46bd      	mov	sp, r7
 8103f80:	bd80      	pop	{r7, pc}
 8103f82:	bf00      	nop
 8103f84:	a7fdabf8 	.word	0xa7fdabf8
 8103f88:	cccccccd 	.word	0xcccccccd
 8103f8c:	40020010 	.word	0x40020010
 8103f90:	40020028 	.word	0x40020028
 8103f94:	40020040 	.word	0x40020040
 8103f98:	40020058 	.word	0x40020058
 8103f9c:	40020070 	.word	0x40020070
 8103fa0:	40020088 	.word	0x40020088
 8103fa4:	400200a0 	.word	0x400200a0
 8103fa8:	400200b8 	.word	0x400200b8
 8103fac:	40020410 	.word	0x40020410
 8103fb0:	40020428 	.word	0x40020428
 8103fb4:	40020440 	.word	0x40020440
 8103fb8:	40020458 	.word	0x40020458
 8103fbc:	40020470 	.word	0x40020470
 8103fc0:	40020488 	.word	0x40020488
 8103fc4:	400204a0 	.word	0x400204a0
 8103fc8:	400204b8 	.word	0x400204b8
 8103fcc:	58025408 	.word	0x58025408
 8103fd0:	5802541c 	.word	0x5802541c
 8103fd4:	58025430 	.word	0x58025430
 8103fd8:	58025444 	.word	0x58025444
 8103fdc:	58025458 	.word	0x58025458
 8103fe0:	5802546c 	.word	0x5802546c
 8103fe4:	58025480 	.word	0x58025480
 8103fe8:	58025494 	.word	0x58025494

08103fec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8103fec:	b580      	push	{r7, lr}
 8103fee:	b086      	sub	sp, #24
 8103ff0:	af00      	add	r7, sp, #0
 8103ff2:	60f8      	str	r0, [r7, #12]
 8103ff4:	60b9      	str	r1, [r7, #8]
 8103ff6:	607a      	str	r2, [r7, #4]
 8103ff8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8103ffa:	2300      	movs	r3, #0
 8103ffc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8103ffe:	68fb      	ldr	r3, [r7, #12]
 8104000:	2b00      	cmp	r3, #0
 8104002:	d101      	bne.n	8104008 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8104004:	2301      	movs	r3, #1
 8104006:	e226      	b.n	8104456 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8104008:	68fb      	ldr	r3, [r7, #12]
 810400a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 810400e:	2b01      	cmp	r3, #1
 8104010:	d101      	bne.n	8104016 <HAL_DMA_Start_IT+0x2a>
 8104012:	2302      	movs	r3, #2
 8104014:	e21f      	b.n	8104456 <HAL_DMA_Start_IT+0x46a>
 8104016:	68fb      	ldr	r3, [r7, #12]
 8104018:	2201      	movs	r2, #1
 810401a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 810401e:	68fb      	ldr	r3, [r7, #12]
 8104020:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8104024:	b2db      	uxtb	r3, r3
 8104026:	2b01      	cmp	r3, #1
 8104028:	f040 820a 	bne.w	8104440 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 810402c:	68fb      	ldr	r3, [r7, #12]
 810402e:	2202      	movs	r2, #2
 8104030:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8104034:	68fb      	ldr	r3, [r7, #12]
 8104036:	2200      	movs	r2, #0
 8104038:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 810403a:	68fb      	ldr	r3, [r7, #12]
 810403c:	681b      	ldr	r3, [r3, #0]
 810403e:	4a68      	ldr	r2, [pc, #416]	; (81041e0 <HAL_DMA_Start_IT+0x1f4>)
 8104040:	4293      	cmp	r3, r2
 8104042:	d04a      	beq.n	81040da <HAL_DMA_Start_IT+0xee>
 8104044:	68fb      	ldr	r3, [r7, #12]
 8104046:	681b      	ldr	r3, [r3, #0]
 8104048:	4a66      	ldr	r2, [pc, #408]	; (81041e4 <HAL_DMA_Start_IT+0x1f8>)
 810404a:	4293      	cmp	r3, r2
 810404c:	d045      	beq.n	81040da <HAL_DMA_Start_IT+0xee>
 810404e:	68fb      	ldr	r3, [r7, #12]
 8104050:	681b      	ldr	r3, [r3, #0]
 8104052:	4a65      	ldr	r2, [pc, #404]	; (81041e8 <HAL_DMA_Start_IT+0x1fc>)
 8104054:	4293      	cmp	r3, r2
 8104056:	d040      	beq.n	81040da <HAL_DMA_Start_IT+0xee>
 8104058:	68fb      	ldr	r3, [r7, #12]
 810405a:	681b      	ldr	r3, [r3, #0]
 810405c:	4a63      	ldr	r2, [pc, #396]	; (81041ec <HAL_DMA_Start_IT+0x200>)
 810405e:	4293      	cmp	r3, r2
 8104060:	d03b      	beq.n	81040da <HAL_DMA_Start_IT+0xee>
 8104062:	68fb      	ldr	r3, [r7, #12]
 8104064:	681b      	ldr	r3, [r3, #0]
 8104066:	4a62      	ldr	r2, [pc, #392]	; (81041f0 <HAL_DMA_Start_IT+0x204>)
 8104068:	4293      	cmp	r3, r2
 810406a:	d036      	beq.n	81040da <HAL_DMA_Start_IT+0xee>
 810406c:	68fb      	ldr	r3, [r7, #12]
 810406e:	681b      	ldr	r3, [r3, #0]
 8104070:	4a60      	ldr	r2, [pc, #384]	; (81041f4 <HAL_DMA_Start_IT+0x208>)
 8104072:	4293      	cmp	r3, r2
 8104074:	d031      	beq.n	81040da <HAL_DMA_Start_IT+0xee>
 8104076:	68fb      	ldr	r3, [r7, #12]
 8104078:	681b      	ldr	r3, [r3, #0]
 810407a:	4a5f      	ldr	r2, [pc, #380]	; (81041f8 <HAL_DMA_Start_IT+0x20c>)
 810407c:	4293      	cmp	r3, r2
 810407e:	d02c      	beq.n	81040da <HAL_DMA_Start_IT+0xee>
 8104080:	68fb      	ldr	r3, [r7, #12]
 8104082:	681b      	ldr	r3, [r3, #0]
 8104084:	4a5d      	ldr	r2, [pc, #372]	; (81041fc <HAL_DMA_Start_IT+0x210>)
 8104086:	4293      	cmp	r3, r2
 8104088:	d027      	beq.n	81040da <HAL_DMA_Start_IT+0xee>
 810408a:	68fb      	ldr	r3, [r7, #12]
 810408c:	681b      	ldr	r3, [r3, #0]
 810408e:	4a5c      	ldr	r2, [pc, #368]	; (8104200 <HAL_DMA_Start_IT+0x214>)
 8104090:	4293      	cmp	r3, r2
 8104092:	d022      	beq.n	81040da <HAL_DMA_Start_IT+0xee>
 8104094:	68fb      	ldr	r3, [r7, #12]
 8104096:	681b      	ldr	r3, [r3, #0]
 8104098:	4a5a      	ldr	r2, [pc, #360]	; (8104204 <HAL_DMA_Start_IT+0x218>)
 810409a:	4293      	cmp	r3, r2
 810409c:	d01d      	beq.n	81040da <HAL_DMA_Start_IT+0xee>
 810409e:	68fb      	ldr	r3, [r7, #12]
 81040a0:	681b      	ldr	r3, [r3, #0]
 81040a2:	4a59      	ldr	r2, [pc, #356]	; (8104208 <HAL_DMA_Start_IT+0x21c>)
 81040a4:	4293      	cmp	r3, r2
 81040a6:	d018      	beq.n	81040da <HAL_DMA_Start_IT+0xee>
 81040a8:	68fb      	ldr	r3, [r7, #12]
 81040aa:	681b      	ldr	r3, [r3, #0]
 81040ac:	4a57      	ldr	r2, [pc, #348]	; (810420c <HAL_DMA_Start_IT+0x220>)
 81040ae:	4293      	cmp	r3, r2
 81040b0:	d013      	beq.n	81040da <HAL_DMA_Start_IT+0xee>
 81040b2:	68fb      	ldr	r3, [r7, #12]
 81040b4:	681b      	ldr	r3, [r3, #0]
 81040b6:	4a56      	ldr	r2, [pc, #344]	; (8104210 <HAL_DMA_Start_IT+0x224>)
 81040b8:	4293      	cmp	r3, r2
 81040ba:	d00e      	beq.n	81040da <HAL_DMA_Start_IT+0xee>
 81040bc:	68fb      	ldr	r3, [r7, #12]
 81040be:	681b      	ldr	r3, [r3, #0]
 81040c0:	4a54      	ldr	r2, [pc, #336]	; (8104214 <HAL_DMA_Start_IT+0x228>)
 81040c2:	4293      	cmp	r3, r2
 81040c4:	d009      	beq.n	81040da <HAL_DMA_Start_IT+0xee>
 81040c6:	68fb      	ldr	r3, [r7, #12]
 81040c8:	681b      	ldr	r3, [r3, #0]
 81040ca:	4a53      	ldr	r2, [pc, #332]	; (8104218 <HAL_DMA_Start_IT+0x22c>)
 81040cc:	4293      	cmp	r3, r2
 81040ce:	d004      	beq.n	81040da <HAL_DMA_Start_IT+0xee>
 81040d0:	68fb      	ldr	r3, [r7, #12]
 81040d2:	681b      	ldr	r3, [r3, #0]
 81040d4:	4a51      	ldr	r2, [pc, #324]	; (810421c <HAL_DMA_Start_IT+0x230>)
 81040d6:	4293      	cmp	r3, r2
 81040d8:	d108      	bne.n	81040ec <HAL_DMA_Start_IT+0x100>
 81040da:	68fb      	ldr	r3, [r7, #12]
 81040dc:	681b      	ldr	r3, [r3, #0]
 81040de:	681a      	ldr	r2, [r3, #0]
 81040e0:	68fb      	ldr	r3, [r7, #12]
 81040e2:	681b      	ldr	r3, [r3, #0]
 81040e4:	f022 0201 	bic.w	r2, r2, #1
 81040e8:	601a      	str	r2, [r3, #0]
 81040ea:	e007      	b.n	81040fc <HAL_DMA_Start_IT+0x110>
 81040ec:	68fb      	ldr	r3, [r7, #12]
 81040ee:	681b      	ldr	r3, [r3, #0]
 81040f0:	681a      	ldr	r2, [r3, #0]
 81040f2:	68fb      	ldr	r3, [r7, #12]
 81040f4:	681b      	ldr	r3, [r3, #0]
 81040f6:	f022 0201 	bic.w	r2, r2, #1
 81040fa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 81040fc:	683b      	ldr	r3, [r7, #0]
 81040fe:	687a      	ldr	r2, [r7, #4]
 8104100:	68b9      	ldr	r1, [r7, #8]
 8104102:	68f8      	ldr	r0, [r7, #12]
 8104104:	f001 fe68 	bl	8105dd8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104108:	68fb      	ldr	r3, [r7, #12]
 810410a:	681b      	ldr	r3, [r3, #0]
 810410c:	4a34      	ldr	r2, [pc, #208]	; (81041e0 <HAL_DMA_Start_IT+0x1f4>)
 810410e:	4293      	cmp	r3, r2
 8104110:	d04a      	beq.n	81041a8 <HAL_DMA_Start_IT+0x1bc>
 8104112:	68fb      	ldr	r3, [r7, #12]
 8104114:	681b      	ldr	r3, [r3, #0]
 8104116:	4a33      	ldr	r2, [pc, #204]	; (81041e4 <HAL_DMA_Start_IT+0x1f8>)
 8104118:	4293      	cmp	r3, r2
 810411a:	d045      	beq.n	81041a8 <HAL_DMA_Start_IT+0x1bc>
 810411c:	68fb      	ldr	r3, [r7, #12]
 810411e:	681b      	ldr	r3, [r3, #0]
 8104120:	4a31      	ldr	r2, [pc, #196]	; (81041e8 <HAL_DMA_Start_IT+0x1fc>)
 8104122:	4293      	cmp	r3, r2
 8104124:	d040      	beq.n	81041a8 <HAL_DMA_Start_IT+0x1bc>
 8104126:	68fb      	ldr	r3, [r7, #12]
 8104128:	681b      	ldr	r3, [r3, #0]
 810412a:	4a30      	ldr	r2, [pc, #192]	; (81041ec <HAL_DMA_Start_IT+0x200>)
 810412c:	4293      	cmp	r3, r2
 810412e:	d03b      	beq.n	81041a8 <HAL_DMA_Start_IT+0x1bc>
 8104130:	68fb      	ldr	r3, [r7, #12]
 8104132:	681b      	ldr	r3, [r3, #0]
 8104134:	4a2e      	ldr	r2, [pc, #184]	; (81041f0 <HAL_DMA_Start_IT+0x204>)
 8104136:	4293      	cmp	r3, r2
 8104138:	d036      	beq.n	81041a8 <HAL_DMA_Start_IT+0x1bc>
 810413a:	68fb      	ldr	r3, [r7, #12]
 810413c:	681b      	ldr	r3, [r3, #0]
 810413e:	4a2d      	ldr	r2, [pc, #180]	; (81041f4 <HAL_DMA_Start_IT+0x208>)
 8104140:	4293      	cmp	r3, r2
 8104142:	d031      	beq.n	81041a8 <HAL_DMA_Start_IT+0x1bc>
 8104144:	68fb      	ldr	r3, [r7, #12]
 8104146:	681b      	ldr	r3, [r3, #0]
 8104148:	4a2b      	ldr	r2, [pc, #172]	; (81041f8 <HAL_DMA_Start_IT+0x20c>)
 810414a:	4293      	cmp	r3, r2
 810414c:	d02c      	beq.n	81041a8 <HAL_DMA_Start_IT+0x1bc>
 810414e:	68fb      	ldr	r3, [r7, #12]
 8104150:	681b      	ldr	r3, [r3, #0]
 8104152:	4a2a      	ldr	r2, [pc, #168]	; (81041fc <HAL_DMA_Start_IT+0x210>)
 8104154:	4293      	cmp	r3, r2
 8104156:	d027      	beq.n	81041a8 <HAL_DMA_Start_IT+0x1bc>
 8104158:	68fb      	ldr	r3, [r7, #12]
 810415a:	681b      	ldr	r3, [r3, #0]
 810415c:	4a28      	ldr	r2, [pc, #160]	; (8104200 <HAL_DMA_Start_IT+0x214>)
 810415e:	4293      	cmp	r3, r2
 8104160:	d022      	beq.n	81041a8 <HAL_DMA_Start_IT+0x1bc>
 8104162:	68fb      	ldr	r3, [r7, #12]
 8104164:	681b      	ldr	r3, [r3, #0]
 8104166:	4a27      	ldr	r2, [pc, #156]	; (8104204 <HAL_DMA_Start_IT+0x218>)
 8104168:	4293      	cmp	r3, r2
 810416a:	d01d      	beq.n	81041a8 <HAL_DMA_Start_IT+0x1bc>
 810416c:	68fb      	ldr	r3, [r7, #12]
 810416e:	681b      	ldr	r3, [r3, #0]
 8104170:	4a25      	ldr	r2, [pc, #148]	; (8104208 <HAL_DMA_Start_IT+0x21c>)
 8104172:	4293      	cmp	r3, r2
 8104174:	d018      	beq.n	81041a8 <HAL_DMA_Start_IT+0x1bc>
 8104176:	68fb      	ldr	r3, [r7, #12]
 8104178:	681b      	ldr	r3, [r3, #0]
 810417a:	4a24      	ldr	r2, [pc, #144]	; (810420c <HAL_DMA_Start_IT+0x220>)
 810417c:	4293      	cmp	r3, r2
 810417e:	d013      	beq.n	81041a8 <HAL_DMA_Start_IT+0x1bc>
 8104180:	68fb      	ldr	r3, [r7, #12]
 8104182:	681b      	ldr	r3, [r3, #0]
 8104184:	4a22      	ldr	r2, [pc, #136]	; (8104210 <HAL_DMA_Start_IT+0x224>)
 8104186:	4293      	cmp	r3, r2
 8104188:	d00e      	beq.n	81041a8 <HAL_DMA_Start_IT+0x1bc>
 810418a:	68fb      	ldr	r3, [r7, #12]
 810418c:	681b      	ldr	r3, [r3, #0]
 810418e:	4a21      	ldr	r2, [pc, #132]	; (8104214 <HAL_DMA_Start_IT+0x228>)
 8104190:	4293      	cmp	r3, r2
 8104192:	d009      	beq.n	81041a8 <HAL_DMA_Start_IT+0x1bc>
 8104194:	68fb      	ldr	r3, [r7, #12]
 8104196:	681b      	ldr	r3, [r3, #0]
 8104198:	4a1f      	ldr	r2, [pc, #124]	; (8104218 <HAL_DMA_Start_IT+0x22c>)
 810419a:	4293      	cmp	r3, r2
 810419c:	d004      	beq.n	81041a8 <HAL_DMA_Start_IT+0x1bc>
 810419e:	68fb      	ldr	r3, [r7, #12]
 81041a0:	681b      	ldr	r3, [r3, #0]
 81041a2:	4a1e      	ldr	r2, [pc, #120]	; (810421c <HAL_DMA_Start_IT+0x230>)
 81041a4:	4293      	cmp	r3, r2
 81041a6:	d101      	bne.n	81041ac <HAL_DMA_Start_IT+0x1c0>
 81041a8:	2301      	movs	r3, #1
 81041aa:	e000      	b.n	81041ae <HAL_DMA_Start_IT+0x1c2>
 81041ac:	2300      	movs	r3, #0
 81041ae:	2b00      	cmp	r3, #0
 81041b0:	d036      	beq.n	8104220 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 81041b2:	68fb      	ldr	r3, [r7, #12]
 81041b4:	681b      	ldr	r3, [r3, #0]
 81041b6:	681b      	ldr	r3, [r3, #0]
 81041b8:	f023 021e 	bic.w	r2, r3, #30
 81041bc:	68fb      	ldr	r3, [r7, #12]
 81041be:	681b      	ldr	r3, [r3, #0]
 81041c0:	f042 0216 	orr.w	r2, r2, #22
 81041c4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 81041c6:	68fb      	ldr	r3, [r7, #12]
 81041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81041ca:	2b00      	cmp	r3, #0
 81041cc:	d03e      	beq.n	810424c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 81041ce:	68fb      	ldr	r3, [r7, #12]
 81041d0:	681b      	ldr	r3, [r3, #0]
 81041d2:	681a      	ldr	r2, [r3, #0]
 81041d4:	68fb      	ldr	r3, [r7, #12]
 81041d6:	681b      	ldr	r3, [r3, #0]
 81041d8:	f042 0208 	orr.w	r2, r2, #8
 81041dc:	601a      	str	r2, [r3, #0]
 81041de:	e035      	b.n	810424c <HAL_DMA_Start_IT+0x260>
 81041e0:	40020010 	.word	0x40020010
 81041e4:	40020028 	.word	0x40020028
 81041e8:	40020040 	.word	0x40020040
 81041ec:	40020058 	.word	0x40020058
 81041f0:	40020070 	.word	0x40020070
 81041f4:	40020088 	.word	0x40020088
 81041f8:	400200a0 	.word	0x400200a0
 81041fc:	400200b8 	.word	0x400200b8
 8104200:	40020410 	.word	0x40020410
 8104204:	40020428 	.word	0x40020428
 8104208:	40020440 	.word	0x40020440
 810420c:	40020458 	.word	0x40020458
 8104210:	40020470 	.word	0x40020470
 8104214:	40020488 	.word	0x40020488
 8104218:	400204a0 	.word	0x400204a0
 810421c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8104220:	68fb      	ldr	r3, [r7, #12]
 8104222:	681b      	ldr	r3, [r3, #0]
 8104224:	681b      	ldr	r3, [r3, #0]
 8104226:	f023 020e 	bic.w	r2, r3, #14
 810422a:	68fb      	ldr	r3, [r7, #12]
 810422c:	681b      	ldr	r3, [r3, #0]
 810422e:	f042 020a 	orr.w	r2, r2, #10
 8104232:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8104234:	68fb      	ldr	r3, [r7, #12]
 8104236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104238:	2b00      	cmp	r3, #0
 810423a:	d007      	beq.n	810424c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 810423c:	68fb      	ldr	r3, [r7, #12]
 810423e:	681b      	ldr	r3, [r3, #0]
 8104240:	681a      	ldr	r2, [r3, #0]
 8104242:	68fb      	ldr	r3, [r7, #12]
 8104244:	681b      	ldr	r3, [r3, #0]
 8104246:	f042 0204 	orr.w	r2, r2, #4
 810424a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810424c:	68fb      	ldr	r3, [r7, #12]
 810424e:	681b      	ldr	r3, [r3, #0]
 8104250:	4a83      	ldr	r2, [pc, #524]	; (8104460 <HAL_DMA_Start_IT+0x474>)
 8104252:	4293      	cmp	r3, r2
 8104254:	d072      	beq.n	810433c <HAL_DMA_Start_IT+0x350>
 8104256:	68fb      	ldr	r3, [r7, #12]
 8104258:	681b      	ldr	r3, [r3, #0]
 810425a:	4a82      	ldr	r2, [pc, #520]	; (8104464 <HAL_DMA_Start_IT+0x478>)
 810425c:	4293      	cmp	r3, r2
 810425e:	d06d      	beq.n	810433c <HAL_DMA_Start_IT+0x350>
 8104260:	68fb      	ldr	r3, [r7, #12]
 8104262:	681b      	ldr	r3, [r3, #0]
 8104264:	4a80      	ldr	r2, [pc, #512]	; (8104468 <HAL_DMA_Start_IT+0x47c>)
 8104266:	4293      	cmp	r3, r2
 8104268:	d068      	beq.n	810433c <HAL_DMA_Start_IT+0x350>
 810426a:	68fb      	ldr	r3, [r7, #12]
 810426c:	681b      	ldr	r3, [r3, #0]
 810426e:	4a7f      	ldr	r2, [pc, #508]	; (810446c <HAL_DMA_Start_IT+0x480>)
 8104270:	4293      	cmp	r3, r2
 8104272:	d063      	beq.n	810433c <HAL_DMA_Start_IT+0x350>
 8104274:	68fb      	ldr	r3, [r7, #12]
 8104276:	681b      	ldr	r3, [r3, #0]
 8104278:	4a7d      	ldr	r2, [pc, #500]	; (8104470 <HAL_DMA_Start_IT+0x484>)
 810427a:	4293      	cmp	r3, r2
 810427c:	d05e      	beq.n	810433c <HAL_DMA_Start_IT+0x350>
 810427e:	68fb      	ldr	r3, [r7, #12]
 8104280:	681b      	ldr	r3, [r3, #0]
 8104282:	4a7c      	ldr	r2, [pc, #496]	; (8104474 <HAL_DMA_Start_IT+0x488>)
 8104284:	4293      	cmp	r3, r2
 8104286:	d059      	beq.n	810433c <HAL_DMA_Start_IT+0x350>
 8104288:	68fb      	ldr	r3, [r7, #12]
 810428a:	681b      	ldr	r3, [r3, #0]
 810428c:	4a7a      	ldr	r2, [pc, #488]	; (8104478 <HAL_DMA_Start_IT+0x48c>)
 810428e:	4293      	cmp	r3, r2
 8104290:	d054      	beq.n	810433c <HAL_DMA_Start_IT+0x350>
 8104292:	68fb      	ldr	r3, [r7, #12]
 8104294:	681b      	ldr	r3, [r3, #0]
 8104296:	4a79      	ldr	r2, [pc, #484]	; (810447c <HAL_DMA_Start_IT+0x490>)
 8104298:	4293      	cmp	r3, r2
 810429a:	d04f      	beq.n	810433c <HAL_DMA_Start_IT+0x350>
 810429c:	68fb      	ldr	r3, [r7, #12]
 810429e:	681b      	ldr	r3, [r3, #0]
 81042a0:	4a77      	ldr	r2, [pc, #476]	; (8104480 <HAL_DMA_Start_IT+0x494>)
 81042a2:	4293      	cmp	r3, r2
 81042a4:	d04a      	beq.n	810433c <HAL_DMA_Start_IT+0x350>
 81042a6:	68fb      	ldr	r3, [r7, #12]
 81042a8:	681b      	ldr	r3, [r3, #0]
 81042aa:	4a76      	ldr	r2, [pc, #472]	; (8104484 <HAL_DMA_Start_IT+0x498>)
 81042ac:	4293      	cmp	r3, r2
 81042ae:	d045      	beq.n	810433c <HAL_DMA_Start_IT+0x350>
 81042b0:	68fb      	ldr	r3, [r7, #12]
 81042b2:	681b      	ldr	r3, [r3, #0]
 81042b4:	4a74      	ldr	r2, [pc, #464]	; (8104488 <HAL_DMA_Start_IT+0x49c>)
 81042b6:	4293      	cmp	r3, r2
 81042b8:	d040      	beq.n	810433c <HAL_DMA_Start_IT+0x350>
 81042ba:	68fb      	ldr	r3, [r7, #12]
 81042bc:	681b      	ldr	r3, [r3, #0]
 81042be:	4a73      	ldr	r2, [pc, #460]	; (810448c <HAL_DMA_Start_IT+0x4a0>)
 81042c0:	4293      	cmp	r3, r2
 81042c2:	d03b      	beq.n	810433c <HAL_DMA_Start_IT+0x350>
 81042c4:	68fb      	ldr	r3, [r7, #12]
 81042c6:	681b      	ldr	r3, [r3, #0]
 81042c8:	4a71      	ldr	r2, [pc, #452]	; (8104490 <HAL_DMA_Start_IT+0x4a4>)
 81042ca:	4293      	cmp	r3, r2
 81042cc:	d036      	beq.n	810433c <HAL_DMA_Start_IT+0x350>
 81042ce:	68fb      	ldr	r3, [r7, #12]
 81042d0:	681b      	ldr	r3, [r3, #0]
 81042d2:	4a70      	ldr	r2, [pc, #448]	; (8104494 <HAL_DMA_Start_IT+0x4a8>)
 81042d4:	4293      	cmp	r3, r2
 81042d6:	d031      	beq.n	810433c <HAL_DMA_Start_IT+0x350>
 81042d8:	68fb      	ldr	r3, [r7, #12]
 81042da:	681b      	ldr	r3, [r3, #0]
 81042dc:	4a6e      	ldr	r2, [pc, #440]	; (8104498 <HAL_DMA_Start_IT+0x4ac>)
 81042de:	4293      	cmp	r3, r2
 81042e0:	d02c      	beq.n	810433c <HAL_DMA_Start_IT+0x350>
 81042e2:	68fb      	ldr	r3, [r7, #12]
 81042e4:	681b      	ldr	r3, [r3, #0]
 81042e6:	4a6d      	ldr	r2, [pc, #436]	; (810449c <HAL_DMA_Start_IT+0x4b0>)
 81042e8:	4293      	cmp	r3, r2
 81042ea:	d027      	beq.n	810433c <HAL_DMA_Start_IT+0x350>
 81042ec:	68fb      	ldr	r3, [r7, #12]
 81042ee:	681b      	ldr	r3, [r3, #0]
 81042f0:	4a6b      	ldr	r2, [pc, #428]	; (81044a0 <HAL_DMA_Start_IT+0x4b4>)
 81042f2:	4293      	cmp	r3, r2
 81042f4:	d022      	beq.n	810433c <HAL_DMA_Start_IT+0x350>
 81042f6:	68fb      	ldr	r3, [r7, #12]
 81042f8:	681b      	ldr	r3, [r3, #0]
 81042fa:	4a6a      	ldr	r2, [pc, #424]	; (81044a4 <HAL_DMA_Start_IT+0x4b8>)
 81042fc:	4293      	cmp	r3, r2
 81042fe:	d01d      	beq.n	810433c <HAL_DMA_Start_IT+0x350>
 8104300:	68fb      	ldr	r3, [r7, #12]
 8104302:	681b      	ldr	r3, [r3, #0]
 8104304:	4a68      	ldr	r2, [pc, #416]	; (81044a8 <HAL_DMA_Start_IT+0x4bc>)
 8104306:	4293      	cmp	r3, r2
 8104308:	d018      	beq.n	810433c <HAL_DMA_Start_IT+0x350>
 810430a:	68fb      	ldr	r3, [r7, #12]
 810430c:	681b      	ldr	r3, [r3, #0]
 810430e:	4a67      	ldr	r2, [pc, #412]	; (81044ac <HAL_DMA_Start_IT+0x4c0>)
 8104310:	4293      	cmp	r3, r2
 8104312:	d013      	beq.n	810433c <HAL_DMA_Start_IT+0x350>
 8104314:	68fb      	ldr	r3, [r7, #12]
 8104316:	681b      	ldr	r3, [r3, #0]
 8104318:	4a65      	ldr	r2, [pc, #404]	; (81044b0 <HAL_DMA_Start_IT+0x4c4>)
 810431a:	4293      	cmp	r3, r2
 810431c:	d00e      	beq.n	810433c <HAL_DMA_Start_IT+0x350>
 810431e:	68fb      	ldr	r3, [r7, #12]
 8104320:	681b      	ldr	r3, [r3, #0]
 8104322:	4a64      	ldr	r2, [pc, #400]	; (81044b4 <HAL_DMA_Start_IT+0x4c8>)
 8104324:	4293      	cmp	r3, r2
 8104326:	d009      	beq.n	810433c <HAL_DMA_Start_IT+0x350>
 8104328:	68fb      	ldr	r3, [r7, #12]
 810432a:	681b      	ldr	r3, [r3, #0]
 810432c:	4a62      	ldr	r2, [pc, #392]	; (81044b8 <HAL_DMA_Start_IT+0x4cc>)
 810432e:	4293      	cmp	r3, r2
 8104330:	d004      	beq.n	810433c <HAL_DMA_Start_IT+0x350>
 8104332:	68fb      	ldr	r3, [r7, #12]
 8104334:	681b      	ldr	r3, [r3, #0]
 8104336:	4a61      	ldr	r2, [pc, #388]	; (81044bc <HAL_DMA_Start_IT+0x4d0>)
 8104338:	4293      	cmp	r3, r2
 810433a:	d101      	bne.n	8104340 <HAL_DMA_Start_IT+0x354>
 810433c:	2301      	movs	r3, #1
 810433e:	e000      	b.n	8104342 <HAL_DMA_Start_IT+0x356>
 8104340:	2300      	movs	r3, #0
 8104342:	2b00      	cmp	r3, #0
 8104344:	d01a      	beq.n	810437c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8104346:	68fb      	ldr	r3, [r7, #12]
 8104348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810434a:	681b      	ldr	r3, [r3, #0]
 810434c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104350:	2b00      	cmp	r3, #0
 8104352:	d007      	beq.n	8104364 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8104354:	68fb      	ldr	r3, [r7, #12]
 8104356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104358:	681a      	ldr	r2, [r3, #0]
 810435a:	68fb      	ldr	r3, [r7, #12]
 810435c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810435e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8104362:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8104364:	68fb      	ldr	r3, [r7, #12]
 8104366:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104368:	2b00      	cmp	r3, #0
 810436a:	d007      	beq.n	810437c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 810436c:	68fb      	ldr	r3, [r7, #12]
 810436e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104370:	681a      	ldr	r2, [r3, #0]
 8104372:	68fb      	ldr	r3, [r7, #12]
 8104374:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104376:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810437a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 810437c:	68fb      	ldr	r3, [r7, #12]
 810437e:	681b      	ldr	r3, [r3, #0]
 8104380:	4a37      	ldr	r2, [pc, #220]	; (8104460 <HAL_DMA_Start_IT+0x474>)
 8104382:	4293      	cmp	r3, r2
 8104384:	d04a      	beq.n	810441c <HAL_DMA_Start_IT+0x430>
 8104386:	68fb      	ldr	r3, [r7, #12]
 8104388:	681b      	ldr	r3, [r3, #0]
 810438a:	4a36      	ldr	r2, [pc, #216]	; (8104464 <HAL_DMA_Start_IT+0x478>)
 810438c:	4293      	cmp	r3, r2
 810438e:	d045      	beq.n	810441c <HAL_DMA_Start_IT+0x430>
 8104390:	68fb      	ldr	r3, [r7, #12]
 8104392:	681b      	ldr	r3, [r3, #0]
 8104394:	4a34      	ldr	r2, [pc, #208]	; (8104468 <HAL_DMA_Start_IT+0x47c>)
 8104396:	4293      	cmp	r3, r2
 8104398:	d040      	beq.n	810441c <HAL_DMA_Start_IT+0x430>
 810439a:	68fb      	ldr	r3, [r7, #12]
 810439c:	681b      	ldr	r3, [r3, #0]
 810439e:	4a33      	ldr	r2, [pc, #204]	; (810446c <HAL_DMA_Start_IT+0x480>)
 81043a0:	4293      	cmp	r3, r2
 81043a2:	d03b      	beq.n	810441c <HAL_DMA_Start_IT+0x430>
 81043a4:	68fb      	ldr	r3, [r7, #12]
 81043a6:	681b      	ldr	r3, [r3, #0]
 81043a8:	4a31      	ldr	r2, [pc, #196]	; (8104470 <HAL_DMA_Start_IT+0x484>)
 81043aa:	4293      	cmp	r3, r2
 81043ac:	d036      	beq.n	810441c <HAL_DMA_Start_IT+0x430>
 81043ae:	68fb      	ldr	r3, [r7, #12]
 81043b0:	681b      	ldr	r3, [r3, #0]
 81043b2:	4a30      	ldr	r2, [pc, #192]	; (8104474 <HAL_DMA_Start_IT+0x488>)
 81043b4:	4293      	cmp	r3, r2
 81043b6:	d031      	beq.n	810441c <HAL_DMA_Start_IT+0x430>
 81043b8:	68fb      	ldr	r3, [r7, #12]
 81043ba:	681b      	ldr	r3, [r3, #0]
 81043bc:	4a2e      	ldr	r2, [pc, #184]	; (8104478 <HAL_DMA_Start_IT+0x48c>)
 81043be:	4293      	cmp	r3, r2
 81043c0:	d02c      	beq.n	810441c <HAL_DMA_Start_IT+0x430>
 81043c2:	68fb      	ldr	r3, [r7, #12]
 81043c4:	681b      	ldr	r3, [r3, #0]
 81043c6:	4a2d      	ldr	r2, [pc, #180]	; (810447c <HAL_DMA_Start_IT+0x490>)
 81043c8:	4293      	cmp	r3, r2
 81043ca:	d027      	beq.n	810441c <HAL_DMA_Start_IT+0x430>
 81043cc:	68fb      	ldr	r3, [r7, #12]
 81043ce:	681b      	ldr	r3, [r3, #0]
 81043d0:	4a2b      	ldr	r2, [pc, #172]	; (8104480 <HAL_DMA_Start_IT+0x494>)
 81043d2:	4293      	cmp	r3, r2
 81043d4:	d022      	beq.n	810441c <HAL_DMA_Start_IT+0x430>
 81043d6:	68fb      	ldr	r3, [r7, #12]
 81043d8:	681b      	ldr	r3, [r3, #0]
 81043da:	4a2a      	ldr	r2, [pc, #168]	; (8104484 <HAL_DMA_Start_IT+0x498>)
 81043dc:	4293      	cmp	r3, r2
 81043de:	d01d      	beq.n	810441c <HAL_DMA_Start_IT+0x430>
 81043e0:	68fb      	ldr	r3, [r7, #12]
 81043e2:	681b      	ldr	r3, [r3, #0]
 81043e4:	4a28      	ldr	r2, [pc, #160]	; (8104488 <HAL_DMA_Start_IT+0x49c>)
 81043e6:	4293      	cmp	r3, r2
 81043e8:	d018      	beq.n	810441c <HAL_DMA_Start_IT+0x430>
 81043ea:	68fb      	ldr	r3, [r7, #12]
 81043ec:	681b      	ldr	r3, [r3, #0]
 81043ee:	4a27      	ldr	r2, [pc, #156]	; (810448c <HAL_DMA_Start_IT+0x4a0>)
 81043f0:	4293      	cmp	r3, r2
 81043f2:	d013      	beq.n	810441c <HAL_DMA_Start_IT+0x430>
 81043f4:	68fb      	ldr	r3, [r7, #12]
 81043f6:	681b      	ldr	r3, [r3, #0]
 81043f8:	4a25      	ldr	r2, [pc, #148]	; (8104490 <HAL_DMA_Start_IT+0x4a4>)
 81043fa:	4293      	cmp	r3, r2
 81043fc:	d00e      	beq.n	810441c <HAL_DMA_Start_IT+0x430>
 81043fe:	68fb      	ldr	r3, [r7, #12]
 8104400:	681b      	ldr	r3, [r3, #0]
 8104402:	4a24      	ldr	r2, [pc, #144]	; (8104494 <HAL_DMA_Start_IT+0x4a8>)
 8104404:	4293      	cmp	r3, r2
 8104406:	d009      	beq.n	810441c <HAL_DMA_Start_IT+0x430>
 8104408:	68fb      	ldr	r3, [r7, #12]
 810440a:	681b      	ldr	r3, [r3, #0]
 810440c:	4a22      	ldr	r2, [pc, #136]	; (8104498 <HAL_DMA_Start_IT+0x4ac>)
 810440e:	4293      	cmp	r3, r2
 8104410:	d004      	beq.n	810441c <HAL_DMA_Start_IT+0x430>
 8104412:	68fb      	ldr	r3, [r7, #12]
 8104414:	681b      	ldr	r3, [r3, #0]
 8104416:	4a21      	ldr	r2, [pc, #132]	; (810449c <HAL_DMA_Start_IT+0x4b0>)
 8104418:	4293      	cmp	r3, r2
 810441a:	d108      	bne.n	810442e <HAL_DMA_Start_IT+0x442>
 810441c:	68fb      	ldr	r3, [r7, #12]
 810441e:	681b      	ldr	r3, [r3, #0]
 8104420:	681a      	ldr	r2, [r3, #0]
 8104422:	68fb      	ldr	r3, [r7, #12]
 8104424:	681b      	ldr	r3, [r3, #0]
 8104426:	f042 0201 	orr.w	r2, r2, #1
 810442a:	601a      	str	r2, [r3, #0]
 810442c:	e012      	b.n	8104454 <HAL_DMA_Start_IT+0x468>
 810442e:	68fb      	ldr	r3, [r7, #12]
 8104430:	681b      	ldr	r3, [r3, #0]
 8104432:	681a      	ldr	r2, [r3, #0]
 8104434:	68fb      	ldr	r3, [r7, #12]
 8104436:	681b      	ldr	r3, [r3, #0]
 8104438:	f042 0201 	orr.w	r2, r2, #1
 810443c:	601a      	str	r2, [r3, #0]
 810443e:	e009      	b.n	8104454 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8104440:	68fb      	ldr	r3, [r7, #12]
 8104442:	2200      	movs	r2, #0
 8104444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8104448:	68fb      	ldr	r3, [r7, #12]
 810444a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810444e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8104450:	2301      	movs	r3, #1
 8104452:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8104454:	7dfb      	ldrb	r3, [r7, #23]
}
 8104456:	4618      	mov	r0, r3
 8104458:	3718      	adds	r7, #24
 810445a:	46bd      	mov	sp, r7
 810445c:	bd80      	pop	{r7, pc}
 810445e:	bf00      	nop
 8104460:	40020010 	.word	0x40020010
 8104464:	40020028 	.word	0x40020028
 8104468:	40020040 	.word	0x40020040
 810446c:	40020058 	.word	0x40020058
 8104470:	40020070 	.word	0x40020070
 8104474:	40020088 	.word	0x40020088
 8104478:	400200a0 	.word	0x400200a0
 810447c:	400200b8 	.word	0x400200b8
 8104480:	40020410 	.word	0x40020410
 8104484:	40020428 	.word	0x40020428
 8104488:	40020440 	.word	0x40020440
 810448c:	40020458 	.word	0x40020458
 8104490:	40020470 	.word	0x40020470
 8104494:	40020488 	.word	0x40020488
 8104498:	400204a0 	.word	0x400204a0
 810449c:	400204b8 	.word	0x400204b8
 81044a0:	58025408 	.word	0x58025408
 81044a4:	5802541c 	.word	0x5802541c
 81044a8:	58025430 	.word	0x58025430
 81044ac:	58025444 	.word	0x58025444
 81044b0:	58025458 	.word	0x58025458
 81044b4:	5802546c 	.word	0x5802546c
 81044b8:	58025480 	.word	0x58025480
 81044bc:	58025494 	.word	0x58025494

081044c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 81044c0:	b580      	push	{r7, lr}
 81044c2:	b086      	sub	sp, #24
 81044c4:	af00      	add	r7, sp, #0
 81044c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 81044c8:	f7fd f964 	bl	8101794 <HAL_GetTick>
 81044cc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81044ce:	687b      	ldr	r3, [r7, #4]
 81044d0:	2b00      	cmp	r3, #0
 81044d2:	d101      	bne.n	81044d8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 81044d4:	2301      	movs	r3, #1
 81044d6:	e2dc      	b.n	8104a92 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 81044d8:	687b      	ldr	r3, [r7, #4]
 81044da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 81044de:	b2db      	uxtb	r3, r3
 81044e0:	2b02      	cmp	r3, #2
 81044e2:	d008      	beq.n	81044f6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 81044e4:	687b      	ldr	r3, [r7, #4]
 81044e6:	2280      	movs	r2, #128	; 0x80
 81044e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 81044ea:	687b      	ldr	r3, [r7, #4]
 81044ec:	2200      	movs	r2, #0
 81044ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 81044f2:	2301      	movs	r3, #1
 81044f4:	e2cd      	b.n	8104a92 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81044f6:	687b      	ldr	r3, [r7, #4]
 81044f8:	681b      	ldr	r3, [r3, #0]
 81044fa:	4a76      	ldr	r2, [pc, #472]	; (81046d4 <HAL_DMA_Abort+0x214>)
 81044fc:	4293      	cmp	r3, r2
 81044fe:	d04a      	beq.n	8104596 <HAL_DMA_Abort+0xd6>
 8104500:	687b      	ldr	r3, [r7, #4]
 8104502:	681b      	ldr	r3, [r3, #0]
 8104504:	4a74      	ldr	r2, [pc, #464]	; (81046d8 <HAL_DMA_Abort+0x218>)
 8104506:	4293      	cmp	r3, r2
 8104508:	d045      	beq.n	8104596 <HAL_DMA_Abort+0xd6>
 810450a:	687b      	ldr	r3, [r7, #4]
 810450c:	681b      	ldr	r3, [r3, #0]
 810450e:	4a73      	ldr	r2, [pc, #460]	; (81046dc <HAL_DMA_Abort+0x21c>)
 8104510:	4293      	cmp	r3, r2
 8104512:	d040      	beq.n	8104596 <HAL_DMA_Abort+0xd6>
 8104514:	687b      	ldr	r3, [r7, #4]
 8104516:	681b      	ldr	r3, [r3, #0]
 8104518:	4a71      	ldr	r2, [pc, #452]	; (81046e0 <HAL_DMA_Abort+0x220>)
 810451a:	4293      	cmp	r3, r2
 810451c:	d03b      	beq.n	8104596 <HAL_DMA_Abort+0xd6>
 810451e:	687b      	ldr	r3, [r7, #4]
 8104520:	681b      	ldr	r3, [r3, #0]
 8104522:	4a70      	ldr	r2, [pc, #448]	; (81046e4 <HAL_DMA_Abort+0x224>)
 8104524:	4293      	cmp	r3, r2
 8104526:	d036      	beq.n	8104596 <HAL_DMA_Abort+0xd6>
 8104528:	687b      	ldr	r3, [r7, #4]
 810452a:	681b      	ldr	r3, [r3, #0]
 810452c:	4a6e      	ldr	r2, [pc, #440]	; (81046e8 <HAL_DMA_Abort+0x228>)
 810452e:	4293      	cmp	r3, r2
 8104530:	d031      	beq.n	8104596 <HAL_DMA_Abort+0xd6>
 8104532:	687b      	ldr	r3, [r7, #4]
 8104534:	681b      	ldr	r3, [r3, #0]
 8104536:	4a6d      	ldr	r2, [pc, #436]	; (81046ec <HAL_DMA_Abort+0x22c>)
 8104538:	4293      	cmp	r3, r2
 810453a:	d02c      	beq.n	8104596 <HAL_DMA_Abort+0xd6>
 810453c:	687b      	ldr	r3, [r7, #4]
 810453e:	681b      	ldr	r3, [r3, #0]
 8104540:	4a6b      	ldr	r2, [pc, #428]	; (81046f0 <HAL_DMA_Abort+0x230>)
 8104542:	4293      	cmp	r3, r2
 8104544:	d027      	beq.n	8104596 <HAL_DMA_Abort+0xd6>
 8104546:	687b      	ldr	r3, [r7, #4]
 8104548:	681b      	ldr	r3, [r3, #0]
 810454a:	4a6a      	ldr	r2, [pc, #424]	; (81046f4 <HAL_DMA_Abort+0x234>)
 810454c:	4293      	cmp	r3, r2
 810454e:	d022      	beq.n	8104596 <HAL_DMA_Abort+0xd6>
 8104550:	687b      	ldr	r3, [r7, #4]
 8104552:	681b      	ldr	r3, [r3, #0]
 8104554:	4a68      	ldr	r2, [pc, #416]	; (81046f8 <HAL_DMA_Abort+0x238>)
 8104556:	4293      	cmp	r3, r2
 8104558:	d01d      	beq.n	8104596 <HAL_DMA_Abort+0xd6>
 810455a:	687b      	ldr	r3, [r7, #4]
 810455c:	681b      	ldr	r3, [r3, #0]
 810455e:	4a67      	ldr	r2, [pc, #412]	; (81046fc <HAL_DMA_Abort+0x23c>)
 8104560:	4293      	cmp	r3, r2
 8104562:	d018      	beq.n	8104596 <HAL_DMA_Abort+0xd6>
 8104564:	687b      	ldr	r3, [r7, #4]
 8104566:	681b      	ldr	r3, [r3, #0]
 8104568:	4a65      	ldr	r2, [pc, #404]	; (8104700 <HAL_DMA_Abort+0x240>)
 810456a:	4293      	cmp	r3, r2
 810456c:	d013      	beq.n	8104596 <HAL_DMA_Abort+0xd6>
 810456e:	687b      	ldr	r3, [r7, #4]
 8104570:	681b      	ldr	r3, [r3, #0]
 8104572:	4a64      	ldr	r2, [pc, #400]	; (8104704 <HAL_DMA_Abort+0x244>)
 8104574:	4293      	cmp	r3, r2
 8104576:	d00e      	beq.n	8104596 <HAL_DMA_Abort+0xd6>
 8104578:	687b      	ldr	r3, [r7, #4]
 810457a:	681b      	ldr	r3, [r3, #0]
 810457c:	4a62      	ldr	r2, [pc, #392]	; (8104708 <HAL_DMA_Abort+0x248>)
 810457e:	4293      	cmp	r3, r2
 8104580:	d009      	beq.n	8104596 <HAL_DMA_Abort+0xd6>
 8104582:	687b      	ldr	r3, [r7, #4]
 8104584:	681b      	ldr	r3, [r3, #0]
 8104586:	4a61      	ldr	r2, [pc, #388]	; (810470c <HAL_DMA_Abort+0x24c>)
 8104588:	4293      	cmp	r3, r2
 810458a:	d004      	beq.n	8104596 <HAL_DMA_Abort+0xd6>
 810458c:	687b      	ldr	r3, [r7, #4]
 810458e:	681b      	ldr	r3, [r3, #0]
 8104590:	4a5f      	ldr	r2, [pc, #380]	; (8104710 <HAL_DMA_Abort+0x250>)
 8104592:	4293      	cmp	r3, r2
 8104594:	d101      	bne.n	810459a <HAL_DMA_Abort+0xda>
 8104596:	2301      	movs	r3, #1
 8104598:	e000      	b.n	810459c <HAL_DMA_Abort+0xdc>
 810459a:	2300      	movs	r3, #0
 810459c:	2b00      	cmp	r3, #0
 810459e:	d013      	beq.n	81045c8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 81045a0:	687b      	ldr	r3, [r7, #4]
 81045a2:	681b      	ldr	r3, [r3, #0]
 81045a4:	681a      	ldr	r2, [r3, #0]
 81045a6:	687b      	ldr	r3, [r7, #4]
 81045a8:	681b      	ldr	r3, [r3, #0]
 81045aa:	f022 021e 	bic.w	r2, r2, #30
 81045ae:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 81045b0:	687b      	ldr	r3, [r7, #4]
 81045b2:	681b      	ldr	r3, [r3, #0]
 81045b4:	695a      	ldr	r2, [r3, #20]
 81045b6:	687b      	ldr	r3, [r7, #4]
 81045b8:	681b      	ldr	r3, [r3, #0]
 81045ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 81045be:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 81045c0:	687b      	ldr	r3, [r7, #4]
 81045c2:	681b      	ldr	r3, [r3, #0]
 81045c4:	617b      	str	r3, [r7, #20]
 81045c6:	e00a      	b.n	81045de <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 81045c8:	687b      	ldr	r3, [r7, #4]
 81045ca:	681b      	ldr	r3, [r3, #0]
 81045cc:	681a      	ldr	r2, [r3, #0]
 81045ce:	687b      	ldr	r3, [r7, #4]
 81045d0:	681b      	ldr	r3, [r3, #0]
 81045d2:	f022 020e 	bic.w	r2, r2, #14
 81045d6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 81045d8:	687b      	ldr	r3, [r7, #4]
 81045da:	681b      	ldr	r3, [r3, #0]
 81045dc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81045de:	687b      	ldr	r3, [r7, #4]
 81045e0:	681b      	ldr	r3, [r3, #0]
 81045e2:	4a3c      	ldr	r2, [pc, #240]	; (81046d4 <HAL_DMA_Abort+0x214>)
 81045e4:	4293      	cmp	r3, r2
 81045e6:	d072      	beq.n	81046ce <HAL_DMA_Abort+0x20e>
 81045e8:	687b      	ldr	r3, [r7, #4]
 81045ea:	681b      	ldr	r3, [r3, #0]
 81045ec:	4a3a      	ldr	r2, [pc, #232]	; (81046d8 <HAL_DMA_Abort+0x218>)
 81045ee:	4293      	cmp	r3, r2
 81045f0:	d06d      	beq.n	81046ce <HAL_DMA_Abort+0x20e>
 81045f2:	687b      	ldr	r3, [r7, #4]
 81045f4:	681b      	ldr	r3, [r3, #0]
 81045f6:	4a39      	ldr	r2, [pc, #228]	; (81046dc <HAL_DMA_Abort+0x21c>)
 81045f8:	4293      	cmp	r3, r2
 81045fa:	d068      	beq.n	81046ce <HAL_DMA_Abort+0x20e>
 81045fc:	687b      	ldr	r3, [r7, #4]
 81045fe:	681b      	ldr	r3, [r3, #0]
 8104600:	4a37      	ldr	r2, [pc, #220]	; (81046e0 <HAL_DMA_Abort+0x220>)
 8104602:	4293      	cmp	r3, r2
 8104604:	d063      	beq.n	81046ce <HAL_DMA_Abort+0x20e>
 8104606:	687b      	ldr	r3, [r7, #4]
 8104608:	681b      	ldr	r3, [r3, #0]
 810460a:	4a36      	ldr	r2, [pc, #216]	; (81046e4 <HAL_DMA_Abort+0x224>)
 810460c:	4293      	cmp	r3, r2
 810460e:	d05e      	beq.n	81046ce <HAL_DMA_Abort+0x20e>
 8104610:	687b      	ldr	r3, [r7, #4]
 8104612:	681b      	ldr	r3, [r3, #0]
 8104614:	4a34      	ldr	r2, [pc, #208]	; (81046e8 <HAL_DMA_Abort+0x228>)
 8104616:	4293      	cmp	r3, r2
 8104618:	d059      	beq.n	81046ce <HAL_DMA_Abort+0x20e>
 810461a:	687b      	ldr	r3, [r7, #4]
 810461c:	681b      	ldr	r3, [r3, #0]
 810461e:	4a33      	ldr	r2, [pc, #204]	; (81046ec <HAL_DMA_Abort+0x22c>)
 8104620:	4293      	cmp	r3, r2
 8104622:	d054      	beq.n	81046ce <HAL_DMA_Abort+0x20e>
 8104624:	687b      	ldr	r3, [r7, #4]
 8104626:	681b      	ldr	r3, [r3, #0]
 8104628:	4a31      	ldr	r2, [pc, #196]	; (81046f0 <HAL_DMA_Abort+0x230>)
 810462a:	4293      	cmp	r3, r2
 810462c:	d04f      	beq.n	81046ce <HAL_DMA_Abort+0x20e>
 810462e:	687b      	ldr	r3, [r7, #4]
 8104630:	681b      	ldr	r3, [r3, #0]
 8104632:	4a30      	ldr	r2, [pc, #192]	; (81046f4 <HAL_DMA_Abort+0x234>)
 8104634:	4293      	cmp	r3, r2
 8104636:	d04a      	beq.n	81046ce <HAL_DMA_Abort+0x20e>
 8104638:	687b      	ldr	r3, [r7, #4]
 810463a:	681b      	ldr	r3, [r3, #0]
 810463c:	4a2e      	ldr	r2, [pc, #184]	; (81046f8 <HAL_DMA_Abort+0x238>)
 810463e:	4293      	cmp	r3, r2
 8104640:	d045      	beq.n	81046ce <HAL_DMA_Abort+0x20e>
 8104642:	687b      	ldr	r3, [r7, #4]
 8104644:	681b      	ldr	r3, [r3, #0]
 8104646:	4a2d      	ldr	r2, [pc, #180]	; (81046fc <HAL_DMA_Abort+0x23c>)
 8104648:	4293      	cmp	r3, r2
 810464a:	d040      	beq.n	81046ce <HAL_DMA_Abort+0x20e>
 810464c:	687b      	ldr	r3, [r7, #4]
 810464e:	681b      	ldr	r3, [r3, #0]
 8104650:	4a2b      	ldr	r2, [pc, #172]	; (8104700 <HAL_DMA_Abort+0x240>)
 8104652:	4293      	cmp	r3, r2
 8104654:	d03b      	beq.n	81046ce <HAL_DMA_Abort+0x20e>
 8104656:	687b      	ldr	r3, [r7, #4]
 8104658:	681b      	ldr	r3, [r3, #0]
 810465a:	4a2a      	ldr	r2, [pc, #168]	; (8104704 <HAL_DMA_Abort+0x244>)
 810465c:	4293      	cmp	r3, r2
 810465e:	d036      	beq.n	81046ce <HAL_DMA_Abort+0x20e>
 8104660:	687b      	ldr	r3, [r7, #4]
 8104662:	681b      	ldr	r3, [r3, #0]
 8104664:	4a28      	ldr	r2, [pc, #160]	; (8104708 <HAL_DMA_Abort+0x248>)
 8104666:	4293      	cmp	r3, r2
 8104668:	d031      	beq.n	81046ce <HAL_DMA_Abort+0x20e>
 810466a:	687b      	ldr	r3, [r7, #4]
 810466c:	681b      	ldr	r3, [r3, #0]
 810466e:	4a27      	ldr	r2, [pc, #156]	; (810470c <HAL_DMA_Abort+0x24c>)
 8104670:	4293      	cmp	r3, r2
 8104672:	d02c      	beq.n	81046ce <HAL_DMA_Abort+0x20e>
 8104674:	687b      	ldr	r3, [r7, #4]
 8104676:	681b      	ldr	r3, [r3, #0]
 8104678:	4a25      	ldr	r2, [pc, #148]	; (8104710 <HAL_DMA_Abort+0x250>)
 810467a:	4293      	cmp	r3, r2
 810467c:	d027      	beq.n	81046ce <HAL_DMA_Abort+0x20e>
 810467e:	687b      	ldr	r3, [r7, #4]
 8104680:	681b      	ldr	r3, [r3, #0]
 8104682:	4a24      	ldr	r2, [pc, #144]	; (8104714 <HAL_DMA_Abort+0x254>)
 8104684:	4293      	cmp	r3, r2
 8104686:	d022      	beq.n	81046ce <HAL_DMA_Abort+0x20e>
 8104688:	687b      	ldr	r3, [r7, #4]
 810468a:	681b      	ldr	r3, [r3, #0]
 810468c:	4a22      	ldr	r2, [pc, #136]	; (8104718 <HAL_DMA_Abort+0x258>)
 810468e:	4293      	cmp	r3, r2
 8104690:	d01d      	beq.n	81046ce <HAL_DMA_Abort+0x20e>
 8104692:	687b      	ldr	r3, [r7, #4]
 8104694:	681b      	ldr	r3, [r3, #0]
 8104696:	4a21      	ldr	r2, [pc, #132]	; (810471c <HAL_DMA_Abort+0x25c>)
 8104698:	4293      	cmp	r3, r2
 810469a:	d018      	beq.n	81046ce <HAL_DMA_Abort+0x20e>
 810469c:	687b      	ldr	r3, [r7, #4]
 810469e:	681b      	ldr	r3, [r3, #0]
 81046a0:	4a1f      	ldr	r2, [pc, #124]	; (8104720 <HAL_DMA_Abort+0x260>)
 81046a2:	4293      	cmp	r3, r2
 81046a4:	d013      	beq.n	81046ce <HAL_DMA_Abort+0x20e>
 81046a6:	687b      	ldr	r3, [r7, #4]
 81046a8:	681b      	ldr	r3, [r3, #0]
 81046aa:	4a1e      	ldr	r2, [pc, #120]	; (8104724 <HAL_DMA_Abort+0x264>)
 81046ac:	4293      	cmp	r3, r2
 81046ae:	d00e      	beq.n	81046ce <HAL_DMA_Abort+0x20e>
 81046b0:	687b      	ldr	r3, [r7, #4]
 81046b2:	681b      	ldr	r3, [r3, #0]
 81046b4:	4a1c      	ldr	r2, [pc, #112]	; (8104728 <HAL_DMA_Abort+0x268>)
 81046b6:	4293      	cmp	r3, r2
 81046b8:	d009      	beq.n	81046ce <HAL_DMA_Abort+0x20e>
 81046ba:	687b      	ldr	r3, [r7, #4]
 81046bc:	681b      	ldr	r3, [r3, #0]
 81046be:	4a1b      	ldr	r2, [pc, #108]	; (810472c <HAL_DMA_Abort+0x26c>)
 81046c0:	4293      	cmp	r3, r2
 81046c2:	d004      	beq.n	81046ce <HAL_DMA_Abort+0x20e>
 81046c4:	687b      	ldr	r3, [r7, #4]
 81046c6:	681b      	ldr	r3, [r3, #0]
 81046c8:	4a19      	ldr	r2, [pc, #100]	; (8104730 <HAL_DMA_Abort+0x270>)
 81046ca:	4293      	cmp	r3, r2
 81046cc:	d132      	bne.n	8104734 <HAL_DMA_Abort+0x274>
 81046ce:	2301      	movs	r3, #1
 81046d0:	e031      	b.n	8104736 <HAL_DMA_Abort+0x276>
 81046d2:	bf00      	nop
 81046d4:	40020010 	.word	0x40020010
 81046d8:	40020028 	.word	0x40020028
 81046dc:	40020040 	.word	0x40020040
 81046e0:	40020058 	.word	0x40020058
 81046e4:	40020070 	.word	0x40020070
 81046e8:	40020088 	.word	0x40020088
 81046ec:	400200a0 	.word	0x400200a0
 81046f0:	400200b8 	.word	0x400200b8
 81046f4:	40020410 	.word	0x40020410
 81046f8:	40020428 	.word	0x40020428
 81046fc:	40020440 	.word	0x40020440
 8104700:	40020458 	.word	0x40020458
 8104704:	40020470 	.word	0x40020470
 8104708:	40020488 	.word	0x40020488
 810470c:	400204a0 	.word	0x400204a0
 8104710:	400204b8 	.word	0x400204b8
 8104714:	58025408 	.word	0x58025408
 8104718:	5802541c 	.word	0x5802541c
 810471c:	58025430 	.word	0x58025430
 8104720:	58025444 	.word	0x58025444
 8104724:	58025458 	.word	0x58025458
 8104728:	5802546c 	.word	0x5802546c
 810472c:	58025480 	.word	0x58025480
 8104730:	58025494 	.word	0x58025494
 8104734:	2300      	movs	r3, #0
 8104736:	2b00      	cmp	r3, #0
 8104738:	d007      	beq.n	810474a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 810473a:	687b      	ldr	r3, [r7, #4]
 810473c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810473e:	681a      	ldr	r2, [r3, #0]
 8104740:	687b      	ldr	r3, [r7, #4]
 8104742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104744:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8104748:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 810474a:	687b      	ldr	r3, [r7, #4]
 810474c:	681b      	ldr	r3, [r3, #0]
 810474e:	4a6d      	ldr	r2, [pc, #436]	; (8104904 <HAL_DMA_Abort+0x444>)
 8104750:	4293      	cmp	r3, r2
 8104752:	d04a      	beq.n	81047ea <HAL_DMA_Abort+0x32a>
 8104754:	687b      	ldr	r3, [r7, #4]
 8104756:	681b      	ldr	r3, [r3, #0]
 8104758:	4a6b      	ldr	r2, [pc, #428]	; (8104908 <HAL_DMA_Abort+0x448>)
 810475a:	4293      	cmp	r3, r2
 810475c:	d045      	beq.n	81047ea <HAL_DMA_Abort+0x32a>
 810475e:	687b      	ldr	r3, [r7, #4]
 8104760:	681b      	ldr	r3, [r3, #0]
 8104762:	4a6a      	ldr	r2, [pc, #424]	; (810490c <HAL_DMA_Abort+0x44c>)
 8104764:	4293      	cmp	r3, r2
 8104766:	d040      	beq.n	81047ea <HAL_DMA_Abort+0x32a>
 8104768:	687b      	ldr	r3, [r7, #4]
 810476a:	681b      	ldr	r3, [r3, #0]
 810476c:	4a68      	ldr	r2, [pc, #416]	; (8104910 <HAL_DMA_Abort+0x450>)
 810476e:	4293      	cmp	r3, r2
 8104770:	d03b      	beq.n	81047ea <HAL_DMA_Abort+0x32a>
 8104772:	687b      	ldr	r3, [r7, #4]
 8104774:	681b      	ldr	r3, [r3, #0]
 8104776:	4a67      	ldr	r2, [pc, #412]	; (8104914 <HAL_DMA_Abort+0x454>)
 8104778:	4293      	cmp	r3, r2
 810477a:	d036      	beq.n	81047ea <HAL_DMA_Abort+0x32a>
 810477c:	687b      	ldr	r3, [r7, #4]
 810477e:	681b      	ldr	r3, [r3, #0]
 8104780:	4a65      	ldr	r2, [pc, #404]	; (8104918 <HAL_DMA_Abort+0x458>)
 8104782:	4293      	cmp	r3, r2
 8104784:	d031      	beq.n	81047ea <HAL_DMA_Abort+0x32a>
 8104786:	687b      	ldr	r3, [r7, #4]
 8104788:	681b      	ldr	r3, [r3, #0]
 810478a:	4a64      	ldr	r2, [pc, #400]	; (810491c <HAL_DMA_Abort+0x45c>)
 810478c:	4293      	cmp	r3, r2
 810478e:	d02c      	beq.n	81047ea <HAL_DMA_Abort+0x32a>
 8104790:	687b      	ldr	r3, [r7, #4]
 8104792:	681b      	ldr	r3, [r3, #0]
 8104794:	4a62      	ldr	r2, [pc, #392]	; (8104920 <HAL_DMA_Abort+0x460>)
 8104796:	4293      	cmp	r3, r2
 8104798:	d027      	beq.n	81047ea <HAL_DMA_Abort+0x32a>
 810479a:	687b      	ldr	r3, [r7, #4]
 810479c:	681b      	ldr	r3, [r3, #0]
 810479e:	4a61      	ldr	r2, [pc, #388]	; (8104924 <HAL_DMA_Abort+0x464>)
 81047a0:	4293      	cmp	r3, r2
 81047a2:	d022      	beq.n	81047ea <HAL_DMA_Abort+0x32a>
 81047a4:	687b      	ldr	r3, [r7, #4]
 81047a6:	681b      	ldr	r3, [r3, #0]
 81047a8:	4a5f      	ldr	r2, [pc, #380]	; (8104928 <HAL_DMA_Abort+0x468>)
 81047aa:	4293      	cmp	r3, r2
 81047ac:	d01d      	beq.n	81047ea <HAL_DMA_Abort+0x32a>
 81047ae:	687b      	ldr	r3, [r7, #4]
 81047b0:	681b      	ldr	r3, [r3, #0]
 81047b2:	4a5e      	ldr	r2, [pc, #376]	; (810492c <HAL_DMA_Abort+0x46c>)
 81047b4:	4293      	cmp	r3, r2
 81047b6:	d018      	beq.n	81047ea <HAL_DMA_Abort+0x32a>
 81047b8:	687b      	ldr	r3, [r7, #4]
 81047ba:	681b      	ldr	r3, [r3, #0]
 81047bc:	4a5c      	ldr	r2, [pc, #368]	; (8104930 <HAL_DMA_Abort+0x470>)
 81047be:	4293      	cmp	r3, r2
 81047c0:	d013      	beq.n	81047ea <HAL_DMA_Abort+0x32a>
 81047c2:	687b      	ldr	r3, [r7, #4]
 81047c4:	681b      	ldr	r3, [r3, #0]
 81047c6:	4a5b      	ldr	r2, [pc, #364]	; (8104934 <HAL_DMA_Abort+0x474>)
 81047c8:	4293      	cmp	r3, r2
 81047ca:	d00e      	beq.n	81047ea <HAL_DMA_Abort+0x32a>
 81047cc:	687b      	ldr	r3, [r7, #4]
 81047ce:	681b      	ldr	r3, [r3, #0]
 81047d0:	4a59      	ldr	r2, [pc, #356]	; (8104938 <HAL_DMA_Abort+0x478>)
 81047d2:	4293      	cmp	r3, r2
 81047d4:	d009      	beq.n	81047ea <HAL_DMA_Abort+0x32a>
 81047d6:	687b      	ldr	r3, [r7, #4]
 81047d8:	681b      	ldr	r3, [r3, #0]
 81047da:	4a58      	ldr	r2, [pc, #352]	; (810493c <HAL_DMA_Abort+0x47c>)
 81047dc:	4293      	cmp	r3, r2
 81047de:	d004      	beq.n	81047ea <HAL_DMA_Abort+0x32a>
 81047e0:	687b      	ldr	r3, [r7, #4]
 81047e2:	681b      	ldr	r3, [r3, #0]
 81047e4:	4a56      	ldr	r2, [pc, #344]	; (8104940 <HAL_DMA_Abort+0x480>)
 81047e6:	4293      	cmp	r3, r2
 81047e8:	d108      	bne.n	81047fc <HAL_DMA_Abort+0x33c>
 81047ea:	687b      	ldr	r3, [r7, #4]
 81047ec:	681b      	ldr	r3, [r3, #0]
 81047ee:	681a      	ldr	r2, [r3, #0]
 81047f0:	687b      	ldr	r3, [r7, #4]
 81047f2:	681b      	ldr	r3, [r3, #0]
 81047f4:	f022 0201 	bic.w	r2, r2, #1
 81047f8:	601a      	str	r2, [r3, #0]
 81047fa:	e007      	b.n	810480c <HAL_DMA_Abort+0x34c>
 81047fc:	687b      	ldr	r3, [r7, #4]
 81047fe:	681b      	ldr	r3, [r3, #0]
 8104800:	681a      	ldr	r2, [r3, #0]
 8104802:	687b      	ldr	r3, [r7, #4]
 8104804:	681b      	ldr	r3, [r3, #0]
 8104806:	f022 0201 	bic.w	r2, r2, #1
 810480a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 810480c:	e013      	b.n	8104836 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 810480e:	f7fc ffc1 	bl	8101794 <HAL_GetTick>
 8104812:	4602      	mov	r2, r0
 8104814:	693b      	ldr	r3, [r7, #16]
 8104816:	1ad3      	subs	r3, r2, r3
 8104818:	2b05      	cmp	r3, #5
 810481a:	d90c      	bls.n	8104836 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 810481c:	687b      	ldr	r3, [r7, #4]
 810481e:	2220      	movs	r2, #32
 8104820:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8104822:	687b      	ldr	r3, [r7, #4]
 8104824:	2200      	movs	r2, #0
 8104826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 810482a:	687b      	ldr	r3, [r7, #4]
 810482c:	2203      	movs	r2, #3
 810482e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8104832:	2301      	movs	r3, #1
 8104834:	e12d      	b.n	8104a92 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8104836:	697b      	ldr	r3, [r7, #20]
 8104838:	681b      	ldr	r3, [r3, #0]
 810483a:	f003 0301 	and.w	r3, r3, #1
 810483e:	2b00      	cmp	r3, #0
 8104840:	d1e5      	bne.n	810480e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104842:	687b      	ldr	r3, [r7, #4]
 8104844:	681b      	ldr	r3, [r3, #0]
 8104846:	4a2f      	ldr	r2, [pc, #188]	; (8104904 <HAL_DMA_Abort+0x444>)
 8104848:	4293      	cmp	r3, r2
 810484a:	d04a      	beq.n	81048e2 <HAL_DMA_Abort+0x422>
 810484c:	687b      	ldr	r3, [r7, #4]
 810484e:	681b      	ldr	r3, [r3, #0]
 8104850:	4a2d      	ldr	r2, [pc, #180]	; (8104908 <HAL_DMA_Abort+0x448>)
 8104852:	4293      	cmp	r3, r2
 8104854:	d045      	beq.n	81048e2 <HAL_DMA_Abort+0x422>
 8104856:	687b      	ldr	r3, [r7, #4]
 8104858:	681b      	ldr	r3, [r3, #0]
 810485a:	4a2c      	ldr	r2, [pc, #176]	; (810490c <HAL_DMA_Abort+0x44c>)
 810485c:	4293      	cmp	r3, r2
 810485e:	d040      	beq.n	81048e2 <HAL_DMA_Abort+0x422>
 8104860:	687b      	ldr	r3, [r7, #4]
 8104862:	681b      	ldr	r3, [r3, #0]
 8104864:	4a2a      	ldr	r2, [pc, #168]	; (8104910 <HAL_DMA_Abort+0x450>)
 8104866:	4293      	cmp	r3, r2
 8104868:	d03b      	beq.n	81048e2 <HAL_DMA_Abort+0x422>
 810486a:	687b      	ldr	r3, [r7, #4]
 810486c:	681b      	ldr	r3, [r3, #0]
 810486e:	4a29      	ldr	r2, [pc, #164]	; (8104914 <HAL_DMA_Abort+0x454>)
 8104870:	4293      	cmp	r3, r2
 8104872:	d036      	beq.n	81048e2 <HAL_DMA_Abort+0x422>
 8104874:	687b      	ldr	r3, [r7, #4]
 8104876:	681b      	ldr	r3, [r3, #0]
 8104878:	4a27      	ldr	r2, [pc, #156]	; (8104918 <HAL_DMA_Abort+0x458>)
 810487a:	4293      	cmp	r3, r2
 810487c:	d031      	beq.n	81048e2 <HAL_DMA_Abort+0x422>
 810487e:	687b      	ldr	r3, [r7, #4]
 8104880:	681b      	ldr	r3, [r3, #0]
 8104882:	4a26      	ldr	r2, [pc, #152]	; (810491c <HAL_DMA_Abort+0x45c>)
 8104884:	4293      	cmp	r3, r2
 8104886:	d02c      	beq.n	81048e2 <HAL_DMA_Abort+0x422>
 8104888:	687b      	ldr	r3, [r7, #4]
 810488a:	681b      	ldr	r3, [r3, #0]
 810488c:	4a24      	ldr	r2, [pc, #144]	; (8104920 <HAL_DMA_Abort+0x460>)
 810488e:	4293      	cmp	r3, r2
 8104890:	d027      	beq.n	81048e2 <HAL_DMA_Abort+0x422>
 8104892:	687b      	ldr	r3, [r7, #4]
 8104894:	681b      	ldr	r3, [r3, #0]
 8104896:	4a23      	ldr	r2, [pc, #140]	; (8104924 <HAL_DMA_Abort+0x464>)
 8104898:	4293      	cmp	r3, r2
 810489a:	d022      	beq.n	81048e2 <HAL_DMA_Abort+0x422>
 810489c:	687b      	ldr	r3, [r7, #4]
 810489e:	681b      	ldr	r3, [r3, #0]
 81048a0:	4a21      	ldr	r2, [pc, #132]	; (8104928 <HAL_DMA_Abort+0x468>)
 81048a2:	4293      	cmp	r3, r2
 81048a4:	d01d      	beq.n	81048e2 <HAL_DMA_Abort+0x422>
 81048a6:	687b      	ldr	r3, [r7, #4]
 81048a8:	681b      	ldr	r3, [r3, #0]
 81048aa:	4a20      	ldr	r2, [pc, #128]	; (810492c <HAL_DMA_Abort+0x46c>)
 81048ac:	4293      	cmp	r3, r2
 81048ae:	d018      	beq.n	81048e2 <HAL_DMA_Abort+0x422>
 81048b0:	687b      	ldr	r3, [r7, #4]
 81048b2:	681b      	ldr	r3, [r3, #0]
 81048b4:	4a1e      	ldr	r2, [pc, #120]	; (8104930 <HAL_DMA_Abort+0x470>)
 81048b6:	4293      	cmp	r3, r2
 81048b8:	d013      	beq.n	81048e2 <HAL_DMA_Abort+0x422>
 81048ba:	687b      	ldr	r3, [r7, #4]
 81048bc:	681b      	ldr	r3, [r3, #0]
 81048be:	4a1d      	ldr	r2, [pc, #116]	; (8104934 <HAL_DMA_Abort+0x474>)
 81048c0:	4293      	cmp	r3, r2
 81048c2:	d00e      	beq.n	81048e2 <HAL_DMA_Abort+0x422>
 81048c4:	687b      	ldr	r3, [r7, #4]
 81048c6:	681b      	ldr	r3, [r3, #0]
 81048c8:	4a1b      	ldr	r2, [pc, #108]	; (8104938 <HAL_DMA_Abort+0x478>)
 81048ca:	4293      	cmp	r3, r2
 81048cc:	d009      	beq.n	81048e2 <HAL_DMA_Abort+0x422>
 81048ce:	687b      	ldr	r3, [r7, #4]
 81048d0:	681b      	ldr	r3, [r3, #0]
 81048d2:	4a1a      	ldr	r2, [pc, #104]	; (810493c <HAL_DMA_Abort+0x47c>)
 81048d4:	4293      	cmp	r3, r2
 81048d6:	d004      	beq.n	81048e2 <HAL_DMA_Abort+0x422>
 81048d8:	687b      	ldr	r3, [r7, #4]
 81048da:	681b      	ldr	r3, [r3, #0]
 81048dc:	4a18      	ldr	r2, [pc, #96]	; (8104940 <HAL_DMA_Abort+0x480>)
 81048de:	4293      	cmp	r3, r2
 81048e0:	d101      	bne.n	81048e6 <HAL_DMA_Abort+0x426>
 81048e2:	2301      	movs	r3, #1
 81048e4:	e000      	b.n	81048e8 <HAL_DMA_Abort+0x428>
 81048e6:	2300      	movs	r3, #0
 81048e8:	2b00      	cmp	r3, #0
 81048ea:	d02b      	beq.n	8104944 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 81048ec:	687b      	ldr	r3, [r7, #4]
 81048ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81048f0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81048f2:	687b      	ldr	r3, [r7, #4]
 81048f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81048f6:	f003 031f 	and.w	r3, r3, #31
 81048fa:	223f      	movs	r2, #63	; 0x3f
 81048fc:	409a      	lsls	r2, r3
 81048fe:	68bb      	ldr	r3, [r7, #8]
 8104900:	609a      	str	r2, [r3, #8]
 8104902:	e02a      	b.n	810495a <HAL_DMA_Abort+0x49a>
 8104904:	40020010 	.word	0x40020010
 8104908:	40020028 	.word	0x40020028
 810490c:	40020040 	.word	0x40020040
 8104910:	40020058 	.word	0x40020058
 8104914:	40020070 	.word	0x40020070
 8104918:	40020088 	.word	0x40020088
 810491c:	400200a0 	.word	0x400200a0
 8104920:	400200b8 	.word	0x400200b8
 8104924:	40020410 	.word	0x40020410
 8104928:	40020428 	.word	0x40020428
 810492c:	40020440 	.word	0x40020440
 8104930:	40020458 	.word	0x40020458
 8104934:	40020470 	.word	0x40020470
 8104938:	40020488 	.word	0x40020488
 810493c:	400204a0 	.word	0x400204a0
 8104940:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8104944:	687b      	ldr	r3, [r7, #4]
 8104946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104948:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 810494a:	687b      	ldr	r3, [r7, #4]
 810494c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810494e:	f003 031f 	and.w	r3, r3, #31
 8104952:	2201      	movs	r2, #1
 8104954:	409a      	lsls	r2, r3
 8104956:	68fb      	ldr	r3, [r7, #12]
 8104958:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810495a:	687b      	ldr	r3, [r7, #4]
 810495c:	681b      	ldr	r3, [r3, #0]
 810495e:	4a4f      	ldr	r2, [pc, #316]	; (8104a9c <HAL_DMA_Abort+0x5dc>)
 8104960:	4293      	cmp	r3, r2
 8104962:	d072      	beq.n	8104a4a <HAL_DMA_Abort+0x58a>
 8104964:	687b      	ldr	r3, [r7, #4]
 8104966:	681b      	ldr	r3, [r3, #0]
 8104968:	4a4d      	ldr	r2, [pc, #308]	; (8104aa0 <HAL_DMA_Abort+0x5e0>)
 810496a:	4293      	cmp	r3, r2
 810496c:	d06d      	beq.n	8104a4a <HAL_DMA_Abort+0x58a>
 810496e:	687b      	ldr	r3, [r7, #4]
 8104970:	681b      	ldr	r3, [r3, #0]
 8104972:	4a4c      	ldr	r2, [pc, #304]	; (8104aa4 <HAL_DMA_Abort+0x5e4>)
 8104974:	4293      	cmp	r3, r2
 8104976:	d068      	beq.n	8104a4a <HAL_DMA_Abort+0x58a>
 8104978:	687b      	ldr	r3, [r7, #4]
 810497a:	681b      	ldr	r3, [r3, #0]
 810497c:	4a4a      	ldr	r2, [pc, #296]	; (8104aa8 <HAL_DMA_Abort+0x5e8>)
 810497e:	4293      	cmp	r3, r2
 8104980:	d063      	beq.n	8104a4a <HAL_DMA_Abort+0x58a>
 8104982:	687b      	ldr	r3, [r7, #4]
 8104984:	681b      	ldr	r3, [r3, #0]
 8104986:	4a49      	ldr	r2, [pc, #292]	; (8104aac <HAL_DMA_Abort+0x5ec>)
 8104988:	4293      	cmp	r3, r2
 810498a:	d05e      	beq.n	8104a4a <HAL_DMA_Abort+0x58a>
 810498c:	687b      	ldr	r3, [r7, #4]
 810498e:	681b      	ldr	r3, [r3, #0]
 8104990:	4a47      	ldr	r2, [pc, #284]	; (8104ab0 <HAL_DMA_Abort+0x5f0>)
 8104992:	4293      	cmp	r3, r2
 8104994:	d059      	beq.n	8104a4a <HAL_DMA_Abort+0x58a>
 8104996:	687b      	ldr	r3, [r7, #4]
 8104998:	681b      	ldr	r3, [r3, #0]
 810499a:	4a46      	ldr	r2, [pc, #280]	; (8104ab4 <HAL_DMA_Abort+0x5f4>)
 810499c:	4293      	cmp	r3, r2
 810499e:	d054      	beq.n	8104a4a <HAL_DMA_Abort+0x58a>
 81049a0:	687b      	ldr	r3, [r7, #4]
 81049a2:	681b      	ldr	r3, [r3, #0]
 81049a4:	4a44      	ldr	r2, [pc, #272]	; (8104ab8 <HAL_DMA_Abort+0x5f8>)
 81049a6:	4293      	cmp	r3, r2
 81049a8:	d04f      	beq.n	8104a4a <HAL_DMA_Abort+0x58a>
 81049aa:	687b      	ldr	r3, [r7, #4]
 81049ac:	681b      	ldr	r3, [r3, #0]
 81049ae:	4a43      	ldr	r2, [pc, #268]	; (8104abc <HAL_DMA_Abort+0x5fc>)
 81049b0:	4293      	cmp	r3, r2
 81049b2:	d04a      	beq.n	8104a4a <HAL_DMA_Abort+0x58a>
 81049b4:	687b      	ldr	r3, [r7, #4]
 81049b6:	681b      	ldr	r3, [r3, #0]
 81049b8:	4a41      	ldr	r2, [pc, #260]	; (8104ac0 <HAL_DMA_Abort+0x600>)
 81049ba:	4293      	cmp	r3, r2
 81049bc:	d045      	beq.n	8104a4a <HAL_DMA_Abort+0x58a>
 81049be:	687b      	ldr	r3, [r7, #4]
 81049c0:	681b      	ldr	r3, [r3, #0]
 81049c2:	4a40      	ldr	r2, [pc, #256]	; (8104ac4 <HAL_DMA_Abort+0x604>)
 81049c4:	4293      	cmp	r3, r2
 81049c6:	d040      	beq.n	8104a4a <HAL_DMA_Abort+0x58a>
 81049c8:	687b      	ldr	r3, [r7, #4]
 81049ca:	681b      	ldr	r3, [r3, #0]
 81049cc:	4a3e      	ldr	r2, [pc, #248]	; (8104ac8 <HAL_DMA_Abort+0x608>)
 81049ce:	4293      	cmp	r3, r2
 81049d0:	d03b      	beq.n	8104a4a <HAL_DMA_Abort+0x58a>
 81049d2:	687b      	ldr	r3, [r7, #4]
 81049d4:	681b      	ldr	r3, [r3, #0]
 81049d6:	4a3d      	ldr	r2, [pc, #244]	; (8104acc <HAL_DMA_Abort+0x60c>)
 81049d8:	4293      	cmp	r3, r2
 81049da:	d036      	beq.n	8104a4a <HAL_DMA_Abort+0x58a>
 81049dc:	687b      	ldr	r3, [r7, #4]
 81049de:	681b      	ldr	r3, [r3, #0]
 81049e0:	4a3b      	ldr	r2, [pc, #236]	; (8104ad0 <HAL_DMA_Abort+0x610>)
 81049e2:	4293      	cmp	r3, r2
 81049e4:	d031      	beq.n	8104a4a <HAL_DMA_Abort+0x58a>
 81049e6:	687b      	ldr	r3, [r7, #4]
 81049e8:	681b      	ldr	r3, [r3, #0]
 81049ea:	4a3a      	ldr	r2, [pc, #232]	; (8104ad4 <HAL_DMA_Abort+0x614>)
 81049ec:	4293      	cmp	r3, r2
 81049ee:	d02c      	beq.n	8104a4a <HAL_DMA_Abort+0x58a>
 81049f0:	687b      	ldr	r3, [r7, #4]
 81049f2:	681b      	ldr	r3, [r3, #0]
 81049f4:	4a38      	ldr	r2, [pc, #224]	; (8104ad8 <HAL_DMA_Abort+0x618>)
 81049f6:	4293      	cmp	r3, r2
 81049f8:	d027      	beq.n	8104a4a <HAL_DMA_Abort+0x58a>
 81049fa:	687b      	ldr	r3, [r7, #4]
 81049fc:	681b      	ldr	r3, [r3, #0]
 81049fe:	4a37      	ldr	r2, [pc, #220]	; (8104adc <HAL_DMA_Abort+0x61c>)
 8104a00:	4293      	cmp	r3, r2
 8104a02:	d022      	beq.n	8104a4a <HAL_DMA_Abort+0x58a>
 8104a04:	687b      	ldr	r3, [r7, #4]
 8104a06:	681b      	ldr	r3, [r3, #0]
 8104a08:	4a35      	ldr	r2, [pc, #212]	; (8104ae0 <HAL_DMA_Abort+0x620>)
 8104a0a:	4293      	cmp	r3, r2
 8104a0c:	d01d      	beq.n	8104a4a <HAL_DMA_Abort+0x58a>
 8104a0e:	687b      	ldr	r3, [r7, #4]
 8104a10:	681b      	ldr	r3, [r3, #0]
 8104a12:	4a34      	ldr	r2, [pc, #208]	; (8104ae4 <HAL_DMA_Abort+0x624>)
 8104a14:	4293      	cmp	r3, r2
 8104a16:	d018      	beq.n	8104a4a <HAL_DMA_Abort+0x58a>
 8104a18:	687b      	ldr	r3, [r7, #4]
 8104a1a:	681b      	ldr	r3, [r3, #0]
 8104a1c:	4a32      	ldr	r2, [pc, #200]	; (8104ae8 <HAL_DMA_Abort+0x628>)
 8104a1e:	4293      	cmp	r3, r2
 8104a20:	d013      	beq.n	8104a4a <HAL_DMA_Abort+0x58a>
 8104a22:	687b      	ldr	r3, [r7, #4]
 8104a24:	681b      	ldr	r3, [r3, #0]
 8104a26:	4a31      	ldr	r2, [pc, #196]	; (8104aec <HAL_DMA_Abort+0x62c>)
 8104a28:	4293      	cmp	r3, r2
 8104a2a:	d00e      	beq.n	8104a4a <HAL_DMA_Abort+0x58a>
 8104a2c:	687b      	ldr	r3, [r7, #4]
 8104a2e:	681b      	ldr	r3, [r3, #0]
 8104a30:	4a2f      	ldr	r2, [pc, #188]	; (8104af0 <HAL_DMA_Abort+0x630>)
 8104a32:	4293      	cmp	r3, r2
 8104a34:	d009      	beq.n	8104a4a <HAL_DMA_Abort+0x58a>
 8104a36:	687b      	ldr	r3, [r7, #4]
 8104a38:	681b      	ldr	r3, [r3, #0]
 8104a3a:	4a2e      	ldr	r2, [pc, #184]	; (8104af4 <HAL_DMA_Abort+0x634>)
 8104a3c:	4293      	cmp	r3, r2
 8104a3e:	d004      	beq.n	8104a4a <HAL_DMA_Abort+0x58a>
 8104a40:	687b      	ldr	r3, [r7, #4]
 8104a42:	681b      	ldr	r3, [r3, #0]
 8104a44:	4a2c      	ldr	r2, [pc, #176]	; (8104af8 <HAL_DMA_Abort+0x638>)
 8104a46:	4293      	cmp	r3, r2
 8104a48:	d101      	bne.n	8104a4e <HAL_DMA_Abort+0x58e>
 8104a4a:	2301      	movs	r3, #1
 8104a4c:	e000      	b.n	8104a50 <HAL_DMA_Abort+0x590>
 8104a4e:	2300      	movs	r3, #0
 8104a50:	2b00      	cmp	r3, #0
 8104a52:	d015      	beq.n	8104a80 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8104a54:	687b      	ldr	r3, [r7, #4]
 8104a56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104a58:	687a      	ldr	r2, [r7, #4]
 8104a5a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8104a5c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8104a5e:	687b      	ldr	r3, [r7, #4]
 8104a60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104a62:	2b00      	cmp	r3, #0
 8104a64:	d00c      	beq.n	8104a80 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8104a66:	687b      	ldr	r3, [r7, #4]
 8104a68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104a6a:	681a      	ldr	r2, [r3, #0]
 8104a6c:	687b      	ldr	r3, [r7, #4]
 8104a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104a70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8104a74:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8104a76:	687b      	ldr	r3, [r7, #4]
 8104a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104a7a:	687a      	ldr	r2, [r7, #4]
 8104a7c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8104a7e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8104a80:	687b      	ldr	r3, [r7, #4]
 8104a82:	2200      	movs	r2, #0
 8104a84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8104a88:	687b      	ldr	r3, [r7, #4]
 8104a8a:	2201      	movs	r2, #1
 8104a8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8104a90:	2300      	movs	r3, #0
}
 8104a92:	4618      	mov	r0, r3
 8104a94:	3718      	adds	r7, #24
 8104a96:	46bd      	mov	sp, r7
 8104a98:	bd80      	pop	{r7, pc}
 8104a9a:	bf00      	nop
 8104a9c:	40020010 	.word	0x40020010
 8104aa0:	40020028 	.word	0x40020028
 8104aa4:	40020040 	.word	0x40020040
 8104aa8:	40020058 	.word	0x40020058
 8104aac:	40020070 	.word	0x40020070
 8104ab0:	40020088 	.word	0x40020088
 8104ab4:	400200a0 	.word	0x400200a0
 8104ab8:	400200b8 	.word	0x400200b8
 8104abc:	40020410 	.word	0x40020410
 8104ac0:	40020428 	.word	0x40020428
 8104ac4:	40020440 	.word	0x40020440
 8104ac8:	40020458 	.word	0x40020458
 8104acc:	40020470 	.word	0x40020470
 8104ad0:	40020488 	.word	0x40020488
 8104ad4:	400204a0 	.word	0x400204a0
 8104ad8:	400204b8 	.word	0x400204b8
 8104adc:	58025408 	.word	0x58025408
 8104ae0:	5802541c 	.word	0x5802541c
 8104ae4:	58025430 	.word	0x58025430
 8104ae8:	58025444 	.word	0x58025444
 8104aec:	58025458 	.word	0x58025458
 8104af0:	5802546c 	.word	0x5802546c
 8104af4:	58025480 	.word	0x58025480
 8104af8:	58025494 	.word	0x58025494

08104afc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8104afc:	b580      	push	{r7, lr}
 8104afe:	b084      	sub	sp, #16
 8104b00:	af00      	add	r7, sp, #0
 8104b02:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8104b04:	687b      	ldr	r3, [r7, #4]
 8104b06:	2b00      	cmp	r3, #0
 8104b08:	d101      	bne.n	8104b0e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8104b0a:	2301      	movs	r3, #1
 8104b0c:	e205      	b.n	8104f1a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8104b0e:	687b      	ldr	r3, [r7, #4]
 8104b10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8104b14:	b2db      	uxtb	r3, r3
 8104b16:	2b02      	cmp	r3, #2
 8104b18:	d004      	beq.n	8104b24 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8104b1a:	687b      	ldr	r3, [r7, #4]
 8104b1c:	2280      	movs	r2, #128	; 0x80
 8104b1e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8104b20:	2301      	movs	r3, #1
 8104b22:	e1fa      	b.n	8104f1a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104b24:	687b      	ldr	r3, [r7, #4]
 8104b26:	681b      	ldr	r3, [r3, #0]
 8104b28:	4a8c      	ldr	r2, [pc, #560]	; (8104d5c <HAL_DMA_Abort_IT+0x260>)
 8104b2a:	4293      	cmp	r3, r2
 8104b2c:	d04a      	beq.n	8104bc4 <HAL_DMA_Abort_IT+0xc8>
 8104b2e:	687b      	ldr	r3, [r7, #4]
 8104b30:	681b      	ldr	r3, [r3, #0]
 8104b32:	4a8b      	ldr	r2, [pc, #556]	; (8104d60 <HAL_DMA_Abort_IT+0x264>)
 8104b34:	4293      	cmp	r3, r2
 8104b36:	d045      	beq.n	8104bc4 <HAL_DMA_Abort_IT+0xc8>
 8104b38:	687b      	ldr	r3, [r7, #4]
 8104b3a:	681b      	ldr	r3, [r3, #0]
 8104b3c:	4a89      	ldr	r2, [pc, #548]	; (8104d64 <HAL_DMA_Abort_IT+0x268>)
 8104b3e:	4293      	cmp	r3, r2
 8104b40:	d040      	beq.n	8104bc4 <HAL_DMA_Abort_IT+0xc8>
 8104b42:	687b      	ldr	r3, [r7, #4]
 8104b44:	681b      	ldr	r3, [r3, #0]
 8104b46:	4a88      	ldr	r2, [pc, #544]	; (8104d68 <HAL_DMA_Abort_IT+0x26c>)
 8104b48:	4293      	cmp	r3, r2
 8104b4a:	d03b      	beq.n	8104bc4 <HAL_DMA_Abort_IT+0xc8>
 8104b4c:	687b      	ldr	r3, [r7, #4]
 8104b4e:	681b      	ldr	r3, [r3, #0]
 8104b50:	4a86      	ldr	r2, [pc, #536]	; (8104d6c <HAL_DMA_Abort_IT+0x270>)
 8104b52:	4293      	cmp	r3, r2
 8104b54:	d036      	beq.n	8104bc4 <HAL_DMA_Abort_IT+0xc8>
 8104b56:	687b      	ldr	r3, [r7, #4]
 8104b58:	681b      	ldr	r3, [r3, #0]
 8104b5a:	4a85      	ldr	r2, [pc, #532]	; (8104d70 <HAL_DMA_Abort_IT+0x274>)
 8104b5c:	4293      	cmp	r3, r2
 8104b5e:	d031      	beq.n	8104bc4 <HAL_DMA_Abort_IT+0xc8>
 8104b60:	687b      	ldr	r3, [r7, #4]
 8104b62:	681b      	ldr	r3, [r3, #0]
 8104b64:	4a83      	ldr	r2, [pc, #524]	; (8104d74 <HAL_DMA_Abort_IT+0x278>)
 8104b66:	4293      	cmp	r3, r2
 8104b68:	d02c      	beq.n	8104bc4 <HAL_DMA_Abort_IT+0xc8>
 8104b6a:	687b      	ldr	r3, [r7, #4]
 8104b6c:	681b      	ldr	r3, [r3, #0]
 8104b6e:	4a82      	ldr	r2, [pc, #520]	; (8104d78 <HAL_DMA_Abort_IT+0x27c>)
 8104b70:	4293      	cmp	r3, r2
 8104b72:	d027      	beq.n	8104bc4 <HAL_DMA_Abort_IT+0xc8>
 8104b74:	687b      	ldr	r3, [r7, #4]
 8104b76:	681b      	ldr	r3, [r3, #0]
 8104b78:	4a80      	ldr	r2, [pc, #512]	; (8104d7c <HAL_DMA_Abort_IT+0x280>)
 8104b7a:	4293      	cmp	r3, r2
 8104b7c:	d022      	beq.n	8104bc4 <HAL_DMA_Abort_IT+0xc8>
 8104b7e:	687b      	ldr	r3, [r7, #4]
 8104b80:	681b      	ldr	r3, [r3, #0]
 8104b82:	4a7f      	ldr	r2, [pc, #508]	; (8104d80 <HAL_DMA_Abort_IT+0x284>)
 8104b84:	4293      	cmp	r3, r2
 8104b86:	d01d      	beq.n	8104bc4 <HAL_DMA_Abort_IT+0xc8>
 8104b88:	687b      	ldr	r3, [r7, #4]
 8104b8a:	681b      	ldr	r3, [r3, #0]
 8104b8c:	4a7d      	ldr	r2, [pc, #500]	; (8104d84 <HAL_DMA_Abort_IT+0x288>)
 8104b8e:	4293      	cmp	r3, r2
 8104b90:	d018      	beq.n	8104bc4 <HAL_DMA_Abort_IT+0xc8>
 8104b92:	687b      	ldr	r3, [r7, #4]
 8104b94:	681b      	ldr	r3, [r3, #0]
 8104b96:	4a7c      	ldr	r2, [pc, #496]	; (8104d88 <HAL_DMA_Abort_IT+0x28c>)
 8104b98:	4293      	cmp	r3, r2
 8104b9a:	d013      	beq.n	8104bc4 <HAL_DMA_Abort_IT+0xc8>
 8104b9c:	687b      	ldr	r3, [r7, #4]
 8104b9e:	681b      	ldr	r3, [r3, #0]
 8104ba0:	4a7a      	ldr	r2, [pc, #488]	; (8104d8c <HAL_DMA_Abort_IT+0x290>)
 8104ba2:	4293      	cmp	r3, r2
 8104ba4:	d00e      	beq.n	8104bc4 <HAL_DMA_Abort_IT+0xc8>
 8104ba6:	687b      	ldr	r3, [r7, #4]
 8104ba8:	681b      	ldr	r3, [r3, #0]
 8104baa:	4a79      	ldr	r2, [pc, #484]	; (8104d90 <HAL_DMA_Abort_IT+0x294>)
 8104bac:	4293      	cmp	r3, r2
 8104bae:	d009      	beq.n	8104bc4 <HAL_DMA_Abort_IT+0xc8>
 8104bb0:	687b      	ldr	r3, [r7, #4]
 8104bb2:	681b      	ldr	r3, [r3, #0]
 8104bb4:	4a77      	ldr	r2, [pc, #476]	; (8104d94 <HAL_DMA_Abort_IT+0x298>)
 8104bb6:	4293      	cmp	r3, r2
 8104bb8:	d004      	beq.n	8104bc4 <HAL_DMA_Abort_IT+0xc8>
 8104bba:	687b      	ldr	r3, [r7, #4]
 8104bbc:	681b      	ldr	r3, [r3, #0]
 8104bbe:	4a76      	ldr	r2, [pc, #472]	; (8104d98 <HAL_DMA_Abort_IT+0x29c>)
 8104bc0:	4293      	cmp	r3, r2
 8104bc2:	d101      	bne.n	8104bc8 <HAL_DMA_Abort_IT+0xcc>
 8104bc4:	2301      	movs	r3, #1
 8104bc6:	e000      	b.n	8104bca <HAL_DMA_Abort_IT+0xce>
 8104bc8:	2300      	movs	r3, #0
 8104bca:	2b00      	cmp	r3, #0
 8104bcc:	d065      	beq.n	8104c9a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8104bce:	687b      	ldr	r3, [r7, #4]
 8104bd0:	2204      	movs	r2, #4
 8104bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8104bd6:	687b      	ldr	r3, [r7, #4]
 8104bd8:	681b      	ldr	r3, [r3, #0]
 8104bda:	4a60      	ldr	r2, [pc, #384]	; (8104d5c <HAL_DMA_Abort_IT+0x260>)
 8104bdc:	4293      	cmp	r3, r2
 8104bde:	d04a      	beq.n	8104c76 <HAL_DMA_Abort_IT+0x17a>
 8104be0:	687b      	ldr	r3, [r7, #4]
 8104be2:	681b      	ldr	r3, [r3, #0]
 8104be4:	4a5e      	ldr	r2, [pc, #376]	; (8104d60 <HAL_DMA_Abort_IT+0x264>)
 8104be6:	4293      	cmp	r3, r2
 8104be8:	d045      	beq.n	8104c76 <HAL_DMA_Abort_IT+0x17a>
 8104bea:	687b      	ldr	r3, [r7, #4]
 8104bec:	681b      	ldr	r3, [r3, #0]
 8104bee:	4a5d      	ldr	r2, [pc, #372]	; (8104d64 <HAL_DMA_Abort_IT+0x268>)
 8104bf0:	4293      	cmp	r3, r2
 8104bf2:	d040      	beq.n	8104c76 <HAL_DMA_Abort_IT+0x17a>
 8104bf4:	687b      	ldr	r3, [r7, #4]
 8104bf6:	681b      	ldr	r3, [r3, #0]
 8104bf8:	4a5b      	ldr	r2, [pc, #364]	; (8104d68 <HAL_DMA_Abort_IT+0x26c>)
 8104bfa:	4293      	cmp	r3, r2
 8104bfc:	d03b      	beq.n	8104c76 <HAL_DMA_Abort_IT+0x17a>
 8104bfe:	687b      	ldr	r3, [r7, #4]
 8104c00:	681b      	ldr	r3, [r3, #0]
 8104c02:	4a5a      	ldr	r2, [pc, #360]	; (8104d6c <HAL_DMA_Abort_IT+0x270>)
 8104c04:	4293      	cmp	r3, r2
 8104c06:	d036      	beq.n	8104c76 <HAL_DMA_Abort_IT+0x17a>
 8104c08:	687b      	ldr	r3, [r7, #4]
 8104c0a:	681b      	ldr	r3, [r3, #0]
 8104c0c:	4a58      	ldr	r2, [pc, #352]	; (8104d70 <HAL_DMA_Abort_IT+0x274>)
 8104c0e:	4293      	cmp	r3, r2
 8104c10:	d031      	beq.n	8104c76 <HAL_DMA_Abort_IT+0x17a>
 8104c12:	687b      	ldr	r3, [r7, #4]
 8104c14:	681b      	ldr	r3, [r3, #0]
 8104c16:	4a57      	ldr	r2, [pc, #348]	; (8104d74 <HAL_DMA_Abort_IT+0x278>)
 8104c18:	4293      	cmp	r3, r2
 8104c1a:	d02c      	beq.n	8104c76 <HAL_DMA_Abort_IT+0x17a>
 8104c1c:	687b      	ldr	r3, [r7, #4]
 8104c1e:	681b      	ldr	r3, [r3, #0]
 8104c20:	4a55      	ldr	r2, [pc, #340]	; (8104d78 <HAL_DMA_Abort_IT+0x27c>)
 8104c22:	4293      	cmp	r3, r2
 8104c24:	d027      	beq.n	8104c76 <HAL_DMA_Abort_IT+0x17a>
 8104c26:	687b      	ldr	r3, [r7, #4]
 8104c28:	681b      	ldr	r3, [r3, #0]
 8104c2a:	4a54      	ldr	r2, [pc, #336]	; (8104d7c <HAL_DMA_Abort_IT+0x280>)
 8104c2c:	4293      	cmp	r3, r2
 8104c2e:	d022      	beq.n	8104c76 <HAL_DMA_Abort_IT+0x17a>
 8104c30:	687b      	ldr	r3, [r7, #4]
 8104c32:	681b      	ldr	r3, [r3, #0]
 8104c34:	4a52      	ldr	r2, [pc, #328]	; (8104d80 <HAL_DMA_Abort_IT+0x284>)
 8104c36:	4293      	cmp	r3, r2
 8104c38:	d01d      	beq.n	8104c76 <HAL_DMA_Abort_IT+0x17a>
 8104c3a:	687b      	ldr	r3, [r7, #4]
 8104c3c:	681b      	ldr	r3, [r3, #0]
 8104c3e:	4a51      	ldr	r2, [pc, #324]	; (8104d84 <HAL_DMA_Abort_IT+0x288>)
 8104c40:	4293      	cmp	r3, r2
 8104c42:	d018      	beq.n	8104c76 <HAL_DMA_Abort_IT+0x17a>
 8104c44:	687b      	ldr	r3, [r7, #4]
 8104c46:	681b      	ldr	r3, [r3, #0]
 8104c48:	4a4f      	ldr	r2, [pc, #316]	; (8104d88 <HAL_DMA_Abort_IT+0x28c>)
 8104c4a:	4293      	cmp	r3, r2
 8104c4c:	d013      	beq.n	8104c76 <HAL_DMA_Abort_IT+0x17a>
 8104c4e:	687b      	ldr	r3, [r7, #4]
 8104c50:	681b      	ldr	r3, [r3, #0]
 8104c52:	4a4e      	ldr	r2, [pc, #312]	; (8104d8c <HAL_DMA_Abort_IT+0x290>)
 8104c54:	4293      	cmp	r3, r2
 8104c56:	d00e      	beq.n	8104c76 <HAL_DMA_Abort_IT+0x17a>
 8104c58:	687b      	ldr	r3, [r7, #4]
 8104c5a:	681b      	ldr	r3, [r3, #0]
 8104c5c:	4a4c      	ldr	r2, [pc, #304]	; (8104d90 <HAL_DMA_Abort_IT+0x294>)
 8104c5e:	4293      	cmp	r3, r2
 8104c60:	d009      	beq.n	8104c76 <HAL_DMA_Abort_IT+0x17a>
 8104c62:	687b      	ldr	r3, [r7, #4]
 8104c64:	681b      	ldr	r3, [r3, #0]
 8104c66:	4a4b      	ldr	r2, [pc, #300]	; (8104d94 <HAL_DMA_Abort_IT+0x298>)
 8104c68:	4293      	cmp	r3, r2
 8104c6a:	d004      	beq.n	8104c76 <HAL_DMA_Abort_IT+0x17a>
 8104c6c:	687b      	ldr	r3, [r7, #4]
 8104c6e:	681b      	ldr	r3, [r3, #0]
 8104c70:	4a49      	ldr	r2, [pc, #292]	; (8104d98 <HAL_DMA_Abort_IT+0x29c>)
 8104c72:	4293      	cmp	r3, r2
 8104c74:	d108      	bne.n	8104c88 <HAL_DMA_Abort_IT+0x18c>
 8104c76:	687b      	ldr	r3, [r7, #4]
 8104c78:	681b      	ldr	r3, [r3, #0]
 8104c7a:	681a      	ldr	r2, [r3, #0]
 8104c7c:	687b      	ldr	r3, [r7, #4]
 8104c7e:	681b      	ldr	r3, [r3, #0]
 8104c80:	f022 0201 	bic.w	r2, r2, #1
 8104c84:	601a      	str	r2, [r3, #0]
 8104c86:	e147      	b.n	8104f18 <HAL_DMA_Abort_IT+0x41c>
 8104c88:	687b      	ldr	r3, [r7, #4]
 8104c8a:	681b      	ldr	r3, [r3, #0]
 8104c8c:	681a      	ldr	r2, [r3, #0]
 8104c8e:	687b      	ldr	r3, [r7, #4]
 8104c90:	681b      	ldr	r3, [r3, #0]
 8104c92:	f022 0201 	bic.w	r2, r2, #1
 8104c96:	601a      	str	r2, [r3, #0]
 8104c98:	e13e      	b.n	8104f18 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8104c9a:	687b      	ldr	r3, [r7, #4]
 8104c9c:	681b      	ldr	r3, [r3, #0]
 8104c9e:	681a      	ldr	r2, [r3, #0]
 8104ca0:	687b      	ldr	r3, [r7, #4]
 8104ca2:	681b      	ldr	r3, [r3, #0]
 8104ca4:	f022 020e 	bic.w	r2, r2, #14
 8104ca8:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8104caa:	687b      	ldr	r3, [r7, #4]
 8104cac:	681b      	ldr	r3, [r3, #0]
 8104cae:	4a2b      	ldr	r2, [pc, #172]	; (8104d5c <HAL_DMA_Abort_IT+0x260>)
 8104cb0:	4293      	cmp	r3, r2
 8104cb2:	d04a      	beq.n	8104d4a <HAL_DMA_Abort_IT+0x24e>
 8104cb4:	687b      	ldr	r3, [r7, #4]
 8104cb6:	681b      	ldr	r3, [r3, #0]
 8104cb8:	4a29      	ldr	r2, [pc, #164]	; (8104d60 <HAL_DMA_Abort_IT+0x264>)
 8104cba:	4293      	cmp	r3, r2
 8104cbc:	d045      	beq.n	8104d4a <HAL_DMA_Abort_IT+0x24e>
 8104cbe:	687b      	ldr	r3, [r7, #4]
 8104cc0:	681b      	ldr	r3, [r3, #0]
 8104cc2:	4a28      	ldr	r2, [pc, #160]	; (8104d64 <HAL_DMA_Abort_IT+0x268>)
 8104cc4:	4293      	cmp	r3, r2
 8104cc6:	d040      	beq.n	8104d4a <HAL_DMA_Abort_IT+0x24e>
 8104cc8:	687b      	ldr	r3, [r7, #4]
 8104cca:	681b      	ldr	r3, [r3, #0]
 8104ccc:	4a26      	ldr	r2, [pc, #152]	; (8104d68 <HAL_DMA_Abort_IT+0x26c>)
 8104cce:	4293      	cmp	r3, r2
 8104cd0:	d03b      	beq.n	8104d4a <HAL_DMA_Abort_IT+0x24e>
 8104cd2:	687b      	ldr	r3, [r7, #4]
 8104cd4:	681b      	ldr	r3, [r3, #0]
 8104cd6:	4a25      	ldr	r2, [pc, #148]	; (8104d6c <HAL_DMA_Abort_IT+0x270>)
 8104cd8:	4293      	cmp	r3, r2
 8104cda:	d036      	beq.n	8104d4a <HAL_DMA_Abort_IT+0x24e>
 8104cdc:	687b      	ldr	r3, [r7, #4]
 8104cde:	681b      	ldr	r3, [r3, #0]
 8104ce0:	4a23      	ldr	r2, [pc, #140]	; (8104d70 <HAL_DMA_Abort_IT+0x274>)
 8104ce2:	4293      	cmp	r3, r2
 8104ce4:	d031      	beq.n	8104d4a <HAL_DMA_Abort_IT+0x24e>
 8104ce6:	687b      	ldr	r3, [r7, #4]
 8104ce8:	681b      	ldr	r3, [r3, #0]
 8104cea:	4a22      	ldr	r2, [pc, #136]	; (8104d74 <HAL_DMA_Abort_IT+0x278>)
 8104cec:	4293      	cmp	r3, r2
 8104cee:	d02c      	beq.n	8104d4a <HAL_DMA_Abort_IT+0x24e>
 8104cf0:	687b      	ldr	r3, [r7, #4]
 8104cf2:	681b      	ldr	r3, [r3, #0]
 8104cf4:	4a20      	ldr	r2, [pc, #128]	; (8104d78 <HAL_DMA_Abort_IT+0x27c>)
 8104cf6:	4293      	cmp	r3, r2
 8104cf8:	d027      	beq.n	8104d4a <HAL_DMA_Abort_IT+0x24e>
 8104cfa:	687b      	ldr	r3, [r7, #4]
 8104cfc:	681b      	ldr	r3, [r3, #0]
 8104cfe:	4a1f      	ldr	r2, [pc, #124]	; (8104d7c <HAL_DMA_Abort_IT+0x280>)
 8104d00:	4293      	cmp	r3, r2
 8104d02:	d022      	beq.n	8104d4a <HAL_DMA_Abort_IT+0x24e>
 8104d04:	687b      	ldr	r3, [r7, #4]
 8104d06:	681b      	ldr	r3, [r3, #0]
 8104d08:	4a1d      	ldr	r2, [pc, #116]	; (8104d80 <HAL_DMA_Abort_IT+0x284>)
 8104d0a:	4293      	cmp	r3, r2
 8104d0c:	d01d      	beq.n	8104d4a <HAL_DMA_Abort_IT+0x24e>
 8104d0e:	687b      	ldr	r3, [r7, #4]
 8104d10:	681b      	ldr	r3, [r3, #0]
 8104d12:	4a1c      	ldr	r2, [pc, #112]	; (8104d84 <HAL_DMA_Abort_IT+0x288>)
 8104d14:	4293      	cmp	r3, r2
 8104d16:	d018      	beq.n	8104d4a <HAL_DMA_Abort_IT+0x24e>
 8104d18:	687b      	ldr	r3, [r7, #4]
 8104d1a:	681b      	ldr	r3, [r3, #0]
 8104d1c:	4a1a      	ldr	r2, [pc, #104]	; (8104d88 <HAL_DMA_Abort_IT+0x28c>)
 8104d1e:	4293      	cmp	r3, r2
 8104d20:	d013      	beq.n	8104d4a <HAL_DMA_Abort_IT+0x24e>
 8104d22:	687b      	ldr	r3, [r7, #4]
 8104d24:	681b      	ldr	r3, [r3, #0]
 8104d26:	4a19      	ldr	r2, [pc, #100]	; (8104d8c <HAL_DMA_Abort_IT+0x290>)
 8104d28:	4293      	cmp	r3, r2
 8104d2a:	d00e      	beq.n	8104d4a <HAL_DMA_Abort_IT+0x24e>
 8104d2c:	687b      	ldr	r3, [r7, #4]
 8104d2e:	681b      	ldr	r3, [r3, #0]
 8104d30:	4a17      	ldr	r2, [pc, #92]	; (8104d90 <HAL_DMA_Abort_IT+0x294>)
 8104d32:	4293      	cmp	r3, r2
 8104d34:	d009      	beq.n	8104d4a <HAL_DMA_Abort_IT+0x24e>
 8104d36:	687b      	ldr	r3, [r7, #4]
 8104d38:	681b      	ldr	r3, [r3, #0]
 8104d3a:	4a16      	ldr	r2, [pc, #88]	; (8104d94 <HAL_DMA_Abort_IT+0x298>)
 8104d3c:	4293      	cmp	r3, r2
 8104d3e:	d004      	beq.n	8104d4a <HAL_DMA_Abort_IT+0x24e>
 8104d40:	687b      	ldr	r3, [r7, #4]
 8104d42:	681b      	ldr	r3, [r3, #0]
 8104d44:	4a14      	ldr	r2, [pc, #80]	; (8104d98 <HAL_DMA_Abort_IT+0x29c>)
 8104d46:	4293      	cmp	r3, r2
 8104d48:	d128      	bne.n	8104d9c <HAL_DMA_Abort_IT+0x2a0>
 8104d4a:	687b      	ldr	r3, [r7, #4]
 8104d4c:	681b      	ldr	r3, [r3, #0]
 8104d4e:	681a      	ldr	r2, [r3, #0]
 8104d50:	687b      	ldr	r3, [r7, #4]
 8104d52:	681b      	ldr	r3, [r3, #0]
 8104d54:	f022 0201 	bic.w	r2, r2, #1
 8104d58:	601a      	str	r2, [r3, #0]
 8104d5a:	e027      	b.n	8104dac <HAL_DMA_Abort_IT+0x2b0>
 8104d5c:	40020010 	.word	0x40020010
 8104d60:	40020028 	.word	0x40020028
 8104d64:	40020040 	.word	0x40020040
 8104d68:	40020058 	.word	0x40020058
 8104d6c:	40020070 	.word	0x40020070
 8104d70:	40020088 	.word	0x40020088
 8104d74:	400200a0 	.word	0x400200a0
 8104d78:	400200b8 	.word	0x400200b8
 8104d7c:	40020410 	.word	0x40020410
 8104d80:	40020428 	.word	0x40020428
 8104d84:	40020440 	.word	0x40020440
 8104d88:	40020458 	.word	0x40020458
 8104d8c:	40020470 	.word	0x40020470
 8104d90:	40020488 	.word	0x40020488
 8104d94:	400204a0 	.word	0x400204a0
 8104d98:	400204b8 	.word	0x400204b8
 8104d9c:	687b      	ldr	r3, [r7, #4]
 8104d9e:	681b      	ldr	r3, [r3, #0]
 8104da0:	681a      	ldr	r2, [r3, #0]
 8104da2:	687b      	ldr	r3, [r7, #4]
 8104da4:	681b      	ldr	r3, [r3, #0]
 8104da6:	f022 0201 	bic.w	r2, r2, #1
 8104daa:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104dac:	687b      	ldr	r3, [r7, #4]
 8104dae:	681b      	ldr	r3, [r3, #0]
 8104db0:	4a5c      	ldr	r2, [pc, #368]	; (8104f24 <HAL_DMA_Abort_IT+0x428>)
 8104db2:	4293      	cmp	r3, r2
 8104db4:	d072      	beq.n	8104e9c <HAL_DMA_Abort_IT+0x3a0>
 8104db6:	687b      	ldr	r3, [r7, #4]
 8104db8:	681b      	ldr	r3, [r3, #0]
 8104dba:	4a5b      	ldr	r2, [pc, #364]	; (8104f28 <HAL_DMA_Abort_IT+0x42c>)
 8104dbc:	4293      	cmp	r3, r2
 8104dbe:	d06d      	beq.n	8104e9c <HAL_DMA_Abort_IT+0x3a0>
 8104dc0:	687b      	ldr	r3, [r7, #4]
 8104dc2:	681b      	ldr	r3, [r3, #0]
 8104dc4:	4a59      	ldr	r2, [pc, #356]	; (8104f2c <HAL_DMA_Abort_IT+0x430>)
 8104dc6:	4293      	cmp	r3, r2
 8104dc8:	d068      	beq.n	8104e9c <HAL_DMA_Abort_IT+0x3a0>
 8104dca:	687b      	ldr	r3, [r7, #4]
 8104dcc:	681b      	ldr	r3, [r3, #0]
 8104dce:	4a58      	ldr	r2, [pc, #352]	; (8104f30 <HAL_DMA_Abort_IT+0x434>)
 8104dd0:	4293      	cmp	r3, r2
 8104dd2:	d063      	beq.n	8104e9c <HAL_DMA_Abort_IT+0x3a0>
 8104dd4:	687b      	ldr	r3, [r7, #4]
 8104dd6:	681b      	ldr	r3, [r3, #0]
 8104dd8:	4a56      	ldr	r2, [pc, #344]	; (8104f34 <HAL_DMA_Abort_IT+0x438>)
 8104dda:	4293      	cmp	r3, r2
 8104ddc:	d05e      	beq.n	8104e9c <HAL_DMA_Abort_IT+0x3a0>
 8104dde:	687b      	ldr	r3, [r7, #4]
 8104de0:	681b      	ldr	r3, [r3, #0]
 8104de2:	4a55      	ldr	r2, [pc, #340]	; (8104f38 <HAL_DMA_Abort_IT+0x43c>)
 8104de4:	4293      	cmp	r3, r2
 8104de6:	d059      	beq.n	8104e9c <HAL_DMA_Abort_IT+0x3a0>
 8104de8:	687b      	ldr	r3, [r7, #4]
 8104dea:	681b      	ldr	r3, [r3, #0]
 8104dec:	4a53      	ldr	r2, [pc, #332]	; (8104f3c <HAL_DMA_Abort_IT+0x440>)
 8104dee:	4293      	cmp	r3, r2
 8104df0:	d054      	beq.n	8104e9c <HAL_DMA_Abort_IT+0x3a0>
 8104df2:	687b      	ldr	r3, [r7, #4]
 8104df4:	681b      	ldr	r3, [r3, #0]
 8104df6:	4a52      	ldr	r2, [pc, #328]	; (8104f40 <HAL_DMA_Abort_IT+0x444>)
 8104df8:	4293      	cmp	r3, r2
 8104dfa:	d04f      	beq.n	8104e9c <HAL_DMA_Abort_IT+0x3a0>
 8104dfc:	687b      	ldr	r3, [r7, #4]
 8104dfe:	681b      	ldr	r3, [r3, #0]
 8104e00:	4a50      	ldr	r2, [pc, #320]	; (8104f44 <HAL_DMA_Abort_IT+0x448>)
 8104e02:	4293      	cmp	r3, r2
 8104e04:	d04a      	beq.n	8104e9c <HAL_DMA_Abort_IT+0x3a0>
 8104e06:	687b      	ldr	r3, [r7, #4]
 8104e08:	681b      	ldr	r3, [r3, #0]
 8104e0a:	4a4f      	ldr	r2, [pc, #316]	; (8104f48 <HAL_DMA_Abort_IT+0x44c>)
 8104e0c:	4293      	cmp	r3, r2
 8104e0e:	d045      	beq.n	8104e9c <HAL_DMA_Abort_IT+0x3a0>
 8104e10:	687b      	ldr	r3, [r7, #4]
 8104e12:	681b      	ldr	r3, [r3, #0]
 8104e14:	4a4d      	ldr	r2, [pc, #308]	; (8104f4c <HAL_DMA_Abort_IT+0x450>)
 8104e16:	4293      	cmp	r3, r2
 8104e18:	d040      	beq.n	8104e9c <HAL_DMA_Abort_IT+0x3a0>
 8104e1a:	687b      	ldr	r3, [r7, #4]
 8104e1c:	681b      	ldr	r3, [r3, #0]
 8104e1e:	4a4c      	ldr	r2, [pc, #304]	; (8104f50 <HAL_DMA_Abort_IT+0x454>)
 8104e20:	4293      	cmp	r3, r2
 8104e22:	d03b      	beq.n	8104e9c <HAL_DMA_Abort_IT+0x3a0>
 8104e24:	687b      	ldr	r3, [r7, #4]
 8104e26:	681b      	ldr	r3, [r3, #0]
 8104e28:	4a4a      	ldr	r2, [pc, #296]	; (8104f54 <HAL_DMA_Abort_IT+0x458>)
 8104e2a:	4293      	cmp	r3, r2
 8104e2c:	d036      	beq.n	8104e9c <HAL_DMA_Abort_IT+0x3a0>
 8104e2e:	687b      	ldr	r3, [r7, #4]
 8104e30:	681b      	ldr	r3, [r3, #0]
 8104e32:	4a49      	ldr	r2, [pc, #292]	; (8104f58 <HAL_DMA_Abort_IT+0x45c>)
 8104e34:	4293      	cmp	r3, r2
 8104e36:	d031      	beq.n	8104e9c <HAL_DMA_Abort_IT+0x3a0>
 8104e38:	687b      	ldr	r3, [r7, #4]
 8104e3a:	681b      	ldr	r3, [r3, #0]
 8104e3c:	4a47      	ldr	r2, [pc, #284]	; (8104f5c <HAL_DMA_Abort_IT+0x460>)
 8104e3e:	4293      	cmp	r3, r2
 8104e40:	d02c      	beq.n	8104e9c <HAL_DMA_Abort_IT+0x3a0>
 8104e42:	687b      	ldr	r3, [r7, #4]
 8104e44:	681b      	ldr	r3, [r3, #0]
 8104e46:	4a46      	ldr	r2, [pc, #280]	; (8104f60 <HAL_DMA_Abort_IT+0x464>)
 8104e48:	4293      	cmp	r3, r2
 8104e4a:	d027      	beq.n	8104e9c <HAL_DMA_Abort_IT+0x3a0>
 8104e4c:	687b      	ldr	r3, [r7, #4]
 8104e4e:	681b      	ldr	r3, [r3, #0]
 8104e50:	4a44      	ldr	r2, [pc, #272]	; (8104f64 <HAL_DMA_Abort_IT+0x468>)
 8104e52:	4293      	cmp	r3, r2
 8104e54:	d022      	beq.n	8104e9c <HAL_DMA_Abort_IT+0x3a0>
 8104e56:	687b      	ldr	r3, [r7, #4]
 8104e58:	681b      	ldr	r3, [r3, #0]
 8104e5a:	4a43      	ldr	r2, [pc, #268]	; (8104f68 <HAL_DMA_Abort_IT+0x46c>)
 8104e5c:	4293      	cmp	r3, r2
 8104e5e:	d01d      	beq.n	8104e9c <HAL_DMA_Abort_IT+0x3a0>
 8104e60:	687b      	ldr	r3, [r7, #4]
 8104e62:	681b      	ldr	r3, [r3, #0]
 8104e64:	4a41      	ldr	r2, [pc, #260]	; (8104f6c <HAL_DMA_Abort_IT+0x470>)
 8104e66:	4293      	cmp	r3, r2
 8104e68:	d018      	beq.n	8104e9c <HAL_DMA_Abort_IT+0x3a0>
 8104e6a:	687b      	ldr	r3, [r7, #4]
 8104e6c:	681b      	ldr	r3, [r3, #0]
 8104e6e:	4a40      	ldr	r2, [pc, #256]	; (8104f70 <HAL_DMA_Abort_IT+0x474>)
 8104e70:	4293      	cmp	r3, r2
 8104e72:	d013      	beq.n	8104e9c <HAL_DMA_Abort_IT+0x3a0>
 8104e74:	687b      	ldr	r3, [r7, #4]
 8104e76:	681b      	ldr	r3, [r3, #0]
 8104e78:	4a3e      	ldr	r2, [pc, #248]	; (8104f74 <HAL_DMA_Abort_IT+0x478>)
 8104e7a:	4293      	cmp	r3, r2
 8104e7c:	d00e      	beq.n	8104e9c <HAL_DMA_Abort_IT+0x3a0>
 8104e7e:	687b      	ldr	r3, [r7, #4]
 8104e80:	681b      	ldr	r3, [r3, #0]
 8104e82:	4a3d      	ldr	r2, [pc, #244]	; (8104f78 <HAL_DMA_Abort_IT+0x47c>)
 8104e84:	4293      	cmp	r3, r2
 8104e86:	d009      	beq.n	8104e9c <HAL_DMA_Abort_IT+0x3a0>
 8104e88:	687b      	ldr	r3, [r7, #4]
 8104e8a:	681b      	ldr	r3, [r3, #0]
 8104e8c:	4a3b      	ldr	r2, [pc, #236]	; (8104f7c <HAL_DMA_Abort_IT+0x480>)
 8104e8e:	4293      	cmp	r3, r2
 8104e90:	d004      	beq.n	8104e9c <HAL_DMA_Abort_IT+0x3a0>
 8104e92:	687b      	ldr	r3, [r7, #4]
 8104e94:	681b      	ldr	r3, [r3, #0]
 8104e96:	4a3a      	ldr	r2, [pc, #232]	; (8104f80 <HAL_DMA_Abort_IT+0x484>)
 8104e98:	4293      	cmp	r3, r2
 8104e9a:	d101      	bne.n	8104ea0 <HAL_DMA_Abort_IT+0x3a4>
 8104e9c:	2301      	movs	r3, #1
 8104e9e:	e000      	b.n	8104ea2 <HAL_DMA_Abort_IT+0x3a6>
 8104ea0:	2300      	movs	r3, #0
 8104ea2:	2b00      	cmp	r3, #0
 8104ea4:	d028      	beq.n	8104ef8 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8104ea6:	687b      	ldr	r3, [r7, #4]
 8104ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104eaa:	681a      	ldr	r2, [r3, #0]
 8104eac:	687b      	ldr	r3, [r7, #4]
 8104eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104eb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8104eb4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8104eb6:	687b      	ldr	r3, [r7, #4]
 8104eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104eba:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8104ebc:	687b      	ldr	r3, [r7, #4]
 8104ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104ec0:	f003 031f 	and.w	r3, r3, #31
 8104ec4:	2201      	movs	r2, #1
 8104ec6:	409a      	lsls	r2, r3
 8104ec8:	68fb      	ldr	r3, [r7, #12]
 8104eca:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8104ecc:	687b      	ldr	r3, [r7, #4]
 8104ece:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104ed0:	687a      	ldr	r2, [r7, #4]
 8104ed2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8104ed4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8104ed6:	687b      	ldr	r3, [r7, #4]
 8104ed8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104eda:	2b00      	cmp	r3, #0
 8104edc:	d00c      	beq.n	8104ef8 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8104ede:	687b      	ldr	r3, [r7, #4]
 8104ee0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104ee2:	681a      	ldr	r2, [r3, #0]
 8104ee4:	687b      	ldr	r3, [r7, #4]
 8104ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104ee8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8104eec:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8104eee:	687b      	ldr	r3, [r7, #4]
 8104ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104ef2:	687a      	ldr	r2, [r7, #4]
 8104ef4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8104ef6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8104ef8:	687b      	ldr	r3, [r7, #4]
 8104efa:	2200      	movs	r2, #0
 8104efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8104f00:	687b      	ldr	r3, [r7, #4]
 8104f02:	2201      	movs	r2, #1
 8104f04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8104f08:	687b      	ldr	r3, [r7, #4]
 8104f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104f0c:	2b00      	cmp	r3, #0
 8104f0e:	d003      	beq.n	8104f18 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8104f10:	687b      	ldr	r3, [r7, #4]
 8104f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104f14:	6878      	ldr	r0, [r7, #4]
 8104f16:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8104f18:	2300      	movs	r3, #0
}
 8104f1a:	4618      	mov	r0, r3
 8104f1c:	3710      	adds	r7, #16
 8104f1e:	46bd      	mov	sp, r7
 8104f20:	bd80      	pop	{r7, pc}
 8104f22:	bf00      	nop
 8104f24:	40020010 	.word	0x40020010
 8104f28:	40020028 	.word	0x40020028
 8104f2c:	40020040 	.word	0x40020040
 8104f30:	40020058 	.word	0x40020058
 8104f34:	40020070 	.word	0x40020070
 8104f38:	40020088 	.word	0x40020088
 8104f3c:	400200a0 	.word	0x400200a0
 8104f40:	400200b8 	.word	0x400200b8
 8104f44:	40020410 	.word	0x40020410
 8104f48:	40020428 	.word	0x40020428
 8104f4c:	40020440 	.word	0x40020440
 8104f50:	40020458 	.word	0x40020458
 8104f54:	40020470 	.word	0x40020470
 8104f58:	40020488 	.word	0x40020488
 8104f5c:	400204a0 	.word	0x400204a0
 8104f60:	400204b8 	.word	0x400204b8
 8104f64:	58025408 	.word	0x58025408
 8104f68:	5802541c 	.word	0x5802541c
 8104f6c:	58025430 	.word	0x58025430
 8104f70:	58025444 	.word	0x58025444
 8104f74:	58025458 	.word	0x58025458
 8104f78:	5802546c 	.word	0x5802546c
 8104f7c:	58025480 	.word	0x58025480
 8104f80:	58025494 	.word	0x58025494

08104f84 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8104f84:	b580      	push	{r7, lr}
 8104f86:	b08a      	sub	sp, #40	; 0x28
 8104f88:	af00      	add	r7, sp, #0
 8104f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8104f8c:	2300      	movs	r3, #0
 8104f8e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8104f90:	4b67      	ldr	r3, [pc, #412]	; (8105130 <HAL_DMA_IRQHandler+0x1ac>)
 8104f92:	681b      	ldr	r3, [r3, #0]
 8104f94:	4a67      	ldr	r2, [pc, #412]	; (8105134 <HAL_DMA_IRQHandler+0x1b0>)
 8104f96:	fba2 2303 	umull	r2, r3, r2, r3
 8104f9a:	0a9b      	lsrs	r3, r3, #10
 8104f9c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8104f9e:	687b      	ldr	r3, [r7, #4]
 8104fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104fa2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8104fa4:	687b      	ldr	r3, [r7, #4]
 8104fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104fa8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8104faa:	6a3b      	ldr	r3, [r7, #32]
 8104fac:	681b      	ldr	r3, [r3, #0]
 8104fae:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8104fb0:	69fb      	ldr	r3, [r7, #28]
 8104fb2:	681b      	ldr	r3, [r3, #0]
 8104fb4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8104fb6:	687b      	ldr	r3, [r7, #4]
 8104fb8:	681b      	ldr	r3, [r3, #0]
 8104fba:	4a5f      	ldr	r2, [pc, #380]	; (8105138 <HAL_DMA_IRQHandler+0x1b4>)
 8104fbc:	4293      	cmp	r3, r2
 8104fbe:	d04a      	beq.n	8105056 <HAL_DMA_IRQHandler+0xd2>
 8104fc0:	687b      	ldr	r3, [r7, #4]
 8104fc2:	681b      	ldr	r3, [r3, #0]
 8104fc4:	4a5d      	ldr	r2, [pc, #372]	; (810513c <HAL_DMA_IRQHandler+0x1b8>)
 8104fc6:	4293      	cmp	r3, r2
 8104fc8:	d045      	beq.n	8105056 <HAL_DMA_IRQHandler+0xd2>
 8104fca:	687b      	ldr	r3, [r7, #4]
 8104fcc:	681b      	ldr	r3, [r3, #0]
 8104fce:	4a5c      	ldr	r2, [pc, #368]	; (8105140 <HAL_DMA_IRQHandler+0x1bc>)
 8104fd0:	4293      	cmp	r3, r2
 8104fd2:	d040      	beq.n	8105056 <HAL_DMA_IRQHandler+0xd2>
 8104fd4:	687b      	ldr	r3, [r7, #4]
 8104fd6:	681b      	ldr	r3, [r3, #0]
 8104fd8:	4a5a      	ldr	r2, [pc, #360]	; (8105144 <HAL_DMA_IRQHandler+0x1c0>)
 8104fda:	4293      	cmp	r3, r2
 8104fdc:	d03b      	beq.n	8105056 <HAL_DMA_IRQHandler+0xd2>
 8104fde:	687b      	ldr	r3, [r7, #4]
 8104fe0:	681b      	ldr	r3, [r3, #0]
 8104fe2:	4a59      	ldr	r2, [pc, #356]	; (8105148 <HAL_DMA_IRQHandler+0x1c4>)
 8104fe4:	4293      	cmp	r3, r2
 8104fe6:	d036      	beq.n	8105056 <HAL_DMA_IRQHandler+0xd2>
 8104fe8:	687b      	ldr	r3, [r7, #4]
 8104fea:	681b      	ldr	r3, [r3, #0]
 8104fec:	4a57      	ldr	r2, [pc, #348]	; (810514c <HAL_DMA_IRQHandler+0x1c8>)
 8104fee:	4293      	cmp	r3, r2
 8104ff0:	d031      	beq.n	8105056 <HAL_DMA_IRQHandler+0xd2>
 8104ff2:	687b      	ldr	r3, [r7, #4]
 8104ff4:	681b      	ldr	r3, [r3, #0]
 8104ff6:	4a56      	ldr	r2, [pc, #344]	; (8105150 <HAL_DMA_IRQHandler+0x1cc>)
 8104ff8:	4293      	cmp	r3, r2
 8104ffa:	d02c      	beq.n	8105056 <HAL_DMA_IRQHandler+0xd2>
 8104ffc:	687b      	ldr	r3, [r7, #4]
 8104ffe:	681b      	ldr	r3, [r3, #0]
 8105000:	4a54      	ldr	r2, [pc, #336]	; (8105154 <HAL_DMA_IRQHandler+0x1d0>)
 8105002:	4293      	cmp	r3, r2
 8105004:	d027      	beq.n	8105056 <HAL_DMA_IRQHandler+0xd2>
 8105006:	687b      	ldr	r3, [r7, #4]
 8105008:	681b      	ldr	r3, [r3, #0]
 810500a:	4a53      	ldr	r2, [pc, #332]	; (8105158 <HAL_DMA_IRQHandler+0x1d4>)
 810500c:	4293      	cmp	r3, r2
 810500e:	d022      	beq.n	8105056 <HAL_DMA_IRQHandler+0xd2>
 8105010:	687b      	ldr	r3, [r7, #4]
 8105012:	681b      	ldr	r3, [r3, #0]
 8105014:	4a51      	ldr	r2, [pc, #324]	; (810515c <HAL_DMA_IRQHandler+0x1d8>)
 8105016:	4293      	cmp	r3, r2
 8105018:	d01d      	beq.n	8105056 <HAL_DMA_IRQHandler+0xd2>
 810501a:	687b      	ldr	r3, [r7, #4]
 810501c:	681b      	ldr	r3, [r3, #0]
 810501e:	4a50      	ldr	r2, [pc, #320]	; (8105160 <HAL_DMA_IRQHandler+0x1dc>)
 8105020:	4293      	cmp	r3, r2
 8105022:	d018      	beq.n	8105056 <HAL_DMA_IRQHandler+0xd2>
 8105024:	687b      	ldr	r3, [r7, #4]
 8105026:	681b      	ldr	r3, [r3, #0]
 8105028:	4a4e      	ldr	r2, [pc, #312]	; (8105164 <HAL_DMA_IRQHandler+0x1e0>)
 810502a:	4293      	cmp	r3, r2
 810502c:	d013      	beq.n	8105056 <HAL_DMA_IRQHandler+0xd2>
 810502e:	687b      	ldr	r3, [r7, #4]
 8105030:	681b      	ldr	r3, [r3, #0]
 8105032:	4a4d      	ldr	r2, [pc, #308]	; (8105168 <HAL_DMA_IRQHandler+0x1e4>)
 8105034:	4293      	cmp	r3, r2
 8105036:	d00e      	beq.n	8105056 <HAL_DMA_IRQHandler+0xd2>
 8105038:	687b      	ldr	r3, [r7, #4]
 810503a:	681b      	ldr	r3, [r3, #0]
 810503c:	4a4b      	ldr	r2, [pc, #300]	; (810516c <HAL_DMA_IRQHandler+0x1e8>)
 810503e:	4293      	cmp	r3, r2
 8105040:	d009      	beq.n	8105056 <HAL_DMA_IRQHandler+0xd2>
 8105042:	687b      	ldr	r3, [r7, #4]
 8105044:	681b      	ldr	r3, [r3, #0]
 8105046:	4a4a      	ldr	r2, [pc, #296]	; (8105170 <HAL_DMA_IRQHandler+0x1ec>)
 8105048:	4293      	cmp	r3, r2
 810504a:	d004      	beq.n	8105056 <HAL_DMA_IRQHandler+0xd2>
 810504c:	687b      	ldr	r3, [r7, #4]
 810504e:	681b      	ldr	r3, [r3, #0]
 8105050:	4a48      	ldr	r2, [pc, #288]	; (8105174 <HAL_DMA_IRQHandler+0x1f0>)
 8105052:	4293      	cmp	r3, r2
 8105054:	d101      	bne.n	810505a <HAL_DMA_IRQHandler+0xd6>
 8105056:	2301      	movs	r3, #1
 8105058:	e000      	b.n	810505c <HAL_DMA_IRQHandler+0xd8>
 810505a:	2300      	movs	r3, #0
 810505c:	2b00      	cmp	r3, #0
 810505e:	f000 842b 	beq.w	81058b8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8105062:	687b      	ldr	r3, [r7, #4]
 8105064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105066:	f003 031f 	and.w	r3, r3, #31
 810506a:	2208      	movs	r2, #8
 810506c:	409a      	lsls	r2, r3
 810506e:	69bb      	ldr	r3, [r7, #24]
 8105070:	4013      	ands	r3, r2
 8105072:	2b00      	cmp	r3, #0
 8105074:	f000 80a2 	beq.w	81051bc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8105078:	687b      	ldr	r3, [r7, #4]
 810507a:	681b      	ldr	r3, [r3, #0]
 810507c:	4a2e      	ldr	r2, [pc, #184]	; (8105138 <HAL_DMA_IRQHandler+0x1b4>)
 810507e:	4293      	cmp	r3, r2
 8105080:	d04a      	beq.n	8105118 <HAL_DMA_IRQHandler+0x194>
 8105082:	687b      	ldr	r3, [r7, #4]
 8105084:	681b      	ldr	r3, [r3, #0]
 8105086:	4a2d      	ldr	r2, [pc, #180]	; (810513c <HAL_DMA_IRQHandler+0x1b8>)
 8105088:	4293      	cmp	r3, r2
 810508a:	d045      	beq.n	8105118 <HAL_DMA_IRQHandler+0x194>
 810508c:	687b      	ldr	r3, [r7, #4]
 810508e:	681b      	ldr	r3, [r3, #0]
 8105090:	4a2b      	ldr	r2, [pc, #172]	; (8105140 <HAL_DMA_IRQHandler+0x1bc>)
 8105092:	4293      	cmp	r3, r2
 8105094:	d040      	beq.n	8105118 <HAL_DMA_IRQHandler+0x194>
 8105096:	687b      	ldr	r3, [r7, #4]
 8105098:	681b      	ldr	r3, [r3, #0]
 810509a:	4a2a      	ldr	r2, [pc, #168]	; (8105144 <HAL_DMA_IRQHandler+0x1c0>)
 810509c:	4293      	cmp	r3, r2
 810509e:	d03b      	beq.n	8105118 <HAL_DMA_IRQHandler+0x194>
 81050a0:	687b      	ldr	r3, [r7, #4]
 81050a2:	681b      	ldr	r3, [r3, #0]
 81050a4:	4a28      	ldr	r2, [pc, #160]	; (8105148 <HAL_DMA_IRQHandler+0x1c4>)
 81050a6:	4293      	cmp	r3, r2
 81050a8:	d036      	beq.n	8105118 <HAL_DMA_IRQHandler+0x194>
 81050aa:	687b      	ldr	r3, [r7, #4]
 81050ac:	681b      	ldr	r3, [r3, #0]
 81050ae:	4a27      	ldr	r2, [pc, #156]	; (810514c <HAL_DMA_IRQHandler+0x1c8>)
 81050b0:	4293      	cmp	r3, r2
 81050b2:	d031      	beq.n	8105118 <HAL_DMA_IRQHandler+0x194>
 81050b4:	687b      	ldr	r3, [r7, #4]
 81050b6:	681b      	ldr	r3, [r3, #0]
 81050b8:	4a25      	ldr	r2, [pc, #148]	; (8105150 <HAL_DMA_IRQHandler+0x1cc>)
 81050ba:	4293      	cmp	r3, r2
 81050bc:	d02c      	beq.n	8105118 <HAL_DMA_IRQHandler+0x194>
 81050be:	687b      	ldr	r3, [r7, #4]
 81050c0:	681b      	ldr	r3, [r3, #0]
 81050c2:	4a24      	ldr	r2, [pc, #144]	; (8105154 <HAL_DMA_IRQHandler+0x1d0>)
 81050c4:	4293      	cmp	r3, r2
 81050c6:	d027      	beq.n	8105118 <HAL_DMA_IRQHandler+0x194>
 81050c8:	687b      	ldr	r3, [r7, #4]
 81050ca:	681b      	ldr	r3, [r3, #0]
 81050cc:	4a22      	ldr	r2, [pc, #136]	; (8105158 <HAL_DMA_IRQHandler+0x1d4>)
 81050ce:	4293      	cmp	r3, r2
 81050d0:	d022      	beq.n	8105118 <HAL_DMA_IRQHandler+0x194>
 81050d2:	687b      	ldr	r3, [r7, #4]
 81050d4:	681b      	ldr	r3, [r3, #0]
 81050d6:	4a21      	ldr	r2, [pc, #132]	; (810515c <HAL_DMA_IRQHandler+0x1d8>)
 81050d8:	4293      	cmp	r3, r2
 81050da:	d01d      	beq.n	8105118 <HAL_DMA_IRQHandler+0x194>
 81050dc:	687b      	ldr	r3, [r7, #4]
 81050de:	681b      	ldr	r3, [r3, #0]
 81050e0:	4a1f      	ldr	r2, [pc, #124]	; (8105160 <HAL_DMA_IRQHandler+0x1dc>)
 81050e2:	4293      	cmp	r3, r2
 81050e4:	d018      	beq.n	8105118 <HAL_DMA_IRQHandler+0x194>
 81050e6:	687b      	ldr	r3, [r7, #4]
 81050e8:	681b      	ldr	r3, [r3, #0]
 81050ea:	4a1e      	ldr	r2, [pc, #120]	; (8105164 <HAL_DMA_IRQHandler+0x1e0>)
 81050ec:	4293      	cmp	r3, r2
 81050ee:	d013      	beq.n	8105118 <HAL_DMA_IRQHandler+0x194>
 81050f0:	687b      	ldr	r3, [r7, #4]
 81050f2:	681b      	ldr	r3, [r3, #0]
 81050f4:	4a1c      	ldr	r2, [pc, #112]	; (8105168 <HAL_DMA_IRQHandler+0x1e4>)
 81050f6:	4293      	cmp	r3, r2
 81050f8:	d00e      	beq.n	8105118 <HAL_DMA_IRQHandler+0x194>
 81050fa:	687b      	ldr	r3, [r7, #4]
 81050fc:	681b      	ldr	r3, [r3, #0]
 81050fe:	4a1b      	ldr	r2, [pc, #108]	; (810516c <HAL_DMA_IRQHandler+0x1e8>)
 8105100:	4293      	cmp	r3, r2
 8105102:	d009      	beq.n	8105118 <HAL_DMA_IRQHandler+0x194>
 8105104:	687b      	ldr	r3, [r7, #4]
 8105106:	681b      	ldr	r3, [r3, #0]
 8105108:	4a19      	ldr	r2, [pc, #100]	; (8105170 <HAL_DMA_IRQHandler+0x1ec>)
 810510a:	4293      	cmp	r3, r2
 810510c:	d004      	beq.n	8105118 <HAL_DMA_IRQHandler+0x194>
 810510e:	687b      	ldr	r3, [r7, #4]
 8105110:	681b      	ldr	r3, [r3, #0]
 8105112:	4a18      	ldr	r2, [pc, #96]	; (8105174 <HAL_DMA_IRQHandler+0x1f0>)
 8105114:	4293      	cmp	r3, r2
 8105116:	d12f      	bne.n	8105178 <HAL_DMA_IRQHandler+0x1f4>
 8105118:	687b      	ldr	r3, [r7, #4]
 810511a:	681b      	ldr	r3, [r3, #0]
 810511c:	681b      	ldr	r3, [r3, #0]
 810511e:	f003 0304 	and.w	r3, r3, #4
 8105122:	2b00      	cmp	r3, #0
 8105124:	bf14      	ite	ne
 8105126:	2301      	movne	r3, #1
 8105128:	2300      	moveq	r3, #0
 810512a:	b2db      	uxtb	r3, r3
 810512c:	e02e      	b.n	810518c <HAL_DMA_IRQHandler+0x208>
 810512e:	bf00      	nop
 8105130:	10000000 	.word	0x10000000
 8105134:	1b4e81b5 	.word	0x1b4e81b5
 8105138:	40020010 	.word	0x40020010
 810513c:	40020028 	.word	0x40020028
 8105140:	40020040 	.word	0x40020040
 8105144:	40020058 	.word	0x40020058
 8105148:	40020070 	.word	0x40020070
 810514c:	40020088 	.word	0x40020088
 8105150:	400200a0 	.word	0x400200a0
 8105154:	400200b8 	.word	0x400200b8
 8105158:	40020410 	.word	0x40020410
 810515c:	40020428 	.word	0x40020428
 8105160:	40020440 	.word	0x40020440
 8105164:	40020458 	.word	0x40020458
 8105168:	40020470 	.word	0x40020470
 810516c:	40020488 	.word	0x40020488
 8105170:	400204a0 	.word	0x400204a0
 8105174:	400204b8 	.word	0x400204b8
 8105178:	687b      	ldr	r3, [r7, #4]
 810517a:	681b      	ldr	r3, [r3, #0]
 810517c:	681b      	ldr	r3, [r3, #0]
 810517e:	f003 0308 	and.w	r3, r3, #8
 8105182:	2b00      	cmp	r3, #0
 8105184:	bf14      	ite	ne
 8105186:	2301      	movne	r3, #1
 8105188:	2300      	moveq	r3, #0
 810518a:	b2db      	uxtb	r3, r3
 810518c:	2b00      	cmp	r3, #0
 810518e:	d015      	beq.n	81051bc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8105190:	687b      	ldr	r3, [r7, #4]
 8105192:	681b      	ldr	r3, [r3, #0]
 8105194:	681a      	ldr	r2, [r3, #0]
 8105196:	687b      	ldr	r3, [r7, #4]
 8105198:	681b      	ldr	r3, [r3, #0]
 810519a:	f022 0204 	bic.w	r2, r2, #4
 810519e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81051a0:	687b      	ldr	r3, [r7, #4]
 81051a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81051a4:	f003 031f 	and.w	r3, r3, #31
 81051a8:	2208      	movs	r2, #8
 81051aa:	409a      	lsls	r2, r3
 81051ac:	6a3b      	ldr	r3, [r7, #32]
 81051ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 81051b0:	687b      	ldr	r3, [r7, #4]
 81051b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81051b4:	f043 0201 	orr.w	r2, r3, #1
 81051b8:	687b      	ldr	r3, [r7, #4]
 81051ba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81051bc:	687b      	ldr	r3, [r7, #4]
 81051be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81051c0:	f003 031f 	and.w	r3, r3, #31
 81051c4:	69ba      	ldr	r2, [r7, #24]
 81051c6:	fa22 f303 	lsr.w	r3, r2, r3
 81051ca:	f003 0301 	and.w	r3, r3, #1
 81051ce:	2b00      	cmp	r3, #0
 81051d0:	d06e      	beq.n	81052b0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 81051d2:	687b      	ldr	r3, [r7, #4]
 81051d4:	681b      	ldr	r3, [r3, #0]
 81051d6:	4a69      	ldr	r2, [pc, #420]	; (810537c <HAL_DMA_IRQHandler+0x3f8>)
 81051d8:	4293      	cmp	r3, r2
 81051da:	d04a      	beq.n	8105272 <HAL_DMA_IRQHandler+0x2ee>
 81051dc:	687b      	ldr	r3, [r7, #4]
 81051de:	681b      	ldr	r3, [r3, #0]
 81051e0:	4a67      	ldr	r2, [pc, #412]	; (8105380 <HAL_DMA_IRQHandler+0x3fc>)
 81051e2:	4293      	cmp	r3, r2
 81051e4:	d045      	beq.n	8105272 <HAL_DMA_IRQHandler+0x2ee>
 81051e6:	687b      	ldr	r3, [r7, #4]
 81051e8:	681b      	ldr	r3, [r3, #0]
 81051ea:	4a66      	ldr	r2, [pc, #408]	; (8105384 <HAL_DMA_IRQHandler+0x400>)
 81051ec:	4293      	cmp	r3, r2
 81051ee:	d040      	beq.n	8105272 <HAL_DMA_IRQHandler+0x2ee>
 81051f0:	687b      	ldr	r3, [r7, #4]
 81051f2:	681b      	ldr	r3, [r3, #0]
 81051f4:	4a64      	ldr	r2, [pc, #400]	; (8105388 <HAL_DMA_IRQHandler+0x404>)
 81051f6:	4293      	cmp	r3, r2
 81051f8:	d03b      	beq.n	8105272 <HAL_DMA_IRQHandler+0x2ee>
 81051fa:	687b      	ldr	r3, [r7, #4]
 81051fc:	681b      	ldr	r3, [r3, #0]
 81051fe:	4a63      	ldr	r2, [pc, #396]	; (810538c <HAL_DMA_IRQHandler+0x408>)
 8105200:	4293      	cmp	r3, r2
 8105202:	d036      	beq.n	8105272 <HAL_DMA_IRQHandler+0x2ee>
 8105204:	687b      	ldr	r3, [r7, #4]
 8105206:	681b      	ldr	r3, [r3, #0]
 8105208:	4a61      	ldr	r2, [pc, #388]	; (8105390 <HAL_DMA_IRQHandler+0x40c>)
 810520a:	4293      	cmp	r3, r2
 810520c:	d031      	beq.n	8105272 <HAL_DMA_IRQHandler+0x2ee>
 810520e:	687b      	ldr	r3, [r7, #4]
 8105210:	681b      	ldr	r3, [r3, #0]
 8105212:	4a60      	ldr	r2, [pc, #384]	; (8105394 <HAL_DMA_IRQHandler+0x410>)
 8105214:	4293      	cmp	r3, r2
 8105216:	d02c      	beq.n	8105272 <HAL_DMA_IRQHandler+0x2ee>
 8105218:	687b      	ldr	r3, [r7, #4]
 810521a:	681b      	ldr	r3, [r3, #0]
 810521c:	4a5e      	ldr	r2, [pc, #376]	; (8105398 <HAL_DMA_IRQHandler+0x414>)
 810521e:	4293      	cmp	r3, r2
 8105220:	d027      	beq.n	8105272 <HAL_DMA_IRQHandler+0x2ee>
 8105222:	687b      	ldr	r3, [r7, #4]
 8105224:	681b      	ldr	r3, [r3, #0]
 8105226:	4a5d      	ldr	r2, [pc, #372]	; (810539c <HAL_DMA_IRQHandler+0x418>)
 8105228:	4293      	cmp	r3, r2
 810522a:	d022      	beq.n	8105272 <HAL_DMA_IRQHandler+0x2ee>
 810522c:	687b      	ldr	r3, [r7, #4]
 810522e:	681b      	ldr	r3, [r3, #0]
 8105230:	4a5b      	ldr	r2, [pc, #364]	; (81053a0 <HAL_DMA_IRQHandler+0x41c>)
 8105232:	4293      	cmp	r3, r2
 8105234:	d01d      	beq.n	8105272 <HAL_DMA_IRQHandler+0x2ee>
 8105236:	687b      	ldr	r3, [r7, #4]
 8105238:	681b      	ldr	r3, [r3, #0]
 810523a:	4a5a      	ldr	r2, [pc, #360]	; (81053a4 <HAL_DMA_IRQHandler+0x420>)
 810523c:	4293      	cmp	r3, r2
 810523e:	d018      	beq.n	8105272 <HAL_DMA_IRQHandler+0x2ee>
 8105240:	687b      	ldr	r3, [r7, #4]
 8105242:	681b      	ldr	r3, [r3, #0]
 8105244:	4a58      	ldr	r2, [pc, #352]	; (81053a8 <HAL_DMA_IRQHandler+0x424>)
 8105246:	4293      	cmp	r3, r2
 8105248:	d013      	beq.n	8105272 <HAL_DMA_IRQHandler+0x2ee>
 810524a:	687b      	ldr	r3, [r7, #4]
 810524c:	681b      	ldr	r3, [r3, #0]
 810524e:	4a57      	ldr	r2, [pc, #348]	; (81053ac <HAL_DMA_IRQHandler+0x428>)
 8105250:	4293      	cmp	r3, r2
 8105252:	d00e      	beq.n	8105272 <HAL_DMA_IRQHandler+0x2ee>
 8105254:	687b      	ldr	r3, [r7, #4]
 8105256:	681b      	ldr	r3, [r3, #0]
 8105258:	4a55      	ldr	r2, [pc, #340]	; (81053b0 <HAL_DMA_IRQHandler+0x42c>)
 810525a:	4293      	cmp	r3, r2
 810525c:	d009      	beq.n	8105272 <HAL_DMA_IRQHandler+0x2ee>
 810525e:	687b      	ldr	r3, [r7, #4]
 8105260:	681b      	ldr	r3, [r3, #0]
 8105262:	4a54      	ldr	r2, [pc, #336]	; (81053b4 <HAL_DMA_IRQHandler+0x430>)
 8105264:	4293      	cmp	r3, r2
 8105266:	d004      	beq.n	8105272 <HAL_DMA_IRQHandler+0x2ee>
 8105268:	687b      	ldr	r3, [r7, #4]
 810526a:	681b      	ldr	r3, [r3, #0]
 810526c:	4a52      	ldr	r2, [pc, #328]	; (81053b8 <HAL_DMA_IRQHandler+0x434>)
 810526e:	4293      	cmp	r3, r2
 8105270:	d10a      	bne.n	8105288 <HAL_DMA_IRQHandler+0x304>
 8105272:	687b      	ldr	r3, [r7, #4]
 8105274:	681b      	ldr	r3, [r3, #0]
 8105276:	695b      	ldr	r3, [r3, #20]
 8105278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810527c:	2b00      	cmp	r3, #0
 810527e:	bf14      	ite	ne
 8105280:	2301      	movne	r3, #1
 8105282:	2300      	moveq	r3, #0
 8105284:	b2db      	uxtb	r3, r3
 8105286:	e003      	b.n	8105290 <HAL_DMA_IRQHandler+0x30c>
 8105288:	687b      	ldr	r3, [r7, #4]
 810528a:	681b      	ldr	r3, [r3, #0]
 810528c:	681b      	ldr	r3, [r3, #0]
 810528e:	2300      	movs	r3, #0
 8105290:	2b00      	cmp	r3, #0
 8105292:	d00d      	beq.n	81052b0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8105294:	687b      	ldr	r3, [r7, #4]
 8105296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105298:	f003 031f 	and.w	r3, r3, #31
 810529c:	2201      	movs	r2, #1
 810529e:	409a      	lsls	r2, r3
 81052a0:	6a3b      	ldr	r3, [r7, #32]
 81052a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 81052a4:	687b      	ldr	r3, [r7, #4]
 81052a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81052a8:	f043 0202 	orr.w	r2, r3, #2
 81052ac:	687b      	ldr	r3, [r7, #4]
 81052ae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81052b0:	687b      	ldr	r3, [r7, #4]
 81052b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81052b4:	f003 031f 	and.w	r3, r3, #31
 81052b8:	2204      	movs	r2, #4
 81052ba:	409a      	lsls	r2, r3
 81052bc:	69bb      	ldr	r3, [r7, #24]
 81052be:	4013      	ands	r3, r2
 81052c0:	2b00      	cmp	r3, #0
 81052c2:	f000 808f 	beq.w	81053e4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 81052c6:	687b      	ldr	r3, [r7, #4]
 81052c8:	681b      	ldr	r3, [r3, #0]
 81052ca:	4a2c      	ldr	r2, [pc, #176]	; (810537c <HAL_DMA_IRQHandler+0x3f8>)
 81052cc:	4293      	cmp	r3, r2
 81052ce:	d04a      	beq.n	8105366 <HAL_DMA_IRQHandler+0x3e2>
 81052d0:	687b      	ldr	r3, [r7, #4]
 81052d2:	681b      	ldr	r3, [r3, #0]
 81052d4:	4a2a      	ldr	r2, [pc, #168]	; (8105380 <HAL_DMA_IRQHandler+0x3fc>)
 81052d6:	4293      	cmp	r3, r2
 81052d8:	d045      	beq.n	8105366 <HAL_DMA_IRQHandler+0x3e2>
 81052da:	687b      	ldr	r3, [r7, #4]
 81052dc:	681b      	ldr	r3, [r3, #0]
 81052de:	4a29      	ldr	r2, [pc, #164]	; (8105384 <HAL_DMA_IRQHandler+0x400>)
 81052e0:	4293      	cmp	r3, r2
 81052e2:	d040      	beq.n	8105366 <HAL_DMA_IRQHandler+0x3e2>
 81052e4:	687b      	ldr	r3, [r7, #4]
 81052e6:	681b      	ldr	r3, [r3, #0]
 81052e8:	4a27      	ldr	r2, [pc, #156]	; (8105388 <HAL_DMA_IRQHandler+0x404>)
 81052ea:	4293      	cmp	r3, r2
 81052ec:	d03b      	beq.n	8105366 <HAL_DMA_IRQHandler+0x3e2>
 81052ee:	687b      	ldr	r3, [r7, #4]
 81052f0:	681b      	ldr	r3, [r3, #0]
 81052f2:	4a26      	ldr	r2, [pc, #152]	; (810538c <HAL_DMA_IRQHandler+0x408>)
 81052f4:	4293      	cmp	r3, r2
 81052f6:	d036      	beq.n	8105366 <HAL_DMA_IRQHandler+0x3e2>
 81052f8:	687b      	ldr	r3, [r7, #4]
 81052fa:	681b      	ldr	r3, [r3, #0]
 81052fc:	4a24      	ldr	r2, [pc, #144]	; (8105390 <HAL_DMA_IRQHandler+0x40c>)
 81052fe:	4293      	cmp	r3, r2
 8105300:	d031      	beq.n	8105366 <HAL_DMA_IRQHandler+0x3e2>
 8105302:	687b      	ldr	r3, [r7, #4]
 8105304:	681b      	ldr	r3, [r3, #0]
 8105306:	4a23      	ldr	r2, [pc, #140]	; (8105394 <HAL_DMA_IRQHandler+0x410>)
 8105308:	4293      	cmp	r3, r2
 810530a:	d02c      	beq.n	8105366 <HAL_DMA_IRQHandler+0x3e2>
 810530c:	687b      	ldr	r3, [r7, #4]
 810530e:	681b      	ldr	r3, [r3, #0]
 8105310:	4a21      	ldr	r2, [pc, #132]	; (8105398 <HAL_DMA_IRQHandler+0x414>)
 8105312:	4293      	cmp	r3, r2
 8105314:	d027      	beq.n	8105366 <HAL_DMA_IRQHandler+0x3e2>
 8105316:	687b      	ldr	r3, [r7, #4]
 8105318:	681b      	ldr	r3, [r3, #0]
 810531a:	4a20      	ldr	r2, [pc, #128]	; (810539c <HAL_DMA_IRQHandler+0x418>)
 810531c:	4293      	cmp	r3, r2
 810531e:	d022      	beq.n	8105366 <HAL_DMA_IRQHandler+0x3e2>
 8105320:	687b      	ldr	r3, [r7, #4]
 8105322:	681b      	ldr	r3, [r3, #0]
 8105324:	4a1e      	ldr	r2, [pc, #120]	; (81053a0 <HAL_DMA_IRQHandler+0x41c>)
 8105326:	4293      	cmp	r3, r2
 8105328:	d01d      	beq.n	8105366 <HAL_DMA_IRQHandler+0x3e2>
 810532a:	687b      	ldr	r3, [r7, #4]
 810532c:	681b      	ldr	r3, [r3, #0]
 810532e:	4a1d      	ldr	r2, [pc, #116]	; (81053a4 <HAL_DMA_IRQHandler+0x420>)
 8105330:	4293      	cmp	r3, r2
 8105332:	d018      	beq.n	8105366 <HAL_DMA_IRQHandler+0x3e2>
 8105334:	687b      	ldr	r3, [r7, #4]
 8105336:	681b      	ldr	r3, [r3, #0]
 8105338:	4a1b      	ldr	r2, [pc, #108]	; (81053a8 <HAL_DMA_IRQHandler+0x424>)
 810533a:	4293      	cmp	r3, r2
 810533c:	d013      	beq.n	8105366 <HAL_DMA_IRQHandler+0x3e2>
 810533e:	687b      	ldr	r3, [r7, #4]
 8105340:	681b      	ldr	r3, [r3, #0]
 8105342:	4a1a      	ldr	r2, [pc, #104]	; (81053ac <HAL_DMA_IRQHandler+0x428>)
 8105344:	4293      	cmp	r3, r2
 8105346:	d00e      	beq.n	8105366 <HAL_DMA_IRQHandler+0x3e2>
 8105348:	687b      	ldr	r3, [r7, #4]
 810534a:	681b      	ldr	r3, [r3, #0]
 810534c:	4a18      	ldr	r2, [pc, #96]	; (81053b0 <HAL_DMA_IRQHandler+0x42c>)
 810534e:	4293      	cmp	r3, r2
 8105350:	d009      	beq.n	8105366 <HAL_DMA_IRQHandler+0x3e2>
 8105352:	687b      	ldr	r3, [r7, #4]
 8105354:	681b      	ldr	r3, [r3, #0]
 8105356:	4a17      	ldr	r2, [pc, #92]	; (81053b4 <HAL_DMA_IRQHandler+0x430>)
 8105358:	4293      	cmp	r3, r2
 810535a:	d004      	beq.n	8105366 <HAL_DMA_IRQHandler+0x3e2>
 810535c:	687b      	ldr	r3, [r7, #4]
 810535e:	681b      	ldr	r3, [r3, #0]
 8105360:	4a15      	ldr	r2, [pc, #84]	; (81053b8 <HAL_DMA_IRQHandler+0x434>)
 8105362:	4293      	cmp	r3, r2
 8105364:	d12a      	bne.n	81053bc <HAL_DMA_IRQHandler+0x438>
 8105366:	687b      	ldr	r3, [r7, #4]
 8105368:	681b      	ldr	r3, [r3, #0]
 810536a:	681b      	ldr	r3, [r3, #0]
 810536c:	f003 0302 	and.w	r3, r3, #2
 8105370:	2b00      	cmp	r3, #0
 8105372:	bf14      	ite	ne
 8105374:	2301      	movne	r3, #1
 8105376:	2300      	moveq	r3, #0
 8105378:	b2db      	uxtb	r3, r3
 810537a:	e023      	b.n	81053c4 <HAL_DMA_IRQHandler+0x440>
 810537c:	40020010 	.word	0x40020010
 8105380:	40020028 	.word	0x40020028
 8105384:	40020040 	.word	0x40020040
 8105388:	40020058 	.word	0x40020058
 810538c:	40020070 	.word	0x40020070
 8105390:	40020088 	.word	0x40020088
 8105394:	400200a0 	.word	0x400200a0
 8105398:	400200b8 	.word	0x400200b8
 810539c:	40020410 	.word	0x40020410
 81053a0:	40020428 	.word	0x40020428
 81053a4:	40020440 	.word	0x40020440
 81053a8:	40020458 	.word	0x40020458
 81053ac:	40020470 	.word	0x40020470
 81053b0:	40020488 	.word	0x40020488
 81053b4:	400204a0 	.word	0x400204a0
 81053b8:	400204b8 	.word	0x400204b8
 81053bc:	687b      	ldr	r3, [r7, #4]
 81053be:	681b      	ldr	r3, [r3, #0]
 81053c0:	681b      	ldr	r3, [r3, #0]
 81053c2:	2300      	movs	r3, #0
 81053c4:	2b00      	cmp	r3, #0
 81053c6:	d00d      	beq.n	81053e4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81053c8:	687b      	ldr	r3, [r7, #4]
 81053ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81053cc:	f003 031f 	and.w	r3, r3, #31
 81053d0:	2204      	movs	r2, #4
 81053d2:	409a      	lsls	r2, r3
 81053d4:	6a3b      	ldr	r3, [r7, #32]
 81053d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 81053d8:	687b      	ldr	r3, [r7, #4]
 81053da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81053dc:	f043 0204 	orr.w	r2, r3, #4
 81053e0:	687b      	ldr	r3, [r7, #4]
 81053e2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81053e4:	687b      	ldr	r3, [r7, #4]
 81053e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81053e8:	f003 031f 	and.w	r3, r3, #31
 81053ec:	2210      	movs	r2, #16
 81053ee:	409a      	lsls	r2, r3
 81053f0:	69bb      	ldr	r3, [r7, #24]
 81053f2:	4013      	ands	r3, r2
 81053f4:	2b00      	cmp	r3, #0
 81053f6:	f000 80a6 	beq.w	8105546 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 81053fa:	687b      	ldr	r3, [r7, #4]
 81053fc:	681b      	ldr	r3, [r3, #0]
 81053fe:	4a85      	ldr	r2, [pc, #532]	; (8105614 <HAL_DMA_IRQHandler+0x690>)
 8105400:	4293      	cmp	r3, r2
 8105402:	d04a      	beq.n	810549a <HAL_DMA_IRQHandler+0x516>
 8105404:	687b      	ldr	r3, [r7, #4]
 8105406:	681b      	ldr	r3, [r3, #0]
 8105408:	4a83      	ldr	r2, [pc, #524]	; (8105618 <HAL_DMA_IRQHandler+0x694>)
 810540a:	4293      	cmp	r3, r2
 810540c:	d045      	beq.n	810549a <HAL_DMA_IRQHandler+0x516>
 810540e:	687b      	ldr	r3, [r7, #4]
 8105410:	681b      	ldr	r3, [r3, #0]
 8105412:	4a82      	ldr	r2, [pc, #520]	; (810561c <HAL_DMA_IRQHandler+0x698>)
 8105414:	4293      	cmp	r3, r2
 8105416:	d040      	beq.n	810549a <HAL_DMA_IRQHandler+0x516>
 8105418:	687b      	ldr	r3, [r7, #4]
 810541a:	681b      	ldr	r3, [r3, #0]
 810541c:	4a80      	ldr	r2, [pc, #512]	; (8105620 <HAL_DMA_IRQHandler+0x69c>)
 810541e:	4293      	cmp	r3, r2
 8105420:	d03b      	beq.n	810549a <HAL_DMA_IRQHandler+0x516>
 8105422:	687b      	ldr	r3, [r7, #4]
 8105424:	681b      	ldr	r3, [r3, #0]
 8105426:	4a7f      	ldr	r2, [pc, #508]	; (8105624 <HAL_DMA_IRQHandler+0x6a0>)
 8105428:	4293      	cmp	r3, r2
 810542a:	d036      	beq.n	810549a <HAL_DMA_IRQHandler+0x516>
 810542c:	687b      	ldr	r3, [r7, #4]
 810542e:	681b      	ldr	r3, [r3, #0]
 8105430:	4a7d      	ldr	r2, [pc, #500]	; (8105628 <HAL_DMA_IRQHandler+0x6a4>)
 8105432:	4293      	cmp	r3, r2
 8105434:	d031      	beq.n	810549a <HAL_DMA_IRQHandler+0x516>
 8105436:	687b      	ldr	r3, [r7, #4]
 8105438:	681b      	ldr	r3, [r3, #0]
 810543a:	4a7c      	ldr	r2, [pc, #496]	; (810562c <HAL_DMA_IRQHandler+0x6a8>)
 810543c:	4293      	cmp	r3, r2
 810543e:	d02c      	beq.n	810549a <HAL_DMA_IRQHandler+0x516>
 8105440:	687b      	ldr	r3, [r7, #4]
 8105442:	681b      	ldr	r3, [r3, #0]
 8105444:	4a7a      	ldr	r2, [pc, #488]	; (8105630 <HAL_DMA_IRQHandler+0x6ac>)
 8105446:	4293      	cmp	r3, r2
 8105448:	d027      	beq.n	810549a <HAL_DMA_IRQHandler+0x516>
 810544a:	687b      	ldr	r3, [r7, #4]
 810544c:	681b      	ldr	r3, [r3, #0]
 810544e:	4a79      	ldr	r2, [pc, #484]	; (8105634 <HAL_DMA_IRQHandler+0x6b0>)
 8105450:	4293      	cmp	r3, r2
 8105452:	d022      	beq.n	810549a <HAL_DMA_IRQHandler+0x516>
 8105454:	687b      	ldr	r3, [r7, #4]
 8105456:	681b      	ldr	r3, [r3, #0]
 8105458:	4a77      	ldr	r2, [pc, #476]	; (8105638 <HAL_DMA_IRQHandler+0x6b4>)
 810545a:	4293      	cmp	r3, r2
 810545c:	d01d      	beq.n	810549a <HAL_DMA_IRQHandler+0x516>
 810545e:	687b      	ldr	r3, [r7, #4]
 8105460:	681b      	ldr	r3, [r3, #0]
 8105462:	4a76      	ldr	r2, [pc, #472]	; (810563c <HAL_DMA_IRQHandler+0x6b8>)
 8105464:	4293      	cmp	r3, r2
 8105466:	d018      	beq.n	810549a <HAL_DMA_IRQHandler+0x516>
 8105468:	687b      	ldr	r3, [r7, #4]
 810546a:	681b      	ldr	r3, [r3, #0]
 810546c:	4a74      	ldr	r2, [pc, #464]	; (8105640 <HAL_DMA_IRQHandler+0x6bc>)
 810546e:	4293      	cmp	r3, r2
 8105470:	d013      	beq.n	810549a <HAL_DMA_IRQHandler+0x516>
 8105472:	687b      	ldr	r3, [r7, #4]
 8105474:	681b      	ldr	r3, [r3, #0]
 8105476:	4a73      	ldr	r2, [pc, #460]	; (8105644 <HAL_DMA_IRQHandler+0x6c0>)
 8105478:	4293      	cmp	r3, r2
 810547a:	d00e      	beq.n	810549a <HAL_DMA_IRQHandler+0x516>
 810547c:	687b      	ldr	r3, [r7, #4]
 810547e:	681b      	ldr	r3, [r3, #0]
 8105480:	4a71      	ldr	r2, [pc, #452]	; (8105648 <HAL_DMA_IRQHandler+0x6c4>)
 8105482:	4293      	cmp	r3, r2
 8105484:	d009      	beq.n	810549a <HAL_DMA_IRQHandler+0x516>
 8105486:	687b      	ldr	r3, [r7, #4]
 8105488:	681b      	ldr	r3, [r3, #0]
 810548a:	4a70      	ldr	r2, [pc, #448]	; (810564c <HAL_DMA_IRQHandler+0x6c8>)
 810548c:	4293      	cmp	r3, r2
 810548e:	d004      	beq.n	810549a <HAL_DMA_IRQHandler+0x516>
 8105490:	687b      	ldr	r3, [r7, #4]
 8105492:	681b      	ldr	r3, [r3, #0]
 8105494:	4a6e      	ldr	r2, [pc, #440]	; (8105650 <HAL_DMA_IRQHandler+0x6cc>)
 8105496:	4293      	cmp	r3, r2
 8105498:	d10a      	bne.n	81054b0 <HAL_DMA_IRQHandler+0x52c>
 810549a:	687b      	ldr	r3, [r7, #4]
 810549c:	681b      	ldr	r3, [r3, #0]
 810549e:	681b      	ldr	r3, [r3, #0]
 81054a0:	f003 0308 	and.w	r3, r3, #8
 81054a4:	2b00      	cmp	r3, #0
 81054a6:	bf14      	ite	ne
 81054a8:	2301      	movne	r3, #1
 81054aa:	2300      	moveq	r3, #0
 81054ac:	b2db      	uxtb	r3, r3
 81054ae:	e009      	b.n	81054c4 <HAL_DMA_IRQHandler+0x540>
 81054b0:	687b      	ldr	r3, [r7, #4]
 81054b2:	681b      	ldr	r3, [r3, #0]
 81054b4:	681b      	ldr	r3, [r3, #0]
 81054b6:	f003 0304 	and.w	r3, r3, #4
 81054ba:	2b00      	cmp	r3, #0
 81054bc:	bf14      	ite	ne
 81054be:	2301      	movne	r3, #1
 81054c0:	2300      	moveq	r3, #0
 81054c2:	b2db      	uxtb	r3, r3
 81054c4:	2b00      	cmp	r3, #0
 81054c6:	d03e      	beq.n	8105546 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 81054c8:	687b      	ldr	r3, [r7, #4]
 81054ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81054cc:	f003 031f 	and.w	r3, r3, #31
 81054d0:	2210      	movs	r2, #16
 81054d2:	409a      	lsls	r2, r3
 81054d4:	6a3b      	ldr	r3, [r7, #32]
 81054d6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 81054d8:	687b      	ldr	r3, [r7, #4]
 81054da:	681b      	ldr	r3, [r3, #0]
 81054dc:	681b      	ldr	r3, [r3, #0]
 81054de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81054e2:	2b00      	cmp	r3, #0
 81054e4:	d018      	beq.n	8105518 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 81054e6:	687b      	ldr	r3, [r7, #4]
 81054e8:	681b      	ldr	r3, [r3, #0]
 81054ea:	681b      	ldr	r3, [r3, #0]
 81054ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81054f0:	2b00      	cmp	r3, #0
 81054f2:	d108      	bne.n	8105506 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 81054f4:	687b      	ldr	r3, [r7, #4]
 81054f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81054f8:	2b00      	cmp	r3, #0
 81054fa:	d024      	beq.n	8105546 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 81054fc:	687b      	ldr	r3, [r7, #4]
 81054fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105500:	6878      	ldr	r0, [r7, #4]
 8105502:	4798      	blx	r3
 8105504:	e01f      	b.n	8105546 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8105506:	687b      	ldr	r3, [r7, #4]
 8105508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810550a:	2b00      	cmp	r3, #0
 810550c:	d01b      	beq.n	8105546 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 810550e:	687b      	ldr	r3, [r7, #4]
 8105510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105512:	6878      	ldr	r0, [r7, #4]
 8105514:	4798      	blx	r3
 8105516:	e016      	b.n	8105546 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8105518:	687b      	ldr	r3, [r7, #4]
 810551a:	681b      	ldr	r3, [r3, #0]
 810551c:	681b      	ldr	r3, [r3, #0]
 810551e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105522:	2b00      	cmp	r3, #0
 8105524:	d107      	bne.n	8105536 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8105526:	687b      	ldr	r3, [r7, #4]
 8105528:	681b      	ldr	r3, [r3, #0]
 810552a:	681a      	ldr	r2, [r3, #0]
 810552c:	687b      	ldr	r3, [r7, #4]
 810552e:	681b      	ldr	r3, [r3, #0]
 8105530:	f022 0208 	bic.w	r2, r2, #8
 8105534:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8105536:	687b      	ldr	r3, [r7, #4]
 8105538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810553a:	2b00      	cmp	r3, #0
 810553c:	d003      	beq.n	8105546 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 810553e:	687b      	ldr	r3, [r7, #4]
 8105540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105542:	6878      	ldr	r0, [r7, #4]
 8105544:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8105546:	687b      	ldr	r3, [r7, #4]
 8105548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810554a:	f003 031f 	and.w	r3, r3, #31
 810554e:	2220      	movs	r2, #32
 8105550:	409a      	lsls	r2, r3
 8105552:	69bb      	ldr	r3, [r7, #24]
 8105554:	4013      	ands	r3, r2
 8105556:	2b00      	cmp	r3, #0
 8105558:	f000 8110 	beq.w	810577c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 810555c:	687b      	ldr	r3, [r7, #4]
 810555e:	681b      	ldr	r3, [r3, #0]
 8105560:	4a2c      	ldr	r2, [pc, #176]	; (8105614 <HAL_DMA_IRQHandler+0x690>)
 8105562:	4293      	cmp	r3, r2
 8105564:	d04a      	beq.n	81055fc <HAL_DMA_IRQHandler+0x678>
 8105566:	687b      	ldr	r3, [r7, #4]
 8105568:	681b      	ldr	r3, [r3, #0]
 810556a:	4a2b      	ldr	r2, [pc, #172]	; (8105618 <HAL_DMA_IRQHandler+0x694>)
 810556c:	4293      	cmp	r3, r2
 810556e:	d045      	beq.n	81055fc <HAL_DMA_IRQHandler+0x678>
 8105570:	687b      	ldr	r3, [r7, #4]
 8105572:	681b      	ldr	r3, [r3, #0]
 8105574:	4a29      	ldr	r2, [pc, #164]	; (810561c <HAL_DMA_IRQHandler+0x698>)
 8105576:	4293      	cmp	r3, r2
 8105578:	d040      	beq.n	81055fc <HAL_DMA_IRQHandler+0x678>
 810557a:	687b      	ldr	r3, [r7, #4]
 810557c:	681b      	ldr	r3, [r3, #0]
 810557e:	4a28      	ldr	r2, [pc, #160]	; (8105620 <HAL_DMA_IRQHandler+0x69c>)
 8105580:	4293      	cmp	r3, r2
 8105582:	d03b      	beq.n	81055fc <HAL_DMA_IRQHandler+0x678>
 8105584:	687b      	ldr	r3, [r7, #4]
 8105586:	681b      	ldr	r3, [r3, #0]
 8105588:	4a26      	ldr	r2, [pc, #152]	; (8105624 <HAL_DMA_IRQHandler+0x6a0>)
 810558a:	4293      	cmp	r3, r2
 810558c:	d036      	beq.n	81055fc <HAL_DMA_IRQHandler+0x678>
 810558e:	687b      	ldr	r3, [r7, #4]
 8105590:	681b      	ldr	r3, [r3, #0]
 8105592:	4a25      	ldr	r2, [pc, #148]	; (8105628 <HAL_DMA_IRQHandler+0x6a4>)
 8105594:	4293      	cmp	r3, r2
 8105596:	d031      	beq.n	81055fc <HAL_DMA_IRQHandler+0x678>
 8105598:	687b      	ldr	r3, [r7, #4]
 810559a:	681b      	ldr	r3, [r3, #0]
 810559c:	4a23      	ldr	r2, [pc, #140]	; (810562c <HAL_DMA_IRQHandler+0x6a8>)
 810559e:	4293      	cmp	r3, r2
 81055a0:	d02c      	beq.n	81055fc <HAL_DMA_IRQHandler+0x678>
 81055a2:	687b      	ldr	r3, [r7, #4]
 81055a4:	681b      	ldr	r3, [r3, #0]
 81055a6:	4a22      	ldr	r2, [pc, #136]	; (8105630 <HAL_DMA_IRQHandler+0x6ac>)
 81055a8:	4293      	cmp	r3, r2
 81055aa:	d027      	beq.n	81055fc <HAL_DMA_IRQHandler+0x678>
 81055ac:	687b      	ldr	r3, [r7, #4]
 81055ae:	681b      	ldr	r3, [r3, #0]
 81055b0:	4a20      	ldr	r2, [pc, #128]	; (8105634 <HAL_DMA_IRQHandler+0x6b0>)
 81055b2:	4293      	cmp	r3, r2
 81055b4:	d022      	beq.n	81055fc <HAL_DMA_IRQHandler+0x678>
 81055b6:	687b      	ldr	r3, [r7, #4]
 81055b8:	681b      	ldr	r3, [r3, #0]
 81055ba:	4a1f      	ldr	r2, [pc, #124]	; (8105638 <HAL_DMA_IRQHandler+0x6b4>)
 81055bc:	4293      	cmp	r3, r2
 81055be:	d01d      	beq.n	81055fc <HAL_DMA_IRQHandler+0x678>
 81055c0:	687b      	ldr	r3, [r7, #4]
 81055c2:	681b      	ldr	r3, [r3, #0]
 81055c4:	4a1d      	ldr	r2, [pc, #116]	; (810563c <HAL_DMA_IRQHandler+0x6b8>)
 81055c6:	4293      	cmp	r3, r2
 81055c8:	d018      	beq.n	81055fc <HAL_DMA_IRQHandler+0x678>
 81055ca:	687b      	ldr	r3, [r7, #4]
 81055cc:	681b      	ldr	r3, [r3, #0]
 81055ce:	4a1c      	ldr	r2, [pc, #112]	; (8105640 <HAL_DMA_IRQHandler+0x6bc>)
 81055d0:	4293      	cmp	r3, r2
 81055d2:	d013      	beq.n	81055fc <HAL_DMA_IRQHandler+0x678>
 81055d4:	687b      	ldr	r3, [r7, #4]
 81055d6:	681b      	ldr	r3, [r3, #0]
 81055d8:	4a1a      	ldr	r2, [pc, #104]	; (8105644 <HAL_DMA_IRQHandler+0x6c0>)
 81055da:	4293      	cmp	r3, r2
 81055dc:	d00e      	beq.n	81055fc <HAL_DMA_IRQHandler+0x678>
 81055de:	687b      	ldr	r3, [r7, #4]
 81055e0:	681b      	ldr	r3, [r3, #0]
 81055e2:	4a19      	ldr	r2, [pc, #100]	; (8105648 <HAL_DMA_IRQHandler+0x6c4>)
 81055e4:	4293      	cmp	r3, r2
 81055e6:	d009      	beq.n	81055fc <HAL_DMA_IRQHandler+0x678>
 81055e8:	687b      	ldr	r3, [r7, #4]
 81055ea:	681b      	ldr	r3, [r3, #0]
 81055ec:	4a17      	ldr	r2, [pc, #92]	; (810564c <HAL_DMA_IRQHandler+0x6c8>)
 81055ee:	4293      	cmp	r3, r2
 81055f0:	d004      	beq.n	81055fc <HAL_DMA_IRQHandler+0x678>
 81055f2:	687b      	ldr	r3, [r7, #4]
 81055f4:	681b      	ldr	r3, [r3, #0]
 81055f6:	4a16      	ldr	r2, [pc, #88]	; (8105650 <HAL_DMA_IRQHandler+0x6cc>)
 81055f8:	4293      	cmp	r3, r2
 81055fa:	d12b      	bne.n	8105654 <HAL_DMA_IRQHandler+0x6d0>
 81055fc:	687b      	ldr	r3, [r7, #4]
 81055fe:	681b      	ldr	r3, [r3, #0]
 8105600:	681b      	ldr	r3, [r3, #0]
 8105602:	f003 0310 	and.w	r3, r3, #16
 8105606:	2b00      	cmp	r3, #0
 8105608:	bf14      	ite	ne
 810560a:	2301      	movne	r3, #1
 810560c:	2300      	moveq	r3, #0
 810560e:	b2db      	uxtb	r3, r3
 8105610:	e02a      	b.n	8105668 <HAL_DMA_IRQHandler+0x6e4>
 8105612:	bf00      	nop
 8105614:	40020010 	.word	0x40020010
 8105618:	40020028 	.word	0x40020028
 810561c:	40020040 	.word	0x40020040
 8105620:	40020058 	.word	0x40020058
 8105624:	40020070 	.word	0x40020070
 8105628:	40020088 	.word	0x40020088
 810562c:	400200a0 	.word	0x400200a0
 8105630:	400200b8 	.word	0x400200b8
 8105634:	40020410 	.word	0x40020410
 8105638:	40020428 	.word	0x40020428
 810563c:	40020440 	.word	0x40020440
 8105640:	40020458 	.word	0x40020458
 8105644:	40020470 	.word	0x40020470
 8105648:	40020488 	.word	0x40020488
 810564c:	400204a0 	.word	0x400204a0
 8105650:	400204b8 	.word	0x400204b8
 8105654:	687b      	ldr	r3, [r7, #4]
 8105656:	681b      	ldr	r3, [r3, #0]
 8105658:	681b      	ldr	r3, [r3, #0]
 810565a:	f003 0302 	and.w	r3, r3, #2
 810565e:	2b00      	cmp	r3, #0
 8105660:	bf14      	ite	ne
 8105662:	2301      	movne	r3, #1
 8105664:	2300      	moveq	r3, #0
 8105666:	b2db      	uxtb	r3, r3
 8105668:	2b00      	cmp	r3, #0
 810566a:	f000 8087 	beq.w	810577c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 810566e:	687b      	ldr	r3, [r7, #4]
 8105670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105672:	f003 031f 	and.w	r3, r3, #31
 8105676:	2220      	movs	r2, #32
 8105678:	409a      	lsls	r2, r3
 810567a:	6a3b      	ldr	r3, [r7, #32]
 810567c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 810567e:	687b      	ldr	r3, [r7, #4]
 8105680:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8105684:	b2db      	uxtb	r3, r3
 8105686:	2b04      	cmp	r3, #4
 8105688:	d139      	bne.n	81056fe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 810568a:	687b      	ldr	r3, [r7, #4]
 810568c:	681b      	ldr	r3, [r3, #0]
 810568e:	681a      	ldr	r2, [r3, #0]
 8105690:	687b      	ldr	r3, [r7, #4]
 8105692:	681b      	ldr	r3, [r3, #0]
 8105694:	f022 0216 	bic.w	r2, r2, #22
 8105698:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 810569a:	687b      	ldr	r3, [r7, #4]
 810569c:	681b      	ldr	r3, [r3, #0]
 810569e:	695a      	ldr	r2, [r3, #20]
 81056a0:	687b      	ldr	r3, [r7, #4]
 81056a2:	681b      	ldr	r3, [r3, #0]
 81056a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 81056a8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 81056aa:	687b      	ldr	r3, [r7, #4]
 81056ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81056ae:	2b00      	cmp	r3, #0
 81056b0:	d103      	bne.n	81056ba <HAL_DMA_IRQHandler+0x736>
 81056b2:	687b      	ldr	r3, [r7, #4]
 81056b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81056b6:	2b00      	cmp	r3, #0
 81056b8:	d007      	beq.n	81056ca <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 81056ba:	687b      	ldr	r3, [r7, #4]
 81056bc:	681b      	ldr	r3, [r3, #0]
 81056be:	681a      	ldr	r2, [r3, #0]
 81056c0:	687b      	ldr	r3, [r7, #4]
 81056c2:	681b      	ldr	r3, [r3, #0]
 81056c4:	f022 0208 	bic.w	r2, r2, #8
 81056c8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81056ca:	687b      	ldr	r3, [r7, #4]
 81056cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81056ce:	f003 031f 	and.w	r3, r3, #31
 81056d2:	223f      	movs	r2, #63	; 0x3f
 81056d4:	409a      	lsls	r2, r3
 81056d6:	6a3b      	ldr	r3, [r7, #32]
 81056d8:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 81056da:	687b      	ldr	r3, [r7, #4]
 81056dc:	2200      	movs	r2, #0
 81056de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 81056e2:	687b      	ldr	r3, [r7, #4]
 81056e4:	2201      	movs	r2, #1
 81056e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 81056ea:	687b      	ldr	r3, [r7, #4]
 81056ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81056ee:	2b00      	cmp	r3, #0
 81056f0:	f000 834a 	beq.w	8105d88 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 81056f4:	687b      	ldr	r3, [r7, #4]
 81056f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81056f8:	6878      	ldr	r0, [r7, #4]
 81056fa:	4798      	blx	r3
          }
          return;
 81056fc:	e344      	b.n	8105d88 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 81056fe:	687b      	ldr	r3, [r7, #4]
 8105700:	681b      	ldr	r3, [r3, #0]
 8105702:	681b      	ldr	r3, [r3, #0]
 8105704:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8105708:	2b00      	cmp	r3, #0
 810570a:	d018      	beq.n	810573e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 810570c:	687b      	ldr	r3, [r7, #4]
 810570e:	681b      	ldr	r3, [r3, #0]
 8105710:	681b      	ldr	r3, [r3, #0]
 8105712:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8105716:	2b00      	cmp	r3, #0
 8105718:	d108      	bne.n	810572c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 810571a:	687b      	ldr	r3, [r7, #4]
 810571c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810571e:	2b00      	cmp	r3, #0
 8105720:	d02c      	beq.n	810577c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8105722:	687b      	ldr	r3, [r7, #4]
 8105724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105726:	6878      	ldr	r0, [r7, #4]
 8105728:	4798      	blx	r3
 810572a:	e027      	b.n	810577c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 810572c:	687b      	ldr	r3, [r7, #4]
 810572e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105730:	2b00      	cmp	r3, #0
 8105732:	d023      	beq.n	810577c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8105734:	687b      	ldr	r3, [r7, #4]
 8105736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105738:	6878      	ldr	r0, [r7, #4]
 810573a:	4798      	blx	r3
 810573c:	e01e      	b.n	810577c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 810573e:	687b      	ldr	r3, [r7, #4]
 8105740:	681b      	ldr	r3, [r3, #0]
 8105742:	681b      	ldr	r3, [r3, #0]
 8105744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105748:	2b00      	cmp	r3, #0
 810574a:	d10f      	bne.n	810576c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 810574c:	687b      	ldr	r3, [r7, #4]
 810574e:	681b      	ldr	r3, [r3, #0]
 8105750:	681a      	ldr	r2, [r3, #0]
 8105752:	687b      	ldr	r3, [r7, #4]
 8105754:	681b      	ldr	r3, [r3, #0]
 8105756:	f022 0210 	bic.w	r2, r2, #16
 810575a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 810575c:	687b      	ldr	r3, [r7, #4]
 810575e:	2200      	movs	r2, #0
 8105760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8105764:	687b      	ldr	r3, [r7, #4]
 8105766:	2201      	movs	r2, #1
 8105768:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 810576c:	687b      	ldr	r3, [r7, #4]
 810576e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105770:	2b00      	cmp	r3, #0
 8105772:	d003      	beq.n	810577c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8105774:	687b      	ldr	r3, [r7, #4]
 8105776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105778:	6878      	ldr	r0, [r7, #4]
 810577a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 810577c:	687b      	ldr	r3, [r7, #4]
 810577e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105780:	2b00      	cmp	r3, #0
 8105782:	f000 8306 	beq.w	8105d92 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8105786:	687b      	ldr	r3, [r7, #4]
 8105788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810578a:	f003 0301 	and.w	r3, r3, #1
 810578e:	2b00      	cmp	r3, #0
 8105790:	f000 8088 	beq.w	81058a4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8105794:	687b      	ldr	r3, [r7, #4]
 8105796:	2204      	movs	r2, #4
 8105798:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 810579c:	687b      	ldr	r3, [r7, #4]
 810579e:	681b      	ldr	r3, [r3, #0]
 81057a0:	4a7a      	ldr	r2, [pc, #488]	; (810598c <HAL_DMA_IRQHandler+0xa08>)
 81057a2:	4293      	cmp	r3, r2
 81057a4:	d04a      	beq.n	810583c <HAL_DMA_IRQHandler+0x8b8>
 81057a6:	687b      	ldr	r3, [r7, #4]
 81057a8:	681b      	ldr	r3, [r3, #0]
 81057aa:	4a79      	ldr	r2, [pc, #484]	; (8105990 <HAL_DMA_IRQHandler+0xa0c>)
 81057ac:	4293      	cmp	r3, r2
 81057ae:	d045      	beq.n	810583c <HAL_DMA_IRQHandler+0x8b8>
 81057b0:	687b      	ldr	r3, [r7, #4]
 81057b2:	681b      	ldr	r3, [r3, #0]
 81057b4:	4a77      	ldr	r2, [pc, #476]	; (8105994 <HAL_DMA_IRQHandler+0xa10>)
 81057b6:	4293      	cmp	r3, r2
 81057b8:	d040      	beq.n	810583c <HAL_DMA_IRQHandler+0x8b8>
 81057ba:	687b      	ldr	r3, [r7, #4]
 81057bc:	681b      	ldr	r3, [r3, #0]
 81057be:	4a76      	ldr	r2, [pc, #472]	; (8105998 <HAL_DMA_IRQHandler+0xa14>)
 81057c0:	4293      	cmp	r3, r2
 81057c2:	d03b      	beq.n	810583c <HAL_DMA_IRQHandler+0x8b8>
 81057c4:	687b      	ldr	r3, [r7, #4]
 81057c6:	681b      	ldr	r3, [r3, #0]
 81057c8:	4a74      	ldr	r2, [pc, #464]	; (810599c <HAL_DMA_IRQHandler+0xa18>)
 81057ca:	4293      	cmp	r3, r2
 81057cc:	d036      	beq.n	810583c <HAL_DMA_IRQHandler+0x8b8>
 81057ce:	687b      	ldr	r3, [r7, #4]
 81057d0:	681b      	ldr	r3, [r3, #0]
 81057d2:	4a73      	ldr	r2, [pc, #460]	; (81059a0 <HAL_DMA_IRQHandler+0xa1c>)
 81057d4:	4293      	cmp	r3, r2
 81057d6:	d031      	beq.n	810583c <HAL_DMA_IRQHandler+0x8b8>
 81057d8:	687b      	ldr	r3, [r7, #4]
 81057da:	681b      	ldr	r3, [r3, #0]
 81057dc:	4a71      	ldr	r2, [pc, #452]	; (81059a4 <HAL_DMA_IRQHandler+0xa20>)
 81057de:	4293      	cmp	r3, r2
 81057e0:	d02c      	beq.n	810583c <HAL_DMA_IRQHandler+0x8b8>
 81057e2:	687b      	ldr	r3, [r7, #4]
 81057e4:	681b      	ldr	r3, [r3, #0]
 81057e6:	4a70      	ldr	r2, [pc, #448]	; (81059a8 <HAL_DMA_IRQHandler+0xa24>)
 81057e8:	4293      	cmp	r3, r2
 81057ea:	d027      	beq.n	810583c <HAL_DMA_IRQHandler+0x8b8>
 81057ec:	687b      	ldr	r3, [r7, #4]
 81057ee:	681b      	ldr	r3, [r3, #0]
 81057f0:	4a6e      	ldr	r2, [pc, #440]	; (81059ac <HAL_DMA_IRQHandler+0xa28>)
 81057f2:	4293      	cmp	r3, r2
 81057f4:	d022      	beq.n	810583c <HAL_DMA_IRQHandler+0x8b8>
 81057f6:	687b      	ldr	r3, [r7, #4]
 81057f8:	681b      	ldr	r3, [r3, #0]
 81057fa:	4a6d      	ldr	r2, [pc, #436]	; (81059b0 <HAL_DMA_IRQHandler+0xa2c>)
 81057fc:	4293      	cmp	r3, r2
 81057fe:	d01d      	beq.n	810583c <HAL_DMA_IRQHandler+0x8b8>
 8105800:	687b      	ldr	r3, [r7, #4]
 8105802:	681b      	ldr	r3, [r3, #0]
 8105804:	4a6b      	ldr	r2, [pc, #428]	; (81059b4 <HAL_DMA_IRQHandler+0xa30>)
 8105806:	4293      	cmp	r3, r2
 8105808:	d018      	beq.n	810583c <HAL_DMA_IRQHandler+0x8b8>
 810580a:	687b      	ldr	r3, [r7, #4]
 810580c:	681b      	ldr	r3, [r3, #0]
 810580e:	4a6a      	ldr	r2, [pc, #424]	; (81059b8 <HAL_DMA_IRQHandler+0xa34>)
 8105810:	4293      	cmp	r3, r2
 8105812:	d013      	beq.n	810583c <HAL_DMA_IRQHandler+0x8b8>
 8105814:	687b      	ldr	r3, [r7, #4]
 8105816:	681b      	ldr	r3, [r3, #0]
 8105818:	4a68      	ldr	r2, [pc, #416]	; (81059bc <HAL_DMA_IRQHandler+0xa38>)
 810581a:	4293      	cmp	r3, r2
 810581c:	d00e      	beq.n	810583c <HAL_DMA_IRQHandler+0x8b8>
 810581e:	687b      	ldr	r3, [r7, #4]
 8105820:	681b      	ldr	r3, [r3, #0]
 8105822:	4a67      	ldr	r2, [pc, #412]	; (81059c0 <HAL_DMA_IRQHandler+0xa3c>)
 8105824:	4293      	cmp	r3, r2
 8105826:	d009      	beq.n	810583c <HAL_DMA_IRQHandler+0x8b8>
 8105828:	687b      	ldr	r3, [r7, #4]
 810582a:	681b      	ldr	r3, [r3, #0]
 810582c:	4a65      	ldr	r2, [pc, #404]	; (81059c4 <HAL_DMA_IRQHandler+0xa40>)
 810582e:	4293      	cmp	r3, r2
 8105830:	d004      	beq.n	810583c <HAL_DMA_IRQHandler+0x8b8>
 8105832:	687b      	ldr	r3, [r7, #4]
 8105834:	681b      	ldr	r3, [r3, #0]
 8105836:	4a64      	ldr	r2, [pc, #400]	; (81059c8 <HAL_DMA_IRQHandler+0xa44>)
 8105838:	4293      	cmp	r3, r2
 810583a:	d108      	bne.n	810584e <HAL_DMA_IRQHandler+0x8ca>
 810583c:	687b      	ldr	r3, [r7, #4]
 810583e:	681b      	ldr	r3, [r3, #0]
 8105840:	681a      	ldr	r2, [r3, #0]
 8105842:	687b      	ldr	r3, [r7, #4]
 8105844:	681b      	ldr	r3, [r3, #0]
 8105846:	f022 0201 	bic.w	r2, r2, #1
 810584a:	601a      	str	r2, [r3, #0]
 810584c:	e007      	b.n	810585e <HAL_DMA_IRQHandler+0x8da>
 810584e:	687b      	ldr	r3, [r7, #4]
 8105850:	681b      	ldr	r3, [r3, #0]
 8105852:	681a      	ldr	r2, [r3, #0]
 8105854:	687b      	ldr	r3, [r7, #4]
 8105856:	681b      	ldr	r3, [r3, #0]
 8105858:	f022 0201 	bic.w	r2, r2, #1
 810585c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 810585e:	68fb      	ldr	r3, [r7, #12]
 8105860:	3301      	adds	r3, #1
 8105862:	60fb      	str	r3, [r7, #12]
 8105864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8105866:	429a      	cmp	r2, r3
 8105868:	d307      	bcc.n	810587a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 810586a:	687b      	ldr	r3, [r7, #4]
 810586c:	681b      	ldr	r3, [r3, #0]
 810586e:	681b      	ldr	r3, [r3, #0]
 8105870:	f003 0301 	and.w	r3, r3, #1
 8105874:	2b00      	cmp	r3, #0
 8105876:	d1f2      	bne.n	810585e <HAL_DMA_IRQHandler+0x8da>
 8105878:	e000      	b.n	810587c <HAL_DMA_IRQHandler+0x8f8>
            break;
 810587a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 810587c:	687b      	ldr	r3, [r7, #4]
 810587e:	2200      	movs	r2, #0
 8105880:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8105884:	687b      	ldr	r3, [r7, #4]
 8105886:	681b      	ldr	r3, [r3, #0]
 8105888:	681b      	ldr	r3, [r3, #0]
 810588a:	f003 0301 	and.w	r3, r3, #1
 810588e:	2b00      	cmp	r3, #0
 8105890:	d004      	beq.n	810589c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8105892:	687b      	ldr	r3, [r7, #4]
 8105894:	2203      	movs	r2, #3
 8105896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 810589a:	e003      	b.n	81058a4 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 810589c:	687b      	ldr	r3, [r7, #4]
 810589e:	2201      	movs	r2, #1
 81058a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 81058a4:	687b      	ldr	r3, [r7, #4]
 81058a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81058a8:	2b00      	cmp	r3, #0
 81058aa:	f000 8272 	beq.w	8105d92 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 81058ae:	687b      	ldr	r3, [r7, #4]
 81058b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81058b2:	6878      	ldr	r0, [r7, #4]
 81058b4:	4798      	blx	r3
 81058b6:	e26c      	b.n	8105d92 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 81058b8:	687b      	ldr	r3, [r7, #4]
 81058ba:	681b      	ldr	r3, [r3, #0]
 81058bc:	4a43      	ldr	r2, [pc, #268]	; (81059cc <HAL_DMA_IRQHandler+0xa48>)
 81058be:	4293      	cmp	r3, r2
 81058c0:	d022      	beq.n	8105908 <HAL_DMA_IRQHandler+0x984>
 81058c2:	687b      	ldr	r3, [r7, #4]
 81058c4:	681b      	ldr	r3, [r3, #0]
 81058c6:	4a42      	ldr	r2, [pc, #264]	; (81059d0 <HAL_DMA_IRQHandler+0xa4c>)
 81058c8:	4293      	cmp	r3, r2
 81058ca:	d01d      	beq.n	8105908 <HAL_DMA_IRQHandler+0x984>
 81058cc:	687b      	ldr	r3, [r7, #4]
 81058ce:	681b      	ldr	r3, [r3, #0]
 81058d0:	4a40      	ldr	r2, [pc, #256]	; (81059d4 <HAL_DMA_IRQHandler+0xa50>)
 81058d2:	4293      	cmp	r3, r2
 81058d4:	d018      	beq.n	8105908 <HAL_DMA_IRQHandler+0x984>
 81058d6:	687b      	ldr	r3, [r7, #4]
 81058d8:	681b      	ldr	r3, [r3, #0]
 81058da:	4a3f      	ldr	r2, [pc, #252]	; (81059d8 <HAL_DMA_IRQHandler+0xa54>)
 81058dc:	4293      	cmp	r3, r2
 81058de:	d013      	beq.n	8105908 <HAL_DMA_IRQHandler+0x984>
 81058e0:	687b      	ldr	r3, [r7, #4]
 81058e2:	681b      	ldr	r3, [r3, #0]
 81058e4:	4a3d      	ldr	r2, [pc, #244]	; (81059dc <HAL_DMA_IRQHandler+0xa58>)
 81058e6:	4293      	cmp	r3, r2
 81058e8:	d00e      	beq.n	8105908 <HAL_DMA_IRQHandler+0x984>
 81058ea:	687b      	ldr	r3, [r7, #4]
 81058ec:	681b      	ldr	r3, [r3, #0]
 81058ee:	4a3c      	ldr	r2, [pc, #240]	; (81059e0 <HAL_DMA_IRQHandler+0xa5c>)
 81058f0:	4293      	cmp	r3, r2
 81058f2:	d009      	beq.n	8105908 <HAL_DMA_IRQHandler+0x984>
 81058f4:	687b      	ldr	r3, [r7, #4]
 81058f6:	681b      	ldr	r3, [r3, #0]
 81058f8:	4a3a      	ldr	r2, [pc, #232]	; (81059e4 <HAL_DMA_IRQHandler+0xa60>)
 81058fa:	4293      	cmp	r3, r2
 81058fc:	d004      	beq.n	8105908 <HAL_DMA_IRQHandler+0x984>
 81058fe:	687b      	ldr	r3, [r7, #4]
 8105900:	681b      	ldr	r3, [r3, #0]
 8105902:	4a39      	ldr	r2, [pc, #228]	; (81059e8 <HAL_DMA_IRQHandler+0xa64>)
 8105904:	4293      	cmp	r3, r2
 8105906:	d101      	bne.n	810590c <HAL_DMA_IRQHandler+0x988>
 8105908:	2301      	movs	r3, #1
 810590a:	e000      	b.n	810590e <HAL_DMA_IRQHandler+0x98a>
 810590c:	2300      	movs	r3, #0
 810590e:	2b00      	cmp	r3, #0
 8105910:	f000 823f 	beq.w	8105d92 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8105914:	687b      	ldr	r3, [r7, #4]
 8105916:	681b      	ldr	r3, [r3, #0]
 8105918:	681b      	ldr	r3, [r3, #0]
 810591a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 810591c:	687b      	ldr	r3, [r7, #4]
 810591e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105920:	f003 031f 	and.w	r3, r3, #31
 8105924:	2204      	movs	r2, #4
 8105926:	409a      	lsls	r2, r3
 8105928:	697b      	ldr	r3, [r7, #20]
 810592a:	4013      	ands	r3, r2
 810592c:	2b00      	cmp	r3, #0
 810592e:	f000 80cd 	beq.w	8105acc <HAL_DMA_IRQHandler+0xb48>
 8105932:	693b      	ldr	r3, [r7, #16]
 8105934:	f003 0304 	and.w	r3, r3, #4
 8105938:	2b00      	cmp	r3, #0
 810593a:	f000 80c7 	beq.w	8105acc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 810593e:	687b      	ldr	r3, [r7, #4]
 8105940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105942:	f003 031f 	and.w	r3, r3, #31
 8105946:	2204      	movs	r2, #4
 8105948:	409a      	lsls	r2, r3
 810594a:	69fb      	ldr	r3, [r7, #28]
 810594c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810594e:	693b      	ldr	r3, [r7, #16]
 8105950:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8105954:	2b00      	cmp	r3, #0
 8105956:	d049      	beq.n	81059ec <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8105958:	693b      	ldr	r3, [r7, #16]
 810595a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810595e:	2b00      	cmp	r3, #0
 8105960:	d109      	bne.n	8105976 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8105962:	687b      	ldr	r3, [r7, #4]
 8105964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105966:	2b00      	cmp	r3, #0
 8105968:	f000 8210 	beq.w	8105d8c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 810596c:	687b      	ldr	r3, [r7, #4]
 810596e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105970:	6878      	ldr	r0, [r7, #4]
 8105972:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105974:	e20a      	b.n	8105d8c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8105976:	687b      	ldr	r3, [r7, #4]
 8105978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810597a:	2b00      	cmp	r3, #0
 810597c:	f000 8206 	beq.w	8105d8c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8105980:	687b      	ldr	r3, [r7, #4]
 8105982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105984:	6878      	ldr	r0, [r7, #4]
 8105986:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105988:	e200      	b.n	8105d8c <HAL_DMA_IRQHandler+0xe08>
 810598a:	bf00      	nop
 810598c:	40020010 	.word	0x40020010
 8105990:	40020028 	.word	0x40020028
 8105994:	40020040 	.word	0x40020040
 8105998:	40020058 	.word	0x40020058
 810599c:	40020070 	.word	0x40020070
 81059a0:	40020088 	.word	0x40020088
 81059a4:	400200a0 	.word	0x400200a0
 81059a8:	400200b8 	.word	0x400200b8
 81059ac:	40020410 	.word	0x40020410
 81059b0:	40020428 	.word	0x40020428
 81059b4:	40020440 	.word	0x40020440
 81059b8:	40020458 	.word	0x40020458
 81059bc:	40020470 	.word	0x40020470
 81059c0:	40020488 	.word	0x40020488
 81059c4:	400204a0 	.word	0x400204a0
 81059c8:	400204b8 	.word	0x400204b8
 81059cc:	58025408 	.word	0x58025408
 81059d0:	5802541c 	.word	0x5802541c
 81059d4:	58025430 	.word	0x58025430
 81059d8:	58025444 	.word	0x58025444
 81059dc:	58025458 	.word	0x58025458
 81059e0:	5802546c 	.word	0x5802546c
 81059e4:	58025480 	.word	0x58025480
 81059e8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 81059ec:	693b      	ldr	r3, [r7, #16]
 81059ee:	f003 0320 	and.w	r3, r3, #32
 81059f2:	2b00      	cmp	r3, #0
 81059f4:	d160      	bne.n	8105ab8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 81059f6:	687b      	ldr	r3, [r7, #4]
 81059f8:	681b      	ldr	r3, [r3, #0]
 81059fa:	4a8c      	ldr	r2, [pc, #560]	; (8105c2c <HAL_DMA_IRQHandler+0xca8>)
 81059fc:	4293      	cmp	r3, r2
 81059fe:	d04a      	beq.n	8105a96 <HAL_DMA_IRQHandler+0xb12>
 8105a00:	687b      	ldr	r3, [r7, #4]
 8105a02:	681b      	ldr	r3, [r3, #0]
 8105a04:	4a8a      	ldr	r2, [pc, #552]	; (8105c30 <HAL_DMA_IRQHandler+0xcac>)
 8105a06:	4293      	cmp	r3, r2
 8105a08:	d045      	beq.n	8105a96 <HAL_DMA_IRQHandler+0xb12>
 8105a0a:	687b      	ldr	r3, [r7, #4]
 8105a0c:	681b      	ldr	r3, [r3, #0]
 8105a0e:	4a89      	ldr	r2, [pc, #548]	; (8105c34 <HAL_DMA_IRQHandler+0xcb0>)
 8105a10:	4293      	cmp	r3, r2
 8105a12:	d040      	beq.n	8105a96 <HAL_DMA_IRQHandler+0xb12>
 8105a14:	687b      	ldr	r3, [r7, #4]
 8105a16:	681b      	ldr	r3, [r3, #0]
 8105a18:	4a87      	ldr	r2, [pc, #540]	; (8105c38 <HAL_DMA_IRQHandler+0xcb4>)
 8105a1a:	4293      	cmp	r3, r2
 8105a1c:	d03b      	beq.n	8105a96 <HAL_DMA_IRQHandler+0xb12>
 8105a1e:	687b      	ldr	r3, [r7, #4]
 8105a20:	681b      	ldr	r3, [r3, #0]
 8105a22:	4a86      	ldr	r2, [pc, #536]	; (8105c3c <HAL_DMA_IRQHandler+0xcb8>)
 8105a24:	4293      	cmp	r3, r2
 8105a26:	d036      	beq.n	8105a96 <HAL_DMA_IRQHandler+0xb12>
 8105a28:	687b      	ldr	r3, [r7, #4]
 8105a2a:	681b      	ldr	r3, [r3, #0]
 8105a2c:	4a84      	ldr	r2, [pc, #528]	; (8105c40 <HAL_DMA_IRQHandler+0xcbc>)
 8105a2e:	4293      	cmp	r3, r2
 8105a30:	d031      	beq.n	8105a96 <HAL_DMA_IRQHandler+0xb12>
 8105a32:	687b      	ldr	r3, [r7, #4]
 8105a34:	681b      	ldr	r3, [r3, #0]
 8105a36:	4a83      	ldr	r2, [pc, #524]	; (8105c44 <HAL_DMA_IRQHandler+0xcc0>)
 8105a38:	4293      	cmp	r3, r2
 8105a3a:	d02c      	beq.n	8105a96 <HAL_DMA_IRQHandler+0xb12>
 8105a3c:	687b      	ldr	r3, [r7, #4]
 8105a3e:	681b      	ldr	r3, [r3, #0]
 8105a40:	4a81      	ldr	r2, [pc, #516]	; (8105c48 <HAL_DMA_IRQHandler+0xcc4>)
 8105a42:	4293      	cmp	r3, r2
 8105a44:	d027      	beq.n	8105a96 <HAL_DMA_IRQHandler+0xb12>
 8105a46:	687b      	ldr	r3, [r7, #4]
 8105a48:	681b      	ldr	r3, [r3, #0]
 8105a4a:	4a80      	ldr	r2, [pc, #512]	; (8105c4c <HAL_DMA_IRQHandler+0xcc8>)
 8105a4c:	4293      	cmp	r3, r2
 8105a4e:	d022      	beq.n	8105a96 <HAL_DMA_IRQHandler+0xb12>
 8105a50:	687b      	ldr	r3, [r7, #4]
 8105a52:	681b      	ldr	r3, [r3, #0]
 8105a54:	4a7e      	ldr	r2, [pc, #504]	; (8105c50 <HAL_DMA_IRQHandler+0xccc>)
 8105a56:	4293      	cmp	r3, r2
 8105a58:	d01d      	beq.n	8105a96 <HAL_DMA_IRQHandler+0xb12>
 8105a5a:	687b      	ldr	r3, [r7, #4]
 8105a5c:	681b      	ldr	r3, [r3, #0]
 8105a5e:	4a7d      	ldr	r2, [pc, #500]	; (8105c54 <HAL_DMA_IRQHandler+0xcd0>)
 8105a60:	4293      	cmp	r3, r2
 8105a62:	d018      	beq.n	8105a96 <HAL_DMA_IRQHandler+0xb12>
 8105a64:	687b      	ldr	r3, [r7, #4]
 8105a66:	681b      	ldr	r3, [r3, #0]
 8105a68:	4a7b      	ldr	r2, [pc, #492]	; (8105c58 <HAL_DMA_IRQHandler+0xcd4>)
 8105a6a:	4293      	cmp	r3, r2
 8105a6c:	d013      	beq.n	8105a96 <HAL_DMA_IRQHandler+0xb12>
 8105a6e:	687b      	ldr	r3, [r7, #4]
 8105a70:	681b      	ldr	r3, [r3, #0]
 8105a72:	4a7a      	ldr	r2, [pc, #488]	; (8105c5c <HAL_DMA_IRQHandler+0xcd8>)
 8105a74:	4293      	cmp	r3, r2
 8105a76:	d00e      	beq.n	8105a96 <HAL_DMA_IRQHandler+0xb12>
 8105a78:	687b      	ldr	r3, [r7, #4]
 8105a7a:	681b      	ldr	r3, [r3, #0]
 8105a7c:	4a78      	ldr	r2, [pc, #480]	; (8105c60 <HAL_DMA_IRQHandler+0xcdc>)
 8105a7e:	4293      	cmp	r3, r2
 8105a80:	d009      	beq.n	8105a96 <HAL_DMA_IRQHandler+0xb12>
 8105a82:	687b      	ldr	r3, [r7, #4]
 8105a84:	681b      	ldr	r3, [r3, #0]
 8105a86:	4a77      	ldr	r2, [pc, #476]	; (8105c64 <HAL_DMA_IRQHandler+0xce0>)
 8105a88:	4293      	cmp	r3, r2
 8105a8a:	d004      	beq.n	8105a96 <HAL_DMA_IRQHandler+0xb12>
 8105a8c:	687b      	ldr	r3, [r7, #4]
 8105a8e:	681b      	ldr	r3, [r3, #0]
 8105a90:	4a75      	ldr	r2, [pc, #468]	; (8105c68 <HAL_DMA_IRQHandler+0xce4>)
 8105a92:	4293      	cmp	r3, r2
 8105a94:	d108      	bne.n	8105aa8 <HAL_DMA_IRQHandler+0xb24>
 8105a96:	687b      	ldr	r3, [r7, #4]
 8105a98:	681b      	ldr	r3, [r3, #0]
 8105a9a:	681a      	ldr	r2, [r3, #0]
 8105a9c:	687b      	ldr	r3, [r7, #4]
 8105a9e:	681b      	ldr	r3, [r3, #0]
 8105aa0:	f022 0208 	bic.w	r2, r2, #8
 8105aa4:	601a      	str	r2, [r3, #0]
 8105aa6:	e007      	b.n	8105ab8 <HAL_DMA_IRQHandler+0xb34>
 8105aa8:	687b      	ldr	r3, [r7, #4]
 8105aaa:	681b      	ldr	r3, [r3, #0]
 8105aac:	681a      	ldr	r2, [r3, #0]
 8105aae:	687b      	ldr	r3, [r7, #4]
 8105ab0:	681b      	ldr	r3, [r3, #0]
 8105ab2:	f022 0204 	bic.w	r2, r2, #4
 8105ab6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8105ab8:	687b      	ldr	r3, [r7, #4]
 8105aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105abc:	2b00      	cmp	r3, #0
 8105abe:	f000 8165 	beq.w	8105d8c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8105ac2:	687b      	ldr	r3, [r7, #4]
 8105ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105ac6:	6878      	ldr	r0, [r7, #4]
 8105ac8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105aca:	e15f      	b.n	8105d8c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8105acc:	687b      	ldr	r3, [r7, #4]
 8105ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105ad0:	f003 031f 	and.w	r3, r3, #31
 8105ad4:	2202      	movs	r2, #2
 8105ad6:	409a      	lsls	r2, r3
 8105ad8:	697b      	ldr	r3, [r7, #20]
 8105ada:	4013      	ands	r3, r2
 8105adc:	2b00      	cmp	r3, #0
 8105ade:	f000 80c5 	beq.w	8105c6c <HAL_DMA_IRQHandler+0xce8>
 8105ae2:	693b      	ldr	r3, [r7, #16]
 8105ae4:	f003 0302 	and.w	r3, r3, #2
 8105ae8:	2b00      	cmp	r3, #0
 8105aea:	f000 80bf 	beq.w	8105c6c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8105aee:	687b      	ldr	r3, [r7, #4]
 8105af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105af2:	f003 031f 	and.w	r3, r3, #31
 8105af6:	2202      	movs	r2, #2
 8105af8:	409a      	lsls	r2, r3
 8105afa:	69fb      	ldr	r3, [r7, #28]
 8105afc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105afe:	693b      	ldr	r3, [r7, #16]
 8105b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8105b04:	2b00      	cmp	r3, #0
 8105b06:	d018      	beq.n	8105b3a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8105b08:	693b      	ldr	r3, [r7, #16]
 8105b0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8105b0e:	2b00      	cmp	r3, #0
 8105b10:	d109      	bne.n	8105b26 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8105b12:	687b      	ldr	r3, [r7, #4]
 8105b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105b16:	2b00      	cmp	r3, #0
 8105b18:	f000 813a 	beq.w	8105d90 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8105b1c:	687b      	ldr	r3, [r7, #4]
 8105b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105b20:	6878      	ldr	r0, [r7, #4]
 8105b22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105b24:	e134      	b.n	8105d90 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8105b26:	687b      	ldr	r3, [r7, #4]
 8105b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105b2a:	2b00      	cmp	r3, #0
 8105b2c:	f000 8130 	beq.w	8105d90 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8105b30:	687b      	ldr	r3, [r7, #4]
 8105b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105b34:	6878      	ldr	r0, [r7, #4]
 8105b36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105b38:	e12a      	b.n	8105d90 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8105b3a:	693b      	ldr	r3, [r7, #16]
 8105b3c:	f003 0320 	and.w	r3, r3, #32
 8105b40:	2b00      	cmp	r3, #0
 8105b42:	d168      	bne.n	8105c16 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8105b44:	687b      	ldr	r3, [r7, #4]
 8105b46:	681b      	ldr	r3, [r3, #0]
 8105b48:	4a38      	ldr	r2, [pc, #224]	; (8105c2c <HAL_DMA_IRQHandler+0xca8>)
 8105b4a:	4293      	cmp	r3, r2
 8105b4c:	d04a      	beq.n	8105be4 <HAL_DMA_IRQHandler+0xc60>
 8105b4e:	687b      	ldr	r3, [r7, #4]
 8105b50:	681b      	ldr	r3, [r3, #0]
 8105b52:	4a37      	ldr	r2, [pc, #220]	; (8105c30 <HAL_DMA_IRQHandler+0xcac>)
 8105b54:	4293      	cmp	r3, r2
 8105b56:	d045      	beq.n	8105be4 <HAL_DMA_IRQHandler+0xc60>
 8105b58:	687b      	ldr	r3, [r7, #4]
 8105b5a:	681b      	ldr	r3, [r3, #0]
 8105b5c:	4a35      	ldr	r2, [pc, #212]	; (8105c34 <HAL_DMA_IRQHandler+0xcb0>)
 8105b5e:	4293      	cmp	r3, r2
 8105b60:	d040      	beq.n	8105be4 <HAL_DMA_IRQHandler+0xc60>
 8105b62:	687b      	ldr	r3, [r7, #4]
 8105b64:	681b      	ldr	r3, [r3, #0]
 8105b66:	4a34      	ldr	r2, [pc, #208]	; (8105c38 <HAL_DMA_IRQHandler+0xcb4>)
 8105b68:	4293      	cmp	r3, r2
 8105b6a:	d03b      	beq.n	8105be4 <HAL_DMA_IRQHandler+0xc60>
 8105b6c:	687b      	ldr	r3, [r7, #4]
 8105b6e:	681b      	ldr	r3, [r3, #0]
 8105b70:	4a32      	ldr	r2, [pc, #200]	; (8105c3c <HAL_DMA_IRQHandler+0xcb8>)
 8105b72:	4293      	cmp	r3, r2
 8105b74:	d036      	beq.n	8105be4 <HAL_DMA_IRQHandler+0xc60>
 8105b76:	687b      	ldr	r3, [r7, #4]
 8105b78:	681b      	ldr	r3, [r3, #0]
 8105b7a:	4a31      	ldr	r2, [pc, #196]	; (8105c40 <HAL_DMA_IRQHandler+0xcbc>)
 8105b7c:	4293      	cmp	r3, r2
 8105b7e:	d031      	beq.n	8105be4 <HAL_DMA_IRQHandler+0xc60>
 8105b80:	687b      	ldr	r3, [r7, #4]
 8105b82:	681b      	ldr	r3, [r3, #0]
 8105b84:	4a2f      	ldr	r2, [pc, #188]	; (8105c44 <HAL_DMA_IRQHandler+0xcc0>)
 8105b86:	4293      	cmp	r3, r2
 8105b88:	d02c      	beq.n	8105be4 <HAL_DMA_IRQHandler+0xc60>
 8105b8a:	687b      	ldr	r3, [r7, #4]
 8105b8c:	681b      	ldr	r3, [r3, #0]
 8105b8e:	4a2e      	ldr	r2, [pc, #184]	; (8105c48 <HAL_DMA_IRQHandler+0xcc4>)
 8105b90:	4293      	cmp	r3, r2
 8105b92:	d027      	beq.n	8105be4 <HAL_DMA_IRQHandler+0xc60>
 8105b94:	687b      	ldr	r3, [r7, #4]
 8105b96:	681b      	ldr	r3, [r3, #0]
 8105b98:	4a2c      	ldr	r2, [pc, #176]	; (8105c4c <HAL_DMA_IRQHandler+0xcc8>)
 8105b9a:	4293      	cmp	r3, r2
 8105b9c:	d022      	beq.n	8105be4 <HAL_DMA_IRQHandler+0xc60>
 8105b9e:	687b      	ldr	r3, [r7, #4]
 8105ba0:	681b      	ldr	r3, [r3, #0]
 8105ba2:	4a2b      	ldr	r2, [pc, #172]	; (8105c50 <HAL_DMA_IRQHandler+0xccc>)
 8105ba4:	4293      	cmp	r3, r2
 8105ba6:	d01d      	beq.n	8105be4 <HAL_DMA_IRQHandler+0xc60>
 8105ba8:	687b      	ldr	r3, [r7, #4]
 8105baa:	681b      	ldr	r3, [r3, #0]
 8105bac:	4a29      	ldr	r2, [pc, #164]	; (8105c54 <HAL_DMA_IRQHandler+0xcd0>)
 8105bae:	4293      	cmp	r3, r2
 8105bb0:	d018      	beq.n	8105be4 <HAL_DMA_IRQHandler+0xc60>
 8105bb2:	687b      	ldr	r3, [r7, #4]
 8105bb4:	681b      	ldr	r3, [r3, #0]
 8105bb6:	4a28      	ldr	r2, [pc, #160]	; (8105c58 <HAL_DMA_IRQHandler+0xcd4>)
 8105bb8:	4293      	cmp	r3, r2
 8105bba:	d013      	beq.n	8105be4 <HAL_DMA_IRQHandler+0xc60>
 8105bbc:	687b      	ldr	r3, [r7, #4]
 8105bbe:	681b      	ldr	r3, [r3, #0]
 8105bc0:	4a26      	ldr	r2, [pc, #152]	; (8105c5c <HAL_DMA_IRQHandler+0xcd8>)
 8105bc2:	4293      	cmp	r3, r2
 8105bc4:	d00e      	beq.n	8105be4 <HAL_DMA_IRQHandler+0xc60>
 8105bc6:	687b      	ldr	r3, [r7, #4]
 8105bc8:	681b      	ldr	r3, [r3, #0]
 8105bca:	4a25      	ldr	r2, [pc, #148]	; (8105c60 <HAL_DMA_IRQHandler+0xcdc>)
 8105bcc:	4293      	cmp	r3, r2
 8105bce:	d009      	beq.n	8105be4 <HAL_DMA_IRQHandler+0xc60>
 8105bd0:	687b      	ldr	r3, [r7, #4]
 8105bd2:	681b      	ldr	r3, [r3, #0]
 8105bd4:	4a23      	ldr	r2, [pc, #140]	; (8105c64 <HAL_DMA_IRQHandler+0xce0>)
 8105bd6:	4293      	cmp	r3, r2
 8105bd8:	d004      	beq.n	8105be4 <HAL_DMA_IRQHandler+0xc60>
 8105bda:	687b      	ldr	r3, [r7, #4]
 8105bdc:	681b      	ldr	r3, [r3, #0]
 8105bde:	4a22      	ldr	r2, [pc, #136]	; (8105c68 <HAL_DMA_IRQHandler+0xce4>)
 8105be0:	4293      	cmp	r3, r2
 8105be2:	d108      	bne.n	8105bf6 <HAL_DMA_IRQHandler+0xc72>
 8105be4:	687b      	ldr	r3, [r7, #4]
 8105be6:	681b      	ldr	r3, [r3, #0]
 8105be8:	681a      	ldr	r2, [r3, #0]
 8105bea:	687b      	ldr	r3, [r7, #4]
 8105bec:	681b      	ldr	r3, [r3, #0]
 8105bee:	f022 0214 	bic.w	r2, r2, #20
 8105bf2:	601a      	str	r2, [r3, #0]
 8105bf4:	e007      	b.n	8105c06 <HAL_DMA_IRQHandler+0xc82>
 8105bf6:	687b      	ldr	r3, [r7, #4]
 8105bf8:	681b      	ldr	r3, [r3, #0]
 8105bfa:	681a      	ldr	r2, [r3, #0]
 8105bfc:	687b      	ldr	r3, [r7, #4]
 8105bfe:	681b      	ldr	r3, [r3, #0]
 8105c00:	f022 020a 	bic.w	r2, r2, #10
 8105c04:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8105c06:	687b      	ldr	r3, [r7, #4]
 8105c08:	2200      	movs	r2, #0
 8105c0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8105c0e:	687b      	ldr	r3, [r7, #4]
 8105c10:	2201      	movs	r2, #1
 8105c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8105c16:	687b      	ldr	r3, [r7, #4]
 8105c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105c1a:	2b00      	cmp	r3, #0
 8105c1c:	f000 80b8 	beq.w	8105d90 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8105c20:	687b      	ldr	r3, [r7, #4]
 8105c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105c24:	6878      	ldr	r0, [r7, #4]
 8105c26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105c28:	e0b2      	b.n	8105d90 <HAL_DMA_IRQHandler+0xe0c>
 8105c2a:	bf00      	nop
 8105c2c:	40020010 	.word	0x40020010
 8105c30:	40020028 	.word	0x40020028
 8105c34:	40020040 	.word	0x40020040
 8105c38:	40020058 	.word	0x40020058
 8105c3c:	40020070 	.word	0x40020070
 8105c40:	40020088 	.word	0x40020088
 8105c44:	400200a0 	.word	0x400200a0
 8105c48:	400200b8 	.word	0x400200b8
 8105c4c:	40020410 	.word	0x40020410
 8105c50:	40020428 	.word	0x40020428
 8105c54:	40020440 	.word	0x40020440
 8105c58:	40020458 	.word	0x40020458
 8105c5c:	40020470 	.word	0x40020470
 8105c60:	40020488 	.word	0x40020488
 8105c64:	400204a0 	.word	0x400204a0
 8105c68:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8105c6c:	687b      	ldr	r3, [r7, #4]
 8105c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105c70:	f003 031f 	and.w	r3, r3, #31
 8105c74:	2208      	movs	r2, #8
 8105c76:	409a      	lsls	r2, r3
 8105c78:	697b      	ldr	r3, [r7, #20]
 8105c7a:	4013      	ands	r3, r2
 8105c7c:	2b00      	cmp	r3, #0
 8105c7e:	f000 8088 	beq.w	8105d92 <HAL_DMA_IRQHandler+0xe0e>
 8105c82:	693b      	ldr	r3, [r7, #16]
 8105c84:	f003 0308 	and.w	r3, r3, #8
 8105c88:	2b00      	cmp	r3, #0
 8105c8a:	f000 8082 	beq.w	8105d92 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8105c8e:	687b      	ldr	r3, [r7, #4]
 8105c90:	681b      	ldr	r3, [r3, #0]
 8105c92:	4a41      	ldr	r2, [pc, #260]	; (8105d98 <HAL_DMA_IRQHandler+0xe14>)
 8105c94:	4293      	cmp	r3, r2
 8105c96:	d04a      	beq.n	8105d2e <HAL_DMA_IRQHandler+0xdaa>
 8105c98:	687b      	ldr	r3, [r7, #4]
 8105c9a:	681b      	ldr	r3, [r3, #0]
 8105c9c:	4a3f      	ldr	r2, [pc, #252]	; (8105d9c <HAL_DMA_IRQHandler+0xe18>)
 8105c9e:	4293      	cmp	r3, r2
 8105ca0:	d045      	beq.n	8105d2e <HAL_DMA_IRQHandler+0xdaa>
 8105ca2:	687b      	ldr	r3, [r7, #4]
 8105ca4:	681b      	ldr	r3, [r3, #0]
 8105ca6:	4a3e      	ldr	r2, [pc, #248]	; (8105da0 <HAL_DMA_IRQHandler+0xe1c>)
 8105ca8:	4293      	cmp	r3, r2
 8105caa:	d040      	beq.n	8105d2e <HAL_DMA_IRQHandler+0xdaa>
 8105cac:	687b      	ldr	r3, [r7, #4]
 8105cae:	681b      	ldr	r3, [r3, #0]
 8105cb0:	4a3c      	ldr	r2, [pc, #240]	; (8105da4 <HAL_DMA_IRQHandler+0xe20>)
 8105cb2:	4293      	cmp	r3, r2
 8105cb4:	d03b      	beq.n	8105d2e <HAL_DMA_IRQHandler+0xdaa>
 8105cb6:	687b      	ldr	r3, [r7, #4]
 8105cb8:	681b      	ldr	r3, [r3, #0]
 8105cba:	4a3b      	ldr	r2, [pc, #236]	; (8105da8 <HAL_DMA_IRQHandler+0xe24>)
 8105cbc:	4293      	cmp	r3, r2
 8105cbe:	d036      	beq.n	8105d2e <HAL_DMA_IRQHandler+0xdaa>
 8105cc0:	687b      	ldr	r3, [r7, #4]
 8105cc2:	681b      	ldr	r3, [r3, #0]
 8105cc4:	4a39      	ldr	r2, [pc, #228]	; (8105dac <HAL_DMA_IRQHandler+0xe28>)
 8105cc6:	4293      	cmp	r3, r2
 8105cc8:	d031      	beq.n	8105d2e <HAL_DMA_IRQHandler+0xdaa>
 8105cca:	687b      	ldr	r3, [r7, #4]
 8105ccc:	681b      	ldr	r3, [r3, #0]
 8105cce:	4a38      	ldr	r2, [pc, #224]	; (8105db0 <HAL_DMA_IRQHandler+0xe2c>)
 8105cd0:	4293      	cmp	r3, r2
 8105cd2:	d02c      	beq.n	8105d2e <HAL_DMA_IRQHandler+0xdaa>
 8105cd4:	687b      	ldr	r3, [r7, #4]
 8105cd6:	681b      	ldr	r3, [r3, #0]
 8105cd8:	4a36      	ldr	r2, [pc, #216]	; (8105db4 <HAL_DMA_IRQHandler+0xe30>)
 8105cda:	4293      	cmp	r3, r2
 8105cdc:	d027      	beq.n	8105d2e <HAL_DMA_IRQHandler+0xdaa>
 8105cde:	687b      	ldr	r3, [r7, #4]
 8105ce0:	681b      	ldr	r3, [r3, #0]
 8105ce2:	4a35      	ldr	r2, [pc, #212]	; (8105db8 <HAL_DMA_IRQHandler+0xe34>)
 8105ce4:	4293      	cmp	r3, r2
 8105ce6:	d022      	beq.n	8105d2e <HAL_DMA_IRQHandler+0xdaa>
 8105ce8:	687b      	ldr	r3, [r7, #4]
 8105cea:	681b      	ldr	r3, [r3, #0]
 8105cec:	4a33      	ldr	r2, [pc, #204]	; (8105dbc <HAL_DMA_IRQHandler+0xe38>)
 8105cee:	4293      	cmp	r3, r2
 8105cf0:	d01d      	beq.n	8105d2e <HAL_DMA_IRQHandler+0xdaa>
 8105cf2:	687b      	ldr	r3, [r7, #4]
 8105cf4:	681b      	ldr	r3, [r3, #0]
 8105cf6:	4a32      	ldr	r2, [pc, #200]	; (8105dc0 <HAL_DMA_IRQHandler+0xe3c>)
 8105cf8:	4293      	cmp	r3, r2
 8105cfa:	d018      	beq.n	8105d2e <HAL_DMA_IRQHandler+0xdaa>
 8105cfc:	687b      	ldr	r3, [r7, #4]
 8105cfe:	681b      	ldr	r3, [r3, #0]
 8105d00:	4a30      	ldr	r2, [pc, #192]	; (8105dc4 <HAL_DMA_IRQHandler+0xe40>)
 8105d02:	4293      	cmp	r3, r2
 8105d04:	d013      	beq.n	8105d2e <HAL_DMA_IRQHandler+0xdaa>
 8105d06:	687b      	ldr	r3, [r7, #4]
 8105d08:	681b      	ldr	r3, [r3, #0]
 8105d0a:	4a2f      	ldr	r2, [pc, #188]	; (8105dc8 <HAL_DMA_IRQHandler+0xe44>)
 8105d0c:	4293      	cmp	r3, r2
 8105d0e:	d00e      	beq.n	8105d2e <HAL_DMA_IRQHandler+0xdaa>
 8105d10:	687b      	ldr	r3, [r7, #4]
 8105d12:	681b      	ldr	r3, [r3, #0]
 8105d14:	4a2d      	ldr	r2, [pc, #180]	; (8105dcc <HAL_DMA_IRQHandler+0xe48>)
 8105d16:	4293      	cmp	r3, r2
 8105d18:	d009      	beq.n	8105d2e <HAL_DMA_IRQHandler+0xdaa>
 8105d1a:	687b      	ldr	r3, [r7, #4]
 8105d1c:	681b      	ldr	r3, [r3, #0]
 8105d1e:	4a2c      	ldr	r2, [pc, #176]	; (8105dd0 <HAL_DMA_IRQHandler+0xe4c>)
 8105d20:	4293      	cmp	r3, r2
 8105d22:	d004      	beq.n	8105d2e <HAL_DMA_IRQHandler+0xdaa>
 8105d24:	687b      	ldr	r3, [r7, #4]
 8105d26:	681b      	ldr	r3, [r3, #0]
 8105d28:	4a2a      	ldr	r2, [pc, #168]	; (8105dd4 <HAL_DMA_IRQHandler+0xe50>)
 8105d2a:	4293      	cmp	r3, r2
 8105d2c:	d108      	bne.n	8105d40 <HAL_DMA_IRQHandler+0xdbc>
 8105d2e:	687b      	ldr	r3, [r7, #4]
 8105d30:	681b      	ldr	r3, [r3, #0]
 8105d32:	681a      	ldr	r2, [r3, #0]
 8105d34:	687b      	ldr	r3, [r7, #4]
 8105d36:	681b      	ldr	r3, [r3, #0]
 8105d38:	f022 021c 	bic.w	r2, r2, #28
 8105d3c:	601a      	str	r2, [r3, #0]
 8105d3e:	e007      	b.n	8105d50 <HAL_DMA_IRQHandler+0xdcc>
 8105d40:	687b      	ldr	r3, [r7, #4]
 8105d42:	681b      	ldr	r3, [r3, #0]
 8105d44:	681a      	ldr	r2, [r3, #0]
 8105d46:	687b      	ldr	r3, [r7, #4]
 8105d48:	681b      	ldr	r3, [r3, #0]
 8105d4a:	f022 020e 	bic.w	r2, r2, #14
 8105d4e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8105d50:	687b      	ldr	r3, [r7, #4]
 8105d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105d54:	f003 031f 	and.w	r3, r3, #31
 8105d58:	2201      	movs	r2, #1
 8105d5a:	409a      	lsls	r2, r3
 8105d5c:	69fb      	ldr	r3, [r7, #28]
 8105d5e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8105d60:	687b      	ldr	r3, [r7, #4]
 8105d62:	2201      	movs	r2, #1
 8105d64:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8105d66:	687b      	ldr	r3, [r7, #4]
 8105d68:	2200      	movs	r2, #0
 8105d6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8105d6e:	687b      	ldr	r3, [r7, #4]
 8105d70:	2201      	movs	r2, #1
 8105d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8105d76:	687b      	ldr	r3, [r7, #4]
 8105d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105d7a:	2b00      	cmp	r3, #0
 8105d7c:	d009      	beq.n	8105d92 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8105d7e:	687b      	ldr	r3, [r7, #4]
 8105d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105d82:	6878      	ldr	r0, [r7, #4]
 8105d84:	4798      	blx	r3
 8105d86:	e004      	b.n	8105d92 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8105d88:	bf00      	nop
 8105d8a:	e002      	b.n	8105d92 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105d8c:	bf00      	nop
 8105d8e:	e000      	b.n	8105d92 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105d90:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8105d92:	3728      	adds	r7, #40	; 0x28
 8105d94:	46bd      	mov	sp, r7
 8105d96:	bd80      	pop	{r7, pc}
 8105d98:	40020010 	.word	0x40020010
 8105d9c:	40020028 	.word	0x40020028
 8105da0:	40020040 	.word	0x40020040
 8105da4:	40020058 	.word	0x40020058
 8105da8:	40020070 	.word	0x40020070
 8105dac:	40020088 	.word	0x40020088
 8105db0:	400200a0 	.word	0x400200a0
 8105db4:	400200b8 	.word	0x400200b8
 8105db8:	40020410 	.word	0x40020410
 8105dbc:	40020428 	.word	0x40020428
 8105dc0:	40020440 	.word	0x40020440
 8105dc4:	40020458 	.word	0x40020458
 8105dc8:	40020470 	.word	0x40020470
 8105dcc:	40020488 	.word	0x40020488
 8105dd0:	400204a0 	.word	0x400204a0
 8105dd4:	400204b8 	.word	0x400204b8

08105dd8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8105dd8:	b480      	push	{r7}
 8105dda:	b087      	sub	sp, #28
 8105ddc:	af00      	add	r7, sp, #0
 8105dde:	60f8      	str	r0, [r7, #12]
 8105de0:	60b9      	str	r1, [r7, #8]
 8105de2:	607a      	str	r2, [r7, #4]
 8105de4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8105de6:	68fb      	ldr	r3, [r7, #12]
 8105de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105dea:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8105dec:	68fb      	ldr	r3, [r7, #12]
 8105dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105df0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8105df2:	68fb      	ldr	r3, [r7, #12]
 8105df4:	681b      	ldr	r3, [r3, #0]
 8105df6:	4a84      	ldr	r2, [pc, #528]	; (8106008 <DMA_SetConfig+0x230>)
 8105df8:	4293      	cmp	r3, r2
 8105dfa:	d072      	beq.n	8105ee2 <DMA_SetConfig+0x10a>
 8105dfc:	68fb      	ldr	r3, [r7, #12]
 8105dfe:	681b      	ldr	r3, [r3, #0]
 8105e00:	4a82      	ldr	r2, [pc, #520]	; (810600c <DMA_SetConfig+0x234>)
 8105e02:	4293      	cmp	r3, r2
 8105e04:	d06d      	beq.n	8105ee2 <DMA_SetConfig+0x10a>
 8105e06:	68fb      	ldr	r3, [r7, #12]
 8105e08:	681b      	ldr	r3, [r3, #0]
 8105e0a:	4a81      	ldr	r2, [pc, #516]	; (8106010 <DMA_SetConfig+0x238>)
 8105e0c:	4293      	cmp	r3, r2
 8105e0e:	d068      	beq.n	8105ee2 <DMA_SetConfig+0x10a>
 8105e10:	68fb      	ldr	r3, [r7, #12]
 8105e12:	681b      	ldr	r3, [r3, #0]
 8105e14:	4a7f      	ldr	r2, [pc, #508]	; (8106014 <DMA_SetConfig+0x23c>)
 8105e16:	4293      	cmp	r3, r2
 8105e18:	d063      	beq.n	8105ee2 <DMA_SetConfig+0x10a>
 8105e1a:	68fb      	ldr	r3, [r7, #12]
 8105e1c:	681b      	ldr	r3, [r3, #0]
 8105e1e:	4a7e      	ldr	r2, [pc, #504]	; (8106018 <DMA_SetConfig+0x240>)
 8105e20:	4293      	cmp	r3, r2
 8105e22:	d05e      	beq.n	8105ee2 <DMA_SetConfig+0x10a>
 8105e24:	68fb      	ldr	r3, [r7, #12]
 8105e26:	681b      	ldr	r3, [r3, #0]
 8105e28:	4a7c      	ldr	r2, [pc, #496]	; (810601c <DMA_SetConfig+0x244>)
 8105e2a:	4293      	cmp	r3, r2
 8105e2c:	d059      	beq.n	8105ee2 <DMA_SetConfig+0x10a>
 8105e2e:	68fb      	ldr	r3, [r7, #12]
 8105e30:	681b      	ldr	r3, [r3, #0]
 8105e32:	4a7b      	ldr	r2, [pc, #492]	; (8106020 <DMA_SetConfig+0x248>)
 8105e34:	4293      	cmp	r3, r2
 8105e36:	d054      	beq.n	8105ee2 <DMA_SetConfig+0x10a>
 8105e38:	68fb      	ldr	r3, [r7, #12]
 8105e3a:	681b      	ldr	r3, [r3, #0]
 8105e3c:	4a79      	ldr	r2, [pc, #484]	; (8106024 <DMA_SetConfig+0x24c>)
 8105e3e:	4293      	cmp	r3, r2
 8105e40:	d04f      	beq.n	8105ee2 <DMA_SetConfig+0x10a>
 8105e42:	68fb      	ldr	r3, [r7, #12]
 8105e44:	681b      	ldr	r3, [r3, #0]
 8105e46:	4a78      	ldr	r2, [pc, #480]	; (8106028 <DMA_SetConfig+0x250>)
 8105e48:	4293      	cmp	r3, r2
 8105e4a:	d04a      	beq.n	8105ee2 <DMA_SetConfig+0x10a>
 8105e4c:	68fb      	ldr	r3, [r7, #12]
 8105e4e:	681b      	ldr	r3, [r3, #0]
 8105e50:	4a76      	ldr	r2, [pc, #472]	; (810602c <DMA_SetConfig+0x254>)
 8105e52:	4293      	cmp	r3, r2
 8105e54:	d045      	beq.n	8105ee2 <DMA_SetConfig+0x10a>
 8105e56:	68fb      	ldr	r3, [r7, #12]
 8105e58:	681b      	ldr	r3, [r3, #0]
 8105e5a:	4a75      	ldr	r2, [pc, #468]	; (8106030 <DMA_SetConfig+0x258>)
 8105e5c:	4293      	cmp	r3, r2
 8105e5e:	d040      	beq.n	8105ee2 <DMA_SetConfig+0x10a>
 8105e60:	68fb      	ldr	r3, [r7, #12]
 8105e62:	681b      	ldr	r3, [r3, #0]
 8105e64:	4a73      	ldr	r2, [pc, #460]	; (8106034 <DMA_SetConfig+0x25c>)
 8105e66:	4293      	cmp	r3, r2
 8105e68:	d03b      	beq.n	8105ee2 <DMA_SetConfig+0x10a>
 8105e6a:	68fb      	ldr	r3, [r7, #12]
 8105e6c:	681b      	ldr	r3, [r3, #0]
 8105e6e:	4a72      	ldr	r2, [pc, #456]	; (8106038 <DMA_SetConfig+0x260>)
 8105e70:	4293      	cmp	r3, r2
 8105e72:	d036      	beq.n	8105ee2 <DMA_SetConfig+0x10a>
 8105e74:	68fb      	ldr	r3, [r7, #12]
 8105e76:	681b      	ldr	r3, [r3, #0]
 8105e78:	4a70      	ldr	r2, [pc, #448]	; (810603c <DMA_SetConfig+0x264>)
 8105e7a:	4293      	cmp	r3, r2
 8105e7c:	d031      	beq.n	8105ee2 <DMA_SetConfig+0x10a>
 8105e7e:	68fb      	ldr	r3, [r7, #12]
 8105e80:	681b      	ldr	r3, [r3, #0]
 8105e82:	4a6f      	ldr	r2, [pc, #444]	; (8106040 <DMA_SetConfig+0x268>)
 8105e84:	4293      	cmp	r3, r2
 8105e86:	d02c      	beq.n	8105ee2 <DMA_SetConfig+0x10a>
 8105e88:	68fb      	ldr	r3, [r7, #12]
 8105e8a:	681b      	ldr	r3, [r3, #0]
 8105e8c:	4a6d      	ldr	r2, [pc, #436]	; (8106044 <DMA_SetConfig+0x26c>)
 8105e8e:	4293      	cmp	r3, r2
 8105e90:	d027      	beq.n	8105ee2 <DMA_SetConfig+0x10a>
 8105e92:	68fb      	ldr	r3, [r7, #12]
 8105e94:	681b      	ldr	r3, [r3, #0]
 8105e96:	4a6c      	ldr	r2, [pc, #432]	; (8106048 <DMA_SetConfig+0x270>)
 8105e98:	4293      	cmp	r3, r2
 8105e9a:	d022      	beq.n	8105ee2 <DMA_SetConfig+0x10a>
 8105e9c:	68fb      	ldr	r3, [r7, #12]
 8105e9e:	681b      	ldr	r3, [r3, #0]
 8105ea0:	4a6a      	ldr	r2, [pc, #424]	; (810604c <DMA_SetConfig+0x274>)
 8105ea2:	4293      	cmp	r3, r2
 8105ea4:	d01d      	beq.n	8105ee2 <DMA_SetConfig+0x10a>
 8105ea6:	68fb      	ldr	r3, [r7, #12]
 8105ea8:	681b      	ldr	r3, [r3, #0]
 8105eaa:	4a69      	ldr	r2, [pc, #420]	; (8106050 <DMA_SetConfig+0x278>)
 8105eac:	4293      	cmp	r3, r2
 8105eae:	d018      	beq.n	8105ee2 <DMA_SetConfig+0x10a>
 8105eb0:	68fb      	ldr	r3, [r7, #12]
 8105eb2:	681b      	ldr	r3, [r3, #0]
 8105eb4:	4a67      	ldr	r2, [pc, #412]	; (8106054 <DMA_SetConfig+0x27c>)
 8105eb6:	4293      	cmp	r3, r2
 8105eb8:	d013      	beq.n	8105ee2 <DMA_SetConfig+0x10a>
 8105eba:	68fb      	ldr	r3, [r7, #12]
 8105ebc:	681b      	ldr	r3, [r3, #0]
 8105ebe:	4a66      	ldr	r2, [pc, #408]	; (8106058 <DMA_SetConfig+0x280>)
 8105ec0:	4293      	cmp	r3, r2
 8105ec2:	d00e      	beq.n	8105ee2 <DMA_SetConfig+0x10a>
 8105ec4:	68fb      	ldr	r3, [r7, #12]
 8105ec6:	681b      	ldr	r3, [r3, #0]
 8105ec8:	4a64      	ldr	r2, [pc, #400]	; (810605c <DMA_SetConfig+0x284>)
 8105eca:	4293      	cmp	r3, r2
 8105ecc:	d009      	beq.n	8105ee2 <DMA_SetConfig+0x10a>
 8105ece:	68fb      	ldr	r3, [r7, #12]
 8105ed0:	681b      	ldr	r3, [r3, #0]
 8105ed2:	4a63      	ldr	r2, [pc, #396]	; (8106060 <DMA_SetConfig+0x288>)
 8105ed4:	4293      	cmp	r3, r2
 8105ed6:	d004      	beq.n	8105ee2 <DMA_SetConfig+0x10a>
 8105ed8:	68fb      	ldr	r3, [r7, #12]
 8105eda:	681b      	ldr	r3, [r3, #0]
 8105edc:	4a61      	ldr	r2, [pc, #388]	; (8106064 <DMA_SetConfig+0x28c>)
 8105ede:	4293      	cmp	r3, r2
 8105ee0:	d101      	bne.n	8105ee6 <DMA_SetConfig+0x10e>
 8105ee2:	2301      	movs	r3, #1
 8105ee4:	e000      	b.n	8105ee8 <DMA_SetConfig+0x110>
 8105ee6:	2300      	movs	r3, #0
 8105ee8:	2b00      	cmp	r3, #0
 8105eea:	d00d      	beq.n	8105f08 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8105eec:	68fb      	ldr	r3, [r7, #12]
 8105eee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105ef0:	68fa      	ldr	r2, [r7, #12]
 8105ef2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8105ef4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8105ef6:	68fb      	ldr	r3, [r7, #12]
 8105ef8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105efa:	2b00      	cmp	r3, #0
 8105efc:	d004      	beq.n	8105f08 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8105efe:	68fb      	ldr	r3, [r7, #12]
 8105f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105f02:	68fa      	ldr	r2, [r7, #12]
 8105f04:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8105f06:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8105f08:	68fb      	ldr	r3, [r7, #12]
 8105f0a:	681b      	ldr	r3, [r3, #0]
 8105f0c:	4a3e      	ldr	r2, [pc, #248]	; (8106008 <DMA_SetConfig+0x230>)
 8105f0e:	4293      	cmp	r3, r2
 8105f10:	d04a      	beq.n	8105fa8 <DMA_SetConfig+0x1d0>
 8105f12:	68fb      	ldr	r3, [r7, #12]
 8105f14:	681b      	ldr	r3, [r3, #0]
 8105f16:	4a3d      	ldr	r2, [pc, #244]	; (810600c <DMA_SetConfig+0x234>)
 8105f18:	4293      	cmp	r3, r2
 8105f1a:	d045      	beq.n	8105fa8 <DMA_SetConfig+0x1d0>
 8105f1c:	68fb      	ldr	r3, [r7, #12]
 8105f1e:	681b      	ldr	r3, [r3, #0]
 8105f20:	4a3b      	ldr	r2, [pc, #236]	; (8106010 <DMA_SetConfig+0x238>)
 8105f22:	4293      	cmp	r3, r2
 8105f24:	d040      	beq.n	8105fa8 <DMA_SetConfig+0x1d0>
 8105f26:	68fb      	ldr	r3, [r7, #12]
 8105f28:	681b      	ldr	r3, [r3, #0]
 8105f2a:	4a3a      	ldr	r2, [pc, #232]	; (8106014 <DMA_SetConfig+0x23c>)
 8105f2c:	4293      	cmp	r3, r2
 8105f2e:	d03b      	beq.n	8105fa8 <DMA_SetConfig+0x1d0>
 8105f30:	68fb      	ldr	r3, [r7, #12]
 8105f32:	681b      	ldr	r3, [r3, #0]
 8105f34:	4a38      	ldr	r2, [pc, #224]	; (8106018 <DMA_SetConfig+0x240>)
 8105f36:	4293      	cmp	r3, r2
 8105f38:	d036      	beq.n	8105fa8 <DMA_SetConfig+0x1d0>
 8105f3a:	68fb      	ldr	r3, [r7, #12]
 8105f3c:	681b      	ldr	r3, [r3, #0]
 8105f3e:	4a37      	ldr	r2, [pc, #220]	; (810601c <DMA_SetConfig+0x244>)
 8105f40:	4293      	cmp	r3, r2
 8105f42:	d031      	beq.n	8105fa8 <DMA_SetConfig+0x1d0>
 8105f44:	68fb      	ldr	r3, [r7, #12]
 8105f46:	681b      	ldr	r3, [r3, #0]
 8105f48:	4a35      	ldr	r2, [pc, #212]	; (8106020 <DMA_SetConfig+0x248>)
 8105f4a:	4293      	cmp	r3, r2
 8105f4c:	d02c      	beq.n	8105fa8 <DMA_SetConfig+0x1d0>
 8105f4e:	68fb      	ldr	r3, [r7, #12]
 8105f50:	681b      	ldr	r3, [r3, #0]
 8105f52:	4a34      	ldr	r2, [pc, #208]	; (8106024 <DMA_SetConfig+0x24c>)
 8105f54:	4293      	cmp	r3, r2
 8105f56:	d027      	beq.n	8105fa8 <DMA_SetConfig+0x1d0>
 8105f58:	68fb      	ldr	r3, [r7, #12]
 8105f5a:	681b      	ldr	r3, [r3, #0]
 8105f5c:	4a32      	ldr	r2, [pc, #200]	; (8106028 <DMA_SetConfig+0x250>)
 8105f5e:	4293      	cmp	r3, r2
 8105f60:	d022      	beq.n	8105fa8 <DMA_SetConfig+0x1d0>
 8105f62:	68fb      	ldr	r3, [r7, #12]
 8105f64:	681b      	ldr	r3, [r3, #0]
 8105f66:	4a31      	ldr	r2, [pc, #196]	; (810602c <DMA_SetConfig+0x254>)
 8105f68:	4293      	cmp	r3, r2
 8105f6a:	d01d      	beq.n	8105fa8 <DMA_SetConfig+0x1d0>
 8105f6c:	68fb      	ldr	r3, [r7, #12]
 8105f6e:	681b      	ldr	r3, [r3, #0]
 8105f70:	4a2f      	ldr	r2, [pc, #188]	; (8106030 <DMA_SetConfig+0x258>)
 8105f72:	4293      	cmp	r3, r2
 8105f74:	d018      	beq.n	8105fa8 <DMA_SetConfig+0x1d0>
 8105f76:	68fb      	ldr	r3, [r7, #12]
 8105f78:	681b      	ldr	r3, [r3, #0]
 8105f7a:	4a2e      	ldr	r2, [pc, #184]	; (8106034 <DMA_SetConfig+0x25c>)
 8105f7c:	4293      	cmp	r3, r2
 8105f7e:	d013      	beq.n	8105fa8 <DMA_SetConfig+0x1d0>
 8105f80:	68fb      	ldr	r3, [r7, #12]
 8105f82:	681b      	ldr	r3, [r3, #0]
 8105f84:	4a2c      	ldr	r2, [pc, #176]	; (8106038 <DMA_SetConfig+0x260>)
 8105f86:	4293      	cmp	r3, r2
 8105f88:	d00e      	beq.n	8105fa8 <DMA_SetConfig+0x1d0>
 8105f8a:	68fb      	ldr	r3, [r7, #12]
 8105f8c:	681b      	ldr	r3, [r3, #0]
 8105f8e:	4a2b      	ldr	r2, [pc, #172]	; (810603c <DMA_SetConfig+0x264>)
 8105f90:	4293      	cmp	r3, r2
 8105f92:	d009      	beq.n	8105fa8 <DMA_SetConfig+0x1d0>
 8105f94:	68fb      	ldr	r3, [r7, #12]
 8105f96:	681b      	ldr	r3, [r3, #0]
 8105f98:	4a29      	ldr	r2, [pc, #164]	; (8106040 <DMA_SetConfig+0x268>)
 8105f9a:	4293      	cmp	r3, r2
 8105f9c:	d004      	beq.n	8105fa8 <DMA_SetConfig+0x1d0>
 8105f9e:	68fb      	ldr	r3, [r7, #12]
 8105fa0:	681b      	ldr	r3, [r3, #0]
 8105fa2:	4a28      	ldr	r2, [pc, #160]	; (8106044 <DMA_SetConfig+0x26c>)
 8105fa4:	4293      	cmp	r3, r2
 8105fa6:	d101      	bne.n	8105fac <DMA_SetConfig+0x1d4>
 8105fa8:	2301      	movs	r3, #1
 8105faa:	e000      	b.n	8105fae <DMA_SetConfig+0x1d6>
 8105fac:	2300      	movs	r3, #0
 8105fae:	2b00      	cmp	r3, #0
 8105fb0:	d05a      	beq.n	8106068 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8105fb2:	68fb      	ldr	r3, [r7, #12]
 8105fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105fb6:	f003 031f 	and.w	r3, r3, #31
 8105fba:	223f      	movs	r2, #63	; 0x3f
 8105fbc:	409a      	lsls	r2, r3
 8105fbe:	697b      	ldr	r3, [r7, #20]
 8105fc0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8105fc2:	68fb      	ldr	r3, [r7, #12]
 8105fc4:	681b      	ldr	r3, [r3, #0]
 8105fc6:	681a      	ldr	r2, [r3, #0]
 8105fc8:	68fb      	ldr	r3, [r7, #12]
 8105fca:	681b      	ldr	r3, [r3, #0]
 8105fcc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8105fd0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8105fd2:	68fb      	ldr	r3, [r7, #12]
 8105fd4:	681b      	ldr	r3, [r3, #0]
 8105fd6:	683a      	ldr	r2, [r7, #0]
 8105fd8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8105fda:	68fb      	ldr	r3, [r7, #12]
 8105fdc:	689b      	ldr	r3, [r3, #8]
 8105fde:	2b40      	cmp	r3, #64	; 0x40
 8105fe0:	d108      	bne.n	8105ff4 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8105fe2:	68fb      	ldr	r3, [r7, #12]
 8105fe4:	681b      	ldr	r3, [r3, #0]
 8105fe6:	687a      	ldr	r2, [r7, #4]
 8105fe8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8105fea:	68fb      	ldr	r3, [r7, #12]
 8105fec:	681b      	ldr	r3, [r3, #0]
 8105fee:	68ba      	ldr	r2, [r7, #8]
 8105ff0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8105ff2:	e087      	b.n	8106104 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8105ff4:	68fb      	ldr	r3, [r7, #12]
 8105ff6:	681b      	ldr	r3, [r3, #0]
 8105ff8:	68ba      	ldr	r2, [r7, #8]
 8105ffa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8105ffc:	68fb      	ldr	r3, [r7, #12]
 8105ffe:	681b      	ldr	r3, [r3, #0]
 8106000:	687a      	ldr	r2, [r7, #4]
 8106002:	60da      	str	r2, [r3, #12]
}
 8106004:	e07e      	b.n	8106104 <DMA_SetConfig+0x32c>
 8106006:	bf00      	nop
 8106008:	40020010 	.word	0x40020010
 810600c:	40020028 	.word	0x40020028
 8106010:	40020040 	.word	0x40020040
 8106014:	40020058 	.word	0x40020058
 8106018:	40020070 	.word	0x40020070
 810601c:	40020088 	.word	0x40020088
 8106020:	400200a0 	.word	0x400200a0
 8106024:	400200b8 	.word	0x400200b8
 8106028:	40020410 	.word	0x40020410
 810602c:	40020428 	.word	0x40020428
 8106030:	40020440 	.word	0x40020440
 8106034:	40020458 	.word	0x40020458
 8106038:	40020470 	.word	0x40020470
 810603c:	40020488 	.word	0x40020488
 8106040:	400204a0 	.word	0x400204a0
 8106044:	400204b8 	.word	0x400204b8
 8106048:	58025408 	.word	0x58025408
 810604c:	5802541c 	.word	0x5802541c
 8106050:	58025430 	.word	0x58025430
 8106054:	58025444 	.word	0x58025444
 8106058:	58025458 	.word	0x58025458
 810605c:	5802546c 	.word	0x5802546c
 8106060:	58025480 	.word	0x58025480
 8106064:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8106068:	68fb      	ldr	r3, [r7, #12]
 810606a:	681b      	ldr	r3, [r3, #0]
 810606c:	4a28      	ldr	r2, [pc, #160]	; (8106110 <DMA_SetConfig+0x338>)
 810606e:	4293      	cmp	r3, r2
 8106070:	d022      	beq.n	81060b8 <DMA_SetConfig+0x2e0>
 8106072:	68fb      	ldr	r3, [r7, #12]
 8106074:	681b      	ldr	r3, [r3, #0]
 8106076:	4a27      	ldr	r2, [pc, #156]	; (8106114 <DMA_SetConfig+0x33c>)
 8106078:	4293      	cmp	r3, r2
 810607a:	d01d      	beq.n	81060b8 <DMA_SetConfig+0x2e0>
 810607c:	68fb      	ldr	r3, [r7, #12]
 810607e:	681b      	ldr	r3, [r3, #0]
 8106080:	4a25      	ldr	r2, [pc, #148]	; (8106118 <DMA_SetConfig+0x340>)
 8106082:	4293      	cmp	r3, r2
 8106084:	d018      	beq.n	81060b8 <DMA_SetConfig+0x2e0>
 8106086:	68fb      	ldr	r3, [r7, #12]
 8106088:	681b      	ldr	r3, [r3, #0]
 810608a:	4a24      	ldr	r2, [pc, #144]	; (810611c <DMA_SetConfig+0x344>)
 810608c:	4293      	cmp	r3, r2
 810608e:	d013      	beq.n	81060b8 <DMA_SetConfig+0x2e0>
 8106090:	68fb      	ldr	r3, [r7, #12]
 8106092:	681b      	ldr	r3, [r3, #0]
 8106094:	4a22      	ldr	r2, [pc, #136]	; (8106120 <DMA_SetConfig+0x348>)
 8106096:	4293      	cmp	r3, r2
 8106098:	d00e      	beq.n	81060b8 <DMA_SetConfig+0x2e0>
 810609a:	68fb      	ldr	r3, [r7, #12]
 810609c:	681b      	ldr	r3, [r3, #0]
 810609e:	4a21      	ldr	r2, [pc, #132]	; (8106124 <DMA_SetConfig+0x34c>)
 81060a0:	4293      	cmp	r3, r2
 81060a2:	d009      	beq.n	81060b8 <DMA_SetConfig+0x2e0>
 81060a4:	68fb      	ldr	r3, [r7, #12]
 81060a6:	681b      	ldr	r3, [r3, #0]
 81060a8:	4a1f      	ldr	r2, [pc, #124]	; (8106128 <DMA_SetConfig+0x350>)
 81060aa:	4293      	cmp	r3, r2
 81060ac:	d004      	beq.n	81060b8 <DMA_SetConfig+0x2e0>
 81060ae:	68fb      	ldr	r3, [r7, #12]
 81060b0:	681b      	ldr	r3, [r3, #0]
 81060b2:	4a1e      	ldr	r2, [pc, #120]	; (810612c <DMA_SetConfig+0x354>)
 81060b4:	4293      	cmp	r3, r2
 81060b6:	d101      	bne.n	81060bc <DMA_SetConfig+0x2e4>
 81060b8:	2301      	movs	r3, #1
 81060ba:	e000      	b.n	81060be <DMA_SetConfig+0x2e6>
 81060bc:	2300      	movs	r3, #0
 81060be:	2b00      	cmp	r3, #0
 81060c0:	d020      	beq.n	8106104 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 81060c2:	68fb      	ldr	r3, [r7, #12]
 81060c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81060c6:	f003 031f 	and.w	r3, r3, #31
 81060ca:	2201      	movs	r2, #1
 81060cc:	409a      	lsls	r2, r3
 81060ce:	693b      	ldr	r3, [r7, #16]
 81060d0:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 81060d2:	68fb      	ldr	r3, [r7, #12]
 81060d4:	681b      	ldr	r3, [r3, #0]
 81060d6:	683a      	ldr	r2, [r7, #0]
 81060d8:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 81060da:	68fb      	ldr	r3, [r7, #12]
 81060dc:	689b      	ldr	r3, [r3, #8]
 81060de:	2b40      	cmp	r3, #64	; 0x40
 81060e0:	d108      	bne.n	81060f4 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 81060e2:	68fb      	ldr	r3, [r7, #12]
 81060e4:	681b      	ldr	r3, [r3, #0]
 81060e6:	687a      	ldr	r2, [r7, #4]
 81060e8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 81060ea:	68fb      	ldr	r3, [r7, #12]
 81060ec:	681b      	ldr	r3, [r3, #0]
 81060ee:	68ba      	ldr	r2, [r7, #8]
 81060f0:	60da      	str	r2, [r3, #12]
}
 81060f2:	e007      	b.n	8106104 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 81060f4:	68fb      	ldr	r3, [r7, #12]
 81060f6:	681b      	ldr	r3, [r3, #0]
 81060f8:	68ba      	ldr	r2, [r7, #8]
 81060fa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 81060fc:	68fb      	ldr	r3, [r7, #12]
 81060fe:	681b      	ldr	r3, [r3, #0]
 8106100:	687a      	ldr	r2, [r7, #4]
 8106102:	60da      	str	r2, [r3, #12]
}
 8106104:	bf00      	nop
 8106106:	371c      	adds	r7, #28
 8106108:	46bd      	mov	sp, r7
 810610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810610e:	4770      	bx	lr
 8106110:	58025408 	.word	0x58025408
 8106114:	5802541c 	.word	0x5802541c
 8106118:	58025430 	.word	0x58025430
 810611c:	58025444 	.word	0x58025444
 8106120:	58025458 	.word	0x58025458
 8106124:	5802546c 	.word	0x5802546c
 8106128:	58025480 	.word	0x58025480
 810612c:	58025494 	.word	0x58025494

08106130 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8106130:	b480      	push	{r7}
 8106132:	b085      	sub	sp, #20
 8106134:	af00      	add	r7, sp, #0
 8106136:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8106138:	687b      	ldr	r3, [r7, #4]
 810613a:	681b      	ldr	r3, [r3, #0]
 810613c:	4a43      	ldr	r2, [pc, #268]	; (810624c <DMA_CalcBaseAndBitshift+0x11c>)
 810613e:	4293      	cmp	r3, r2
 8106140:	d04a      	beq.n	81061d8 <DMA_CalcBaseAndBitshift+0xa8>
 8106142:	687b      	ldr	r3, [r7, #4]
 8106144:	681b      	ldr	r3, [r3, #0]
 8106146:	4a42      	ldr	r2, [pc, #264]	; (8106250 <DMA_CalcBaseAndBitshift+0x120>)
 8106148:	4293      	cmp	r3, r2
 810614a:	d045      	beq.n	81061d8 <DMA_CalcBaseAndBitshift+0xa8>
 810614c:	687b      	ldr	r3, [r7, #4]
 810614e:	681b      	ldr	r3, [r3, #0]
 8106150:	4a40      	ldr	r2, [pc, #256]	; (8106254 <DMA_CalcBaseAndBitshift+0x124>)
 8106152:	4293      	cmp	r3, r2
 8106154:	d040      	beq.n	81061d8 <DMA_CalcBaseAndBitshift+0xa8>
 8106156:	687b      	ldr	r3, [r7, #4]
 8106158:	681b      	ldr	r3, [r3, #0]
 810615a:	4a3f      	ldr	r2, [pc, #252]	; (8106258 <DMA_CalcBaseAndBitshift+0x128>)
 810615c:	4293      	cmp	r3, r2
 810615e:	d03b      	beq.n	81061d8 <DMA_CalcBaseAndBitshift+0xa8>
 8106160:	687b      	ldr	r3, [r7, #4]
 8106162:	681b      	ldr	r3, [r3, #0]
 8106164:	4a3d      	ldr	r2, [pc, #244]	; (810625c <DMA_CalcBaseAndBitshift+0x12c>)
 8106166:	4293      	cmp	r3, r2
 8106168:	d036      	beq.n	81061d8 <DMA_CalcBaseAndBitshift+0xa8>
 810616a:	687b      	ldr	r3, [r7, #4]
 810616c:	681b      	ldr	r3, [r3, #0]
 810616e:	4a3c      	ldr	r2, [pc, #240]	; (8106260 <DMA_CalcBaseAndBitshift+0x130>)
 8106170:	4293      	cmp	r3, r2
 8106172:	d031      	beq.n	81061d8 <DMA_CalcBaseAndBitshift+0xa8>
 8106174:	687b      	ldr	r3, [r7, #4]
 8106176:	681b      	ldr	r3, [r3, #0]
 8106178:	4a3a      	ldr	r2, [pc, #232]	; (8106264 <DMA_CalcBaseAndBitshift+0x134>)
 810617a:	4293      	cmp	r3, r2
 810617c:	d02c      	beq.n	81061d8 <DMA_CalcBaseAndBitshift+0xa8>
 810617e:	687b      	ldr	r3, [r7, #4]
 8106180:	681b      	ldr	r3, [r3, #0]
 8106182:	4a39      	ldr	r2, [pc, #228]	; (8106268 <DMA_CalcBaseAndBitshift+0x138>)
 8106184:	4293      	cmp	r3, r2
 8106186:	d027      	beq.n	81061d8 <DMA_CalcBaseAndBitshift+0xa8>
 8106188:	687b      	ldr	r3, [r7, #4]
 810618a:	681b      	ldr	r3, [r3, #0]
 810618c:	4a37      	ldr	r2, [pc, #220]	; (810626c <DMA_CalcBaseAndBitshift+0x13c>)
 810618e:	4293      	cmp	r3, r2
 8106190:	d022      	beq.n	81061d8 <DMA_CalcBaseAndBitshift+0xa8>
 8106192:	687b      	ldr	r3, [r7, #4]
 8106194:	681b      	ldr	r3, [r3, #0]
 8106196:	4a36      	ldr	r2, [pc, #216]	; (8106270 <DMA_CalcBaseAndBitshift+0x140>)
 8106198:	4293      	cmp	r3, r2
 810619a:	d01d      	beq.n	81061d8 <DMA_CalcBaseAndBitshift+0xa8>
 810619c:	687b      	ldr	r3, [r7, #4]
 810619e:	681b      	ldr	r3, [r3, #0]
 81061a0:	4a34      	ldr	r2, [pc, #208]	; (8106274 <DMA_CalcBaseAndBitshift+0x144>)
 81061a2:	4293      	cmp	r3, r2
 81061a4:	d018      	beq.n	81061d8 <DMA_CalcBaseAndBitshift+0xa8>
 81061a6:	687b      	ldr	r3, [r7, #4]
 81061a8:	681b      	ldr	r3, [r3, #0]
 81061aa:	4a33      	ldr	r2, [pc, #204]	; (8106278 <DMA_CalcBaseAndBitshift+0x148>)
 81061ac:	4293      	cmp	r3, r2
 81061ae:	d013      	beq.n	81061d8 <DMA_CalcBaseAndBitshift+0xa8>
 81061b0:	687b      	ldr	r3, [r7, #4]
 81061b2:	681b      	ldr	r3, [r3, #0]
 81061b4:	4a31      	ldr	r2, [pc, #196]	; (810627c <DMA_CalcBaseAndBitshift+0x14c>)
 81061b6:	4293      	cmp	r3, r2
 81061b8:	d00e      	beq.n	81061d8 <DMA_CalcBaseAndBitshift+0xa8>
 81061ba:	687b      	ldr	r3, [r7, #4]
 81061bc:	681b      	ldr	r3, [r3, #0]
 81061be:	4a30      	ldr	r2, [pc, #192]	; (8106280 <DMA_CalcBaseAndBitshift+0x150>)
 81061c0:	4293      	cmp	r3, r2
 81061c2:	d009      	beq.n	81061d8 <DMA_CalcBaseAndBitshift+0xa8>
 81061c4:	687b      	ldr	r3, [r7, #4]
 81061c6:	681b      	ldr	r3, [r3, #0]
 81061c8:	4a2e      	ldr	r2, [pc, #184]	; (8106284 <DMA_CalcBaseAndBitshift+0x154>)
 81061ca:	4293      	cmp	r3, r2
 81061cc:	d004      	beq.n	81061d8 <DMA_CalcBaseAndBitshift+0xa8>
 81061ce:	687b      	ldr	r3, [r7, #4]
 81061d0:	681b      	ldr	r3, [r3, #0]
 81061d2:	4a2d      	ldr	r2, [pc, #180]	; (8106288 <DMA_CalcBaseAndBitshift+0x158>)
 81061d4:	4293      	cmp	r3, r2
 81061d6:	d101      	bne.n	81061dc <DMA_CalcBaseAndBitshift+0xac>
 81061d8:	2301      	movs	r3, #1
 81061da:	e000      	b.n	81061de <DMA_CalcBaseAndBitshift+0xae>
 81061dc:	2300      	movs	r3, #0
 81061de:	2b00      	cmp	r3, #0
 81061e0:	d026      	beq.n	8106230 <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 81061e2:	687b      	ldr	r3, [r7, #4]
 81061e4:	681b      	ldr	r3, [r3, #0]
 81061e6:	b2db      	uxtb	r3, r3
 81061e8:	3b10      	subs	r3, #16
 81061ea:	4a28      	ldr	r2, [pc, #160]	; (810628c <DMA_CalcBaseAndBitshift+0x15c>)
 81061ec:	fba2 2303 	umull	r2, r3, r2, r3
 81061f0:	091b      	lsrs	r3, r3, #4
 81061f2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 81061f4:	68fb      	ldr	r3, [r7, #12]
 81061f6:	f003 0307 	and.w	r3, r3, #7
 81061fa:	4a25      	ldr	r2, [pc, #148]	; (8106290 <DMA_CalcBaseAndBitshift+0x160>)
 81061fc:	5cd3      	ldrb	r3, [r2, r3]
 81061fe:	461a      	mov	r2, r3
 8106200:	687b      	ldr	r3, [r7, #4]
 8106202:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8106204:	68fb      	ldr	r3, [r7, #12]
 8106206:	2b03      	cmp	r3, #3
 8106208:	d909      	bls.n	810621e <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 810620a:	687b      	ldr	r3, [r7, #4]
 810620c:	681b      	ldr	r3, [r3, #0]
 810620e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8106212:	f023 0303 	bic.w	r3, r3, #3
 8106216:	1d1a      	adds	r2, r3, #4
 8106218:	687b      	ldr	r3, [r7, #4]
 810621a:	659a      	str	r2, [r3, #88]	; 0x58
 810621c:	e00e      	b.n	810623c <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 810621e:	687b      	ldr	r3, [r7, #4]
 8106220:	681b      	ldr	r3, [r3, #0]
 8106222:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8106226:	f023 0303 	bic.w	r3, r3, #3
 810622a:	687a      	ldr	r2, [r7, #4]
 810622c:	6593      	str	r3, [r2, #88]	; 0x58
 810622e:	e005      	b.n	810623c <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8106230:	687b      	ldr	r3, [r7, #4]
 8106232:	681b      	ldr	r3, [r3, #0]
 8106234:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8106238:	687b      	ldr	r3, [r7, #4]
 810623a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 810623c:	687b      	ldr	r3, [r7, #4]
 810623e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8106240:	4618      	mov	r0, r3
 8106242:	3714      	adds	r7, #20
 8106244:	46bd      	mov	sp, r7
 8106246:	f85d 7b04 	ldr.w	r7, [sp], #4
 810624a:	4770      	bx	lr
 810624c:	40020010 	.word	0x40020010
 8106250:	40020028 	.word	0x40020028
 8106254:	40020040 	.word	0x40020040
 8106258:	40020058 	.word	0x40020058
 810625c:	40020070 	.word	0x40020070
 8106260:	40020088 	.word	0x40020088
 8106264:	400200a0 	.word	0x400200a0
 8106268:	400200b8 	.word	0x400200b8
 810626c:	40020410 	.word	0x40020410
 8106270:	40020428 	.word	0x40020428
 8106274:	40020440 	.word	0x40020440
 8106278:	40020458 	.word	0x40020458
 810627c:	40020470 	.word	0x40020470
 8106280:	40020488 	.word	0x40020488
 8106284:	400204a0 	.word	0x400204a0
 8106288:	400204b8 	.word	0x400204b8
 810628c:	aaaaaaab 	.word	0xaaaaaaab
 8106290:	08110278 	.word	0x08110278

08106294 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8106294:	b480      	push	{r7}
 8106296:	b085      	sub	sp, #20
 8106298:	af00      	add	r7, sp, #0
 810629a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810629c:	2300      	movs	r3, #0
 810629e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 81062a0:	687b      	ldr	r3, [r7, #4]
 81062a2:	699b      	ldr	r3, [r3, #24]
 81062a4:	2b00      	cmp	r3, #0
 81062a6:	d120      	bne.n	81062ea <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 81062a8:	687b      	ldr	r3, [r7, #4]
 81062aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81062ac:	2b03      	cmp	r3, #3
 81062ae:	d858      	bhi.n	8106362 <DMA_CheckFifoParam+0xce>
 81062b0:	a201      	add	r2, pc, #4	; (adr r2, 81062b8 <DMA_CheckFifoParam+0x24>)
 81062b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81062b6:	bf00      	nop
 81062b8:	081062c9 	.word	0x081062c9
 81062bc:	081062db 	.word	0x081062db
 81062c0:	081062c9 	.word	0x081062c9
 81062c4:	08106363 	.word	0x08106363
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 81062c8:	687b      	ldr	r3, [r7, #4]
 81062ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81062cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81062d0:	2b00      	cmp	r3, #0
 81062d2:	d048      	beq.n	8106366 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 81062d4:	2301      	movs	r3, #1
 81062d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81062d8:	e045      	b.n	8106366 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 81062da:	687b      	ldr	r3, [r7, #4]
 81062dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81062de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 81062e2:	d142      	bne.n	810636a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 81062e4:	2301      	movs	r3, #1
 81062e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81062e8:	e03f      	b.n	810636a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 81062ea:	687b      	ldr	r3, [r7, #4]
 81062ec:	699b      	ldr	r3, [r3, #24]
 81062ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81062f2:	d123      	bne.n	810633c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 81062f4:	687b      	ldr	r3, [r7, #4]
 81062f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81062f8:	2b03      	cmp	r3, #3
 81062fa:	d838      	bhi.n	810636e <DMA_CheckFifoParam+0xda>
 81062fc:	a201      	add	r2, pc, #4	; (adr r2, 8106304 <DMA_CheckFifoParam+0x70>)
 81062fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106302:	bf00      	nop
 8106304:	08106315 	.word	0x08106315
 8106308:	0810631b 	.word	0x0810631b
 810630c:	08106315 	.word	0x08106315
 8106310:	0810632d 	.word	0x0810632d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8106314:	2301      	movs	r3, #1
 8106316:	73fb      	strb	r3, [r7, #15]
        break;
 8106318:	e030      	b.n	810637c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 810631a:	687b      	ldr	r3, [r7, #4]
 810631c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810631e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8106322:	2b00      	cmp	r3, #0
 8106324:	d025      	beq.n	8106372 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8106326:	2301      	movs	r3, #1
 8106328:	73fb      	strb	r3, [r7, #15]
        }
        break;
 810632a:	e022      	b.n	8106372 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 810632c:	687b      	ldr	r3, [r7, #4]
 810632e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106330:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8106334:	d11f      	bne.n	8106376 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8106336:	2301      	movs	r3, #1
 8106338:	73fb      	strb	r3, [r7, #15]
        }
        break;
 810633a:	e01c      	b.n	8106376 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 810633c:	687b      	ldr	r3, [r7, #4]
 810633e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106340:	2b02      	cmp	r3, #2
 8106342:	d902      	bls.n	810634a <DMA_CheckFifoParam+0xb6>
 8106344:	2b03      	cmp	r3, #3
 8106346:	d003      	beq.n	8106350 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8106348:	e018      	b.n	810637c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 810634a:	2301      	movs	r3, #1
 810634c:	73fb      	strb	r3, [r7, #15]
        break;
 810634e:	e015      	b.n	810637c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8106350:	687b      	ldr	r3, [r7, #4]
 8106352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106354:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8106358:	2b00      	cmp	r3, #0
 810635a:	d00e      	beq.n	810637a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 810635c:	2301      	movs	r3, #1
 810635e:	73fb      	strb	r3, [r7, #15]
    break;
 8106360:	e00b      	b.n	810637a <DMA_CheckFifoParam+0xe6>
        break;
 8106362:	bf00      	nop
 8106364:	e00a      	b.n	810637c <DMA_CheckFifoParam+0xe8>
        break;
 8106366:	bf00      	nop
 8106368:	e008      	b.n	810637c <DMA_CheckFifoParam+0xe8>
        break;
 810636a:	bf00      	nop
 810636c:	e006      	b.n	810637c <DMA_CheckFifoParam+0xe8>
        break;
 810636e:	bf00      	nop
 8106370:	e004      	b.n	810637c <DMA_CheckFifoParam+0xe8>
        break;
 8106372:	bf00      	nop
 8106374:	e002      	b.n	810637c <DMA_CheckFifoParam+0xe8>
        break;
 8106376:	bf00      	nop
 8106378:	e000      	b.n	810637c <DMA_CheckFifoParam+0xe8>
    break;
 810637a:	bf00      	nop
    }
  }

  return status;
 810637c:	7bfb      	ldrb	r3, [r7, #15]
}
 810637e:	4618      	mov	r0, r3
 8106380:	3714      	adds	r7, #20
 8106382:	46bd      	mov	sp, r7
 8106384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106388:	4770      	bx	lr
 810638a:	bf00      	nop

0810638c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 810638c:	b480      	push	{r7}
 810638e:	b085      	sub	sp, #20
 8106390:	af00      	add	r7, sp, #0
 8106392:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8106394:	687b      	ldr	r3, [r7, #4]
 8106396:	681b      	ldr	r3, [r3, #0]
 8106398:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 810639a:	687b      	ldr	r3, [r7, #4]
 810639c:	681b      	ldr	r3, [r3, #0]
 810639e:	4a3a      	ldr	r2, [pc, #232]	; (8106488 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 81063a0:	4293      	cmp	r3, r2
 81063a2:	d022      	beq.n	81063ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81063a4:	687b      	ldr	r3, [r7, #4]
 81063a6:	681b      	ldr	r3, [r3, #0]
 81063a8:	4a38      	ldr	r2, [pc, #224]	; (810648c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 81063aa:	4293      	cmp	r3, r2
 81063ac:	d01d      	beq.n	81063ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81063ae:	687b      	ldr	r3, [r7, #4]
 81063b0:	681b      	ldr	r3, [r3, #0]
 81063b2:	4a37      	ldr	r2, [pc, #220]	; (8106490 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 81063b4:	4293      	cmp	r3, r2
 81063b6:	d018      	beq.n	81063ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81063b8:	687b      	ldr	r3, [r7, #4]
 81063ba:	681b      	ldr	r3, [r3, #0]
 81063bc:	4a35      	ldr	r2, [pc, #212]	; (8106494 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 81063be:	4293      	cmp	r3, r2
 81063c0:	d013      	beq.n	81063ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81063c2:	687b      	ldr	r3, [r7, #4]
 81063c4:	681b      	ldr	r3, [r3, #0]
 81063c6:	4a34      	ldr	r2, [pc, #208]	; (8106498 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 81063c8:	4293      	cmp	r3, r2
 81063ca:	d00e      	beq.n	81063ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81063cc:	687b      	ldr	r3, [r7, #4]
 81063ce:	681b      	ldr	r3, [r3, #0]
 81063d0:	4a32      	ldr	r2, [pc, #200]	; (810649c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 81063d2:	4293      	cmp	r3, r2
 81063d4:	d009      	beq.n	81063ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81063d6:	687b      	ldr	r3, [r7, #4]
 81063d8:	681b      	ldr	r3, [r3, #0]
 81063da:	4a31      	ldr	r2, [pc, #196]	; (81064a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 81063dc:	4293      	cmp	r3, r2
 81063de:	d004      	beq.n	81063ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81063e0:	687b      	ldr	r3, [r7, #4]
 81063e2:	681b      	ldr	r3, [r3, #0]
 81063e4:	4a2f      	ldr	r2, [pc, #188]	; (81064a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 81063e6:	4293      	cmp	r3, r2
 81063e8:	d101      	bne.n	81063ee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 81063ea:	2301      	movs	r3, #1
 81063ec:	e000      	b.n	81063f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 81063ee:	2300      	movs	r3, #0
 81063f0:	2b00      	cmp	r3, #0
 81063f2:	d01c      	beq.n	810642e <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 81063f4:	687b      	ldr	r3, [r7, #4]
 81063f6:	681b      	ldr	r3, [r3, #0]
 81063f8:	b2db      	uxtb	r3, r3
 81063fa:	3b08      	subs	r3, #8
 81063fc:	4a2a      	ldr	r2, [pc, #168]	; (81064a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 81063fe:	fba2 2303 	umull	r2, r3, r2, r3
 8106402:	091b      	lsrs	r3, r3, #4
 8106404:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8106406:	68fb      	ldr	r3, [r7, #12]
 8106408:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 810640c:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 8106410:	009b      	lsls	r3, r3, #2
 8106412:	461a      	mov	r2, r3
 8106414:	687b      	ldr	r3, [r7, #4]
 8106416:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8106418:	687b      	ldr	r3, [r7, #4]
 810641a:	4a24      	ldr	r2, [pc, #144]	; (81064ac <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 810641c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 810641e:	68fb      	ldr	r3, [r7, #12]
 8106420:	f003 031f 	and.w	r3, r3, #31
 8106424:	2201      	movs	r2, #1
 8106426:	409a      	lsls	r2, r3
 8106428:	687b      	ldr	r3, [r7, #4]
 810642a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 810642c:	e026      	b.n	810647c <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 810642e:	687b      	ldr	r3, [r7, #4]
 8106430:	681b      	ldr	r3, [r3, #0]
 8106432:	b2db      	uxtb	r3, r3
 8106434:	3b10      	subs	r3, #16
 8106436:	4a1e      	ldr	r2, [pc, #120]	; (81064b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8106438:	fba2 2303 	umull	r2, r3, r2, r3
 810643c:	091b      	lsrs	r3, r3, #4
 810643e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8106440:	68bb      	ldr	r3, [r7, #8]
 8106442:	4a1c      	ldr	r2, [pc, #112]	; (81064b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8106444:	4293      	cmp	r3, r2
 8106446:	d806      	bhi.n	8106456 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 8106448:	68bb      	ldr	r3, [r7, #8]
 810644a:	4a1b      	ldr	r2, [pc, #108]	; (81064b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 810644c:	4293      	cmp	r3, r2
 810644e:	d902      	bls.n	8106456 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 8106450:	68fb      	ldr	r3, [r7, #12]
 8106452:	3308      	adds	r3, #8
 8106454:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8106456:	68fb      	ldr	r3, [r7, #12]
 8106458:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 810645c:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8106460:	009b      	lsls	r3, r3, #2
 8106462:	461a      	mov	r2, r3
 8106464:	687b      	ldr	r3, [r7, #4]
 8106466:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8106468:	687b      	ldr	r3, [r7, #4]
 810646a:	4a14      	ldr	r2, [pc, #80]	; (81064bc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 810646c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 810646e:	68fb      	ldr	r3, [r7, #12]
 8106470:	f003 031f 	and.w	r3, r3, #31
 8106474:	2201      	movs	r2, #1
 8106476:	409a      	lsls	r2, r3
 8106478:	687b      	ldr	r3, [r7, #4]
 810647a:	669a      	str	r2, [r3, #104]	; 0x68
}
 810647c:	bf00      	nop
 810647e:	3714      	adds	r7, #20
 8106480:	46bd      	mov	sp, r7
 8106482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106486:	4770      	bx	lr
 8106488:	58025408 	.word	0x58025408
 810648c:	5802541c 	.word	0x5802541c
 8106490:	58025430 	.word	0x58025430
 8106494:	58025444 	.word	0x58025444
 8106498:	58025458 	.word	0x58025458
 810649c:	5802546c 	.word	0x5802546c
 81064a0:	58025480 	.word	0x58025480
 81064a4:	58025494 	.word	0x58025494
 81064a8:	cccccccd 	.word	0xcccccccd
 81064ac:	58025880 	.word	0x58025880
 81064b0:	aaaaaaab 	.word	0xaaaaaaab
 81064b4:	400204b8 	.word	0x400204b8
 81064b8:	4002040f 	.word	0x4002040f
 81064bc:	40020880 	.word	0x40020880

081064c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 81064c0:	b480      	push	{r7}
 81064c2:	b085      	sub	sp, #20
 81064c4:	af00      	add	r7, sp, #0
 81064c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 81064c8:	687b      	ldr	r3, [r7, #4]
 81064ca:	685b      	ldr	r3, [r3, #4]
 81064cc:	b2db      	uxtb	r3, r3
 81064ce:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 81064d0:	68fb      	ldr	r3, [r7, #12]
 81064d2:	2b00      	cmp	r3, #0
 81064d4:	d04a      	beq.n	810656c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 81064d6:	68fb      	ldr	r3, [r7, #12]
 81064d8:	2b08      	cmp	r3, #8
 81064da:	d847      	bhi.n	810656c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 81064dc:	687b      	ldr	r3, [r7, #4]
 81064de:	681b      	ldr	r3, [r3, #0]
 81064e0:	4a25      	ldr	r2, [pc, #148]	; (8106578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 81064e2:	4293      	cmp	r3, r2
 81064e4:	d022      	beq.n	810652c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81064e6:	687b      	ldr	r3, [r7, #4]
 81064e8:	681b      	ldr	r3, [r3, #0]
 81064ea:	4a24      	ldr	r2, [pc, #144]	; (810657c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 81064ec:	4293      	cmp	r3, r2
 81064ee:	d01d      	beq.n	810652c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81064f0:	687b      	ldr	r3, [r7, #4]
 81064f2:	681b      	ldr	r3, [r3, #0]
 81064f4:	4a22      	ldr	r2, [pc, #136]	; (8106580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 81064f6:	4293      	cmp	r3, r2
 81064f8:	d018      	beq.n	810652c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81064fa:	687b      	ldr	r3, [r7, #4]
 81064fc:	681b      	ldr	r3, [r3, #0]
 81064fe:	4a21      	ldr	r2, [pc, #132]	; (8106584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8106500:	4293      	cmp	r3, r2
 8106502:	d013      	beq.n	810652c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106504:	687b      	ldr	r3, [r7, #4]
 8106506:	681b      	ldr	r3, [r3, #0]
 8106508:	4a1f      	ldr	r2, [pc, #124]	; (8106588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 810650a:	4293      	cmp	r3, r2
 810650c:	d00e      	beq.n	810652c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810650e:	687b      	ldr	r3, [r7, #4]
 8106510:	681b      	ldr	r3, [r3, #0]
 8106512:	4a1e      	ldr	r2, [pc, #120]	; (810658c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8106514:	4293      	cmp	r3, r2
 8106516:	d009      	beq.n	810652c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106518:	687b      	ldr	r3, [r7, #4]
 810651a:	681b      	ldr	r3, [r3, #0]
 810651c:	4a1c      	ldr	r2, [pc, #112]	; (8106590 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 810651e:	4293      	cmp	r3, r2
 8106520:	d004      	beq.n	810652c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106522:	687b      	ldr	r3, [r7, #4]
 8106524:	681b      	ldr	r3, [r3, #0]
 8106526:	4a1b      	ldr	r2, [pc, #108]	; (8106594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8106528:	4293      	cmp	r3, r2
 810652a:	d101      	bne.n	8106530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 810652c:	2301      	movs	r3, #1
 810652e:	e000      	b.n	8106532 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8106530:	2300      	movs	r3, #0
 8106532:	2b00      	cmp	r3, #0
 8106534:	d00a      	beq.n	810654c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8106536:	68fa      	ldr	r2, [r7, #12]
 8106538:	4b17      	ldr	r3, [pc, #92]	; (8106598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 810653a:	4413      	add	r3, r2
 810653c:	009b      	lsls	r3, r3, #2
 810653e:	461a      	mov	r2, r3
 8106540:	687b      	ldr	r3, [r7, #4]
 8106542:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8106544:	687b      	ldr	r3, [r7, #4]
 8106546:	4a15      	ldr	r2, [pc, #84]	; (810659c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8106548:	671a      	str	r2, [r3, #112]	; 0x70
 810654a:	e009      	b.n	8106560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 810654c:	68fa      	ldr	r2, [r7, #12]
 810654e:	4b14      	ldr	r3, [pc, #80]	; (81065a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8106550:	4413      	add	r3, r2
 8106552:	009b      	lsls	r3, r3, #2
 8106554:	461a      	mov	r2, r3
 8106556:	687b      	ldr	r3, [r7, #4]
 8106558:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 810655a:	687b      	ldr	r3, [r7, #4]
 810655c:	4a11      	ldr	r2, [pc, #68]	; (81065a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 810655e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8106560:	68fb      	ldr	r3, [r7, #12]
 8106562:	3b01      	subs	r3, #1
 8106564:	2201      	movs	r2, #1
 8106566:	409a      	lsls	r2, r3
 8106568:	687b      	ldr	r3, [r7, #4]
 810656a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 810656c:	bf00      	nop
 810656e:	3714      	adds	r7, #20
 8106570:	46bd      	mov	sp, r7
 8106572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106576:	4770      	bx	lr
 8106578:	58025408 	.word	0x58025408
 810657c:	5802541c 	.word	0x5802541c
 8106580:	58025430 	.word	0x58025430
 8106584:	58025444 	.word	0x58025444
 8106588:	58025458 	.word	0x58025458
 810658c:	5802546c 	.word	0x5802546c
 8106590:	58025480 	.word	0x58025480
 8106594:	58025494 	.word	0x58025494
 8106598:	1600963f 	.word	0x1600963f
 810659c:	58025940 	.word	0x58025940
 81065a0:	1000823f 	.word	0x1000823f
 81065a4:	40020940 	.word	0x40020940

081065a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81065a8:	b480      	push	{r7}
 81065aa:	b089      	sub	sp, #36	; 0x24
 81065ac:	af00      	add	r7, sp, #0
 81065ae:	6078      	str	r0, [r7, #4]
 81065b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81065b2:	2300      	movs	r3, #0
 81065b4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81065b6:	4b89      	ldr	r3, [pc, #548]	; (81067dc <HAL_GPIO_Init+0x234>)
 81065b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81065ba:	e194      	b.n	81068e6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81065bc:	683b      	ldr	r3, [r7, #0]
 81065be:	681a      	ldr	r2, [r3, #0]
 81065c0:	2101      	movs	r1, #1
 81065c2:	69fb      	ldr	r3, [r7, #28]
 81065c4:	fa01 f303 	lsl.w	r3, r1, r3
 81065c8:	4013      	ands	r3, r2
 81065ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81065cc:	693b      	ldr	r3, [r7, #16]
 81065ce:	2b00      	cmp	r3, #0
 81065d0:	f000 8186 	beq.w	81068e0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 81065d4:	683b      	ldr	r3, [r7, #0]
 81065d6:	685b      	ldr	r3, [r3, #4]
 81065d8:	2b01      	cmp	r3, #1
 81065da:	d00b      	beq.n	81065f4 <HAL_GPIO_Init+0x4c>
 81065dc:	683b      	ldr	r3, [r7, #0]
 81065de:	685b      	ldr	r3, [r3, #4]
 81065e0:	2b02      	cmp	r3, #2
 81065e2:	d007      	beq.n	81065f4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 81065e4:	683b      	ldr	r3, [r7, #0]
 81065e6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 81065e8:	2b11      	cmp	r3, #17
 81065ea:	d003      	beq.n	81065f4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 81065ec:	683b      	ldr	r3, [r7, #0]
 81065ee:	685b      	ldr	r3, [r3, #4]
 81065f0:	2b12      	cmp	r3, #18
 81065f2:	d130      	bne.n	8106656 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81065f4:	687b      	ldr	r3, [r7, #4]
 81065f6:	689b      	ldr	r3, [r3, #8]
 81065f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81065fa:	69fb      	ldr	r3, [r7, #28]
 81065fc:	005b      	lsls	r3, r3, #1
 81065fe:	2203      	movs	r2, #3
 8106600:	fa02 f303 	lsl.w	r3, r2, r3
 8106604:	43db      	mvns	r3, r3
 8106606:	69ba      	ldr	r2, [r7, #24]
 8106608:	4013      	ands	r3, r2
 810660a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 810660c:	683b      	ldr	r3, [r7, #0]
 810660e:	68da      	ldr	r2, [r3, #12]
 8106610:	69fb      	ldr	r3, [r7, #28]
 8106612:	005b      	lsls	r3, r3, #1
 8106614:	fa02 f303 	lsl.w	r3, r2, r3
 8106618:	69ba      	ldr	r2, [r7, #24]
 810661a:	4313      	orrs	r3, r2
 810661c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810661e:	687b      	ldr	r3, [r7, #4]
 8106620:	69ba      	ldr	r2, [r7, #24]
 8106622:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8106624:	687b      	ldr	r3, [r7, #4]
 8106626:	685b      	ldr	r3, [r3, #4]
 8106628:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810662a:	2201      	movs	r2, #1
 810662c:	69fb      	ldr	r3, [r7, #28]
 810662e:	fa02 f303 	lsl.w	r3, r2, r3
 8106632:	43db      	mvns	r3, r3
 8106634:	69ba      	ldr	r2, [r7, #24]
 8106636:	4013      	ands	r3, r2
 8106638:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 810663a:	683b      	ldr	r3, [r7, #0]
 810663c:	685b      	ldr	r3, [r3, #4]
 810663e:	091b      	lsrs	r3, r3, #4
 8106640:	f003 0201 	and.w	r2, r3, #1
 8106644:	69fb      	ldr	r3, [r7, #28]
 8106646:	fa02 f303 	lsl.w	r3, r2, r3
 810664a:	69ba      	ldr	r2, [r7, #24]
 810664c:	4313      	orrs	r3, r2
 810664e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8106650:	687b      	ldr	r3, [r7, #4]
 8106652:	69ba      	ldr	r2, [r7, #24]
 8106654:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8106656:	687b      	ldr	r3, [r7, #4]
 8106658:	68db      	ldr	r3, [r3, #12]
 810665a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 810665c:	69fb      	ldr	r3, [r7, #28]
 810665e:	005b      	lsls	r3, r3, #1
 8106660:	2203      	movs	r2, #3
 8106662:	fa02 f303 	lsl.w	r3, r2, r3
 8106666:	43db      	mvns	r3, r3
 8106668:	69ba      	ldr	r2, [r7, #24]
 810666a:	4013      	ands	r3, r2
 810666c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810666e:	683b      	ldr	r3, [r7, #0]
 8106670:	689a      	ldr	r2, [r3, #8]
 8106672:	69fb      	ldr	r3, [r7, #28]
 8106674:	005b      	lsls	r3, r3, #1
 8106676:	fa02 f303 	lsl.w	r3, r2, r3
 810667a:	69ba      	ldr	r2, [r7, #24]
 810667c:	4313      	orrs	r3, r2
 810667e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8106680:	687b      	ldr	r3, [r7, #4]
 8106682:	69ba      	ldr	r2, [r7, #24]
 8106684:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8106686:	683b      	ldr	r3, [r7, #0]
 8106688:	685b      	ldr	r3, [r3, #4]
 810668a:	2b02      	cmp	r3, #2
 810668c:	d003      	beq.n	8106696 <HAL_GPIO_Init+0xee>
 810668e:	683b      	ldr	r3, [r7, #0]
 8106690:	685b      	ldr	r3, [r3, #4]
 8106692:	2b12      	cmp	r3, #18
 8106694:	d123      	bne.n	81066de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8106696:	69fb      	ldr	r3, [r7, #28]
 8106698:	08da      	lsrs	r2, r3, #3
 810669a:	687b      	ldr	r3, [r7, #4]
 810669c:	3208      	adds	r2, #8
 810669e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81066a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81066a4:	69fb      	ldr	r3, [r7, #28]
 81066a6:	f003 0307 	and.w	r3, r3, #7
 81066aa:	009b      	lsls	r3, r3, #2
 81066ac:	220f      	movs	r2, #15
 81066ae:	fa02 f303 	lsl.w	r3, r2, r3
 81066b2:	43db      	mvns	r3, r3
 81066b4:	69ba      	ldr	r2, [r7, #24]
 81066b6:	4013      	ands	r3, r2
 81066b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81066ba:	683b      	ldr	r3, [r7, #0]
 81066bc:	691a      	ldr	r2, [r3, #16]
 81066be:	69fb      	ldr	r3, [r7, #28]
 81066c0:	f003 0307 	and.w	r3, r3, #7
 81066c4:	009b      	lsls	r3, r3, #2
 81066c6:	fa02 f303 	lsl.w	r3, r2, r3
 81066ca:	69ba      	ldr	r2, [r7, #24]
 81066cc:	4313      	orrs	r3, r2
 81066ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81066d0:	69fb      	ldr	r3, [r7, #28]
 81066d2:	08da      	lsrs	r2, r3, #3
 81066d4:	687b      	ldr	r3, [r7, #4]
 81066d6:	3208      	adds	r2, #8
 81066d8:	69b9      	ldr	r1, [r7, #24]
 81066da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81066de:	687b      	ldr	r3, [r7, #4]
 81066e0:	681b      	ldr	r3, [r3, #0]
 81066e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81066e4:	69fb      	ldr	r3, [r7, #28]
 81066e6:	005b      	lsls	r3, r3, #1
 81066e8:	2203      	movs	r2, #3
 81066ea:	fa02 f303 	lsl.w	r3, r2, r3
 81066ee:	43db      	mvns	r3, r3
 81066f0:	69ba      	ldr	r2, [r7, #24]
 81066f2:	4013      	ands	r3, r2
 81066f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81066f6:	683b      	ldr	r3, [r7, #0]
 81066f8:	685b      	ldr	r3, [r3, #4]
 81066fa:	f003 0203 	and.w	r2, r3, #3
 81066fe:	69fb      	ldr	r3, [r7, #28]
 8106700:	005b      	lsls	r3, r3, #1
 8106702:	fa02 f303 	lsl.w	r3, r2, r3
 8106706:	69ba      	ldr	r2, [r7, #24]
 8106708:	4313      	orrs	r3, r2
 810670a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 810670c:	687b      	ldr	r3, [r7, #4]
 810670e:	69ba      	ldr	r2, [r7, #24]
 8106710:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8106712:	683b      	ldr	r3, [r7, #0]
 8106714:	685b      	ldr	r3, [r3, #4]
 8106716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810671a:	2b00      	cmp	r3, #0
 810671c:	f000 80e0 	beq.w	81068e0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8106720:	4b2f      	ldr	r3, [pc, #188]	; (81067e0 <HAL_GPIO_Init+0x238>)
 8106722:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8106726:	4a2e      	ldr	r2, [pc, #184]	; (81067e0 <HAL_GPIO_Init+0x238>)
 8106728:	f043 0302 	orr.w	r3, r3, #2
 810672c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8106730:	4b2b      	ldr	r3, [pc, #172]	; (81067e0 <HAL_GPIO_Init+0x238>)
 8106732:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8106736:	f003 0302 	and.w	r3, r3, #2
 810673a:	60fb      	str	r3, [r7, #12]
 810673c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810673e:	4a29      	ldr	r2, [pc, #164]	; (81067e4 <HAL_GPIO_Init+0x23c>)
 8106740:	69fb      	ldr	r3, [r7, #28]
 8106742:	089b      	lsrs	r3, r3, #2
 8106744:	3302      	adds	r3, #2
 8106746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810674a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 810674c:	69fb      	ldr	r3, [r7, #28]
 810674e:	f003 0303 	and.w	r3, r3, #3
 8106752:	009b      	lsls	r3, r3, #2
 8106754:	220f      	movs	r2, #15
 8106756:	fa02 f303 	lsl.w	r3, r2, r3
 810675a:	43db      	mvns	r3, r3
 810675c:	69ba      	ldr	r2, [r7, #24]
 810675e:	4013      	ands	r3, r2
 8106760:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8106762:	687b      	ldr	r3, [r7, #4]
 8106764:	4a20      	ldr	r2, [pc, #128]	; (81067e8 <HAL_GPIO_Init+0x240>)
 8106766:	4293      	cmp	r3, r2
 8106768:	d052      	beq.n	8106810 <HAL_GPIO_Init+0x268>
 810676a:	687b      	ldr	r3, [r7, #4]
 810676c:	4a1f      	ldr	r2, [pc, #124]	; (81067ec <HAL_GPIO_Init+0x244>)
 810676e:	4293      	cmp	r3, r2
 8106770:	d031      	beq.n	81067d6 <HAL_GPIO_Init+0x22e>
 8106772:	687b      	ldr	r3, [r7, #4]
 8106774:	4a1e      	ldr	r2, [pc, #120]	; (81067f0 <HAL_GPIO_Init+0x248>)
 8106776:	4293      	cmp	r3, r2
 8106778:	d02b      	beq.n	81067d2 <HAL_GPIO_Init+0x22a>
 810677a:	687b      	ldr	r3, [r7, #4]
 810677c:	4a1d      	ldr	r2, [pc, #116]	; (81067f4 <HAL_GPIO_Init+0x24c>)
 810677e:	4293      	cmp	r3, r2
 8106780:	d025      	beq.n	81067ce <HAL_GPIO_Init+0x226>
 8106782:	687b      	ldr	r3, [r7, #4]
 8106784:	4a1c      	ldr	r2, [pc, #112]	; (81067f8 <HAL_GPIO_Init+0x250>)
 8106786:	4293      	cmp	r3, r2
 8106788:	d01f      	beq.n	81067ca <HAL_GPIO_Init+0x222>
 810678a:	687b      	ldr	r3, [r7, #4]
 810678c:	4a1b      	ldr	r2, [pc, #108]	; (81067fc <HAL_GPIO_Init+0x254>)
 810678e:	4293      	cmp	r3, r2
 8106790:	d019      	beq.n	81067c6 <HAL_GPIO_Init+0x21e>
 8106792:	687b      	ldr	r3, [r7, #4]
 8106794:	4a1a      	ldr	r2, [pc, #104]	; (8106800 <HAL_GPIO_Init+0x258>)
 8106796:	4293      	cmp	r3, r2
 8106798:	d013      	beq.n	81067c2 <HAL_GPIO_Init+0x21a>
 810679a:	687b      	ldr	r3, [r7, #4]
 810679c:	4a19      	ldr	r2, [pc, #100]	; (8106804 <HAL_GPIO_Init+0x25c>)
 810679e:	4293      	cmp	r3, r2
 81067a0:	d00d      	beq.n	81067be <HAL_GPIO_Init+0x216>
 81067a2:	687b      	ldr	r3, [r7, #4]
 81067a4:	4a18      	ldr	r2, [pc, #96]	; (8106808 <HAL_GPIO_Init+0x260>)
 81067a6:	4293      	cmp	r3, r2
 81067a8:	d007      	beq.n	81067ba <HAL_GPIO_Init+0x212>
 81067aa:	687b      	ldr	r3, [r7, #4]
 81067ac:	4a17      	ldr	r2, [pc, #92]	; (810680c <HAL_GPIO_Init+0x264>)
 81067ae:	4293      	cmp	r3, r2
 81067b0:	d101      	bne.n	81067b6 <HAL_GPIO_Init+0x20e>
 81067b2:	2309      	movs	r3, #9
 81067b4:	e02d      	b.n	8106812 <HAL_GPIO_Init+0x26a>
 81067b6:	230a      	movs	r3, #10
 81067b8:	e02b      	b.n	8106812 <HAL_GPIO_Init+0x26a>
 81067ba:	2308      	movs	r3, #8
 81067bc:	e029      	b.n	8106812 <HAL_GPIO_Init+0x26a>
 81067be:	2307      	movs	r3, #7
 81067c0:	e027      	b.n	8106812 <HAL_GPIO_Init+0x26a>
 81067c2:	2306      	movs	r3, #6
 81067c4:	e025      	b.n	8106812 <HAL_GPIO_Init+0x26a>
 81067c6:	2305      	movs	r3, #5
 81067c8:	e023      	b.n	8106812 <HAL_GPIO_Init+0x26a>
 81067ca:	2304      	movs	r3, #4
 81067cc:	e021      	b.n	8106812 <HAL_GPIO_Init+0x26a>
 81067ce:	2303      	movs	r3, #3
 81067d0:	e01f      	b.n	8106812 <HAL_GPIO_Init+0x26a>
 81067d2:	2302      	movs	r3, #2
 81067d4:	e01d      	b.n	8106812 <HAL_GPIO_Init+0x26a>
 81067d6:	2301      	movs	r3, #1
 81067d8:	e01b      	b.n	8106812 <HAL_GPIO_Init+0x26a>
 81067da:	bf00      	nop
 81067dc:	580000c0 	.word	0x580000c0
 81067e0:	58024400 	.word	0x58024400
 81067e4:	58000400 	.word	0x58000400
 81067e8:	58020000 	.word	0x58020000
 81067ec:	58020400 	.word	0x58020400
 81067f0:	58020800 	.word	0x58020800
 81067f4:	58020c00 	.word	0x58020c00
 81067f8:	58021000 	.word	0x58021000
 81067fc:	58021400 	.word	0x58021400
 8106800:	58021800 	.word	0x58021800
 8106804:	58021c00 	.word	0x58021c00
 8106808:	58022000 	.word	0x58022000
 810680c:	58022400 	.word	0x58022400
 8106810:	2300      	movs	r3, #0
 8106812:	69fa      	ldr	r2, [r7, #28]
 8106814:	f002 0203 	and.w	r2, r2, #3
 8106818:	0092      	lsls	r2, r2, #2
 810681a:	4093      	lsls	r3, r2
 810681c:	69ba      	ldr	r2, [r7, #24]
 810681e:	4313      	orrs	r3, r2
 8106820:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8106822:	4938      	ldr	r1, [pc, #224]	; (8106904 <HAL_GPIO_Init+0x35c>)
 8106824:	69fb      	ldr	r3, [r7, #28]
 8106826:	089b      	lsrs	r3, r3, #2
 8106828:	3302      	adds	r3, #2
 810682a:	69ba      	ldr	r2, [r7, #24]
 810682c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8106830:	697b      	ldr	r3, [r7, #20]
 8106832:	681b      	ldr	r3, [r3, #0]
 8106834:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8106836:	693b      	ldr	r3, [r7, #16]
 8106838:	43db      	mvns	r3, r3
 810683a:	69ba      	ldr	r2, [r7, #24]
 810683c:	4013      	ands	r3, r2
 810683e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8106840:	683b      	ldr	r3, [r7, #0]
 8106842:	685b      	ldr	r3, [r3, #4]
 8106844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8106848:	2b00      	cmp	r3, #0
 810684a:	d003      	beq.n	8106854 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 810684c:	69ba      	ldr	r2, [r7, #24]
 810684e:	693b      	ldr	r3, [r7, #16]
 8106850:	4313      	orrs	r3, r2
 8106852:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8106854:	697b      	ldr	r3, [r7, #20]
 8106856:	69ba      	ldr	r2, [r7, #24]
 8106858:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 810685a:	697b      	ldr	r3, [r7, #20]
 810685c:	685b      	ldr	r3, [r3, #4]
 810685e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8106860:	693b      	ldr	r3, [r7, #16]
 8106862:	43db      	mvns	r3, r3
 8106864:	69ba      	ldr	r2, [r7, #24]
 8106866:	4013      	ands	r3, r2
 8106868:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 810686a:	683b      	ldr	r3, [r7, #0]
 810686c:	685b      	ldr	r3, [r3, #4]
 810686e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106872:	2b00      	cmp	r3, #0
 8106874:	d003      	beq.n	810687e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8106876:	69ba      	ldr	r2, [r7, #24]
 8106878:	693b      	ldr	r3, [r7, #16]
 810687a:	4313      	orrs	r3, r2
 810687c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 810687e:	697b      	ldr	r3, [r7, #20]
 8106880:	69ba      	ldr	r2, [r7, #24]
 8106882:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8106884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8106888:	681b      	ldr	r3, [r3, #0]
 810688a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810688c:	693b      	ldr	r3, [r7, #16]
 810688e:	43db      	mvns	r3, r3
 8106890:	69ba      	ldr	r2, [r7, #24]
 8106892:	4013      	ands	r3, r2
 8106894:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8106896:	683b      	ldr	r3, [r7, #0]
 8106898:	685b      	ldr	r3, [r3, #4]
 810689a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810689e:	2b00      	cmp	r3, #0
 81068a0:	d003      	beq.n	81068aa <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 81068a2:	69ba      	ldr	r2, [r7, #24]
 81068a4:	693b      	ldr	r3, [r7, #16]
 81068a6:	4313      	orrs	r3, r2
 81068a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81068aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81068ae:	69bb      	ldr	r3, [r7, #24]
 81068b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81068b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81068b6:	685b      	ldr	r3, [r3, #4]
 81068b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81068ba:	693b      	ldr	r3, [r7, #16]
 81068bc:	43db      	mvns	r3, r3
 81068be:	69ba      	ldr	r2, [r7, #24]
 81068c0:	4013      	ands	r3, r2
 81068c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 81068c4:	683b      	ldr	r3, [r7, #0]
 81068c6:	685b      	ldr	r3, [r3, #4]
 81068c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81068cc:	2b00      	cmp	r3, #0
 81068ce:	d003      	beq.n	81068d8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 81068d0:	69ba      	ldr	r2, [r7, #24]
 81068d2:	693b      	ldr	r3, [r7, #16]
 81068d4:	4313      	orrs	r3, r2
 81068d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81068d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81068dc:	69bb      	ldr	r3, [r7, #24]
 81068de:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 81068e0:	69fb      	ldr	r3, [r7, #28]
 81068e2:	3301      	adds	r3, #1
 81068e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81068e6:	683b      	ldr	r3, [r7, #0]
 81068e8:	681a      	ldr	r2, [r3, #0]
 81068ea:	69fb      	ldr	r3, [r7, #28]
 81068ec:	fa22 f303 	lsr.w	r3, r2, r3
 81068f0:	2b00      	cmp	r3, #0
 81068f2:	f47f ae63 	bne.w	81065bc <HAL_GPIO_Init+0x14>
  }
}
 81068f6:	bf00      	nop
 81068f8:	bf00      	nop
 81068fa:	3724      	adds	r7, #36	; 0x24
 81068fc:	46bd      	mov	sp, r7
 81068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106902:	4770      	bx	lr
 8106904:	58000400 	.word	0x58000400

08106908 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8106908:	b480      	push	{r7}
 810690a:	b083      	sub	sp, #12
 810690c:	af00      	add	r7, sp, #0
 810690e:	6078      	str	r0, [r7, #4]
 8106910:	460b      	mov	r3, r1
 8106912:	807b      	strh	r3, [r7, #2]
 8106914:	4613      	mov	r3, r2
 8106916:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8106918:	787b      	ldrb	r3, [r7, #1]
 810691a:	2b00      	cmp	r3, #0
 810691c:	d003      	beq.n	8106926 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 810691e:	887a      	ldrh	r2, [r7, #2]
 8106920:	687b      	ldr	r3, [r7, #4]
 8106922:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8106924:	e003      	b.n	810692e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8106926:	887b      	ldrh	r3, [r7, #2]
 8106928:	041a      	lsls	r2, r3, #16
 810692a:	687b      	ldr	r3, [r7, #4]
 810692c:	619a      	str	r2, [r3, #24]
}
 810692e:	bf00      	nop
 8106930:	370c      	adds	r7, #12
 8106932:	46bd      	mov	sp, r7
 8106934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106938:	4770      	bx	lr

0810693a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 810693a:	b480      	push	{r7}
 810693c:	b085      	sub	sp, #20
 810693e:	af00      	add	r7, sp, #0
 8106940:	6078      	str	r0, [r7, #4]
 8106942:	460b      	mov	r3, r1
 8106944:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8106946:	687b      	ldr	r3, [r7, #4]
 8106948:	695b      	ldr	r3, [r3, #20]
 810694a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 810694c:	887a      	ldrh	r2, [r7, #2]
 810694e:	68fb      	ldr	r3, [r7, #12]
 8106950:	4013      	ands	r3, r2
 8106952:	041a      	lsls	r2, r3, #16
 8106954:	68fb      	ldr	r3, [r7, #12]
 8106956:	43d9      	mvns	r1, r3
 8106958:	887b      	ldrh	r3, [r7, #2]
 810695a:	400b      	ands	r3, r1
 810695c:	431a      	orrs	r2, r3
 810695e:	687b      	ldr	r3, [r7, #4]
 8106960:	619a      	str	r2, [r3, #24]
}
 8106962:	bf00      	nop
 8106964:	3714      	adds	r7, #20
 8106966:	46bd      	mov	sp, r7
 8106968:	f85d 7b04 	ldr.w	r7, [sp], #4
 810696c:	4770      	bx	lr
	...

08106970 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8106970:	b480      	push	{r7}
 8106972:	b083      	sub	sp, #12
 8106974:	af00      	add	r7, sp, #0
 8106976:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8106978:	4b05      	ldr	r3, [pc, #20]	; (8106990 <HAL_HSEM_ActivateNotification+0x20>)
 810697a:	681a      	ldr	r2, [r3, #0]
 810697c:	4904      	ldr	r1, [pc, #16]	; (8106990 <HAL_HSEM_ActivateNotification+0x20>)
 810697e:	687b      	ldr	r3, [r7, #4]
 8106980:	4313      	orrs	r3, r2
 8106982:	600b      	str	r3, [r1, #0]
#endif
}
 8106984:	bf00      	nop
 8106986:	370c      	adds	r7, #12
 8106988:	46bd      	mov	sp, r7
 810698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810698e:	4770      	bx	lr
 8106990:	58026510 	.word	0x58026510

08106994 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8106994:	b580      	push	{r7, lr}
 8106996:	b084      	sub	sp, #16
 8106998:	af00      	add	r7, sp, #0
 810699a:	60f8      	str	r0, [r7, #12]
 810699c:	460b      	mov	r3, r1
 810699e:	607a      	str	r2, [r7, #4]
 81069a0:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81069a2:	4b37      	ldr	r3, [pc, #220]	; (8106a80 <HAL_PWREx_EnterSTOPMode+0xec>)
 81069a4:	681b      	ldr	r3, [r3, #0]
 81069a6:	f023 0201 	bic.w	r2, r3, #1
 81069aa:	4935      	ldr	r1, [pc, #212]	; (8106a80 <HAL_PWREx_EnterSTOPMode+0xec>)
 81069ac:	68fb      	ldr	r3, [r7, #12]
 81069ae:	4313      	orrs	r3, r2
 81069b0:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81069b2:	687b      	ldr	r3, [r7, #4]
 81069b4:	2b00      	cmp	r3, #0
 81069b6:	d123      	bne.n	8106a00 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81069b8:	f7fc ffaa 	bl	8103910 <HAL_GetCurrentCPUID>
 81069bc:	4603      	mov	r3, r0
 81069be:	2b03      	cmp	r3, #3
 81069c0:	d158      	bne.n	8106a74 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81069c2:	4b2f      	ldr	r3, [pc, #188]	; (8106a80 <HAL_PWREx_EnterSTOPMode+0xec>)
 81069c4:	691b      	ldr	r3, [r3, #16]
 81069c6:	4a2e      	ldr	r2, [pc, #184]	; (8106a80 <HAL_PWREx_EnterSTOPMode+0xec>)
 81069c8:	f023 0301 	bic.w	r3, r3, #1
 81069cc:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81069ce:	4b2d      	ldr	r3, [pc, #180]	; (8106a84 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81069d0:	691b      	ldr	r3, [r3, #16]
 81069d2:	4a2c      	ldr	r2, [pc, #176]	; (8106a84 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81069d4:	f043 0304 	orr.w	r3, r3, #4
 81069d8:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81069da:	f3bf 8f4f 	dsb	sy
}
 81069de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81069e0:	f3bf 8f6f 	isb	sy
}
 81069e4:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81069e6:	7afb      	ldrb	r3, [r7, #11]
 81069e8:	2b01      	cmp	r3, #1
 81069ea:	d101      	bne.n	81069f0 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81069ec:	bf30      	wfi
 81069ee:	e000      	b.n	81069f2 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81069f0:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81069f2:	4b24      	ldr	r3, [pc, #144]	; (8106a84 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81069f4:	691b      	ldr	r3, [r3, #16]
 81069f6:	4a23      	ldr	r2, [pc, #140]	; (8106a84 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81069f8:	f023 0304 	bic.w	r3, r3, #4
 81069fc:	6113      	str	r3, [r2, #16]
 81069fe:	e03c      	b.n	8106a7a <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8106a00:	687b      	ldr	r3, [r7, #4]
 8106a02:	2b01      	cmp	r3, #1
 8106a04:	d123      	bne.n	8106a4e <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8106a06:	f7fc ff83 	bl	8103910 <HAL_GetCurrentCPUID>
 8106a0a:	4603      	mov	r3, r0
 8106a0c:	2b01      	cmp	r3, #1
 8106a0e:	d133      	bne.n	8106a78 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8106a10:	4b1b      	ldr	r3, [pc, #108]	; (8106a80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106a12:	695b      	ldr	r3, [r3, #20]
 8106a14:	4a1a      	ldr	r2, [pc, #104]	; (8106a80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106a16:	f023 0302 	bic.w	r3, r3, #2
 8106a1a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8106a1c:	4b19      	ldr	r3, [pc, #100]	; (8106a84 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106a1e:	691b      	ldr	r3, [r3, #16]
 8106a20:	4a18      	ldr	r2, [pc, #96]	; (8106a84 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106a22:	f043 0304 	orr.w	r3, r3, #4
 8106a26:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8106a28:	f3bf 8f4f 	dsb	sy
}
 8106a2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8106a2e:	f3bf 8f6f 	isb	sy
}
 8106a32:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8106a34:	7afb      	ldrb	r3, [r7, #11]
 8106a36:	2b01      	cmp	r3, #1
 8106a38:	d101      	bne.n	8106a3e <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8106a3a:	bf30      	wfi
 8106a3c:	e000      	b.n	8106a40 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8106a3e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8106a40:	4b10      	ldr	r3, [pc, #64]	; (8106a84 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106a42:	691b      	ldr	r3, [r3, #16]
 8106a44:	4a0f      	ldr	r2, [pc, #60]	; (8106a84 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106a46:	f023 0304 	bic.w	r3, r3, #4
 8106a4a:	6113      	str	r3, [r2, #16]
 8106a4c:	e015      	b.n	8106a7a <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8106a4e:	f7fc ff5f 	bl	8103910 <HAL_GetCurrentCPUID>
 8106a52:	4603      	mov	r3, r0
 8106a54:	2b03      	cmp	r3, #3
 8106a56:	d106      	bne.n	8106a66 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8106a58:	4b09      	ldr	r3, [pc, #36]	; (8106a80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106a5a:	691b      	ldr	r3, [r3, #16]
 8106a5c:	4a08      	ldr	r2, [pc, #32]	; (8106a80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106a5e:	f023 0304 	bic.w	r3, r3, #4
 8106a62:	6113      	str	r3, [r2, #16]
 8106a64:	e009      	b.n	8106a7a <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8106a66:	4b06      	ldr	r3, [pc, #24]	; (8106a80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106a68:	695b      	ldr	r3, [r3, #20]
 8106a6a:	4a05      	ldr	r2, [pc, #20]	; (8106a80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106a6c:	f023 0304 	bic.w	r3, r3, #4
 8106a70:	6153      	str	r3, [r2, #20]
 8106a72:	e002      	b.n	8106a7a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8106a74:	bf00      	nop
 8106a76:	e000      	b.n	8106a7a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8106a78:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8106a7a:	3710      	adds	r7, #16
 8106a7c:	46bd      	mov	sp, r7
 8106a7e:	bd80      	pop	{r7, pc}
 8106a80:	58024800 	.word	0x58024800
 8106a84:	e000ed00 	.word	0xe000ed00

08106a88 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8106a88:	b580      	push	{r7, lr}
 8106a8a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8106a8c:	f7fc ff40 	bl	8103910 <HAL_GetCurrentCPUID>
 8106a90:	4603      	mov	r3, r0
 8106a92:	2b03      	cmp	r3, #3
 8106a94:	d101      	bne.n	8106a9a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8106a96:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8106a98:	e001      	b.n	8106a9e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8106a9a:	bf40      	sev
    __WFE ();
 8106a9c:	bf20      	wfe
}
 8106a9e:	bf00      	nop
 8106aa0:	bd80      	pop	{r7, pc}
	...

08106aa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8106aa4:	b480      	push	{r7}
 8106aa6:	b089      	sub	sp, #36	; 0x24
 8106aa8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8106aaa:	4bb3      	ldr	r3, [pc, #716]	; (8106d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106aac:	691b      	ldr	r3, [r3, #16]
 8106aae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8106ab2:	2b18      	cmp	r3, #24
 8106ab4:	f200 8155 	bhi.w	8106d62 <HAL_RCC_GetSysClockFreq+0x2be>
 8106ab8:	a201      	add	r2, pc, #4	; (adr r2, 8106ac0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8106aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106abe:	bf00      	nop
 8106ac0:	08106b25 	.word	0x08106b25
 8106ac4:	08106d63 	.word	0x08106d63
 8106ac8:	08106d63 	.word	0x08106d63
 8106acc:	08106d63 	.word	0x08106d63
 8106ad0:	08106d63 	.word	0x08106d63
 8106ad4:	08106d63 	.word	0x08106d63
 8106ad8:	08106d63 	.word	0x08106d63
 8106adc:	08106d63 	.word	0x08106d63
 8106ae0:	08106b4b 	.word	0x08106b4b
 8106ae4:	08106d63 	.word	0x08106d63
 8106ae8:	08106d63 	.word	0x08106d63
 8106aec:	08106d63 	.word	0x08106d63
 8106af0:	08106d63 	.word	0x08106d63
 8106af4:	08106d63 	.word	0x08106d63
 8106af8:	08106d63 	.word	0x08106d63
 8106afc:	08106d63 	.word	0x08106d63
 8106b00:	08106b51 	.word	0x08106b51
 8106b04:	08106d63 	.word	0x08106d63
 8106b08:	08106d63 	.word	0x08106d63
 8106b0c:	08106d63 	.word	0x08106d63
 8106b10:	08106d63 	.word	0x08106d63
 8106b14:	08106d63 	.word	0x08106d63
 8106b18:	08106d63 	.word	0x08106d63
 8106b1c:	08106d63 	.word	0x08106d63
 8106b20:	08106b57 	.word	0x08106b57
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106b24:	4b94      	ldr	r3, [pc, #592]	; (8106d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106b26:	681b      	ldr	r3, [r3, #0]
 8106b28:	f003 0320 	and.w	r3, r3, #32
 8106b2c:	2b00      	cmp	r3, #0
 8106b2e:	d009      	beq.n	8106b44 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106b30:	4b91      	ldr	r3, [pc, #580]	; (8106d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106b32:	681b      	ldr	r3, [r3, #0]
 8106b34:	08db      	lsrs	r3, r3, #3
 8106b36:	f003 0303 	and.w	r3, r3, #3
 8106b3a:	4a90      	ldr	r2, [pc, #576]	; (8106d7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8106b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8106b40:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8106b42:	e111      	b.n	8106d68 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8106b44:	4b8d      	ldr	r3, [pc, #564]	; (8106d7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8106b46:	61bb      	str	r3, [r7, #24]
    break;
 8106b48:	e10e      	b.n	8106d68 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8106b4a:	4b8d      	ldr	r3, [pc, #564]	; (8106d80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8106b4c:	61bb      	str	r3, [r7, #24]
    break;
 8106b4e:	e10b      	b.n	8106d68 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8106b50:	4b8c      	ldr	r3, [pc, #560]	; (8106d84 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8106b52:	61bb      	str	r3, [r7, #24]
    break;
 8106b54:	e108      	b.n	8106d68 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106b56:	4b88      	ldr	r3, [pc, #544]	; (8106d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106b5a:	f003 0303 	and.w	r3, r3, #3
 8106b5e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8106b60:	4b85      	ldr	r3, [pc, #532]	; (8106d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106b64:	091b      	lsrs	r3, r3, #4
 8106b66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8106b6a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8106b6c:	4b82      	ldr	r3, [pc, #520]	; (8106d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106b70:	f003 0301 	and.w	r3, r3, #1
 8106b74:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8106b76:	4b80      	ldr	r3, [pc, #512]	; (8106d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8106b7a:	08db      	lsrs	r3, r3, #3
 8106b7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106b80:	68fa      	ldr	r2, [r7, #12]
 8106b82:	fb02 f303 	mul.w	r3, r2, r3
 8106b86:	ee07 3a90 	vmov	s15, r3
 8106b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106b8e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8106b92:	693b      	ldr	r3, [r7, #16]
 8106b94:	2b00      	cmp	r3, #0
 8106b96:	f000 80e1 	beq.w	8106d5c <HAL_RCC_GetSysClockFreq+0x2b8>
 8106b9a:	697b      	ldr	r3, [r7, #20]
 8106b9c:	2b02      	cmp	r3, #2
 8106b9e:	f000 8083 	beq.w	8106ca8 <HAL_RCC_GetSysClockFreq+0x204>
 8106ba2:	697b      	ldr	r3, [r7, #20]
 8106ba4:	2b02      	cmp	r3, #2
 8106ba6:	f200 80a1 	bhi.w	8106cec <HAL_RCC_GetSysClockFreq+0x248>
 8106baa:	697b      	ldr	r3, [r7, #20]
 8106bac:	2b00      	cmp	r3, #0
 8106bae:	d003      	beq.n	8106bb8 <HAL_RCC_GetSysClockFreq+0x114>
 8106bb0:	697b      	ldr	r3, [r7, #20]
 8106bb2:	2b01      	cmp	r3, #1
 8106bb4:	d056      	beq.n	8106c64 <HAL_RCC_GetSysClockFreq+0x1c0>
 8106bb6:	e099      	b.n	8106cec <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106bb8:	4b6f      	ldr	r3, [pc, #444]	; (8106d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106bba:	681b      	ldr	r3, [r3, #0]
 8106bbc:	f003 0320 	and.w	r3, r3, #32
 8106bc0:	2b00      	cmp	r3, #0
 8106bc2:	d02d      	beq.n	8106c20 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106bc4:	4b6c      	ldr	r3, [pc, #432]	; (8106d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106bc6:	681b      	ldr	r3, [r3, #0]
 8106bc8:	08db      	lsrs	r3, r3, #3
 8106bca:	f003 0303 	and.w	r3, r3, #3
 8106bce:	4a6b      	ldr	r2, [pc, #428]	; (8106d7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8106bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8106bd4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106bd6:	687b      	ldr	r3, [r7, #4]
 8106bd8:	ee07 3a90 	vmov	s15, r3
 8106bdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106be0:	693b      	ldr	r3, [r7, #16]
 8106be2:	ee07 3a90 	vmov	s15, r3
 8106be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106bee:	4b62      	ldr	r3, [pc, #392]	; (8106d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106bf6:	ee07 3a90 	vmov	s15, r3
 8106bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106bfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8106c02:	eddf 5a61 	vldr	s11, [pc, #388]	; 8106d88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106c06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106c0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106c0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106c1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8106c1e:	e087      	b.n	8106d30 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106c20:	693b      	ldr	r3, [r7, #16]
 8106c22:	ee07 3a90 	vmov	s15, r3
 8106c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106c2a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8106d8c <HAL_RCC_GetSysClockFreq+0x2e8>
 8106c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106c32:	4b51      	ldr	r3, [pc, #324]	; (8106d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106c3a:	ee07 3a90 	vmov	s15, r3
 8106c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106c42:	ed97 6a02 	vldr	s12, [r7, #8]
 8106c46:	eddf 5a50 	vldr	s11, [pc, #320]	; 8106d88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106c52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106c5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106c62:	e065      	b.n	8106d30 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106c64:	693b      	ldr	r3, [r7, #16]
 8106c66:	ee07 3a90 	vmov	s15, r3
 8106c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106c6e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8106d90 <HAL_RCC_GetSysClockFreq+0x2ec>
 8106c72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106c76:	4b40      	ldr	r3, [pc, #256]	; (8106d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106c7e:	ee07 3a90 	vmov	s15, r3
 8106c82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106c86:	ed97 6a02 	vldr	s12, [r7, #8]
 8106c8a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8106d88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106c8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106c92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106c96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106c9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106ca2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106ca6:	e043      	b.n	8106d30 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106ca8:	693b      	ldr	r3, [r7, #16]
 8106caa:	ee07 3a90 	vmov	s15, r3
 8106cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106cb2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8106d94 <HAL_RCC_GetSysClockFreq+0x2f0>
 8106cb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106cba:	4b2f      	ldr	r3, [pc, #188]	; (8106d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106cc2:	ee07 3a90 	vmov	s15, r3
 8106cc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106cca:	ed97 6a02 	vldr	s12, [r7, #8]
 8106cce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8106d88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106cd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106cda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106ce6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106cea:	e021      	b.n	8106d30 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106cec:	693b      	ldr	r3, [r7, #16]
 8106cee:	ee07 3a90 	vmov	s15, r3
 8106cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106cf6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8106d90 <HAL_RCC_GetSysClockFreq+0x2ec>
 8106cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106cfe:	4b1e      	ldr	r3, [pc, #120]	; (8106d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106d06:	ee07 3a90 	vmov	s15, r3
 8106d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106d0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8106d12:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8106d88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106d1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106d2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106d2e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8106d30:	4b11      	ldr	r3, [pc, #68]	; (8106d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106d34:	0a5b      	lsrs	r3, r3, #9
 8106d36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106d3a:	3301      	adds	r3, #1
 8106d3c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8106d3e:	683b      	ldr	r3, [r7, #0]
 8106d40:	ee07 3a90 	vmov	s15, r3
 8106d44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8106d48:	edd7 6a07 	vldr	s13, [r7, #28]
 8106d4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106d50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106d54:	ee17 3a90 	vmov	r3, s15
 8106d58:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8106d5a:	e005      	b.n	8106d68 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8106d5c:	2300      	movs	r3, #0
 8106d5e:	61bb      	str	r3, [r7, #24]
    break;
 8106d60:	e002      	b.n	8106d68 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8106d62:	4b07      	ldr	r3, [pc, #28]	; (8106d80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8106d64:	61bb      	str	r3, [r7, #24]
    break;
 8106d66:	bf00      	nop
  }

  return sysclockfreq;
 8106d68:	69bb      	ldr	r3, [r7, #24]
}
 8106d6a:	4618      	mov	r0, r3
 8106d6c:	3724      	adds	r7, #36	; 0x24
 8106d6e:	46bd      	mov	sp, r7
 8106d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d74:	4770      	bx	lr
 8106d76:	bf00      	nop
 8106d78:	58024400 	.word	0x58024400
 8106d7c:	03d09000 	.word	0x03d09000
 8106d80:	003d0900 	.word	0x003d0900
 8106d84:	017d7840 	.word	0x017d7840
 8106d88:	46000000 	.word	0x46000000
 8106d8c:	4c742400 	.word	0x4c742400
 8106d90:	4a742400 	.word	0x4a742400
 8106d94:	4bbebc20 	.word	0x4bbebc20

08106d98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8106d98:	b580      	push	{r7, lr}
 8106d9a:	b082      	sub	sp, #8
 8106d9c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8106d9e:	f7ff fe81 	bl	8106aa4 <HAL_RCC_GetSysClockFreq>
 8106da2:	4602      	mov	r2, r0
 8106da4:	4b11      	ldr	r3, [pc, #68]	; (8106dec <HAL_RCC_GetHCLKFreq+0x54>)
 8106da6:	699b      	ldr	r3, [r3, #24]
 8106da8:	0a1b      	lsrs	r3, r3, #8
 8106daa:	f003 030f 	and.w	r3, r3, #15
 8106dae:	4910      	ldr	r1, [pc, #64]	; (8106df0 <HAL_RCC_GetHCLKFreq+0x58>)
 8106db0:	5ccb      	ldrb	r3, [r1, r3]
 8106db2:	f003 031f 	and.w	r3, r3, #31
 8106db6:	fa22 f303 	lsr.w	r3, r2, r3
 8106dba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8106dbc:	4b0b      	ldr	r3, [pc, #44]	; (8106dec <HAL_RCC_GetHCLKFreq+0x54>)
 8106dbe:	699b      	ldr	r3, [r3, #24]
 8106dc0:	f003 030f 	and.w	r3, r3, #15
 8106dc4:	4a0a      	ldr	r2, [pc, #40]	; (8106df0 <HAL_RCC_GetHCLKFreq+0x58>)
 8106dc6:	5cd3      	ldrb	r3, [r2, r3]
 8106dc8:	f003 031f 	and.w	r3, r3, #31
 8106dcc:	687a      	ldr	r2, [r7, #4]
 8106dce:	fa22 f303 	lsr.w	r3, r2, r3
 8106dd2:	4a08      	ldr	r2, [pc, #32]	; (8106df4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8106dd4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8106dd6:	4b07      	ldr	r3, [pc, #28]	; (8106df4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8106dd8:	681b      	ldr	r3, [r3, #0]
 8106dda:	4a07      	ldr	r2, [pc, #28]	; (8106df8 <HAL_RCC_GetHCLKFreq+0x60>)
 8106ddc:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8106dde:	4b05      	ldr	r3, [pc, #20]	; (8106df4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8106de0:	681b      	ldr	r3, [r3, #0]
}
 8106de2:	4618      	mov	r0, r3
 8106de4:	3708      	adds	r7, #8
 8106de6:	46bd      	mov	sp, r7
 8106de8:	bd80      	pop	{r7, pc}
 8106dea:	bf00      	nop
 8106dec:	58024400 	.word	0x58024400
 8106df0:	08110244 	.word	0x08110244
 8106df4:	10000004 	.word	0x10000004
 8106df8:	10000000 	.word	0x10000000

08106dfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8106dfc:	b580      	push	{r7, lr}
 8106dfe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8106e00:	f7ff ffca 	bl	8106d98 <HAL_RCC_GetHCLKFreq>
 8106e04:	4602      	mov	r2, r0
 8106e06:	4b06      	ldr	r3, [pc, #24]	; (8106e20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8106e08:	69db      	ldr	r3, [r3, #28]
 8106e0a:	091b      	lsrs	r3, r3, #4
 8106e0c:	f003 0307 	and.w	r3, r3, #7
 8106e10:	4904      	ldr	r1, [pc, #16]	; (8106e24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8106e12:	5ccb      	ldrb	r3, [r1, r3]
 8106e14:	f003 031f 	and.w	r3, r3, #31
 8106e18:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8106e1c:	4618      	mov	r0, r3
 8106e1e:	bd80      	pop	{r7, pc}
 8106e20:	58024400 	.word	0x58024400
 8106e24:	08110244 	.word	0x08110244

08106e28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8106e28:	b580      	push	{r7, lr}
 8106e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8106e2c:	f7ff ffb4 	bl	8106d98 <HAL_RCC_GetHCLKFreq>
 8106e30:	4602      	mov	r2, r0
 8106e32:	4b06      	ldr	r3, [pc, #24]	; (8106e4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8106e34:	69db      	ldr	r3, [r3, #28]
 8106e36:	0a1b      	lsrs	r3, r3, #8
 8106e38:	f003 0307 	and.w	r3, r3, #7
 8106e3c:	4904      	ldr	r1, [pc, #16]	; (8106e50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8106e3e:	5ccb      	ldrb	r3, [r1, r3]
 8106e40:	f003 031f 	and.w	r3, r3, #31
 8106e44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8106e48:	4618      	mov	r0, r3
 8106e4a:	bd80      	pop	{r7, pc}
 8106e4c:	58024400 	.word	0x58024400
 8106e50:	08110244 	.word	0x08110244

08106e54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8106e54:	b480      	push	{r7}
 8106e56:	b083      	sub	sp, #12
 8106e58:	af00      	add	r7, sp, #0
 8106e5a:	6078      	str	r0, [r7, #4]
 8106e5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8106e5e:	687b      	ldr	r3, [r7, #4]
 8106e60:	223f      	movs	r2, #63	; 0x3f
 8106e62:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8106e64:	4b1a      	ldr	r3, [pc, #104]	; (8106ed0 <HAL_RCC_GetClockConfig+0x7c>)
 8106e66:	691b      	ldr	r3, [r3, #16]
 8106e68:	f003 0207 	and.w	r2, r3, #7
 8106e6c:	687b      	ldr	r3, [r7, #4]
 8106e6e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8106e70:	4b17      	ldr	r3, [pc, #92]	; (8106ed0 <HAL_RCC_GetClockConfig+0x7c>)
 8106e72:	699b      	ldr	r3, [r3, #24]
 8106e74:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8106e78:	687b      	ldr	r3, [r7, #4]
 8106e7a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8106e7c:	4b14      	ldr	r3, [pc, #80]	; (8106ed0 <HAL_RCC_GetClockConfig+0x7c>)
 8106e7e:	699b      	ldr	r3, [r3, #24]
 8106e80:	f003 020f 	and.w	r2, r3, #15
 8106e84:	687b      	ldr	r3, [r7, #4]
 8106e86:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8106e88:	4b11      	ldr	r3, [pc, #68]	; (8106ed0 <HAL_RCC_GetClockConfig+0x7c>)
 8106e8a:	699b      	ldr	r3, [r3, #24]
 8106e8c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8106e90:	687b      	ldr	r3, [r7, #4]
 8106e92:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8106e94:	4b0e      	ldr	r3, [pc, #56]	; (8106ed0 <HAL_RCC_GetClockConfig+0x7c>)
 8106e96:	69db      	ldr	r3, [r3, #28]
 8106e98:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8106e9c:	687b      	ldr	r3, [r7, #4]
 8106e9e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8106ea0:	4b0b      	ldr	r3, [pc, #44]	; (8106ed0 <HAL_RCC_GetClockConfig+0x7c>)
 8106ea2:	69db      	ldr	r3, [r3, #28]
 8106ea4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8106ea8:	687b      	ldr	r3, [r7, #4]
 8106eaa:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8106eac:	4b08      	ldr	r3, [pc, #32]	; (8106ed0 <HAL_RCC_GetClockConfig+0x7c>)
 8106eae:	6a1b      	ldr	r3, [r3, #32]
 8106eb0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8106eb4:	687b      	ldr	r3, [r7, #4]
 8106eb6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8106eb8:	4b06      	ldr	r3, [pc, #24]	; (8106ed4 <HAL_RCC_GetClockConfig+0x80>)
 8106eba:	681b      	ldr	r3, [r3, #0]
 8106ebc:	f003 020f 	and.w	r2, r3, #15
 8106ec0:	683b      	ldr	r3, [r7, #0]
 8106ec2:	601a      	str	r2, [r3, #0]
}
 8106ec4:	bf00      	nop
 8106ec6:	370c      	adds	r7, #12
 8106ec8:	46bd      	mov	sp, r7
 8106eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106ece:	4770      	bx	lr
 8106ed0:	58024400 	.word	0x58024400
 8106ed4:	52002000 	.word	0x52002000

08106ed8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8106ed8:	b580      	push	{r7, lr}
 8106eda:	b086      	sub	sp, #24
 8106edc:	af00      	add	r7, sp, #0
 8106ede:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8106ee0:	2300      	movs	r3, #0
 8106ee2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8106ee4:	2300      	movs	r3, #0
 8106ee6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8106ee8:	687b      	ldr	r3, [r7, #4]
 8106eea:	681b      	ldr	r3, [r3, #0]
 8106eec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106ef0:	2b00      	cmp	r3, #0
 8106ef2:	d03f      	beq.n	8106f74 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8106ef4:	687b      	ldr	r3, [r7, #4]
 8106ef6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106ef8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8106efc:	d02a      	beq.n	8106f54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8106efe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8106f02:	d824      	bhi.n	8106f4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8106f04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8106f08:	d018      	beq.n	8106f3c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8106f0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8106f0e:	d81e      	bhi.n	8106f4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8106f10:	2b00      	cmp	r3, #0
 8106f12:	d003      	beq.n	8106f1c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8106f14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8106f18:	d007      	beq.n	8106f2a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8106f1a:	e018      	b.n	8106f4e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106f1c:	4bab      	ldr	r3, [pc, #684]	; (81071cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106f20:	4aaa      	ldr	r2, [pc, #680]	; (81071cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106f26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8106f28:	e015      	b.n	8106f56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8106f2a:	687b      	ldr	r3, [r7, #4]
 8106f2c:	3304      	adds	r3, #4
 8106f2e:	2102      	movs	r1, #2
 8106f30:	4618      	mov	r0, r3
 8106f32:	f001 fff3 	bl	8108f1c <RCCEx_PLL2_Config>
 8106f36:	4603      	mov	r3, r0
 8106f38:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8106f3a:	e00c      	b.n	8106f56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8106f3c:	687b      	ldr	r3, [r7, #4]
 8106f3e:	3324      	adds	r3, #36	; 0x24
 8106f40:	2102      	movs	r1, #2
 8106f42:	4618      	mov	r0, r3
 8106f44:	f002 f89c 	bl	8109080 <RCCEx_PLL3_Config>
 8106f48:	4603      	mov	r3, r0
 8106f4a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8106f4c:	e003      	b.n	8106f56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106f4e:	2301      	movs	r3, #1
 8106f50:	75fb      	strb	r3, [r7, #23]
      break;
 8106f52:	e000      	b.n	8106f56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8106f54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106f56:	7dfb      	ldrb	r3, [r7, #23]
 8106f58:	2b00      	cmp	r3, #0
 8106f5a:	d109      	bne.n	8106f70 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8106f5c:	4b9b      	ldr	r3, [pc, #620]	; (81071cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106f60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8106f64:	687b      	ldr	r3, [r7, #4]
 8106f66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106f68:	4998      	ldr	r1, [pc, #608]	; (81071cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106f6a:	4313      	orrs	r3, r2
 8106f6c:	650b      	str	r3, [r1, #80]	; 0x50
 8106f6e:	e001      	b.n	8106f74 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106f70:	7dfb      	ldrb	r3, [r7, #23]
 8106f72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8106f74:	687b      	ldr	r3, [r7, #4]
 8106f76:	681b      	ldr	r3, [r3, #0]
 8106f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106f7c:	2b00      	cmp	r3, #0
 8106f7e:	d03d      	beq.n	8106ffc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8106f80:	687b      	ldr	r3, [r7, #4]
 8106f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106f84:	2b04      	cmp	r3, #4
 8106f86:	d826      	bhi.n	8106fd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8106f88:	a201      	add	r2, pc, #4	; (adr r2, 8106f90 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8106f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106f8e:	bf00      	nop
 8106f90:	08106fa5 	.word	0x08106fa5
 8106f94:	08106fb3 	.word	0x08106fb3
 8106f98:	08106fc5 	.word	0x08106fc5
 8106f9c:	08106fdd 	.word	0x08106fdd
 8106fa0:	08106fdd 	.word	0x08106fdd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106fa4:	4b89      	ldr	r3, [pc, #548]	; (81071cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106fa8:	4a88      	ldr	r2, [pc, #544]	; (81071cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106faa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106fae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8106fb0:	e015      	b.n	8106fde <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8106fb2:	687b      	ldr	r3, [r7, #4]
 8106fb4:	3304      	adds	r3, #4
 8106fb6:	2100      	movs	r1, #0
 8106fb8:	4618      	mov	r0, r3
 8106fba:	f001 ffaf 	bl	8108f1c <RCCEx_PLL2_Config>
 8106fbe:	4603      	mov	r3, r0
 8106fc0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8106fc2:	e00c      	b.n	8106fde <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8106fc4:	687b      	ldr	r3, [r7, #4]
 8106fc6:	3324      	adds	r3, #36	; 0x24
 8106fc8:	2100      	movs	r1, #0
 8106fca:	4618      	mov	r0, r3
 8106fcc:	f002 f858 	bl	8109080 <RCCEx_PLL3_Config>
 8106fd0:	4603      	mov	r3, r0
 8106fd2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8106fd4:	e003      	b.n	8106fde <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106fd6:	2301      	movs	r3, #1
 8106fd8:	75fb      	strb	r3, [r7, #23]
      break;
 8106fda:	e000      	b.n	8106fde <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8106fdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106fde:	7dfb      	ldrb	r3, [r7, #23]
 8106fe0:	2b00      	cmp	r3, #0
 8106fe2:	d109      	bne.n	8106ff8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8106fe4:	4b79      	ldr	r3, [pc, #484]	; (81071cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106fe8:	f023 0207 	bic.w	r2, r3, #7
 8106fec:	687b      	ldr	r3, [r7, #4]
 8106fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106ff0:	4976      	ldr	r1, [pc, #472]	; (81071cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106ff2:	4313      	orrs	r3, r2
 8106ff4:	650b      	str	r3, [r1, #80]	; 0x50
 8106ff6:	e001      	b.n	8106ffc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106ff8:	7dfb      	ldrb	r3, [r7, #23]
 8106ffa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8106ffc:	687b      	ldr	r3, [r7, #4]
 8106ffe:	681b      	ldr	r3, [r3, #0]
 8107000:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8107004:	2b00      	cmp	r3, #0
 8107006:	d042      	beq.n	810708e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8107008:	687b      	ldr	r3, [r7, #4]
 810700a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810700c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107010:	d02b      	beq.n	810706a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8107012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107016:	d825      	bhi.n	8107064 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8107018:	2bc0      	cmp	r3, #192	; 0xc0
 810701a:	d028      	beq.n	810706e <HAL_RCCEx_PeriphCLKConfig+0x196>
 810701c:	2bc0      	cmp	r3, #192	; 0xc0
 810701e:	d821      	bhi.n	8107064 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8107020:	2b80      	cmp	r3, #128	; 0x80
 8107022:	d016      	beq.n	8107052 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8107024:	2b80      	cmp	r3, #128	; 0x80
 8107026:	d81d      	bhi.n	8107064 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8107028:	2b00      	cmp	r3, #0
 810702a:	d002      	beq.n	8107032 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 810702c:	2b40      	cmp	r3, #64	; 0x40
 810702e:	d007      	beq.n	8107040 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8107030:	e018      	b.n	8107064 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107032:	4b66      	ldr	r3, [pc, #408]	; (81071cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8107034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107036:	4a65      	ldr	r2, [pc, #404]	; (81071cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8107038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810703c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 810703e:	e017      	b.n	8107070 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8107040:	687b      	ldr	r3, [r7, #4]
 8107042:	3304      	adds	r3, #4
 8107044:	2100      	movs	r1, #0
 8107046:	4618      	mov	r0, r3
 8107048:	f001 ff68 	bl	8108f1c <RCCEx_PLL2_Config>
 810704c:	4603      	mov	r3, r0
 810704e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8107050:	e00e      	b.n	8107070 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8107052:	687b      	ldr	r3, [r7, #4]
 8107054:	3324      	adds	r3, #36	; 0x24
 8107056:	2100      	movs	r1, #0
 8107058:	4618      	mov	r0, r3
 810705a:	f002 f811 	bl	8109080 <RCCEx_PLL3_Config>
 810705e:	4603      	mov	r3, r0
 8107060:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8107062:	e005      	b.n	8107070 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8107064:	2301      	movs	r3, #1
 8107066:	75fb      	strb	r3, [r7, #23]
      break;
 8107068:	e002      	b.n	8107070 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 810706a:	bf00      	nop
 810706c:	e000      	b.n	8107070 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 810706e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8107070:	7dfb      	ldrb	r3, [r7, #23]
 8107072:	2b00      	cmp	r3, #0
 8107074:	d109      	bne.n	810708a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8107076:	4b55      	ldr	r3, [pc, #340]	; (81071cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8107078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810707a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 810707e:	687b      	ldr	r3, [r7, #4]
 8107080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107082:	4952      	ldr	r1, [pc, #328]	; (81071cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8107084:	4313      	orrs	r3, r2
 8107086:	650b      	str	r3, [r1, #80]	; 0x50
 8107088:	e001      	b.n	810708e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810708a:	7dfb      	ldrb	r3, [r7, #23]
 810708c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810708e:	687b      	ldr	r3, [r7, #4]
 8107090:	681b      	ldr	r3, [r3, #0]
 8107092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8107096:	2b00      	cmp	r3, #0
 8107098:	d049      	beq.n	810712e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 810709a:	687b      	ldr	r3, [r7, #4]
 810709c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81070a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 81070a4:	d030      	beq.n	8107108 <HAL_RCCEx_PeriphCLKConfig+0x230>
 81070a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 81070aa:	d82a      	bhi.n	8107102 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 81070ac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 81070b0:	d02c      	beq.n	810710c <HAL_RCCEx_PeriphCLKConfig+0x234>
 81070b2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 81070b6:	d824      	bhi.n	8107102 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 81070b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81070bc:	d018      	beq.n	81070f0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 81070be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81070c2:	d81e      	bhi.n	8107102 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 81070c4:	2b00      	cmp	r3, #0
 81070c6:	d003      	beq.n	81070d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 81070c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81070cc:	d007      	beq.n	81070de <HAL_RCCEx_PeriphCLKConfig+0x206>
 81070ce:	e018      	b.n	8107102 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81070d0:	4b3e      	ldr	r3, [pc, #248]	; (81071cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81070d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81070d4:	4a3d      	ldr	r2, [pc, #244]	; (81071cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81070d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81070da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81070dc:	e017      	b.n	810710e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81070de:	687b      	ldr	r3, [r7, #4]
 81070e0:	3304      	adds	r3, #4
 81070e2:	2100      	movs	r1, #0
 81070e4:	4618      	mov	r0, r3
 81070e6:	f001 ff19 	bl	8108f1c <RCCEx_PLL2_Config>
 81070ea:	4603      	mov	r3, r0
 81070ec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 81070ee:	e00e      	b.n	810710e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81070f0:	687b      	ldr	r3, [r7, #4]
 81070f2:	3324      	adds	r3, #36	; 0x24
 81070f4:	2100      	movs	r1, #0
 81070f6:	4618      	mov	r0, r3
 81070f8:	f001 ffc2 	bl	8109080 <RCCEx_PLL3_Config>
 81070fc:	4603      	mov	r3, r0
 81070fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8107100:	e005      	b.n	810710e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8107102:	2301      	movs	r3, #1
 8107104:	75fb      	strb	r3, [r7, #23]
      break;
 8107106:	e002      	b.n	810710e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8107108:	bf00      	nop
 810710a:	e000      	b.n	810710e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 810710c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810710e:	7dfb      	ldrb	r3, [r7, #23]
 8107110:	2b00      	cmp	r3, #0
 8107112:	d10a      	bne.n	810712a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8107114:	4b2d      	ldr	r3, [pc, #180]	; (81071cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8107116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107118:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 810711c:	687b      	ldr	r3, [r7, #4]
 810711e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8107122:	492a      	ldr	r1, [pc, #168]	; (81071cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8107124:	4313      	orrs	r3, r2
 8107126:	658b      	str	r3, [r1, #88]	; 0x58
 8107128:	e001      	b.n	810712e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810712a:	7dfb      	ldrb	r3, [r7, #23]
 810712c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810712e:	687b      	ldr	r3, [r7, #4]
 8107130:	681b      	ldr	r3, [r3, #0]
 8107132:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8107136:	2b00      	cmp	r3, #0
 8107138:	d04c      	beq.n	81071d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 810713a:	687b      	ldr	r3, [r7, #4]
 810713c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8107140:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8107144:	d030      	beq.n	81071a8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8107146:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810714a:	d82a      	bhi.n	81071a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 810714c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8107150:	d02c      	beq.n	81071ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8107152:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8107156:	d824      	bhi.n	81071a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8107158:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810715c:	d018      	beq.n	8107190 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 810715e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8107162:	d81e      	bhi.n	81071a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8107164:	2b00      	cmp	r3, #0
 8107166:	d003      	beq.n	8107170 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8107168:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 810716c:	d007      	beq.n	810717e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 810716e:	e018      	b.n	81071a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107170:	4b16      	ldr	r3, [pc, #88]	; (81071cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8107172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107174:	4a15      	ldr	r2, [pc, #84]	; (81071cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8107176:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810717a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810717c:	e017      	b.n	81071ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810717e:	687b      	ldr	r3, [r7, #4]
 8107180:	3304      	adds	r3, #4
 8107182:	2100      	movs	r1, #0
 8107184:	4618      	mov	r0, r3
 8107186:	f001 fec9 	bl	8108f1c <RCCEx_PLL2_Config>
 810718a:	4603      	mov	r3, r0
 810718c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 810718e:	e00e      	b.n	81071ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8107190:	687b      	ldr	r3, [r7, #4]
 8107192:	3324      	adds	r3, #36	; 0x24
 8107194:	2100      	movs	r1, #0
 8107196:	4618      	mov	r0, r3
 8107198:	f001 ff72 	bl	8109080 <RCCEx_PLL3_Config>
 810719c:	4603      	mov	r3, r0
 810719e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81071a0:	e005      	b.n	81071ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 81071a2:	2301      	movs	r3, #1
 81071a4:	75fb      	strb	r3, [r7, #23]
      break;
 81071a6:	e002      	b.n	81071ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 81071a8:	bf00      	nop
 81071aa:	e000      	b.n	81071ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 81071ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 81071ae:	7dfb      	ldrb	r3, [r7, #23]
 81071b0:	2b00      	cmp	r3, #0
 81071b2:	d10d      	bne.n	81071d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81071b4:	4b05      	ldr	r3, [pc, #20]	; (81071cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81071b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81071b8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 81071bc:	687b      	ldr	r3, [r7, #4]
 81071be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 81071c2:	4902      	ldr	r1, [pc, #8]	; (81071cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81071c4:	4313      	orrs	r3, r2
 81071c6:	658b      	str	r3, [r1, #88]	; 0x58
 81071c8:	e004      	b.n	81071d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 81071ca:	bf00      	nop
 81071cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81071d0:	7dfb      	ldrb	r3, [r7, #23]
 81071d2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 81071d4:	687b      	ldr	r3, [r7, #4]
 81071d6:	681b      	ldr	r3, [r3, #0]
 81071d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81071dc:	2b00      	cmp	r3, #0
 81071de:	d032      	beq.n	8107246 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 81071e0:	687b      	ldr	r3, [r7, #4]
 81071e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81071e4:	2b30      	cmp	r3, #48	; 0x30
 81071e6:	d01c      	beq.n	8107222 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 81071e8:	2b30      	cmp	r3, #48	; 0x30
 81071ea:	d817      	bhi.n	810721c <HAL_RCCEx_PeriphCLKConfig+0x344>
 81071ec:	2b20      	cmp	r3, #32
 81071ee:	d00c      	beq.n	810720a <HAL_RCCEx_PeriphCLKConfig+0x332>
 81071f0:	2b20      	cmp	r3, #32
 81071f2:	d813      	bhi.n	810721c <HAL_RCCEx_PeriphCLKConfig+0x344>
 81071f4:	2b00      	cmp	r3, #0
 81071f6:	d016      	beq.n	8107226 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 81071f8:	2b10      	cmp	r3, #16
 81071fa:	d10f      	bne.n	810721c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81071fc:	4baf      	ldr	r3, [pc, #700]	; (81074bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81071fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107200:	4aae      	ldr	r2, [pc, #696]	; (81074bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8107202:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8107206:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8107208:	e00e      	b.n	8107228 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810720a:	687b      	ldr	r3, [r7, #4]
 810720c:	3304      	adds	r3, #4
 810720e:	2102      	movs	r1, #2
 8107210:	4618      	mov	r0, r3
 8107212:	f001 fe83 	bl	8108f1c <RCCEx_PLL2_Config>
 8107216:	4603      	mov	r3, r0
 8107218:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 810721a:	e005      	b.n	8107228 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 810721c:	2301      	movs	r3, #1
 810721e:	75fb      	strb	r3, [r7, #23]
      break;
 8107220:	e002      	b.n	8107228 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8107222:	bf00      	nop
 8107224:	e000      	b.n	8107228 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8107226:	bf00      	nop
    }

    if(ret == HAL_OK)
 8107228:	7dfb      	ldrb	r3, [r7, #23]
 810722a:	2b00      	cmp	r3, #0
 810722c:	d109      	bne.n	8107242 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 810722e:	4ba3      	ldr	r3, [pc, #652]	; (81074bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8107230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107232:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8107236:	687b      	ldr	r3, [r7, #4]
 8107238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810723a:	49a0      	ldr	r1, [pc, #640]	; (81074bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810723c:	4313      	orrs	r3, r2
 810723e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8107240:	e001      	b.n	8107246 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107242:	7dfb      	ldrb	r3, [r7, #23]
 8107244:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8107246:	687b      	ldr	r3, [r7, #4]
 8107248:	681b      	ldr	r3, [r3, #0]
 810724a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 810724e:	2b00      	cmp	r3, #0
 8107250:	d047      	beq.n	81072e2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8107252:	687b      	ldr	r3, [r7, #4]
 8107254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8107256:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810725a:	d030      	beq.n	81072be <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 810725c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8107260:	d82a      	bhi.n	81072b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8107262:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8107266:	d02c      	beq.n	81072c2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8107268:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810726c:	d824      	bhi.n	81072b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 810726e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8107272:	d018      	beq.n	81072a6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8107274:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8107278:	d81e      	bhi.n	81072b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 810727a:	2b00      	cmp	r3, #0
 810727c:	d003      	beq.n	8107286 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 810727e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8107282:	d007      	beq.n	8107294 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8107284:	e018      	b.n	81072b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107286:	4b8d      	ldr	r3, [pc, #564]	; (81074bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8107288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810728a:	4a8c      	ldr	r2, [pc, #560]	; (81074bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810728c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8107290:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8107292:	e017      	b.n	81072c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8107294:	687b      	ldr	r3, [r7, #4]
 8107296:	3304      	adds	r3, #4
 8107298:	2100      	movs	r1, #0
 810729a:	4618      	mov	r0, r3
 810729c:	f001 fe3e 	bl	8108f1c <RCCEx_PLL2_Config>
 81072a0:	4603      	mov	r3, r0
 81072a2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81072a4:	e00e      	b.n	81072c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81072a6:	687b      	ldr	r3, [r7, #4]
 81072a8:	3324      	adds	r3, #36	; 0x24
 81072aa:	2100      	movs	r1, #0
 81072ac:	4618      	mov	r0, r3
 81072ae:	f001 fee7 	bl	8109080 <RCCEx_PLL3_Config>
 81072b2:	4603      	mov	r3, r0
 81072b4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81072b6:	e005      	b.n	81072c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81072b8:	2301      	movs	r3, #1
 81072ba:	75fb      	strb	r3, [r7, #23]
      break;
 81072bc:	e002      	b.n	81072c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 81072be:	bf00      	nop
 81072c0:	e000      	b.n	81072c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 81072c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81072c4:	7dfb      	ldrb	r3, [r7, #23]
 81072c6:	2b00      	cmp	r3, #0
 81072c8:	d109      	bne.n	81072de <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 81072ca:	4b7c      	ldr	r3, [pc, #496]	; (81074bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81072cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81072ce:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 81072d2:	687b      	ldr	r3, [r7, #4]
 81072d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81072d6:	4979      	ldr	r1, [pc, #484]	; (81074bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81072d8:	4313      	orrs	r3, r2
 81072da:	650b      	str	r3, [r1, #80]	; 0x50
 81072dc:	e001      	b.n	81072e2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81072de:	7dfb      	ldrb	r3, [r7, #23]
 81072e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 81072e2:	687b      	ldr	r3, [r7, #4]
 81072e4:	681b      	ldr	r3, [r3, #0]
 81072e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 81072ea:	2b00      	cmp	r3, #0
 81072ec:	d049      	beq.n	8107382 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 81072ee:	687b      	ldr	r3, [r7, #4]
 81072f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81072f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81072f6:	d02e      	beq.n	8107356 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 81072f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81072fc:	d828      	bhi.n	8107350 <HAL_RCCEx_PeriphCLKConfig+0x478>
 81072fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8107302:	d02a      	beq.n	810735a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8107304:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8107308:	d822      	bhi.n	8107350 <HAL_RCCEx_PeriphCLKConfig+0x478>
 810730a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810730e:	d026      	beq.n	810735e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8107310:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8107314:	d81c      	bhi.n	8107350 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8107316:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810731a:	d010      	beq.n	810733e <HAL_RCCEx_PeriphCLKConfig+0x466>
 810731c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107320:	d816      	bhi.n	8107350 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8107322:	2b00      	cmp	r3, #0
 8107324:	d01d      	beq.n	8107362 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8107326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810732a:	d111      	bne.n	8107350 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810732c:	687b      	ldr	r3, [r7, #4]
 810732e:	3304      	adds	r3, #4
 8107330:	2101      	movs	r1, #1
 8107332:	4618      	mov	r0, r3
 8107334:	f001 fdf2 	bl	8108f1c <RCCEx_PLL2_Config>
 8107338:	4603      	mov	r3, r0
 810733a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 810733c:	e012      	b.n	8107364 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810733e:	687b      	ldr	r3, [r7, #4]
 8107340:	3324      	adds	r3, #36	; 0x24
 8107342:	2101      	movs	r1, #1
 8107344:	4618      	mov	r0, r3
 8107346:	f001 fe9b 	bl	8109080 <RCCEx_PLL3_Config>
 810734a:	4603      	mov	r3, r0
 810734c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 810734e:	e009      	b.n	8107364 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8107350:	2301      	movs	r3, #1
 8107352:	75fb      	strb	r3, [r7, #23]
      break;
 8107354:	e006      	b.n	8107364 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8107356:	bf00      	nop
 8107358:	e004      	b.n	8107364 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810735a:	bf00      	nop
 810735c:	e002      	b.n	8107364 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810735e:	bf00      	nop
 8107360:	e000      	b.n	8107364 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8107362:	bf00      	nop
    }

    if(ret == HAL_OK)
 8107364:	7dfb      	ldrb	r3, [r7, #23]
 8107366:	2b00      	cmp	r3, #0
 8107368:	d109      	bne.n	810737e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 810736a:	4b54      	ldr	r3, [pc, #336]	; (81074bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810736c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810736e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8107372:	687b      	ldr	r3, [r7, #4]
 8107374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8107376:	4951      	ldr	r1, [pc, #324]	; (81074bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8107378:	4313      	orrs	r3, r2
 810737a:	650b      	str	r3, [r1, #80]	; 0x50
 810737c:	e001      	b.n	8107382 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810737e:	7dfb      	ldrb	r3, [r7, #23]
 8107380:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8107382:	687b      	ldr	r3, [r7, #4]
 8107384:	681b      	ldr	r3, [r3, #0]
 8107386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810738a:	2b00      	cmp	r3, #0
 810738c:	d04b      	beq.n	8107426 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 810738e:	687b      	ldr	r3, [r7, #4]
 8107390:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8107394:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8107398:	d02e      	beq.n	81073f8 <HAL_RCCEx_PeriphCLKConfig+0x520>
 810739a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810739e:	d828      	bhi.n	81073f2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 81073a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81073a4:	d02a      	beq.n	81073fc <HAL_RCCEx_PeriphCLKConfig+0x524>
 81073a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81073aa:	d822      	bhi.n	81073f2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 81073ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81073b0:	d026      	beq.n	8107400 <HAL_RCCEx_PeriphCLKConfig+0x528>
 81073b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81073b6:	d81c      	bhi.n	81073f2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 81073b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81073bc:	d010      	beq.n	81073e0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 81073be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81073c2:	d816      	bhi.n	81073f2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 81073c4:	2b00      	cmp	r3, #0
 81073c6:	d01d      	beq.n	8107404 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 81073c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81073cc:	d111      	bne.n	81073f2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81073ce:	687b      	ldr	r3, [r7, #4]
 81073d0:	3304      	adds	r3, #4
 81073d2:	2101      	movs	r1, #1
 81073d4:	4618      	mov	r0, r3
 81073d6:	f001 fda1 	bl	8108f1c <RCCEx_PLL2_Config>
 81073da:	4603      	mov	r3, r0
 81073dc:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81073de:	e012      	b.n	8107406 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81073e0:	687b      	ldr	r3, [r7, #4]
 81073e2:	3324      	adds	r3, #36	; 0x24
 81073e4:	2101      	movs	r1, #1
 81073e6:	4618      	mov	r0, r3
 81073e8:	f001 fe4a 	bl	8109080 <RCCEx_PLL3_Config>
 81073ec:	4603      	mov	r3, r0
 81073ee:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81073f0:	e009      	b.n	8107406 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 81073f2:	2301      	movs	r3, #1
 81073f4:	75fb      	strb	r3, [r7, #23]
      break;
 81073f6:	e006      	b.n	8107406 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81073f8:	bf00      	nop
 81073fa:	e004      	b.n	8107406 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81073fc:	bf00      	nop
 81073fe:	e002      	b.n	8107406 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8107400:	bf00      	nop
 8107402:	e000      	b.n	8107406 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8107404:	bf00      	nop
    }

    if(ret == HAL_OK)
 8107406:	7dfb      	ldrb	r3, [r7, #23]
 8107408:	2b00      	cmp	r3, #0
 810740a:	d10a      	bne.n	8107422 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 810740c:	4b2b      	ldr	r3, [pc, #172]	; (81074bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810740e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107410:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8107414:	687b      	ldr	r3, [r7, #4]
 8107416:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 810741a:	4928      	ldr	r1, [pc, #160]	; (81074bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810741c:	4313      	orrs	r3, r2
 810741e:	658b      	str	r3, [r1, #88]	; 0x58
 8107420:	e001      	b.n	8107426 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107422:	7dfb      	ldrb	r3, [r7, #23]
 8107424:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8107426:	687b      	ldr	r3, [r7, #4]
 8107428:	681b      	ldr	r3, [r3, #0]
 810742a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810742e:	2b00      	cmp	r3, #0
 8107430:	d02f      	beq.n	8107492 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8107432:	687b      	ldr	r3, [r7, #4]
 8107434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8107436:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810743a:	d00e      	beq.n	810745a <HAL_RCCEx_PeriphCLKConfig+0x582>
 810743c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107440:	d814      	bhi.n	810746c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8107442:	2b00      	cmp	r3, #0
 8107444:	d015      	beq.n	8107472 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8107446:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810744a:	d10f      	bne.n	810746c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810744c:	4b1b      	ldr	r3, [pc, #108]	; (81074bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810744e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107450:	4a1a      	ldr	r2, [pc, #104]	; (81074bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8107452:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8107456:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8107458:	e00c      	b.n	8107474 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810745a:	687b      	ldr	r3, [r7, #4]
 810745c:	3304      	adds	r3, #4
 810745e:	2101      	movs	r1, #1
 8107460:	4618      	mov	r0, r3
 8107462:	f001 fd5b 	bl	8108f1c <RCCEx_PLL2_Config>
 8107466:	4603      	mov	r3, r0
 8107468:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 810746a:	e003      	b.n	8107474 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810746c:	2301      	movs	r3, #1
 810746e:	75fb      	strb	r3, [r7, #23]
      break;
 8107470:	e000      	b.n	8107474 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8107472:	bf00      	nop
    }

    if(ret == HAL_OK)
 8107474:	7dfb      	ldrb	r3, [r7, #23]
 8107476:	2b00      	cmp	r3, #0
 8107478:	d109      	bne.n	810748e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810747a:	4b10      	ldr	r3, [pc, #64]	; (81074bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810747c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810747e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8107482:	687b      	ldr	r3, [r7, #4]
 8107484:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8107486:	490d      	ldr	r1, [pc, #52]	; (81074bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8107488:	4313      	orrs	r3, r2
 810748a:	650b      	str	r3, [r1, #80]	; 0x50
 810748c:	e001      	b.n	8107492 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810748e:	7dfb      	ldrb	r3, [r7, #23]
 8107490:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8107492:	687b      	ldr	r3, [r7, #4]
 8107494:	681b      	ldr	r3, [r3, #0]
 8107496:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810749a:	2b00      	cmp	r3, #0
 810749c:	d033      	beq.n	8107506 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 810749e:	687b      	ldr	r3, [r7, #4]
 81074a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81074a2:	2b03      	cmp	r3, #3
 81074a4:	d81c      	bhi.n	81074e0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 81074a6:	a201      	add	r2, pc, #4	; (adr r2, 81074ac <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 81074a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81074ac:	081074e7 	.word	0x081074e7
 81074b0:	081074c1 	.word	0x081074c1
 81074b4:	081074cf 	.word	0x081074cf
 81074b8:	081074e7 	.word	0x081074e7
 81074bc:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81074c0:	4bb9      	ldr	r3, [pc, #740]	; (81077a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81074c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81074c4:	4ab8      	ldr	r2, [pc, #736]	; (81077a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81074c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81074ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 81074cc:	e00c      	b.n	81074e8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81074ce:	687b      	ldr	r3, [r7, #4]
 81074d0:	3304      	adds	r3, #4
 81074d2:	2102      	movs	r1, #2
 81074d4:	4618      	mov	r0, r3
 81074d6:	f001 fd21 	bl	8108f1c <RCCEx_PLL2_Config>
 81074da:	4603      	mov	r3, r0
 81074dc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 81074de:	e003      	b.n	81074e8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 81074e0:	2301      	movs	r3, #1
 81074e2:	75fb      	strb	r3, [r7, #23]
      break;
 81074e4:	e000      	b.n	81074e8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 81074e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81074e8:	7dfb      	ldrb	r3, [r7, #23]
 81074ea:	2b00      	cmp	r3, #0
 81074ec:	d109      	bne.n	8107502 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81074ee:	4bae      	ldr	r3, [pc, #696]	; (81077a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81074f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81074f2:	f023 0203 	bic.w	r2, r3, #3
 81074f6:	687b      	ldr	r3, [r7, #4]
 81074f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81074fa:	49ab      	ldr	r1, [pc, #684]	; (81077a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81074fc:	4313      	orrs	r3, r2
 81074fe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8107500:	e001      	b.n	8107506 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107502:	7dfb      	ldrb	r3, [r7, #23]
 8107504:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8107506:	687b      	ldr	r3, [r7, #4]
 8107508:	681b      	ldr	r3, [r3, #0]
 810750a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810750e:	2b00      	cmp	r3, #0
 8107510:	f000 8088 	beq.w	8107624 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8107514:	4ba5      	ldr	r3, [pc, #660]	; (81077ac <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8107516:	681b      	ldr	r3, [r3, #0]
 8107518:	4aa4      	ldr	r2, [pc, #656]	; (81077ac <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 810751a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810751e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8107520:	f7fa f938 	bl	8101794 <HAL_GetTick>
 8107524:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8107526:	e009      	b.n	810753c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8107528:	f7fa f934 	bl	8101794 <HAL_GetTick>
 810752c:	4602      	mov	r2, r0
 810752e:	693b      	ldr	r3, [r7, #16]
 8107530:	1ad3      	subs	r3, r2, r3
 8107532:	2b64      	cmp	r3, #100	; 0x64
 8107534:	d902      	bls.n	810753c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8107536:	2303      	movs	r3, #3
 8107538:	75fb      	strb	r3, [r7, #23]
        break;
 810753a:	e005      	b.n	8107548 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810753c:	4b9b      	ldr	r3, [pc, #620]	; (81077ac <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 810753e:	681b      	ldr	r3, [r3, #0]
 8107540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8107544:	2b00      	cmp	r3, #0
 8107546:	d0ef      	beq.n	8107528 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8107548:	7dfb      	ldrb	r3, [r7, #23]
 810754a:	2b00      	cmp	r3, #0
 810754c:	d168      	bne.n	8107620 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810754e:	4b96      	ldr	r3, [pc, #600]	; (81077a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8107550:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8107552:	687b      	ldr	r3, [r7, #4]
 8107554:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8107558:	4053      	eors	r3, r2
 810755a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810755e:	2b00      	cmp	r3, #0
 8107560:	d013      	beq.n	810758a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8107562:	4b91      	ldr	r3, [pc, #580]	; (81077a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8107564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8107566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810756a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810756c:	4b8e      	ldr	r3, [pc, #568]	; (81077a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810756e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8107570:	4a8d      	ldr	r2, [pc, #564]	; (81077a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8107572:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8107576:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8107578:	4b8b      	ldr	r3, [pc, #556]	; (81077a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810757a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810757c:	4a8a      	ldr	r2, [pc, #552]	; (81077a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810757e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8107582:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8107584:	4a88      	ldr	r2, [pc, #544]	; (81077a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8107586:	68fb      	ldr	r3, [r7, #12]
 8107588:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810758a:	687b      	ldr	r3, [r7, #4]
 810758c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8107590:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107594:	d115      	bne.n	81075c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8107596:	f7fa f8fd 	bl	8101794 <HAL_GetTick>
 810759a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810759c:	e00b      	b.n	81075b6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810759e:	f7fa f8f9 	bl	8101794 <HAL_GetTick>
 81075a2:	4602      	mov	r2, r0
 81075a4:	693b      	ldr	r3, [r7, #16]
 81075a6:	1ad3      	subs	r3, r2, r3
 81075a8:	f241 3288 	movw	r2, #5000	; 0x1388
 81075ac:	4293      	cmp	r3, r2
 81075ae:	d902      	bls.n	81075b6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 81075b0:	2303      	movs	r3, #3
 81075b2:	75fb      	strb	r3, [r7, #23]
            break;
 81075b4:	e005      	b.n	81075c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81075b6:	4b7c      	ldr	r3, [pc, #496]	; (81077a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81075b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81075ba:	f003 0302 	and.w	r3, r3, #2
 81075be:	2b00      	cmp	r3, #0
 81075c0:	d0ed      	beq.n	810759e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 81075c2:	7dfb      	ldrb	r3, [r7, #23]
 81075c4:	2b00      	cmp	r3, #0
 81075c6:	d128      	bne.n	810761a <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81075c8:	687b      	ldr	r3, [r7, #4]
 81075ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81075ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81075d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81075d6:	d10f      	bne.n	81075f8 <HAL_RCCEx_PeriphCLKConfig+0x720>
 81075d8:	4b73      	ldr	r3, [pc, #460]	; (81077a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81075da:	691b      	ldr	r3, [r3, #16]
 81075dc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 81075e0:	687b      	ldr	r3, [r7, #4]
 81075e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81075e6:	091b      	lsrs	r3, r3, #4
 81075e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 81075ec:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 81075f0:	496d      	ldr	r1, [pc, #436]	; (81077a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81075f2:	4313      	orrs	r3, r2
 81075f4:	610b      	str	r3, [r1, #16]
 81075f6:	e005      	b.n	8107604 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 81075f8:	4b6b      	ldr	r3, [pc, #428]	; (81077a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81075fa:	691b      	ldr	r3, [r3, #16]
 81075fc:	4a6a      	ldr	r2, [pc, #424]	; (81077a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81075fe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8107602:	6113      	str	r3, [r2, #16]
 8107604:	4b68      	ldr	r3, [pc, #416]	; (81077a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8107606:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8107608:	687b      	ldr	r3, [r7, #4]
 810760a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810760e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8107612:	4965      	ldr	r1, [pc, #404]	; (81077a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8107614:	4313      	orrs	r3, r2
 8107616:	670b      	str	r3, [r1, #112]	; 0x70
 8107618:	e004      	b.n	8107624 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810761a:	7dfb      	ldrb	r3, [r7, #23]
 810761c:	75bb      	strb	r3, [r7, #22]
 810761e:	e001      	b.n	8107624 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107620:	7dfb      	ldrb	r3, [r7, #23]
 8107622:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8107624:	687b      	ldr	r3, [r7, #4]
 8107626:	681b      	ldr	r3, [r3, #0]
 8107628:	f003 0301 	and.w	r3, r3, #1
 810762c:	2b00      	cmp	r3, #0
 810762e:	d07e      	beq.n	810772e <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8107630:	687b      	ldr	r3, [r7, #4]
 8107632:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8107634:	2b28      	cmp	r3, #40	; 0x28
 8107636:	d867      	bhi.n	8107708 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8107638:	a201      	add	r2, pc, #4	; (adr r2, 8107640 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 810763a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810763e:	bf00      	nop
 8107640:	0810770f 	.word	0x0810770f
 8107644:	08107709 	.word	0x08107709
 8107648:	08107709 	.word	0x08107709
 810764c:	08107709 	.word	0x08107709
 8107650:	08107709 	.word	0x08107709
 8107654:	08107709 	.word	0x08107709
 8107658:	08107709 	.word	0x08107709
 810765c:	08107709 	.word	0x08107709
 8107660:	081076e5 	.word	0x081076e5
 8107664:	08107709 	.word	0x08107709
 8107668:	08107709 	.word	0x08107709
 810766c:	08107709 	.word	0x08107709
 8107670:	08107709 	.word	0x08107709
 8107674:	08107709 	.word	0x08107709
 8107678:	08107709 	.word	0x08107709
 810767c:	08107709 	.word	0x08107709
 8107680:	081076f7 	.word	0x081076f7
 8107684:	08107709 	.word	0x08107709
 8107688:	08107709 	.word	0x08107709
 810768c:	08107709 	.word	0x08107709
 8107690:	08107709 	.word	0x08107709
 8107694:	08107709 	.word	0x08107709
 8107698:	08107709 	.word	0x08107709
 810769c:	08107709 	.word	0x08107709
 81076a0:	0810770f 	.word	0x0810770f
 81076a4:	08107709 	.word	0x08107709
 81076a8:	08107709 	.word	0x08107709
 81076ac:	08107709 	.word	0x08107709
 81076b0:	08107709 	.word	0x08107709
 81076b4:	08107709 	.word	0x08107709
 81076b8:	08107709 	.word	0x08107709
 81076bc:	08107709 	.word	0x08107709
 81076c0:	0810770f 	.word	0x0810770f
 81076c4:	08107709 	.word	0x08107709
 81076c8:	08107709 	.word	0x08107709
 81076cc:	08107709 	.word	0x08107709
 81076d0:	08107709 	.word	0x08107709
 81076d4:	08107709 	.word	0x08107709
 81076d8:	08107709 	.word	0x08107709
 81076dc:	08107709 	.word	0x08107709
 81076e0:	0810770f 	.word	0x0810770f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81076e4:	687b      	ldr	r3, [r7, #4]
 81076e6:	3304      	adds	r3, #4
 81076e8:	2101      	movs	r1, #1
 81076ea:	4618      	mov	r0, r3
 81076ec:	f001 fc16 	bl	8108f1c <RCCEx_PLL2_Config>
 81076f0:	4603      	mov	r3, r0
 81076f2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 81076f4:	e00c      	b.n	8107710 <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81076f6:	687b      	ldr	r3, [r7, #4]
 81076f8:	3324      	adds	r3, #36	; 0x24
 81076fa:	2101      	movs	r1, #1
 81076fc:	4618      	mov	r0, r3
 81076fe:	f001 fcbf 	bl	8109080 <RCCEx_PLL3_Config>
 8107702:	4603      	mov	r3, r0
 8107704:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8107706:	e003      	b.n	8107710 <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8107708:	2301      	movs	r3, #1
 810770a:	75fb      	strb	r3, [r7, #23]
      break;
 810770c:	e000      	b.n	8107710 <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 810770e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8107710:	7dfb      	ldrb	r3, [r7, #23]
 8107712:	2b00      	cmp	r3, #0
 8107714:	d109      	bne.n	810772a <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8107716:	4b24      	ldr	r3, [pc, #144]	; (81077a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8107718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810771a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 810771e:	687b      	ldr	r3, [r7, #4]
 8107720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8107722:	4921      	ldr	r1, [pc, #132]	; (81077a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8107724:	4313      	orrs	r3, r2
 8107726:	654b      	str	r3, [r1, #84]	; 0x54
 8107728:	e001      	b.n	810772e <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810772a:	7dfb      	ldrb	r3, [r7, #23]
 810772c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810772e:	687b      	ldr	r3, [r7, #4]
 8107730:	681b      	ldr	r3, [r3, #0]
 8107732:	f003 0302 	and.w	r3, r3, #2
 8107736:	2b00      	cmp	r3, #0
 8107738:	d03c      	beq.n	81077b4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 810773a:	687b      	ldr	r3, [r7, #4]
 810773c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810773e:	2b05      	cmp	r3, #5
 8107740:	d820      	bhi.n	8107784 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8107742:	a201      	add	r2, pc, #4	; (adr r2, 8107748 <HAL_RCCEx_PeriphCLKConfig+0x870>)
 8107744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107748:	0810778b 	.word	0x0810778b
 810774c:	08107761 	.word	0x08107761
 8107750:	08107773 	.word	0x08107773
 8107754:	0810778b 	.word	0x0810778b
 8107758:	0810778b 	.word	0x0810778b
 810775c:	0810778b 	.word	0x0810778b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8107760:	687b      	ldr	r3, [r7, #4]
 8107762:	3304      	adds	r3, #4
 8107764:	2101      	movs	r1, #1
 8107766:	4618      	mov	r0, r3
 8107768:	f001 fbd8 	bl	8108f1c <RCCEx_PLL2_Config>
 810776c:	4603      	mov	r3, r0
 810776e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8107770:	e00c      	b.n	810778c <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8107772:	687b      	ldr	r3, [r7, #4]
 8107774:	3324      	adds	r3, #36	; 0x24
 8107776:	2101      	movs	r1, #1
 8107778:	4618      	mov	r0, r3
 810777a:	f001 fc81 	bl	8109080 <RCCEx_PLL3_Config>
 810777e:	4603      	mov	r3, r0
 8107780:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8107782:	e003      	b.n	810778c <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8107784:	2301      	movs	r3, #1
 8107786:	75fb      	strb	r3, [r7, #23]
      break;
 8107788:	e000      	b.n	810778c <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 810778a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810778c:	7dfb      	ldrb	r3, [r7, #23]
 810778e:	2b00      	cmp	r3, #0
 8107790:	d10e      	bne.n	81077b0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8107792:	4b05      	ldr	r3, [pc, #20]	; (81077a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8107794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107796:	f023 0207 	bic.w	r2, r3, #7
 810779a:	687b      	ldr	r3, [r7, #4]
 810779c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810779e:	4902      	ldr	r1, [pc, #8]	; (81077a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81077a0:	4313      	orrs	r3, r2
 81077a2:	654b      	str	r3, [r1, #84]	; 0x54
 81077a4:	e006      	b.n	81077b4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 81077a6:	bf00      	nop
 81077a8:	58024400 	.word	0x58024400
 81077ac:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 81077b0:	7dfb      	ldrb	r3, [r7, #23]
 81077b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81077b4:	687b      	ldr	r3, [r7, #4]
 81077b6:	681b      	ldr	r3, [r3, #0]
 81077b8:	f003 0304 	and.w	r3, r3, #4
 81077bc:	2b00      	cmp	r3, #0
 81077be:	d039      	beq.n	8107834 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 81077c0:	687b      	ldr	r3, [r7, #4]
 81077c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81077c6:	2b05      	cmp	r3, #5
 81077c8:	d820      	bhi.n	810780c <HAL_RCCEx_PeriphCLKConfig+0x934>
 81077ca:	a201      	add	r2, pc, #4	; (adr r2, 81077d0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 81077cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81077d0:	08107813 	.word	0x08107813
 81077d4:	081077e9 	.word	0x081077e9
 81077d8:	081077fb 	.word	0x081077fb
 81077dc:	08107813 	.word	0x08107813
 81077e0:	08107813 	.word	0x08107813
 81077e4:	08107813 	.word	0x08107813
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81077e8:	687b      	ldr	r3, [r7, #4]
 81077ea:	3304      	adds	r3, #4
 81077ec:	2101      	movs	r1, #1
 81077ee:	4618      	mov	r0, r3
 81077f0:	f001 fb94 	bl	8108f1c <RCCEx_PLL2_Config>
 81077f4:	4603      	mov	r3, r0
 81077f6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 81077f8:	e00c      	b.n	8107814 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81077fa:	687b      	ldr	r3, [r7, #4]
 81077fc:	3324      	adds	r3, #36	; 0x24
 81077fe:	2101      	movs	r1, #1
 8107800:	4618      	mov	r0, r3
 8107802:	f001 fc3d 	bl	8109080 <RCCEx_PLL3_Config>
 8107806:	4603      	mov	r3, r0
 8107808:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 810780a:	e003      	b.n	8107814 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810780c:	2301      	movs	r3, #1
 810780e:	75fb      	strb	r3, [r7, #23]
      break;
 8107810:	e000      	b.n	8107814 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8107812:	bf00      	nop
    }

    if(ret == HAL_OK)
 8107814:	7dfb      	ldrb	r3, [r7, #23]
 8107816:	2b00      	cmp	r3, #0
 8107818:	d10a      	bne.n	8107830 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810781a:	4bb7      	ldr	r3, [pc, #732]	; (8107af8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810781c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810781e:	f023 0207 	bic.w	r2, r3, #7
 8107822:	687b      	ldr	r3, [r7, #4]
 8107824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8107828:	49b3      	ldr	r1, [pc, #716]	; (8107af8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810782a:	4313      	orrs	r3, r2
 810782c:	658b      	str	r3, [r1, #88]	; 0x58
 810782e:	e001      	b.n	8107834 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107830:	7dfb      	ldrb	r3, [r7, #23]
 8107832:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8107834:	687b      	ldr	r3, [r7, #4]
 8107836:	681b      	ldr	r3, [r3, #0]
 8107838:	f003 0320 	and.w	r3, r3, #32
 810783c:	2b00      	cmp	r3, #0
 810783e:	d04b      	beq.n	81078d8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8107840:	687b      	ldr	r3, [r7, #4]
 8107842:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8107846:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810784a:	d02e      	beq.n	81078aa <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 810784c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8107850:	d828      	bhi.n	81078a4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8107852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107856:	d02a      	beq.n	81078ae <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8107858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810785c:	d822      	bhi.n	81078a4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810785e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8107862:	d026      	beq.n	81078b2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8107864:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8107868:	d81c      	bhi.n	81078a4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810786a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810786e:	d010      	beq.n	8107892 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8107870:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107874:	d816      	bhi.n	81078a4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8107876:	2b00      	cmp	r3, #0
 8107878:	d01d      	beq.n	81078b6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 810787a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810787e:	d111      	bne.n	81078a4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8107880:	687b      	ldr	r3, [r7, #4]
 8107882:	3304      	adds	r3, #4
 8107884:	2100      	movs	r1, #0
 8107886:	4618      	mov	r0, r3
 8107888:	f001 fb48 	bl	8108f1c <RCCEx_PLL2_Config>
 810788c:	4603      	mov	r3, r0
 810788e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8107890:	e012      	b.n	81078b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8107892:	687b      	ldr	r3, [r7, #4]
 8107894:	3324      	adds	r3, #36	; 0x24
 8107896:	2102      	movs	r1, #2
 8107898:	4618      	mov	r0, r3
 810789a:	f001 fbf1 	bl	8109080 <RCCEx_PLL3_Config>
 810789e:	4603      	mov	r3, r0
 81078a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81078a2:	e009      	b.n	81078b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81078a4:	2301      	movs	r3, #1
 81078a6:	75fb      	strb	r3, [r7, #23]
      break;
 81078a8:	e006      	b.n	81078b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 81078aa:	bf00      	nop
 81078ac:	e004      	b.n	81078b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 81078ae:	bf00      	nop
 81078b0:	e002      	b.n	81078b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 81078b2:	bf00      	nop
 81078b4:	e000      	b.n	81078b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 81078b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81078b8:	7dfb      	ldrb	r3, [r7, #23]
 81078ba:	2b00      	cmp	r3, #0
 81078bc:	d10a      	bne.n	81078d4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81078be:	4b8e      	ldr	r3, [pc, #568]	; (8107af8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81078c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81078c2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81078c6:	687b      	ldr	r3, [r7, #4]
 81078c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81078cc:	498a      	ldr	r1, [pc, #552]	; (8107af8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81078ce:	4313      	orrs	r3, r2
 81078d0:	654b      	str	r3, [r1, #84]	; 0x54
 81078d2:	e001      	b.n	81078d8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81078d4:	7dfb      	ldrb	r3, [r7, #23]
 81078d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81078d8:	687b      	ldr	r3, [r7, #4]
 81078da:	681b      	ldr	r3, [r3, #0]
 81078dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81078e0:	2b00      	cmp	r3, #0
 81078e2:	d04b      	beq.n	810797c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 81078e4:	687b      	ldr	r3, [r7, #4]
 81078e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81078ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81078ee:	d02e      	beq.n	810794e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 81078f0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81078f4:	d828      	bhi.n	8107948 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81078f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81078fa:	d02a      	beq.n	8107952 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 81078fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8107900:	d822      	bhi.n	8107948 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8107902:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8107906:	d026      	beq.n	8107956 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8107908:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810790c:	d81c      	bhi.n	8107948 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810790e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8107912:	d010      	beq.n	8107936 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8107914:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8107918:	d816      	bhi.n	8107948 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810791a:	2b00      	cmp	r3, #0
 810791c:	d01d      	beq.n	810795a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 810791e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8107922:	d111      	bne.n	8107948 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8107924:	687b      	ldr	r3, [r7, #4]
 8107926:	3304      	adds	r3, #4
 8107928:	2100      	movs	r1, #0
 810792a:	4618      	mov	r0, r3
 810792c:	f001 faf6 	bl	8108f1c <RCCEx_PLL2_Config>
 8107930:	4603      	mov	r3, r0
 8107932:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8107934:	e012      	b.n	810795c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8107936:	687b      	ldr	r3, [r7, #4]
 8107938:	3324      	adds	r3, #36	; 0x24
 810793a:	2102      	movs	r1, #2
 810793c:	4618      	mov	r0, r3
 810793e:	f001 fb9f 	bl	8109080 <RCCEx_PLL3_Config>
 8107942:	4603      	mov	r3, r0
 8107944:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8107946:	e009      	b.n	810795c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8107948:	2301      	movs	r3, #1
 810794a:	75fb      	strb	r3, [r7, #23]
      break;
 810794c:	e006      	b.n	810795c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810794e:	bf00      	nop
 8107950:	e004      	b.n	810795c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8107952:	bf00      	nop
 8107954:	e002      	b.n	810795c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8107956:	bf00      	nop
 8107958:	e000      	b.n	810795c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810795a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810795c:	7dfb      	ldrb	r3, [r7, #23]
 810795e:	2b00      	cmp	r3, #0
 8107960:	d10a      	bne.n	8107978 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8107962:	4b65      	ldr	r3, [pc, #404]	; (8107af8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8107964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107966:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 810796a:	687b      	ldr	r3, [r7, #4]
 810796c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8107970:	4961      	ldr	r1, [pc, #388]	; (8107af8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8107972:	4313      	orrs	r3, r2
 8107974:	658b      	str	r3, [r1, #88]	; 0x58
 8107976:	e001      	b.n	810797c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107978:	7dfb      	ldrb	r3, [r7, #23]
 810797a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 810797c:	687b      	ldr	r3, [r7, #4]
 810797e:	681b      	ldr	r3, [r3, #0]
 8107980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8107984:	2b00      	cmp	r3, #0
 8107986:	d04b      	beq.n	8107a20 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8107988:	687b      	ldr	r3, [r7, #4]
 810798a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810798e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8107992:	d02e      	beq.n	81079f2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8107994:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8107998:	d828      	bhi.n	81079ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810799a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810799e:	d02a      	beq.n	81079f6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 81079a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81079a4:	d822      	bhi.n	81079ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 81079a6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81079aa:	d026      	beq.n	81079fa <HAL_RCCEx_PeriphCLKConfig+0xb22>
 81079ac:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81079b0:	d81c      	bhi.n	81079ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 81079b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81079b6:	d010      	beq.n	81079da <HAL_RCCEx_PeriphCLKConfig+0xb02>
 81079b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81079bc:	d816      	bhi.n	81079ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 81079be:	2b00      	cmp	r3, #0
 81079c0:	d01d      	beq.n	81079fe <HAL_RCCEx_PeriphCLKConfig+0xb26>
 81079c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81079c6:	d111      	bne.n	81079ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81079c8:	687b      	ldr	r3, [r7, #4]
 81079ca:	3304      	adds	r3, #4
 81079cc:	2100      	movs	r1, #0
 81079ce:	4618      	mov	r0, r3
 81079d0:	f001 faa4 	bl	8108f1c <RCCEx_PLL2_Config>
 81079d4:	4603      	mov	r3, r0
 81079d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81079d8:	e012      	b.n	8107a00 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81079da:	687b      	ldr	r3, [r7, #4]
 81079dc:	3324      	adds	r3, #36	; 0x24
 81079de:	2102      	movs	r1, #2
 81079e0:	4618      	mov	r0, r3
 81079e2:	f001 fb4d 	bl	8109080 <RCCEx_PLL3_Config>
 81079e6:	4603      	mov	r3, r0
 81079e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81079ea:	e009      	b.n	8107a00 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81079ec:	2301      	movs	r3, #1
 81079ee:	75fb      	strb	r3, [r7, #23]
      break;
 81079f0:	e006      	b.n	8107a00 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81079f2:	bf00      	nop
 81079f4:	e004      	b.n	8107a00 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81079f6:	bf00      	nop
 81079f8:	e002      	b.n	8107a00 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81079fa:	bf00      	nop
 81079fc:	e000      	b.n	8107a00 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81079fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8107a00:	7dfb      	ldrb	r3, [r7, #23]
 8107a02:	2b00      	cmp	r3, #0
 8107a04:	d10a      	bne.n	8107a1c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8107a06:	4b3c      	ldr	r3, [pc, #240]	; (8107af8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8107a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107a0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8107a0e:	687b      	ldr	r3, [r7, #4]
 8107a10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8107a14:	4938      	ldr	r1, [pc, #224]	; (8107af8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8107a16:	4313      	orrs	r3, r2
 8107a18:	658b      	str	r3, [r1, #88]	; 0x58
 8107a1a:	e001      	b.n	8107a20 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107a1c:	7dfb      	ldrb	r3, [r7, #23]
 8107a1e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8107a20:	687b      	ldr	r3, [r7, #4]
 8107a22:	681b      	ldr	r3, [r3, #0]
 8107a24:	f003 0308 	and.w	r3, r3, #8
 8107a28:	2b00      	cmp	r3, #0
 8107a2a:	d01a      	beq.n	8107a62 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8107a2c:	687b      	ldr	r3, [r7, #4]
 8107a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8107a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8107a36:	d10a      	bne.n	8107a4e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8107a38:	687b      	ldr	r3, [r7, #4]
 8107a3a:	3324      	adds	r3, #36	; 0x24
 8107a3c:	2102      	movs	r1, #2
 8107a3e:	4618      	mov	r0, r3
 8107a40:	f001 fb1e 	bl	8109080 <RCCEx_PLL3_Config>
 8107a44:	4603      	mov	r3, r0
 8107a46:	2b00      	cmp	r3, #0
 8107a48:	d001      	beq.n	8107a4e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8107a4a:	2301      	movs	r3, #1
 8107a4c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8107a4e:	4b2a      	ldr	r3, [pc, #168]	; (8107af8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8107a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107a52:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8107a56:	687b      	ldr	r3, [r7, #4]
 8107a58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8107a5c:	4926      	ldr	r1, [pc, #152]	; (8107af8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8107a5e:	4313      	orrs	r3, r2
 8107a60:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8107a62:	687b      	ldr	r3, [r7, #4]
 8107a64:	681b      	ldr	r3, [r3, #0]
 8107a66:	f003 0310 	and.w	r3, r3, #16
 8107a6a:	2b00      	cmp	r3, #0
 8107a6c:	d01a      	beq.n	8107aa4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8107a6e:	687b      	ldr	r3, [r7, #4]
 8107a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8107a74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107a78:	d10a      	bne.n	8107a90 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8107a7a:	687b      	ldr	r3, [r7, #4]
 8107a7c:	3324      	adds	r3, #36	; 0x24
 8107a7e:	2102      	movs	r1, #2
 8107a80:	4618      	mov	r0, r3
 8107a82:	f001 fafd 	bl	8109080 <RCCEx_PLL3_Config>
 8107a86:	4603      	mov	r3, r0
 8107a88:	2b00      	cmp	r3, #0
 8107a8a:	d001      	beq.n	8107a90 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8107a8c:	2301      	movs	r3, #1
 8107a8e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8107a90:	4b19      	ldr	r3, [pc, #100]	; (8107af8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8107a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107a94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8107a98:	687b      	ldr	r3, [r7, #4]
 8107a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8107a9e:	4916      	ldr	r1, [pc, #88]	; (8107af8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8107aa0:	4313      	orrs	r3, r2
 8107aa2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8107aa4:	687b      	ldr	r3, [r7, #4]
 8107aa6:	681b      	ldr	r3, [r3, #0]
 8107aa8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8107aac:	2b00      	cmp	r3, #0
 8107aae:	d036      	beq.n	8107b1e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8107ab0:	687b      	ldr	r3, [r7, #4]
 8107ab2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8107ab6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107aba:	d01f      	beq.n	8107afc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8107abc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107ac0:	d817      	bhi.n	8107af2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8107ac2:	2b00      	cmp	r3, #0
 8107ac4:	d003      	beq.n	8107ace <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8107ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107aca:	d009      	beq.n	8107ae0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8107acc:	e011      	b.n	8107af2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8107ace:	687b      	ldr	r3, [r7, #4]
 8107ad0:	3304      	adds	r3, #4
 8107ad2:	2100      	movs	r1, #0
 8107ad4:	4618      	mov	r0, r3
 8107ad6:	f001 fa21 	bl	8108f1c <RCCEx_PLL2_Config>
 8107ada:	4603      	mov	r3, r0
 8107adc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8107ade:	e00e      	b.n	8107afe <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8107ae0:	687b      	ldr	r3, [r7, #4]
 8107ae2:	3324      	adds	r3, #36	; 0x24
 8107ae4:	2102      	movs	r1, #2
 8107ae6:	4618      	mov	r0, r3
 8107ae8:	f001 faca 	bl	8109080 <RCCEx_PLL3_Config>
 8107aec:	4603      	mov	r3, r0
 8107aee:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8107af0:	e005      	b.n	8107afe <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8107af2:	2301      	movs	r3, #1
 8107af4:	75fb      	strb	r3, [r7, #23]
      break;
 8107af6:	e002      	b.n	8107afe <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8107af8:	58024400 	.word	0x58024400
      break;
 8107afc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8107afe:	7dfb      	ldrb	r3, [r7, #23]
 8107b00:	2b00      	cmp	r3, #0
 8107b02:	d10a      	bne.n	8107b1a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8107b04:	4b93      	ldr	r3, [pc, #588]	; (8107d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107b08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8107b0c:	687b      	ldr	r3, [r7, #4]
 8107b0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8107b12:	4990      	ldr	r1, [pc, #576]	; (8107d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107b14:	4313      	orrs	r3, r2
 8107b16:	658b      	str	r3, [r1, #88]	; 0x58
 8107b18:	e001      	b.n	8107b1e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107b1a:	7dfb      	ldrb	r3, [r7, #23]
 8107b1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8107b1e:	687b      	ldr	r3, [r7, #4]
 8107b20:	681b      	ldr	r3, [r3, #0]
 8107b22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8107b26:	2b00      	cmp	r3, #0
 8107b28:	d033      	beq.n	8107b92 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8107b2a:	687b      	ldr	r3, [r7, #4]
 8107b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107b30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8107b34:	d01c      	beq.n	8107b70 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8107b36:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8107b3a:	d816      	bhi.n	8107b6a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8107b3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8107b40:	d003      	beq.n	8107b4a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8107b42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8107b46:	d007      	beq.n	8107b58 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8107b48:	e00f      	b.n	8107b6a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107b4a:	4b82      	ldr	r3, [pc, #520]	; (8107d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107b4e:	4a81      	ldr	r2, [pc, #516]	; (8107d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8107b54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8107b56:	e00c      	b.n	8107b72 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8107b58:	687b      	ldr	r3, [r7, #4]
 8107b5a:	3324      	adds	r3, #36	; 0x24
 8107b5c:	2101      	movs	r1, #1
 8107b5e:	4618      	mov	r0, r3
 8107b60:	f001 fa8e 	bl	8109080 <RCCEx_PLL3_Config>
 8107b64:	4603      	mov	r3, r0
 8107b66:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8107b68:	e003      	b.n	8107b72 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8107b6a:	2301      	movs	r3, #1
 8107b6c:	75fb      	strb	r3, [r7, #23]
      break;
 8107b6e:	e000      	b.n	8107b72 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8107b70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8107b72:	7dfb      	ldrb	r3, [r7, #23]
 8107b74:	2b00      	cmp	r3, #0
 8107b76:	d10a      	bne.n	8107b8e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8107b78:	4b76      	ldr	r3, [pc, #472]	; (8107d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107b7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8107b80:	687b      	ldr	r3, [r7, #4]
 8107b82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107b86:	4973      	ldr	r1, [pc, #460]	; (8107d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107b88:	4313      	orrs	r3, r2
 8107b8a:	654b      	str	r3, [r1, #84]	; 0x54
 8107b8c:	e001      	b.n	8107b92 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107b8e:	7dfb      	ldrb	r3, [r7, #23]
 8107b90:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8107b92:	687b      	ldr	r3, [r7, #4]
 8107b94:	681b      	ldr	r3, [r3, #0]
 8107b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8107b9a:	2b00      	cmp	r3, #0
 8107b9c:	d029      	beq.n	8107bf2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8107b9e:	687b      	ldr	r3, [r7, #4]
 8107ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107ba2:	2b00      	cmp	r3, #0
 8107ba4:	d003      	beq.n	8107bae <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8107ba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107baa:	d007      	beq.n	8107bbc <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8107bac:	e00f      	b.n	8107bce <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107bae:	4b69      	ldr	r3, [pc, #420]	; (8107d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107bb2:	4a68      	ldr	r2, [pc, #416]	; (8107d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8107bb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8107bba:	e00b      	b.n	8107bd4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8107bbc:	687b      	ldr	r3, [r7, #4]
 8107bbe:	3304      	adds	r3, #4
 8107bc0:	2102      	movs	r1, #2
 8107bc2:	4618      	mov	r0, r3
 8107bc4:	f001 f9aa 	bl	8108f1c <RCCEx_PLL2_Config>
 8107bc8:	4603      	mov	r3, r0
 8107bca:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8107bcc:	e002      	b.n	8107bd4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8107bce:	2301      	movs	r3, #1
 8107bd0:	75fb      	strb	r3, [r7, #23]
      break;
 8107bd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8107bd4:	7dfb      	ldrb	r3, [r7, #23]
 8107bd6:	2b00      	cmp	r3, #0
 8107bd8:	d109      	bne.n	8107bee <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8107bda:	4b5e      	ldr	r3, [pc, #376]	; (8107d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107bde:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8107be2:	687b      	ldr	r3, [r7, #4]
 8107be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107be6:	495b      	ldr	r1, [pc, #364]	; (8107d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107be8:	4313      	orrs	r3, r2
 8107bea:	64cb      	str	r3, [r1, #76]	; 0x4c
 8107bec:	e001      	b.n	8107bf2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107bee:	7dfb      	ldrb	r3, [r7, #23]
 8107bf0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8107bf2:	687b      	ldr	r3, [r7, #4]
 8107bf4:	681b      	ldr	r3, [r3, #0]
 8107bf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107bfa:	2b00      	cmp	r3, #0
 8107bfc:	d00a      	beq.n	8107c14 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8107bfe:	687b      	ldr	r3, [r7, #4]
 8107c00:	3324      	adds	r3, #36	; 0x24
 8107c02:	2102      	movs	r1, #2
 8107c04:	4618      	mov	r0, r3
 8107c06:	f001 fa3b 	bl	8109080 <RCCEx_PLL3_Config>
 8107c0a:	4603      	mov	r3, r0
 8107c0c:	2b00      	cmp	r3, #0
 8107c0e:	d001      	beq.n	8107c14 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8107c10:	2301      	movs	r3, #1
 8107c12:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8107c14:	687b      	ldr	r3, [r7, #4]
 8107c16:	681b      	ldr	r3, [r3, #0]
 8107c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8107c1c:	2b00      	cmp	r3, #0
 8107c1e:	d030      	beq.n	8107c82 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8107c20:	687b      	ldr	r3, [r7, #4]
 8107c22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8107c24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8107c28:	d017      	beq.n	8107c5a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8107c2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8107c2e:	d811      	bhi.n	8107c54 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8107c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8107c34:	d013      	beq.n	8107c5e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8107c36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8107c3a:	d80b      	bhi.n	8107c54 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8107c3c:	2b00      	cmp	r3, #0
 8107c3e:	d010      	beq.n	8107c62 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8107c40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107c44:	d106      	bne.n	8107c54 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107c46:	4b43      	ldr	r3, [pc, #268]	; (8107d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107c4a:	4a42      	ldr	r2, [pc, #264]	; (8107d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8107c50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8107c52:	e007      	b.n	8107c64 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8107c54:	2301      	movs	r3, #1
 8107c56:	75fb      	strb	r3, [r7, #23]
      break;
 8107c58:	e004      	b.n	8107c64 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8107c5a:	bf00      	nop
 8107c5c:	e002      	b.n	8107c64 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8107c5e:	bf00      	nop
 8107c60:	e000      	b.n	8107c64 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8107c62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8107c64:	7dfb      	ldrb	r3, [r7, #23]
 8107c66:	2b00      	cmp	r3, #0
 8107c68:	d109      	bne.n	8107c7e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8107c6a:	4b3a      	ldr	r3, [pc, #232]	; (8107d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107c6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8107c72:	687b      	ldr	r3, [r7, #4]
 8107c74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8107c76:	4937      	ldr	r1, [pc, #220]	; (8107d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107c78:	4313      	orrs	r3, r2
 8107c7a:	654b      	str	r3, [r1, #84]	; 0x54
 8107c7c:	e001      	b.n	8107c82 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107c7e:	7dfb      	ldrb	r3, [r7, #23]
 8107c80:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8107c82:	687b      	ldr	r3, [r7, #4]
 8107c84:	681b      	ldr	r3, [r3, #0]
 8107c86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8107c8a:	2b00      	cmp	r3, #0
 8107c8c:	d008      	beq.n	8107ca0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8107c8e:	4b31      	ldr	r3, [pc, #196]	; (8107d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107c92:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8107c96:	687b      	ldr	r3, [r7, #4]
 8107c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8107c9a:	492e      	ldr	r1, [pc, #184]	; (8107d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107c9c:	4313      	orrs	r3, r2
 8107c9e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8107ca0:	687b      	ldr	r3, [r7, #4]
 8107ca2:	681b      	ldr	r3, [r3, #0]
 8107ca4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8107ca8:	2b00      	cmp	r3, #0
 8107caa:	d009      	beq.n	8107cc0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8107cac:	4b29      	ldr	r3, [pc, #164]	; (8107d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107cae:	691b      	ldr	r3, [r3, #16]
 8107cb0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8107cb4:	687b      	ldr	r3, [r7, #4]
 8107cb6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8107cba:	4926      	ldr	r1, [pc, #152]	; (8107d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107cbc:	4313      	orrs	r3, r2
 8107cbe:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8107cc0:	687b      	ldr	r3, [r7, #4]
 8107cc2:	681b      	ldr	r3, [r3, #0]
 8107cc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8107cc8:	2b00      	cmp	r3, #0
 8107cca:	d008      	beq.n	8107cde <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8107ccc:	4b21      	ldr	r3, [pc, #132]	; (8107d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107cd0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8107cd4:	687b      	ldr	r3, [r7, #4]
 8107cd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8107cd8:	491e      	ldr	r1, [pc, #120]	; (8107d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107cda:	4313      	orrs	r3, r2
 8107cdc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8107cde:	687b      	ldr	r3, [r7, #4]
 8107ce0:	681b      	ldr	r3, [r3, #0]
 8107ce2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8107ce6:	2b00      	cmp	r3, #0
 8107ce8:	d00d      	beq.n	8107d06 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8107cea:	4b1a      	ldr	r3, [pc, #104]	; (8107d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107cec:	691b      	ldr	r3, [r3, #16]
 8107cee:	4a19      	ldr	r2, [pc, #100]	; (8107d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107cf0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8107cf4:	6113      	str	r3, [r2, #16]
 8107cf6:	4b17      	ldr	r3, [pc, #92]	; (8107d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107cf8:	691a      	ldr	r2, [r3, #16]
 8107cfa:	687b      	ldr	r3, [r7, #4]
 8107cfc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8107d00:	4914      	ldr	r1, [pc, #80]	; (8107d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107d02:	4313      	orrs	r3, r2
 8107d04:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8107d06:	687b      	ldr	r3, [r7, #4]
 8107d08:	681b      	ldr	r3, [r3, #0]
 8107d0a:	2b00      	cmp	r3, #0
 8107d0c:	da08      	bge.n	8107d20 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8107d0e:	4b11      	ldr	r3, [pc, #68]	; (8107d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107d12:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8107d16:	687b      	ldr	r3, [r7, #4]
 8107d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107d1a:	490e      	ldr	r1, [pc, #56]	; (8107d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107d1c:	4313      	orrs	r3, r2
 8107d1e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8107d20:	687b      	ldr	r3, [r7, #4]
 8107d22:	681b      	ldr	r3, [r3, #0]
 8107d24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8107d28:	2b00      	cmp	r3, #0
 8107d2a:	d009      	beq.n	8107d40 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8107d2c:	4b09      	ldr	r3, [pc, #36]	; (8107d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107d30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8107d34:	687b      	ldr	r3, [r7, #4]
 8107d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8107d3a:	4906      	ldr	r1, [pc, #24]	; (8107d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107d3c:	4313      	orrs	r3, r2
 8107d3e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8107d40:	7dbb      	ldrb	r3, [r7, #22]
 8107d42:	2b00      	cmp	r3, #0
 8107d44:	d101      	bne.n	8107d4a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8107d46:	2300      	movs	r3, #0
 8107d48:	e000      	b.n	8107d4c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8107d4a:	2301      	movs	r3, #1
}
 8107d4c:	4618      	mov	r0, r3
 8107d4e:	3718      	adds	r7, #24
 8107d50:	46bd      	mov	sp, r7
 8107d52:	bd80      	pop	{r7, pc}
 8107d54:	58024400 	.word	0x58024400

08107d58 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8107d58:	b580      	push	{r7, lr}
 8107d5a:	b090      	sub	sp, #64	; 0x40
 8107d5c:	af00      	add	r7, sp, #0
 8107d5e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8107d60:	687b      	ldr	r3, [r7, #4]
 8107d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107d66:	f040 8095 	bne.w	8107e94 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8107d6a:	4bae      	ldr	r3, [pc, #696]	; (8108024 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8107d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107d6e:	f003 0307 	and.w	r3, r3, #7
 8107d72:	633b      	str	r3, [r7, #48]	; 0x30
 8107d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107d76:	2b04      	cmp	r3, #4
 8107d78:	f200 8088 	bhi.w	8107e8c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8107d7c:	a201      	add	r2, pc, #4	; (adr r2, 8107d84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8107d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107d82:	bf00      	nop
 8107d84:	08107d99 	.word	0x08107d99
 8107d88:	08107dc1 	.word	0x08107dc1
 8107d8c:	08107de9 	.word	0x08107de9
 8107d90:	08107e85 	.word	0x08107e85
 8107d94:	08107e11 	.word	0x08107e11

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107d98:	4ba2      	ldr	r3, [pc, #648]	; (8108024 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8107d9a:	681b      	ldr	r3, [r3, #0]
 8107d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8107da0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8107da4:	d108      	bne.n	8107db8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8107daa:	4618      	mov	r0, r3
 8107dac:	f000 ff64 	bl	8108c78 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8107db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107db2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8107db4:	f000 bc95 	b.w	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8107db8:	2300      	movs	r3, #0
 8107dba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107dbc:	f000 bc91 	b.w	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107dc0:	4b98      	ldr	r3, [pc, #608]	; (8108024 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8107dc2:	681b      	ldr	r3, [r3, #0]
 8107dc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107dc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8107dcc:	d108      	bne.n	8107de0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107dce:	f107 0318 	add.w	r3, r7, #24
 8107dd2:	4618      	mov	r0, r3
 8107dd4:	f000 fca8 	bl	8108728 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107dd8:	69bb      	ldr	r3, [r7, #24]
 8107dda:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8107ddc:	f000 bc81 	b.w	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8107de0:	2300      	movs	r3, #0
 8107de2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107de4:	f000 bc7d 	b.w	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107de8:	4b8e      	ldr	r3, [pc, #568]	; (8108024 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8107dea:	681b      	ldr	r3, [r3, #0]
 8107dec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107df0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107df4:	d108      	bne.n	8107e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107df6:	f107 030c 	add.w	r3, r7, #12
 8107dfa:	4618      	mov	r0, r3
 8107dfc:	f000 fde8 	bl	81089d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107e00:	68fb      	ldr	r3, [r7, #12]
 8107e02:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8107e04:	f000 bc6d 	b.w	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8107e08:	2300      	movs	r3, #0
 8107e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107e0c:	f000 bc69 	b.w	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8107e10:	4b84      	ldr	r3, [pc, #528]	; (8108024 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8107e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107e14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8107e18:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107e1a:	4b82      	ldr	r3, [pc, #520]	; (8108024 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8107e1c:	681b      	ldr	r3, [r3, #0]
 8107e1e:	f003 0304 	and.w	r3, r3, #4
 8107e22:	2b04      	cmp	r3, #4
 8107e24:	d10c      	bne.n	8107e40 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8107e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107e28:	2b00      	cmp	r3, #0
 8107e2a:	d109      	bne.n	8107e40 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8107e2c:	4b7d      	ldr	r3, [pc, #500]	; (8108024 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8107e2e:	681b      	ldr	r3, [r3, #0]
 8107e30:	08db      	lsrs	r3, r3, #3
 8107e32:	f003 0303 	and.w	r3, r3, #3
 8107e36:	4a7c      	ldr	r2, [pc, #496]	; (8108028 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8107e38:	fa22 f303 	lsr.w	r3, r2, r3
 8107e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107e3e:	e01f      	b.n	8107e80 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107e40:	4b78      	ldr	r3, [pc, #480]	; (8108024 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8107e42:	681b      	ldr	r3, [r3, #0]
 8107e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8107e48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107e4c:	d106      	bne.n	8107e5c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8107e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107e50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8107e54:	d102      	bne.n	8107e5c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8107e56:	4b75      	ldr	r3, [pc, #468]	; (810802c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8107e58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107e5a:	e011      	b.n	8107e80 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107e5c:	4b71      	ldr	r3, [pc, #452]	; (8108024 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8107e5e:	681b      	ldr	r3, [r3, #0]
 8107e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8107e64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107e68:	d106      	bne.n	8107e78 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8107e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107e6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107e70:	d102      	bne.n	8107e78 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8107e72:	4b6f      	ldr	r3, [pc, #444]	; (8108030 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8107e74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107e76:	e003      	b.n	8107e80 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8107e78:	2300      	movs	r3, #0
 8107e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8107e7c:	f000 bc31 	b.w	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8107e80:	f000 bc2f 	b.w	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8107e84:	4b6b      	ldr	r3, [pc, #428]	; (8108034 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8107e86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107e88:	f000 bc2b 	b.w	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8107e8c:	2300      	movs	r3, #0
 8107e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107e90:	f000 bc27 	b.w	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8107e94:	687b      	ldr	r3, [r7, #4]
 8107e96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8107e9a:	f040 8095 	bne.w	8107fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8107e9e:	4b61      	ldr	r3, [pc, #388]	; (8108024 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8107ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107ea2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8107ea6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8107ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107eaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107eae:	d04d      	beq.n	8107f4c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8107eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107eb6:	f200 8084 	bhi.w	8107fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8107eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107ebc:	2bc0      	cmp	r3, #192	; 0xc0
 8107ebe:	d07d      	beq.n	8107fbc <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8107ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107ec2:	2bc0      	cmp	r3, #192	; 0xc0
 8107ec4:	d87d      	bhi.n	8107fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8107ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107ec8:	2b80      	cmp	r3, #128	; 0x80
 8107eca:	d02d      	beq.n	8107f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8107ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107ece:	2b80      	cmp	r3, #128	; 0x80
 8107ed0:	d877      	bhi.n	8107fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8107ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107ed4:	2b00      	cmp	r3, #0
 8107ed6:	d003      	beq.n	8107ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8107ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107eda:	2b40      	cmp	r3, #64	; 0x40
 8107edc:	d012      	beq.n	8107f04 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8107ede:	e070      	b.n	8107fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107ee0:	4b50      	ldr	r3, [pc, #320]	; (8108024 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8107ee2:	681b      	ldr	r3, [r3, #0]
 8107ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8107ee8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8107eec:	d107      	bne.n	8107efe <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8107ef2:	4618      	mov	r0, r3
 8107ef4:	f000 fec0 	bl	8108c78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107efa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8107efc:	e3f1      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8107efe:	2300      	movs	r3, #0
 8107f00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107f02:	e3ee      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107f04:	4b47      	ldr	r3, [pc, #284]	; (8108024 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8107f06:	681b      	ldr	r3, [r3, #0]
 8107f08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107f0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8107f10:	d107      	bne.n	8107f22 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107f12:	f107 0318 	add.w	r3, r7, #24
 8107f16:	4618      	mov	r0, r3
 8107f18:	f000 fc06 	bl	8108728 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107f1c:	69bb      	ldr	r3, [r7, #24]
 8107f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8107f20:	e3df      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8107f22:	2300      	movs	r3, #0
 8107f24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107f26:	e3dc      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107f28:	4b3e      	ldr	r3, [pc, #248]	; (8108024 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8107f2a:	681b      	ldr	r3, [r3, #0]
 8107f2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107f30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107f34:	d107      	bne.n	8107f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107f36:	f107 030c 	add.w	r3, r7, #12
 8107f3a:	4618      	mov	r0, r3
 8107f3c:	f000 fd48 	bl	81089d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107f40:	68fb      	ldr	r3, [r7, #12]
 8107f42:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8107f44:	e3cd      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8107f46:	2300      	movs	r3, #0
 8107f48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107f4a:	e3ca      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8107f4c:	4b35      	ldr	r3, [pc, #212]	; (8108024 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8107f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107f50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8107f54:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107f56:	4b33      	ldr	r3, [pc, #204]	; (8108024 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8107f58:	681b      	ldr	r3, [r3, #0]
 8107f5a:	f003 0304 	and.w	r3, r3, #4
 8107f5e:	2b04      	cmp	r3, #4
 8107f60:	d10c      	bne.n	8107f7c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8107f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107f64:	2b00      	cmp	r3, #0
 8107f66:	d109      	bne.n	8107f7c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8107f68:	4b2e      	ldr	r3, [pc, #184]	; (8108024 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8107f6a:	681b      	ldr	r3, [r3, #0]
 8107f6c:	08db      	lsrs	r3, r3, #3
 8107f6e:	f003 0303 	and.w	r3, r3, #3
 8107f72:	4a2d      	ldr	r2, [pc, #180]	; (8108028 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8107f74:	fa22 f303 	lsr.w	r3, r2, r3
 8107f78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107f7a:	e01e      	b.n	8107fba <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107f7c:	4b29      	ldr	r3, [pc, #164]	; (8108024 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8107f7e:	681b      	ldr	r3, [r3, #0]
 8107f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8107f84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107f88:	d106      	bne.n	8107f98 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8107f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107f8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8107f90:	d102      	bne.n	8107f98 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8107f92:	4b26      	ldr	r3, [pc, #152]	; (810802c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8107f94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107f96:	e010      	b.n	8107fba <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107f98:	4b22      	ldr	r3, [pc, #136]	; (8108024 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8107f9a:	681b      	ldr	r3, [r3, #0]
 8107f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8107fa0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107fa4:	d106      	bne.n	8107fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8107fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107fa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107fac:	d102      	bne.n	8107fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8107fae:	4b20      	ldr	r3, [pc, #128]	; (8108030 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8107fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107fb2:	e002      	b.n	8107fba <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8107fb4:	2300      	movs	r3, #0
 8107fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8107fb8:	e393      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8107fba:	e392      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8107fbc:	4b1d      	ldr	r3, [pc, #116]	; (8108034 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8107fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107fc0:	e38f      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8107fc2:	2300      	movs	r3, #0
 8107fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107fc6:	e38c      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8107fc8:	687b      	ldr	r3, [r7, #4]
 8107fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8107fce:	f040 80a7 	bne.w	8108120 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8107fd2:	4b14      	ldr	r3, [pc, #80]	; (8108024 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8107fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107fd6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8107fda:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8107fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107fde:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8107fe2:	d05f      	beq.n	81080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8107fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107fe6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8107fea:	f200 8096 	bhi.w	810811a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8107fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107ff0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8107ff4:	f000 808e 	beq.w	8108114 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8107ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107ffa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8107ffe:	f200 808c 	bhi.w	810811a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8108002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108004:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8108008:	d03a      	beq.n	8108080 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 810800a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810800c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8108010:	f200 8083 	bhi.w	810811a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8108014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108016:	2b00      	cmp	r3, #0
 8108018:	d00e      	beq.n	8108038 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 810801a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810801c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8108020:	d01c      	beq.n	810805c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8108022:	e07a      	b.n	810811a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8108024:	58024400 	.word	0x58024400
 8108028:	03d09000 	.word	0x03d09000
 810802c:	003d0900 	.word	0x003d0900
 8108030:	017d7840 	.word	0x017d7840
 8108034:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8108038:	4baa      	ldr	r3, [pc, #680]	; (81082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810803a:	681b      	ldr	r3, [r3, #0]
 810803c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8108040:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8108044:	d107      	bne.n	8108056 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8108046:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810804a:	4618      	mov	r0, r3
 810804c:	f000 fe14 	bl	8108c78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8108050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108052:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8108054:	e345      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8108056:	2300      	movs	r3, #0
 8108058:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810805a:	e342      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810805c:	4ba1      	ldr	r3, [pc, #644]	; (81082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810805e:	681b      	ldr	r3, [r3, #0]
 8108060:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8108064:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8108068:	d107      	bne.n	810807a <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810806a:	f107 0318 	add.w	r3, r7, #24
 810806e:	4618      	mov	r0, r3
 8108070:	f000 fb5a 	bl	8108728 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8108074:	69bb      	ldr	r3, [r7, #24]
 8108076:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8108078:	e333      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810807a:	2300      	movs	r3, #0
 810807c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810807e:	e330      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8108080:	4b98      	ldr	r3, [pc, #608]	; (81082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8108082:	681b      	ldr	r3, [r3, #0]
 8108084:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8108088:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810808c:	d107      	bne.n	810809e <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810808e:	f107 030c 	add.w	r3, r7, #12
 8108092:	4618      	mov	r0, r3
 8108094:	f000 fc9c 	bl	81089d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8108098:	68fb      	ldr	r3, [r7, #12]
 810809a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810809c:	e321      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810809e:	2300      	movs	r3, #0
 81080a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81080a2:	e31e      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 81080a4:	4b8f      	ldr	r3, [pc, #572]	; (81082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 81080a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81080a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81080ac:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81080ae:	4b8d      	ldr	r3, [pc, #564]	; (81082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 81080b0:	681b      	ldr	r3, [r3, #0]
 81080b2:	f003 0304 	and.w	r3, r3, #4
 81080b6:	2b04      	cmp	r3, #4
 81080b8:	d10c      	bne.n	81080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 81080ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81080bc:	2b00      	cmp	r3, #0
 81080be:	d109      	bne.n	81080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81080c0:	4b88      	ldr	r3, [pc, #544]	; (81082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 81080c2:	681b      	ldr	r3, [r3, #0]
 81080c4:	08db      	lsrs	r3, r3, #3
 81080c6:	f003 0303 	and.w	r3, r3, #3
 81080ca:	4a87      	ldr	r2, [pc, #540]	; (81082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 81080cc:	fa22 f303 	lsr.w	r3, r2, r3
 81080d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 81080d2:	e01e      	b.n	8108112 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81080d4:	4b83      	ldr	r3, [pc, #524]	; (81082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 81080d6:	681b      	ldr	r3, [r3, #0]
 81080d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81080dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81080e0:	d106      	bne.n	81080f0 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 81080e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81080e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81080e8:	d102      	bne.n	81080f0 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 81080ea:	4b80      	ldr	r3, [pc, #512]	; (81082ec <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 81080ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 81080ee:	e010      	b.n	8108112 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81080f0:	4b7c      	ldr	r3, [pc, #496]	; (81082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 81080f2:	681b      	ldr	r3, [r3, #0]
 81080f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81080f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81080fc:	d106      	bne.n	810810c <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 81080fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108100:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8108104:	d102      	bne.n	810810c <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8108106:	4b7a      	ldr	r3, [pc, #488]	; (81082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8108108:	63fb      	str	r3, [r7, #60]	; 0x3c
 810810a:	e002      	b.n	8108112 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 810810c:	2300      	movs	r3, #0
 810810e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8108110:	e2e7      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8108112:	e2e6      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8108114:	4b77      	ldr	r3, [pc, #476]	; (81082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8108116:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8108118:	e2e3      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 810811a:	2300      	movs	r3, #0
 810811c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810811e:	e2e0      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8108120:	687b      	ldr	r3, [r7, #4]
 8108122:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8108126:	f040 809c 	bne.w	8108262 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 810812a:	4b6e      	ldr	r3, [pc, #440]	; (81082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810812c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810812e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8108132:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8108134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108136:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810813a:	d054      	beq.n	81081e6 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 810813c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810813e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8108142:	f200 808b 	bhi.w	810825c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8108146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108148:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810814c:	f000 8083 	beq.w	8108256 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8108150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108152:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8108156:	f200 8081 	bhi.w	810825c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 810815a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810815c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8108160:	d02f      	beq.n	81081c2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8108162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108164:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8108168:	d878      	bhi.n	810825c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 810816a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810816c:	2b00      	cmp	r3, #0
 810816e:	d004      	beq.n	810817a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8108170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108172:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8108176:	d012      	beq.n	810819e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8108178:	e070      	b.n	810825c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810817a:	4b5a      	ldr	r3, [pc, #360]	; (81082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810817c:	681b      	ldr	r3, [r3, #0]
 810817e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8108182:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8108186:	d107      	bne.n	8108198 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8108188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810818c:	4618      	mov	r0, r3
 810818e:	f000 fd73 	bl	8108c78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8108192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108194:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8108196:	e2a4      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8108198:	2300      	movs	r3, #0
 810819a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810819c:	e2a1      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810819e:	4b51      	ldr	r3, [pc, #324]	; (81082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 81081a0:	681b      	ldr	r3, [r3, #0]
 81081a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81081a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81081aa:	d107      	bne.n	81081bc <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81081ac:	f107 0318 	add.w	r3, r7, #24
 81081b0:	4618      	mov	r0, r3
 81081b2:	f000 fab9 	bl	8108728 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81081b6:	69bb      	ldr	r3, [r7, #24]
 81081b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 81081ba:	e292      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 81081bc:	2300      	movs	r3, #0
 81081be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81081c0:	e28f      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81081c2:	4b48      	ldr	r3, [pc, #288]	; (81082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 81081c4:	681b      	ldr	r3, [r3, #0]
 81081c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81081ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81081ce:	d107      	bne.n	81081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81081d0:	f107 030c 	add.w	r3, r7, #12
 81081d4:	4618      	mov	r0, r3
 81081d6:	f000 fbfb 	bl	81089d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81081da:	68fb      	ldr	r3, [r7, #12]
 81081dc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 81081de:	e280      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 81081e0:	2300      	movs	r3, #0
 81081e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81081e4:	e27d      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 81081e6:	4b3f      	ldr	r3, [pc, #252]	; (81082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 81081e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81081ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81081ee:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81081f0:	4b3c      	ldr	r3, [pc, #240]	; (81082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 81081f2:	681b      	ldr	r3, [r3, #0]
 81081f4:	f003 0304 	and.w	r3, r3, #4
 81081f8:	2b04      	cmp	r3, #4
 81081fa:	d10c      	bne.n	8108216 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 81081fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81081fe:	2b00      	cmp	r3, #0
 8108200:	d109      	bne.n	8108216 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8108202:	4b38      	ldr	r3, [pc, #224]	; (81082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8108204:	681b      	ldr	r3, [r3, #0]
 8108206:	08db      	lsrs	r3, r3, #3
 8108208:	f003 0303 	and.w	r3, r3, #3
 810820c:	4a36      	ldr	r2, [pc, #216]	; (81082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 810820e:	fa22 f303 	lsr.w	r3, r2, r3
 8108212:	63fb      	str	r3, [r7, #60]	; 0x3c
 8108214:	e01e      	b.n	8108254 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8108216:	4b33      	ldr	r3, [pc, #204]	; (81082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8108218:	681b      	ldr	r3, [r3, #0]
 810821a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810821e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8108222:	d106      	bne.n	8108232 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8108224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108226:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810822a:	d102      	bne.n	8108232 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 810822c:	4b2f      	ldr	r3, [pc, #188]	; (81082ec <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 810822e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8108230:	e010      	b.n	8108254 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8108232:	4b2c      	ldr	r3, [pc, #176]	; (81082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8108234:	681b      	ldr	r3, [r3, #0]
 8108236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810823a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810823e:	d106      	bne.n	810824e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8108240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108242:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8108246:	d102      	bne.n	810824e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8108248:	4b29      	ldr	r3, [pc, #164]	; (81082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 810824a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810824c:	e002      	b.n	8108254 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 810824e:	2300      	movs	r3, #0
 8108250:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8108252:	e246      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8108254:	e245      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8108256:	4b27      	ldr	r3, [pc, #156]	; (81082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8108258:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810825a:	e242      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 810825c:	2300      	movs	r3, #0
 810825e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8108260:	e23f      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8108262:	687b      	ldr	r3, [r7, #4]
 8108264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8108268:	f040 80a8 	bne.w	81083bc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 810826c:	4b1d      	ldr	r3, [pc, #116]	; (81082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810826e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108270:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8108274:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8108276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108278:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810827c:	d060      	beq.n	8108340 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 810827e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108280:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8108284:	f200 8097 	bhi.w	81083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8108288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810828a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810828e:	f000 808f 	beq.w	81083b0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8108292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108294:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8108298:	f200 808d 	bhi.w	81083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 810829c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810829e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81082a2:	d03b      	beq.n	810831c <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 81082a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81082a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81082aa:	f200 8084 	bhi.w	81083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 81082ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81082b0:	2b00      	cmp	r3, #0
 81082b2:	d004      	beq.n	81082be <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 81082b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81082b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81082ba:	d01d      	beq.n	81082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 81082bc:	e07b      	b.n	81083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81082be:	4b09      	ldr	r3, [pc, #36]	; (81082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 81082c0:	681b      	ldr	r3, [r3, #0]
 81082c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81082c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81082ca:	d107      	bne.n	81082dc <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81082cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81082d0:	4618      	mov	r0, r3
 81082d2:	f000 fcd1 	bl	8108c78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81082d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81082d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 81082da:	e202      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 81082dc:	2300      	movs	r3, #0
 81082de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81082e0:	e1ff      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 81082e2:	bf00      	nop
 81082e4:	58024400 	.word	0x58024400
 81082e8:	03d09000 	.word	0x03d09000
 81082ec:	003d0900 	.word	0x003d0900
 81082f0:	017d7840 	.word	0x017d7840
 81082f4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81082f8:	4ba3      	ldr	r3, [pc, #652]	; (8108588 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 81082fa:	681b      	ldr	r3, [r3, #0]
 81082fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8108300:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8108304:	d107      	bne.n	8108316 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108306:	f107 0318 	add.w	r3, r7, #24
 810830a:	4618      	mov	r0, r3
 810830c:	f000 fa0c 	bl	8108728 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8108310:	69bb      	ldr	r3, [r7, #24]
 8108312:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8108314:	e1e5      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8108316:	2300      	movs	r3, #0
 8108318:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810831a:	e1e2      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810831c:	4b9a      	ldr	r3, [pc, #616]	; (8108588 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810831e:	681b      	ldr	r3, [r3, #0]
 8108320:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8108324:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8108328:	d107      	bne.n	810833a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810832a:	f107 030c 	add.w	r3, r7, #12
 810832e:	4618      	mov	r0, r3
 8108330:	f000 fb4e 	bl	81089d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8108334:	68fb      	ldr	r3, [r7, #12]
 8108336:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8108338:	e1d3      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810833a:	2300      	movs	r3, #0
 810833c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810833e:	e1d0      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8108340:	4b91      	ldr	r3, [pc, #580]	; (8108588 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8108342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8108344:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8108348:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810834a:	4b8f      	ldr	r3, [pc, #572]	; (8108588 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810834c:	681b      	ldr	r3, [r3, #0]
 810834e:	f003 0304 	and.w	r3, r3, #4
 8108352:	2b04      	cmp	r3, #4
 8108354:	d10c      	bne.n	8108370 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8108356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108358:	2b00      	cmp	r3, #0
 810835a:	d109      	bne.n	8108370 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810835c:	4b8a      	ldr	r3, [pc, #552]	; (8108588 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810835e:	681b      	ldr	r3, [r3, #0]
 8108360:	08db      	lsrs	r3, r3, #3
 8108362:	f003 0303 	and.w	r3, r3, #3
 8108366:	4a89      	ldr	r2, [pc, #548]	; (810858c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8108368:	fa22 f303 	lsr.w	r3, r2, r3
 810836c:	63fb      	str	r3, [r7, #60]	; 0x3c
 810836e:	e01e      	b.n	81083ae <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8108370:	4b85      	ldr	r3, [pc, #532]	; (8108588 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8108372:	681b      	ldr	r3, [r3, #0]
 8108374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8108378:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810837c:	d106      	bne.n	810838c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 810837e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108380:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8108384:	d102      	bne.n	810838c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8108386:	4b82      	ldr	r3, [pc, #520]	; (8108590 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8108388:	63fb      	str	r3, [r7, #60]	; 0x3c
 810838a:	e010      	b.n	81083ae <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810838c:	4b7e      	ldr	r3, [pc, #504]	; (8108588 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810838e:	681b      	ldr	r3, [r3, #0]
 8108390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8108394:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8108398:	d106      	bne.n	81083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 810839a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810839c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81083a0:	d102      	bne.n	81083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 81083a2:	4b7c      	ldr	r3, [pc, #496]	; (8108594 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 81083a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 81083a6:	e002      	b.n	81083ae <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 81083a8:	2300      	movs	r3, #0
 81083aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 81083ac:	e199      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 81083ae:	e198      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 81083b0:	4b79      	ldr	r3, [pc, #484]	; (8108598 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 81083b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81083b4:	e195      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 81083b6:	2300      	movs	r3, #0
 81083b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81083ba:	e192      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 81083bc:	687b      	ldr	r3, [r7, #4]
 81083be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 81083c2:	d173      	bne.n	81084ac <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 81083c4:	4b70      	ldr	r3, [pc, #448]	; (8108588 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 81083c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81083c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81083cc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 81083ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81083d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81083d4:	d02f      	beq.n	8108436 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 81083d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81083d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81083dc:	d863      	bhi.n	81084a6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 81083de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81083e0:	2b00      	cmp	r3, #0
 81083e2:	d004      	beq.n	81083ee <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 81083e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81083e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81083ea:	d012      	beq.n	8108412 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 81083ec:	e05b      	b.n	81084a6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81083ee:	4b66      	ldr	r3, [pc, #408]	; (8108588 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 81083f0:	681b      	ldr	r3, [r3, #0]
 81083f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81083f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81083fa:	d107      	bne.n	810840c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81083fc:	f107 0318 	add.w	r3, r7, #24
 8108400:	4618      	mov	r0, r3
 8108402:	f000 f991 	bl	8108728 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8108406:	69bb      	ldr	r3, [r7, #24]
 8108408:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810840a:	e16a      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810840c:	2300      	movs	r3, #0
 810840e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8108410:	e167      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8108412:	4b5d      	ldr	r3, [pc, #372]	; (8108588 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8108414:	681b      	ldr	r3, [r3, #0]
 8108416:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810841a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810841e:	d107      	bne.n	8108430 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108420:	f107 030c 	add.w	r3, r7, #12
 8108424:	4618      	mov	r0, r3
 8108426:	f000 fad3 	bl	81089d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 810842a:	697b      	ldr	r3, [r7, #20]
 810842c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810842e:	e158      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8108430:	2300      	movs	r3, #0
 8108432:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8108434:	e155      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8108436:	4b54      	ldr	r3, [pc, #336]	; (8108588 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8108438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810843a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810843e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8108440:	4b51      	ldr	r3, [pc, #324]	; (8108588 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8108442:	681b      	ldr	r3, [r3, #0]
 8108444:	f003 0304 	and.w	r3, r3, #4
 8108448:	2b04      	cmp	r3, #4
 810844a:	d10c      	bne.n	8108466 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 810844c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810844e:	2b00      	cmp	r3, #0
 8108450:	d109      	bne.n	8108466 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8108452:	4b4d      	ldr	r3, [pc, #308]	; (8108588 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8108454:	681b      	ldr	r3, [r3, #0]
 8108456:	08db      	lsrs	r3, r3, #3
 8108458:	f003 0303 	and.w	r3, r3, #3
 810845c:	4a4b      	ldr	r2, [pc, #300]	; (810858c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 810845e:	fa22 f303 	lsr.w	r3, r2, r3
 8108462:	63fb      	str	r3, [r7, #60]	; 0x3c
 8108464:	e01e      	b.n	81084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8108466:	4b48      	ldr	r3, [pc, #288]	; (8108588 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8108468:	681b      	ldr	r3, [r3, #0]
 810846a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810846e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8108472:	d106      	bne.n	8108482 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8108474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108476:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810847a:	d102      	bne.n	8108482 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 810847c:	4b44      	ldr	r3, [pc, #272]	; (8108590 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 810847e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8108480:	e010      	b.n	81084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8108482:	4b41      	ldr	r3, [pc, #260]	; (8108588 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8108484:	681b      	ldr	r3, [r3, #0]
 8108486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810848a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810848e:	d106      	bne.n	810849e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8108490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108492:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8108496:	d102      	bne.n	810849e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8108498:	4b3e      	ldr	r3, [pc, #248]	; (8108594 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 810849a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810849c:	e002      	b.n	81084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 810849e:	2300      	movs	r3, #0
 81084a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 81084a2:	e11e      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 81084a4:	e11d      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 81084a6:	2300      	movs	r3, #0
 81084a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81084aa:	e11a      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 81084ac:	687b      	ldr	r3, [r7, #4]
 81084ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81084b2:	d133      	bne.n	810851c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 81084b4:	4b34      	ldr	r3, [pc, #208]	; (8108588 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 81084b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81084b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81084bc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 81084be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81084c0:	2b00      	cmp	r3, #0
 81084c2:	d004      	beq.n	81084ce <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 81084c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81084c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81084ca:	d012      	beq.n	81084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 81084cc:	e023      	b.n	8108516 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81084ce:	4b2e      	ldr	r3, [pc, #184]	; (8108588 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 81084d0:	681b      	ldr	r3, [r3, #0]
 81084d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81084d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81084da:	d107      	bne.n	81084ec <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81084dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81084e0:	4618      	mov	r0, r3
 81084e2:	f000 fbc9 	bl	8108c78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81084e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81084e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81084ea:	e0fa      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 81084ec:	2300      	movs	r3, #0
 81084ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81084f0:	e0f7      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81084f2:	4b25      	ldr	r3, [pc, #148]	; (8108588 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 81084f4:	681b      	ldr	r3, [r3, #0]
 81084f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81084fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81084fe:	d107      	bne.n	8108510 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108500:	f107 0318 	add.w	r3, r7, #24
 8108504:	4618      	mov	r0, r3
 8108506:	f000 f90f 	bl	8108728 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 810850a:	6a3b      	ldr	r3, [r7, #32]
 810850c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810850e:	e0e8      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8108510:	2300      	movs	r3, #0
 8108512:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8108514:	e0e5      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8108516:	2300      	movs	r3, #0
 8108518:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810851a:	e0e2      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 810851c:	687b      	ldr	r3, [r7, #4]
 810851e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8108522:	f040 808f 	bne.w	8108644 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8108526:	4b18      	ldr	r3, [pc, #96]	; (8108588 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8108528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810852a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 810852e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8108530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108532:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8108536:	d075      	beq.n	8108624 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8108538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810853a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810853e:	d87e      	bhi.n	810863e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8108540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8108546:	d060      	beq.n	810860a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8108548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810854a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810854e:	d876      	bhi.n	810863e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8108550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108552:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8108556:	d045      	beq.n	81085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8108558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810855a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810855e:	d86e      	bhi.n	810863e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8108560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108562:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8108566:	d02b      	beq.n	81085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8108568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810856a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810856e:	d866      	bhi.n	810863e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8108570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108572:	2b00      	cmp	r3, #0
 8108574:	d004      	beq.n	8108580 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8108576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108578:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810857c:	d00e      	beq.n	810859c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 810857e:	e05e      	b.n	810863e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8108580:	f000 f8bc 	bl	81086fc <HAL_RCCEx_GetD3PCLK1Freq>
 8108584:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8108586:	e0ac      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8108588:	58024400 	.word	0x58024400
 810858c:	03d09000 	.word	0x03d09000
 8108590:	003d0900 	.word	0x003d0900
 8108594:	017d7840 	.word	0x017d7840
 8108598:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810859c:	4b53      	ldr	r3, [pc, #332]	; (81086ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810859e:	681b      	ldr	r3, [r3, #0]
 81085a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81085a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81085a8:	d107      	bne.n	81085ba <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81085aa:	f107 0318 	add.w	r3, r7, #24
 81085ae:	4618      	mov	r0, r3
 81085b0:	f000 f8ba 	bl	8108728 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81085b4:	69fb      	ldr	r3, [r7, #28]
 81085b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81085b8:	e093      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 81085ba:	2300      	movs	r3, #0
 81085bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81085be:	e090      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81085c0:	4b4a      	ldr	r3, [pc, #296]	; (81086ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81085c2:	681b      	ldr	r3, [r3, #0]
 81085c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81085c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81085cc:	d107      	bne.n	81085de <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81085ce:	f107 030c 	add.w	r3, r7, #12
 81085d2:	4618      	mov	r0, r3
 81085d4:	f000 f9fc 	bl	81089d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 81085d8:	693b      	ldr	r3, [r7, #16]
 81085da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81085dc:	e081      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 81085de:	2300      	movs	r3, #0
 81085e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81085e2:	e07e      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 81085e4:	4b41      	ldr	r3, [pc, #260]	; (81086ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81085e6:	681b      	ldr	r3, [r3, #0]
 81085e8:	f003 0304 	and.w	r3, r3, #4
 81085ec:	2b04      	cmp	r3, #4
 81085ee:	d109      	bne.n	8108604 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81085f0:	4b3e      	ldr	r3, [pc, #248]	; (81086ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81085f2:	681b      	ldr	r3, [r3, #0]
 81085f4:	08db      	lsrs	r3, r3, #3
 81085f6:	f003 0303 	and.w	r3, r3, #3
 81085fa:	4a3d      	ldr	r2, [pc, #244]	; (81086f0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 81085fc:	fa22 f303 	lsr.w	r3, r2, r3
 8108600:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8108602:	e06e      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8108604:	2300      	movs	r3, #0
 8108606:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8108608:	e06b      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 810860a:	4b38      	ldr	r3, [pc, #224]	; (81086ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810860c:	681b      	ldr	r3, [r3, #0]
 810860e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8108612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8108616:	d102      	bne.n	810861e <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8108618:	4b36      	ldr	r3, [pc, #216]	; (81086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 810861a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810861c:	e061      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810861e:	2300      	movs	r3, #0
 8108620:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8108622:	e05e      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8108624:	4b31      	ldr	r3, [pc, #196]	; (81086ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8108626:	681b      	ldr	r3, [r3, #0]
 8108628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810862c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8108630:	d102      	bne.n	8108638 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8108632:	4b31      	ldr	r3, [pc, #196]	; (81086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8108634:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8108636:	e054      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8108638:	2300      	movs	r3, #0
 810863a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810863c:	e051      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 810863e:	2300      	movs	r3, #0
 8108640:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8108642:	e04e      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8108644:	687b      	ldr	r3, [r7, #4]
 8108646:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810864a:	d148      	bne.n	81086de <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 810864c:	4b27      	ldr	r3, [pc, #156]	; (81086ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810864e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108650:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8108654:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8108656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108658:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810865c:	d02a      	beq.n	81086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 810865e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108660:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8108664:	d838      	bhi.n	81086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8108666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108668:	2b00      	cmp	r3, #0
 810866a:	d004      	beq.n	8108676 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 810866c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810866e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8108672:	d00d      	beq.n	8108690 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8108674:	e030      	b.n	81086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8108676:	4b1d      	ldr	r3, [pc, #116]	; (81086ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8108678:	681b      	ldr	r3, [r3, #0]
 810867a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810867e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8108682:	d102      	bne.n	810868a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8108684:	4b1c      	ldr	r3, [pc, #112]	; (81086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8108686:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8108688:	e02b      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 810868a:	2300      	movs	r3, #0
 810868c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810868e:	e028      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8108690:	4b16      	ldr	r3, [pc, #88]	; (81086ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8108692:	681b      	ldr	r3, [r3, #0]
 8108694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8108698:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810869c:	d107      	bne.n	81086ae <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810869e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81086a2:	4618      	mov	r0, r3
 81086a4:	f000 fae8 	bl	8108c78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81086a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81086aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81086ac:	e019      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 81086ae:	2300      	movs	r3, #0
 81086b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81086b2:	e016      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81086b4:	4b0d      	ldr	r3, [pc, #52]	; (81086ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81086b6:	681b      	ldr	r3, [r3, #0]
 81086b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81086bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81086c0:	d107      	bne.n	81086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81086c2:	f107 0318 	add.w	r3, r7, #24
 81086c6:	4618      	mov	r0, r3
 81086c8:	f000 f82e 	bl	8108728 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81086cc:	69fb      	ldr	r3, [r7, #28]
 81086ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81086d0:	e007      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 81086d2:	2300      	movs	r3, #0
 81086d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81086d6:	e004      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 81086d8:	2300      	movs	r3, #0
 81086da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81086dc:	e001      	b.n	81086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 81086de:	2300      	movs	r3, #0
 81086e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 81086e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 81086e4:	4618      	mov	r0, r3
 81086e6:	3740      	adds	r7, #64	; 0x40
 81086e8:	46bd      	mov	sp, r7
 81086ea:	bd80      	pop	{r7, pc}
 81086ec:	58024400 	.word	0x58024400
 81086f0:	03d09000 	.word	0x03d09000
 81086f4:	003d0900 	.word	0x003d0900
 81086f8:	017d7840 	.word	0x017d7840

081086fc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81086fc:	b580      	push	{r7, lr}
 81086fe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8108700:	f7fe fb4a 	bl	8106d98 <HAL_RCC_GetHCLKFreq>
 8108704:	4602      	mov	r2, r0
 8108706:	4b06      	ldr	r3, [pc, #24]	; (8108720 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8108708:	6a1b      	ldr	r3, [r3, #32]
 810870a:	091b      	lsrs	r3, r3, #4
 810870c:	f003 0307 	and.w	r3, r3, #7
 8108710:	4904      	ldr	r1, [pc, #16]	; (8108724 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8108712:	5ccb      	ldrb	r3, [r1, r3]
 8108714:	f003 031f 	and.w	r3, r3, #31
 8108718:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 810871c:	4618      	mov	r0, r3
 810871e:	bd80      	pop	{r7, pc}
 8108720:	58024400 	.word	0x58024400
 8108724:	08110244 	.word	0x08110244

08108728 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8108728:	b480      	push	{r7}
 810872a:	b089      	sub	sp, #36	; 0x24
 810872c:	af00      	add	r7, sp, #0
 810872e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8108730:	4ba1      	ldr	r3, [pc, #644]	; (81089b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108734:	f003 0303 	and.w	r3, r3, #3
 8108738:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 810873a:	4b9f      	ldr	r3, [pc, #636]	; (81089b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810873c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810873e:	0b1b      	lsrs	r3, r3, #12
 8108740:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8108744:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8108746:	4b9c      	ldr	r3, [pc, #624]	; (81089b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810874a:	091b      	lsrs	r3, r3, #4
 810874c:	f003 0301 	and.w	r3, r3, #1
 8108750:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8108752:	4b99      	ldr	r3, [pc, #612]	; (81089b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108756:	08db      	lsrs	r3, r3, #3
 8108758:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810875c:	693a      	ldr	r2, [r7, #16]
 810875e:	fb02 f303 	mul.w	r3, r2, r3
 8108762:	ee07 3a90 	vmov	s15, r3
 8108766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810876a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 810876e:	697b      	ldr	r3, [r7, #20]
 8108770:	2b00      	cmp	r3, #0
 8108772:	f000 8111 	beq.w	8108998 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8108776:	69bb      	ldr	r3, [r7, #24]
 8108778:	2b02      	cmp	r3, #2
 810877a:	f000 8083 	beq.w	8108884 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 810877e:	69bb      	ldr	r3, [r7, #24]
 8108780:	2b02      	cmp	r3, #2
 8108782:	f200 80a1 	bhi.w	81088c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8108786:	69bb      	ldr	r3, [r7, #24]
 8108788:	2b00      	cmp	r3, #0
 810878a:	d003      	beq.n	8108794 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 810878c:	69bb      	ldr	r3, [r7, #24]
 810878e:	2b01      	cmp	r3, #1
 8108790:	d056      	beq.n	8108840 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8108792:	e099      	b.n	81088c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108794:	4b88      	ldr	r3, [pc, #544]	; (81089b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108796:	681b      	ldr	r3, [r3, #0]
 8108798:	f003 0320 	and.w	r3, r3, #32
 810879c:	2b00      	cmp	r3, #0
 810879e:	d02d      	beq.n	81087fc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81087a0:	4b85      	ldr	r3, [pc, #532]	; (81089b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81087a2:	681b      	ldr	r3, [r3, #0]
 81087a4:	08db      	lsrs	r3, r3, #3
 81087a6:	f003 0303 	and.w	r3, r3, #3
 81087aa:	4a84      	ldr	r2, [pc, #528]	; (81089bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 81087ac:	fa22 f303 	lsr.w	r3, r2, r3
 81087b0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81087b2:	68bb      	ldr	r3, [r7, #8]
 81087b4:	ee07 3a90 	vmov	s15, r3
 81087b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81087bc:	697b      	ldr	r3, [r7, #20]
 81087be:	ee07 3a90 	vmov	s15, r3
 81087c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81087c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81087ca:	4b7b      	ldr	r3, [pc, #492]	; (81089b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81087cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81087ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81087d2:	ee07 3a90 	vmov	s15, r3
 81087d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81087da:	ed97 6a03 	vldr	s12, [r7, #12]
 81087de:	eddf 5a78 	vldr	s11, [pc, #480]	; 81089c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81087e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81087e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81087ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81087ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81087f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81087f6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81087fa:	e087      	b.n	810890c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81087fc:	697b      	ldr	r3, [r7, #20]
 81087fe:	ee07 3a90 	vmov	s15, r3
 8108802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108806:	eddf 6a6f 	vldr	s13, [pc, #444]	; 81089c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 810880a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810880e:	4b6a      	ldr	r3, [pc, #424]	; (81089b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108816:	ee07 3a90 	vmov	s15, r3
 810881a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810881e:	ed97 6a03 	vldr	s12, [r7, #12]
 8108822:	eddf 5a67 	vldr	s11, [pc, #412]	; 81089c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8108826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810882a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810882e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108836:	ee67 7a27 	vmul.f32	s15, s14, s15
 810883a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810883e:	e065      	b.n	810890c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8108840:	697b      	ldr	r3, [r7, #20]
 8108842:	ee07 3a90 	vmov	s15, r3
 8108846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810884a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 81089c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810884e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108852:	4b59      	ldr	r3, [pc, #356]	; (81089b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810885a:	ee07 3a90 	vmov	s15, r3
 810885e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108862:	ed97 6a03 	vldr	s12, [r7, #12]
 8108866:	eddf 5a56 	vldr	s11, [pc, #344]	; 81089c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810886a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810886e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810887a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810887e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8108882:	e043      	b.n	810890c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8108884:	697b      	ldr	r3, [r7, #20]
 8108886:	ee07 3a90 	vmov	s15, r3
 810888a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810888e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 81089cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8108892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108896:	4b48      	ldr	r3, [pc, #288]	; (81089b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810889a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810889e:	ee07 3a90 	vmov	s15, r3
 81088a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81088a6:	ed97 6a03 	vldr	s12, [r7, #12]
 81088aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 81089c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81088ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81088b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81088b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81088ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81088be:	ee67 7a27 	vmul.f32	s15, s14, s15
 81088c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81088c6:	e021      	b.n	810890c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81088c8:	697b      	ldr	r3, [r7, #20]
 81088ca:	ee07 3a90 	vmov	s15, r3
 81088ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81088d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 81089c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81088d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81088da:	4b37      	ldr	r3, [pc, #220]	; (81089b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81088dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81088de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81088e2:	ee07 3a90 	vmov	s15, r3
 81088e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81088ea:	ed97 6a03 	vldr	s12, [r7, #12]
 81088ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 81089c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81088f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81088f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81088fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81088fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108906:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810890a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 810890c:	4b2a      	ldr	r3, [pc, #168]	; (81089b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810890e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108910:	0a5b      	lsrs	r3, r3, #9
 8108912:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8108916:	ee07 3a90 	vmov	s15, r3
 810891a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810891e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8108922:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108926:	edd7 6a07 	vldr	s13, [r7, #28]
 810892a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810892e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108932:	ee17 2a90 	vmov	r2, s15
 8108936:	687b      	ldr	r3, [r7, #4]
 8108938:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 810893a:	4b1f      	ldr	r3, [pc, #124]	; (81089b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810893c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810893e:	0c1b      	lsrs	r3, r3, #16
 8108940:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8108944:	ee07 3a90 	vmov	s15, r3
 8108948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810894c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8108950:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108954:	edd7 6a07 	vldr	s13, [r7, #28]
 8108958:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810895c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108960:	ee17 2a90 	vmov	r2, s15
 8108964:	687b      	ldr	r3, [r7, #4]
 8108966:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8108968:	4b13      	ldr	r3, [pc, #76]	; (81089b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810896a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810896c:	0e1b      	lsrs	r3, r3, #24
 810896e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8108972:	ee07 3a90 	vmov	s15, r3
 8108976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810897a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810897e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108982:	edd7 6a07 	vldr	s13, [r7, #28]
 8108986:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810898a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810898e:	ee17 2a90 	vmov	r2, s15
 8108992:	687b      	ldr	r3, [r7, #4]
 8108994:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8108996:	e008      	b.n	81089aa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8108998:	687b      	ldr	r3, [r7, #4]
 810899a:	2200      	movs	r2, #0
 810899c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810899e:	687b      	ldr	r3, [r7, #4]
 81089a0:	2200      	movs	r2, #0
 81089a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 81089a4:	687b      	ldr	r3, [r7, #4]
 81089a6:	2200      	movs	r2, #0
 81089a8:	609a      	str	r2, [r3, #8]
}
 81089aa:	bf00      	nop
 81089ac:	3724      	adds	r7, #36	; 0x24
 81089ae:	46bd      	mov	sp, r7
 81089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81089b4:	4770      	bx	lr
 81089b6:	bf00      	nop
 81089b8:	58024400 	.word	0x58024400
 81089bc:	03d09000 	.word	0x03d09000
 81089c0:	46000000 	.word	0x46000000
 81089c4:	4c742400 	.word	0x4c742400
 81089c8:	4a742400 	.word	0x4a742400
 81089cc:	4bbebc20 	.word	0x4bbebc20

081089d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 81089d0:	b480      	push	{r7}
 81089d2:	b089      	sub	sp, #36	; 0x24
 81089d4:	af00      	add	r7, sp, #0
 81089d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81089d8:	4ba1      	ldr	r3, [pc, #644]	; (8108c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81089da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81089dc:	f003 0303 	and.w	r3, r3, #3
 81089e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 81089e2:	4b9f      	ldr	r3, [pc, #636]	; (8108c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81089e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81089e6:	0d1b      	lsrs	r3, r3, #20
 81089e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81089ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81089ee:	4b9c      	ldr	r3, [pc, #624]	; (8108c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81089f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81089f2:	0a1b      	lsrs	r3, r3, #8
 81089f4:	f003 0301 	and.w	r3, r3, #1
 81089f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 81089fa:	4b99      	ldr	r3, [pc, #612]	; (8108c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81089fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81089fe:	08db      	lsrs	r3, r3, #3
 8108a00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8108a04:	693a      	ldr	r2, [r7, #16]
 8108a06:	fb02 f303 	mul.w	r3, r2, r3
 8108a0a:	ee07 3a90 	vmov	s15, r3
 8108a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108a12:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8108a16:	697b      	ldr	r3, [r7, #20]
 8108a18:	2b00      	cmp	r3, #0
 8108a1a:	f000 8111 	beq.w	8108c40 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8108a1e:	69bb      	ldr	r3, [r7, #24]
 8108a20:	2b02      	cmp	r3, #2
 8108a22:	f000 8083 	beq.w	8108b2c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8108a26:	69bb      	ldr	r3, [r7, #24]
 8108a28:	2b02      	cmp	r3, #2
 8108a2a:	f200 80a1 	bhi.w	8108b70 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8108a2e:	69bb      	ldr	r3, [r7, #24]
 8108a30:	2b00      	cmp	r3, #0
 8108a32:	d003      	beq.n	8108a3c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8108a34:	69bb      	ldr	r3, [r7, #24]
 8108a36:	2b01      	cmp	r3, #1
 8108a38:	d056      	beq.n	8108ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8108a3a:	e099      	b.n	8108b70 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108a3c:	4b88      	ldr	r3, [pc, #544]	; (8108c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108a3e:	681b      	ldr	r3, [r3, #0]
 8108a40:	f003 0320 	and.w	r3, r3, #32
 8108a44:	2b00      	cmp	r3, #0
 8108a46:	d02d      	beq.n	8108aa4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8108a48:	4b85      	ldr	r3, [pc, #532]	; (8108c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108a4a:	681b      	ldr	r3, [r3, #0]
 8108a4c:	08db      	lsrs	r3, r3, #3
 8108a4e:	f003 0303 	and.w	r3, r3, #3
 8108a52:	4a84      	ldr	r2, [pc, #528]	; (8108c64 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8108a54:	fa22 f303 	lsr.w	r3, r2, r3
 8108a58:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8108a5a:	68bb      	ldr	r3, [r7, #8]
 8108a5c:	ee07 3a90 	vmov	s15, r3
 8108a60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108a64:	697b      	ldr	r3, [r7, #20]
 8108a66:	ee07 3a90 	vmov	s15, r3
 8108a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108a72:	4b7b      	ldr	r3, [pc, #492]	; (8108c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8108a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108a7a:	ee07 3a90 	vmov	s15, r3
 8108a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108a82:	ed97 6a03 	vldr	s12, [r7, #12]
 8108a86:	eddf 5a78 	vldr	s11, [pc, #480]	; 8108c68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8108a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108a92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108a9e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8108aa2:	e087      	b.n	8108bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8108aa4:	697b      	ldr	r3, [r7, #20]
 8108aa6:	ee07 3a90 	vmov	s15, r3
 8108aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108aae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8108c6c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8108ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108ab6:	4b6a      	ldr	r3, [pc, #424]	; (8108c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8108aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108abe:	ee07 3a90 	vmov	s15, r3
 8108ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108ac6:	ed97 6a03 	vldr	s12, [r7, #12]
 8108aca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8108c68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8108ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108ad6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108ae2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8108ae6:	e065      	b.n	8108bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8108ae8:	697b      	ldr	r3, [r7, #20]
 8108aea:	ee07 3a90 	vmov	s15, r3
 8108aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108af2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8108c70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8108af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108afa:	4b59      	ldr	r3, [pc, #356]	; (8108c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8108afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108b02:	ee07 3a90 	vmov	s15, r3
 8108b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108b0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8108b0e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8108c68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8108b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108b1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108b26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8108b2a:	e043      	b.n	8108bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8108b2c:	697b      	ldr	r3, [r7, #20]
 8108b2e:	ee07 3a90 	vmov	s15, r3
 8108b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108b36:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8108c74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8108b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108b3e:	4b48      	ldr	r3, [pc, #288]	; (8108c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8108b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108b46:	ee07 3a90 	vmov	s15, r3
 8108b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108b4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8108b52:	eddf 5a45 	vldr	s11, [pc, #276]	; 8108c68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8108b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108b5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108b6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8108b6e:	e021      	b.n	8108bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8108b70:	697b      	ldr	r3, [r7, #20]
 8108b72:	ee07 3a90 	vmov	s15, r3
 8108b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108b7a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8108c70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8108b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108b82:	4b37      	ldr	r3, [pc, #220]	; (8108c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8108b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108b8a:	ee07 3a90 	vmov	s15, r3
 8108b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108b92:	ed97 6a03 	vldr	s12, [r7, #12]
 8108b96:	eddf 5a34 	vldr	s11, [pc, #208]	; 8108c68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8108b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108ba2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108bae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8108bb2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8108bb4:	4b2a      	ldr	r3, [pc, #168]	; (8108c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8108bb8:	0a5b      	lsrs	r3, r3, #9
 8108bba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8108bbe:	ee07 3a90 	vmov	s15, r3
 8108bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108bc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8108bca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108bce:	edd7 6a07 	vldr	s13, [r7, #28]
 8108bd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108bd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108bda:	ee17 2a90 	vmov	r2, s15
 8108bde:	687b      	ldr	r3, [r7, #4]
 8108be0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8108be2:	4b1f      	ldr	r3, [pc, #124]	; (8108c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8108be6:	0c1b      	lsrs	r3, r3, #16
 8108be8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8108bec:	ee07 3a90 	vmov	s15, r3
 8108bf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108bf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8108bf8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108bfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8108c00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108c04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108c08:	ee17 2a90 	vmov	r2, s15
 8108c0c:	687b      	ldr	r3, [r7, #4]
 8108c0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8108c10:	4b13      	ldr	r3, [pc, #76]	; (8108c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8108c14:	0e1b      	lsrs	r3, r3, #24
 8108c16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8108c1a:	ee07 3a90 	vmov	s15, r3
 8108c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108c22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8108c26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108c2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8108c2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108c32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108c36:	ee17 2a90 	vmov	r2, s15
 8108c3a:	687b      	ldr	r3, [r7, #4]
 8108c3c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8108c3e:	e008      	b.n	8108c52 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8108c40:	687b      	ldr	r3, [r7, #4]
 8108c42:	2200      	movs	r2, #0
 8108c44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8108c46:	687b      	ldr	r3, [r7, #4]
 8108c48:	2200      	movs	r2, #0
 8108c4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8108c4c:	687b      	ldr	r3, [r7, #4]
 8108c4e:	2200      	movs	r2, #0
 8108c50:	609a      	str	r2, [r3, #8]
}
 8108c52:	bf00      	nop
 8108c54:	3724      	adds	r7, #36	; 0x24
 8108c56:	46bd      	mov	sp, r7
 8108c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108c5c:	4770      	bx	lr
 8108c5e:	bf00      	nop
 8108c60:	58024400 	.word	0x58024400
 8108c64:	03d09000 	.word	0x03d09000
 8108c68:	46000000 	.word	0x46000000
 8108c6c:	4c742400 	.word	0x4c742400
 8108c70:	4a742400 	.word	0x4a742400
 8108c74:	4bbebc20 	.word	0x4bbebc20

08108c78 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8108c78:	b480      	push	{r7}
 8108c7a:	b089      	sub	sp, #36	; 0x24
 8108c7c:	af00      	add	r7, sp, #0
 8108c7e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8108c80:	4ba0      	ldr	r3, [pc, #640]	; (8108f04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108c84:	f003 0303 	and.w	r3, r3, #3
 8108c88:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8108c8a:	4b9e      	ldr	r3, [pc, #632]	; (8108f04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108c8e:	091b      	lsrs	r3, r3, #4
 8108c90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8108c94:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8108c96:	4b9b      	ldr	r3, [pc, #620]	; (8108f04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108c9a:	f003 0301 	and.w	r3, r3, #1
 8108c9e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8108ca0:	4b98      	ldr	r3, [pc, #608]	; (8108f04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108ca4:	08db      	lsrs	r3, r3, #3
 8108ca6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8108caa:	693a      	ldr	r2, [r7, #16]
 8108cac:	fb02 f303 	mul.w	r3, r2, r3
 8108cb0:	ee07 3a90 	vmov	s15, r3
 8108cb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108cb8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8108cbc:	697b      	ldr	r3, [r7, #20]
 8108cbe:	2b00      	cmp	r3, #0
 8108cc0:	f000 8111 	beq.w	8108ee6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8108cc4:	69bb      	ldr	r3, [r7, #24]
 8108cc6:	2b02      	cmp	r3, #2
 8108cc8:	f000 8083 	beq.w	8108dd2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8108ccc:	69bb      	ldr	r3, [r7, #24]
 8108cce:	2b02      	cmp	r3, #2
 8108cd0:	f200 80a1 	bhi.w	8108e16 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8108cd4:	69bb      	ldr	r3, [r7, #24]
 8108cd6:	2b00      	cmp	r3, #0
 8108cd8:	d003      	beq.n	8108ce2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8108cda:	69bb      	ldr	r3, [r7, #24]
 8108cdc:	2b01      	cmp	r3, #1
 8108cde:	d056      	beq.n	8108d8e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8108ce0:	e099      	b.n	8108e16 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108ce2:	4b88      	ldr	r3, [pc, #544]	; (8108f04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108ce4:	681b      	ldr	r3, [r3, #0]
 8108ce6:	f003 0320 	and.w	r3, r3, #32
 8108cea:	2b00      	cmp	r3, #0
 8108cec:	d02d      	beq.n	8108d4a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8108cee:	4b85      	ldr	r3, [pc, #532]	; (8108f04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108cf0:	681b      	ldr	r3, [r3, #0]
 8108cf2:	08db      	lsrs	r3, r3, #3
 8108cf4:	f003 0303 	and.w	r3, r3, #3
 8108cf8:	4a83      	ldr	r2, [pc, #524]	; (8108f08 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8108cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8108cfe:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8108d00:	68bb      	ldr	r3, [r7, #8]
 8108d02:	ee07 3a90 	vmov	s15, r3
 8108d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108d0a:	697b      	ldr	r3, [r7, #20]
 8108d0c:	ee07 3a90 	vmov	s15, r3
 8108d10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108d14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108d18:	4b7a      	ldr	r3, [pc, #488]	; (8108f04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108d1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108d20:	ee07 3a90 	vmov	s15, r3
 8108d24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108d28:	ed97 6a03 	vldr	s12, [r7, #12]
 8108d2c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8108f0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108d30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108d34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108d38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108d3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108d40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108d44:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8108d48:	e087      	b.n	8108e5a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8108d4a:	697b      	ldr	r3, [r7, #20]
 8108d4c:	ee07 3a90 	vmov	s15, r3
 8108d50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108d54:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8108f10 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8108d58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108d5c:	4b69      	ldr	r3, [pc, #420]	; (8108f04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108d60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108d64:	ee07 3a90 	vmov	s15, r3
 8108d68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108d6c:	ed97 6a03 	vldr	s12, [r7, #12]
 8108d70:	eddf 5a66 	vldr	s11, [pc, #408]	; 8108f0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108d74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108d78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108d7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108d80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108d84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108d88:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8108d8c:	e065      	b.n	8108e5a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8108d8e:	697b      	ldr	r3, [r7, #20]
 8108d90:	ee07 3a90 	vmov	s15, r3
 8108d94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108d98:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8108f14 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8108d9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108da0:	4b58      	ldr	r3, [pc, #352]	; (8108f04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108da4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108da8:	ee07 3a90 	vmov	s15, r3
 8108dac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108db0:	ed97 6a03 	vldr	s12, [r7, #12]
 8108db4:	eddf 5a55 	vldr	s11, [pc, #340]	; 8108f0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108db8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108dbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108dc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108dc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108dc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108dcc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8108dd0:	e043      	b.n	8108e5a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8108dd2:	697b      	ldr	r3, [r7, #20]
 8108dd4:	ee07 3a90 	vmov	s15, r3
 8108dd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108ddc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8108f18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8108de0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108de4:	4b47      	ldr	r3, [pc, #284]	; (8108f04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108de8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108dec:	ee07 3a90 	vmov	s15, r3
 8108df0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108df4:	ed97 6a03 	vldr	s12, [r7, #12]
 8108df8:	eddf 5a44 	vldr	s11, [pc, #272]	; 8108f0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108dfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108e00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108e04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108e08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108e0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108e10:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8108e14:	e021      	b.n	8108e5a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8108e16:	697b      	ldr	r3, [r7, #20]
 8108e18:	ee07 3a90 	vmov	s15, r3
 8108e1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108e20:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8108f10 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8108e24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108e28:	4b36      	ldr	r3, [pc, #216]	; (8108f04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108e30:	ee07 3a90 	vmov	s15, r3
 8108e34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108e38:	ed97 6a03 	vldr	s12, [r7, #12]
 8108e3c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8108f0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108e40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108e44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108e48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108e4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108e50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108e54:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8108e58:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8108e5a:	4b2a      	ldr	r3, [pc, #168]	; (8108f04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108e5e:	0a5b      	lsrs	r3, r3, #9
 8108e60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8108e64:	ee07 3a90 	vmov	s15, r3
 8108e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108e6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8108e70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108e74:	edd7 6a07 	vldr	s13, [r7, #28]
 8108e78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108e7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108e80:	ee17 2a90 	vmov	r2, s15
 8108e84:	687b      	ldr	r3, [r7, #4]
 8108e86:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8108e88:	4b1e      	ldr	r3, [pc, #120]	; (8108f04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108e8c:	0c1b      	lsrs	r3, r3, #16
 8108e8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8108e92:	ee07 3a90 	vmov	s15, r3
 8108e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108e9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8108e9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108ea2:	edd7 6a07 	vldr	s13, [r7, #28]
 8108ea6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108eaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108eae:	ee17 2a90 	vmov	r2, s15
 8108eb2:	687b      	ldr	r3, [r7, #4]
 8108eb4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8108eb6:	4b13      	ldr	r3, [pc, #76]	; (8108f04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108eba:	0e1b      	lsrs	r3, r3, #24
 8108ebc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8108ec0:	ee07 3a90 	vmov	s15, r3
 8108ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108ec8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8108ecc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108ed0:	edd7 6a07 	vldr	s13, [r7, #28]
 8108ed4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108ed8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108edc:	ee17 2a90 	vmov	r2, s15
 8108ee0:	687b      	ldr	r3, [r7, #4]
 8108ee2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8108ee4:	e008      	b.n	8108ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8108ee6:	687b      	ldr	r3, [r7, #4]
 8108ee8:	2200      	movs	r2, #0
 8108eea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8108eec:	687b      	ldr	r3, [r7, #4]
 8108eee:	2200      	movs	r2, #0
 8108ef0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8108ef2:	687b      	ldr	r3, [r7, #4]
 8108ef4:	2200      	movs	r2, #0
 8108ef6:	609a      	str	r2, [r3, #8]
}
 8108ef8:	bf00      	nop
 8108efa:	3724      	adds	r7, #36	; 0x24
 8108efc:	46bd      	mov	sp, r7
 8108efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108f02:	4770      	bx	lr
 8108f04:	58024400 	.word	0x58024400
 8108f08:	03d09000 	.word	0x03d09000
 8108f0c:	46000000 	.word	0x46000000
 8108f10:	4c742400 	.word	0x4c742400
 8108f14:	4a742400 	.word	0x4a742400
 8108f18:	4bbebc20 	.word	0x4bbebc20

08108f1c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8108f1c:	b580      	push	{r7, lr}
 8108f1e:	b084      	sub	sp, #16
 8108f20:	af00      	add	r7, sp, #0
 8108f22:	6078      	str	r0, [r7, #4]
 8108f24:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8108f26:	2300      	movs	r3, #0
 8108f28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8108f2a:	4b54      	ldr	r3, [pc, #336]	; (810907c <RCCEx_PLL2_Config+0x160>)
 8108f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108f2e:	f003 0303 	and.w	r3, r3, #3
 8108f32:	2b03      	cmp	r3, #3
 8108f34:	d101      	bne.n	8108f3a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8108f36:	2301      	movs	r3, #1
 8108f38:	e09b      	b.n	8109072 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8108f3a:	4b50      	ldr	r3, [pc, #320]	; (810907c <RCCEx_PLL2_Config+0x160>)
 8108f3c:	681b      	ldr	r3, [r3, #0]
 8108f3e:	4a4f      	ldr	r2, [pc, #316]	; (810907c <RCCEx_PLL2_Config+0x160>)
 8108f40:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8108f44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108f46:	f7f8 fc25 	bl	8101794 <HAL_GetTick>
 8108f4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8108f4c:	e008      	b.n	8108f60 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8108f4e:	f7f8 fc21 	bl	8101794 <HAL_GetTick>
 8108f52:	4602      	mov	r2, r0
 8108f54:	68bb      	ldr	r3, [r7, #8]
 8108f56:	1ad3      	subs	r3, r2, r3
 8108f58:	2b02      	cmp	r3, #2
 8108f5a:	d901      	bls.n	8108f60 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8108f5c:	2303      	movs	r3, #3
 8108f5e:	e088      	b.n	8109072 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8108f60:	4b46      	ldr	r3, [pc, #280]	; (810907c <RCCEx_PLL2_Config+0x160>)
 8108f62:	681b      	ldr	r3, [r3, #0]
 8108f64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8108f68:	2b00      	cmp	r3, #0
 8108f6a:	d1f0      	bne.n	8108f4e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8108f6c:	4b43      	ldr	r3, [pc, #268]	; (810907c <RCCEx_PLL2_Config+0x160>)
 8108f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108f70:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8108f74:	687b      	ldr	r3, [r7, #4]
 8108f76:	681b      	ldr	r3, [r3, #0]
 8108f78:	031b      	lsls	r3, r3, #12
 8108f7a:	4940      	ldr	r1, [pc, #256]	; (810907c <RCCEx_PLL2_Config+0x160>)
 8108f7c:	4313      	orrs	r3, r2
 8108f7e:	628b      	str	r3, [r1, #40]	; 0x28
 8108f80:	687b      	ldr	r3, [r7, #4]
 8108f82:	685b      	ldr	r3, [r3, #4]
 8108f84:	3b01      	subs	r3, #1
 8108f86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8108f8a:	687b      	ldr	r3, [r7, #4]
 8108f8c:	689b      	ldr	r3, [r3, #8]
 8108f8e:	3b01      	subs	r3, #1
 8108f90:	025b      	lsls	r3, r3, #9
 8108f92:	b29b      	uxth	r3, r3
 8108f94:	431a      	orrs	r2, r3
 8108f96:	687b      	ldr	r3, [r7, #4]
 8108f98:	68db      	ldr	r3, [r3, #12]
 8108f9a:	3b01      	subs	r3, #1
 8108f9c:	041b      	lsls	r3, r3, #16
 8108f9e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8108fa2:	431a      	orrs	r2, r3
 8108fa4:	687b      	ldr	r3, [r7, #4]
 8108fa6:	691b      	ldr	r3, [r3, #16]
 8108fa8:	3b01      	subs	r3, #1
 8108faa:	061b      	lsls	r3, r3, #24
 8108fac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8108fb0:	4932      	ldr	r1, [pc, #200]	; (810907c <RCCEx_PLL2_Config+0x160>)
 8108fb2:	4313      	orrs	r3, r2
 8108fb4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8108fb6:	4b31      	ldr	r3, [pc, #196]	; (810907c <RCCEx_PLL2_Config+0x160>)
 8108fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108fba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8108fbe:	687b      	ldr	r3, [r7, #4]
 8108fc0:	695b      	ldr	r3, [r3, #20]
 8108fc2:	492e      	ldr	r1, [pc, #184]	; (810907c <RCCEx_PLL2_Config+0x160>)
 8108fc4:	4313      	orrs	r3, r2
 8108fc6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8108fc8:	4b2c      	ldr	r3, [pc, #176]	; (810907c <RCCEx_PLL2_Config+0x160>)
 8108fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108fcc:	f023 0220 	bic.w	r2, r3, #32
 8108fd0:	687b      	ldr	r3, [r7, #4]
 8108fd2:	699b      	ldr	r3, [r3, #24]
 8108fd4:	4929      	ldr	r1, [pc, #164]	; (810907c <RCCEx_PLL2_Config+0x160>)
 8108fd6:	4313      	orrs	r3, r2
 8108fd8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8108fda:	4b28      	ldr	r3, [pc, #160]	; (810907c <RCCEx_PLL2_Config+0x160>)
 8108fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108fde:	4a27      	ldr	r2, [pc, #156]	; (810907c <RCCEx_PLL2_Config+0x160>)
 8108fe0:	f023 0310 	bic.w	r3, r3, #16
 8108fe4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8108fe6:	4b25      	ldr	r3, [pc, #148]	; (810907c <RCCEx_PLL2_Config+0x160>)
 8108fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108fea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8108fee:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8108ff2:	687a      	ldr	r2, [r7, #4]
 8108ff4:	69d2      	ldr	r2, [r2, #28]
 8108ff6:	00d2      	lsls	r2, r2, #3
 8108ff8:	4920      	ldr	r1, [pc, #128]	; (810907c <RCCEx_PLL2_Config+0x160>)
 8108ffa:	4313      	orrs	r3, r2
 8108ffc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8108ffe:	4b1f      	ldr	r3, [pc, #124]	; (810907c <RCCEx_PLL2_Config+0x160>)
 8109000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109002:	4a1e      	ldr	r2, [pc, #120]	; (810907c <RCCEx_PLL2_Config+0x160>)
 8109004:	f043 0310 	orr.w	r3, r3, #16
 8109008:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810900a:	683b      	ldr	r3, [r7, #0]
 810900c:	2b00      	cmp	r3, #0
 810900e:	d106      	bne.n	810901e <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8109010:	4b1a      	ldr	r3, [pc, #104]	; (810907c <RCCEx_PLL2_Config+0x160>)
 8109012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109014:	4a19      	ldr	r2, [pc, #100]	; (810907c <RCCEx_PLL2_Config+0x160>)
 8109016:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 810901a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810901c:	e00f      	b.n	810903e <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810901e:	683b      	ldr	r3, [r7, #0]
 8109020:	2b01      	cmp	r3, #1
 8109022:	d106      	bne.n	8109032 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8109024:	4b15      	ldr	r3, [pc, #84]	; (810907c <RCCEx_PLL2_Config+0x160>)
 8109026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109028:	4a14      	ldr	r2, [pc, #80]	; (810907c <RCCEx_PLL2_Config+0x160>)
 810902a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810902e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8109030:	e005      	b.n	810903e <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8109032:	4b12      	ldr	r3, [pc, #72]	; (810907c <RCCEx_PLL2_Config+0x160>)
 8109034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109036:	4a11      	ldr	r2, [pc, #68]	; (810907c <RCCEx_PLL2_Config+0x160>)
 8109038:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 810903c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810903e:	4b0f      	ldr	r3, [pc, #60]	; (810907c <RCCEx_PLL2_Config+0x160>)
 8109040:	681b      	ldr	r3, [r3, #0]
 8109042:	4a0e      	ldr	r2, [pc, #56]	; (810907c <RCCEx_PLL2_Config+0x160>)
 8109044:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8109048:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810904a:	f7f8 fba3 	bl	8101794 <HAL_GetTick>
 810904e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8109050:	e008      	b.n	8109064 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8109052:	f7f8 fb9f 	bl	8101794 <HAL_GetTick>
 8109056:	4602      	mov	r2, r0
 8109058:	68bb      	ldr	r3, [r7, #8]
 810905a:	1ad3      	subs	r3, r2, r3
 810905c:	2b02      	cmp	r3, #2
 810905e:	d901      	bls.n	8109064 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8109060:	2303      	movs	r3, #3
 8109062:	e006      	b.n	8109072 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8109064:	4b05      	ldr	r3, [pc, #20]	; (810907c <RCCEx_PLL2_Config+0x160>)
 8109066:	681b      	ldr	r3, [r3, #0]
 8109068:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810906c:	2b00      	cmp	r3, #0
 810906e:	d0f0      	beq.n	8109052 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8109070:	7bfb      	ldrb	r3, [r7, #15]
}
 8109072:	4618      	mov	r0, r3
 8109074:	3710      	adds	r7, #16
 8109076:	46bd      	mov	sp, r7
 8109078:	bd80      	pop	{r7, pc}
 810907a:	bf00      	nop
 810907c:	58024400 	.word	0x58024400

08109080 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8109080:	b580      	push	{r7, lr}
 8109082:	b084      	sub	sp, #16
 8109084:	af00      	add	r7, sp, #0
 8109086:	6078      	str	r0, [r7, #4]
 8109088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810908a:	2300      	movs	r3, #0
 810908c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810908e:	4b54      	ldr	r3, [pc, #336]	; (81091e0 <RCCEx_PLL3_Config+0x160>)
 8109090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109092:	f003 0303 	and.w	r3, r3, #3
 8109096:	2b03      	cmp	r3, #3
 8109098:	d101      	bne.n	810909e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810909a:	2301      	movs	r3, #1
 810909c:	e09b      	b.n	81091d6 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810909e:	4b50      	ldr	r3, [pc, #320]	; (81091e0 <RCCEx_PLL3_Config+0x160>)
 81090a0:	681b      	ldr	r3, [r3, #0]
 81090a2:	4a4f      	ldr	r2, [pc, #316]	; (81091e0 <RCCEx_PLL3_Config+0x160>)
 81090a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 81090a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81090aa:	f7f8 fb73 	bl	8101794 <HAL_GetTick>
 81090ae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81090b0:	e008      	b.n	81090c4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 81090b2:	f7f8 fb6f 	bl	8101794 <HAL_GetTick>
 81090b6:	4602      	mov	r2, r0
 81090b8:	68bb      	ldr	r3, [r7, #8]
 81090ba:	1ad3      	subs	r3, r2, r3
 81090bc:	2b02      	cmp	r3, #2
 81090be:	d901      	bls.n	81090c4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 81090c0:	2303      	movs	r3, #3
 81090c2:	e088      	b.n	81091d6 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81090c4:	4b46      	ldr	r3, [pc, #280]	; (81091e0 <RCCEx_PLL3_Config+0x160>)
 81090c6:	681b      	ldr	r3, [r3, #0]
 81090c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81090cc:	2b00      	cmp	r3, #0
 81090ce:	d1f0      	bne.n	81090b2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 81090d0:	4b43      	ldr	r3, [pc, #268]	; (81091e0 <RCCEx_PLL3_Config+0x160>)
 81090d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81090d4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 81090d8:	687b      	ldr	r3, [r7, #4]
 81090da:	681b      	ldr	r3, [r3, #0]
 81090dc:	051b      	lsls	r3, r3, #20
 81090de:	4940      	ldr	r1, [pc, #256]	; (81091e0 <RCCEx_PLL3_Config+0x160>)
 81090e0:	4313      	orrs	r3, r2
 81090e2:	628b      	str	r3, [r1, #40]	; 0x28
 81090e4:	687b      	ldr	r3, [r7, #4]
 81090e6:	685b      	ldr	r3, [r3, #4]
 81090e8:	3b01      	subs	r3, #1
 81090ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81090ee:	687b      	ldr	r3, [r7, #4]
 81090f0:	689b      	ldr	r3, [r3, #8]
 81090f2:	3b01      	subs	r3, #1
 81090f4:	025b      	lsls	r3, r3, #9
 81090f6:	b29b      	uxth	r3, r3
 81090f8:	431a      	orrs	r2, r3
 81090fa:	687b      	ldr	r3, [r7, #4]
 81090fc:	68db      	ldr	r3, [r3, #12]
 81090fe:	3b01      	subs	r3, #1
 8109100:	041b      	lsls	r3, r3, #16
 8109102:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8109106:	431a      	orrs	r2, r3
 8109108:	687b      	ldr	r3, [r7, #4]
 810910a:	691b      	ldr	r3, [r3, #16]
 810910c:	3b01      	subs	r3, #1
 810910e:	061b      	lsls	r3, r3, #24
 8109110:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8109114:	4932      	ldr	r1, [pc, #200]	; (81091e0 <RCCEx_PLL3_Config+0x160>)
 8109116:	4313      	orrs	r3, r2
 8109118:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810911a:	4b31      	ldr	r3, [pc, #196]	; (81091e0 <RCCEx_PLL3_Config+0x160>)
 810911c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810911e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8109122:	687b      	ldr	r3, [r7, #4]
 8109124:	695b      	ldr	r3, [r3, #20]
 8109126:	492e      	ldr	r1, [pc, #184]	; (81091e0 <RCCEx_PLL3_Config+0x160>)
 8109128:	4313      	orrs	r3, r2
 810912a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 810912c:	4b2c      	ldr	r3, [pc, #176]	; (81091e0 <RCCEx_PLL3_Config+0x160>)
 810912e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109130:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8109134:	687b      	ldr	r3, [r7, #4]
 8109136:	699b      	ldr	r3, [r3, #24]
 8109138:	4929      	ldr	r1, [pc, #164]	; (81091e0 <RCCEx_PLL3_Config+0x160>)
 810913a:	4313      	orrs	r3, r2
 810913c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810913e:	4b28      	ldr	r3, [pc, #160]	; (81091e0 <RCCEx_PLL3_Config+0x160>)
 8109140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109142:	4a27      	ldr	r2, [pc, #156]	; (81091e0 <RCCEx_PLL3_Config+0x160>)
 8109144:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8109148:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810914a:	4b25      	ldr	r3, [pc, #148]	; (81091e0 <RCCEx_PLL3_Config+0x160>)
 810914c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810914e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8109152:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8109156:	687a      	ldr	r2, [r7, #4]
 8109158:	69d2      	ldr	r2, [r2, #28]
 810915a:	00d2      	lsls	r2, r2, #3
 810915c:	4920      	ldr	r1, [pc, #128]	; (81091e0 <RCCEx_PLL3_Config+0x160>)
 810915e:	4313      	orrs	r3, r2
 8109160:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8109162:	4b1f      	ldr	r3, [pc, #124]	; (81091e0 <RCCEx_PLL3_Config+0x160>)
 8109164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109166:	4a1e      	ldr	r2, [pc, #120]	; (81091e0 <RCCEx_PLL3_Config+0x160>)
 8109168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810916c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810916e:	683b      	ldr	r3, [r7, #0]
 8109170:	2b00      	cmp	r3, #0
 8109172:	d106      	bne.n	8109182 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8109174:	4b1a      	ldr	r3, [pc, #104]	; (81091e0 <RCCEx_PLL3_Config+0x160>)
 8109176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109178:	4a19      	ldr	r2, [pc, #100]	; (81091e0 <RCCEx_PLL3_Config+0x160>)
 810917a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810917e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8109180:	e00f      	b.n	81091a2 <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8109182:	683b      	ldr	r3, [r7, #0]
 8109184:	2b01      	cmp	r3, #1
 8109186:	d106      	bne.n	8109196 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8109188:	4b15      	ldr	r3, [pc, #84]	; (81091e0 <RCCEx_PLL3_Config+0x160>)
 810918a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810918c:	4a14      	ldr	r2, [pc, #80]	; (81091e0 <RCCEx_PLL3_Config+0x160>)
 810918e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8109192:	62d3      	str	r3, [r2, #44]	; 0x2c
 8109194:	e005      	b.n	81091a2 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8109196:	4b12      	ldr	r3, [pc, #72]	; (81091e0 <RCCEx_PLL3_Config+0x160>)
 8109198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810919a:	4a11      	ldr	r2, [pc, #68]	; (81091e0 <RCCEx_PLL3_Config+0x160>)
 810919c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 81091a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81091a2:	4b0f      	ldr	r3, [pc, #60]	; (81091e0 <RCCEx_PLL3_Config+0x160>)
 81091a4:	681b      	ldr	r3, [r3, #0]
 81091a6:	4a0e      	ldr	r2, [pc, #56]	; (81091e0 <RCCEx_PLL3_Config+0x160>)
 81091a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81091ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81091ae:	f7f8 faf1 	bl	8101794 <HAL_GetTick>
 81091b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81091b4:	e008      	b.n	81091c8 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 81091b6:	f7f8 faed 	bl	8101794 <HAL_GetTick>
 81091ba:	4602      	mov	r2, r0
 81091bc:	68bb      	ldr	r3, [r7, #8]
 81091be:	1ad3      	subs	r3, r2, r3
 81091c0:	2b02      	cmp	r3, #2
 81091c2:	d901      	bls.n	81091c8 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 81091c4:	2303      	movs	r3, #3
 81091c6:	e006      	b.n	81091d6 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81091c8:	4b05      	ldr	r3, [pc, #20]	; (81091e0 <RCCEx_PLL3_Config+0x160>)
 81091ca:	681b      	ldr	r3, [r3, #0]
 81091cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81091d0:	2b00      	cmp	r3, #0
 81091d2:	d0f0      	beq.n	81091b6 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 81091d4:	7bfb      	ldrb	r3, [r7, #15]
}
 81091d6:	4618      	mov	r0, r3
 81091d8:	3710      	adds	r7, #16
 81091da:	46bd      	mov	sp, r7
 81091dc:	bd80      	pop	{r7, pc}
 81091de:	bf00      	nop
 81091e0:	58024400 	.word	0x58024400

081091e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 81091e4:	b580      	push	{r7, lr}
 81091e6:	b082      	sub	sp, #8
 81091e8:	af00      	add	r7, sp, #0
 81091ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81091ec:	687b      	ldr	r3, [r7, #4]
 81091ee:	2b00      	cmp	r3, #0
 81091f0:	d101      	bne.n	81091f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 81091f2:	2301      	movs	r3, #1
 81091f4:	e049      	b.n	810928a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81091f6:	687b      	ldr	r3, [r7, #4]
 81091f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81091fc:	b2db      	uxtb	r3, r3
 81091fe:	2b00      	cmp	r3, #0
 8109200:	d106      	bne.n	8109210 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8109202:	687b      	ldr	r3, [r7, #4]
 8109204:	2200      	movs	r2, #0
 8109206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 810920a:	6878      	ldr	r0, [r7, #4]
 810920c:	f7f7 fdde 	bl	8100dcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8109210:	687b      	ldr	r3, [r7, #4]
 8109212:	2202      	movs	r2, #2
 8109214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8109218:	687b      	ldr	r3, [r7, #4]
 810921a:	681a      	ldr	r2, [r3, #0]
 810921c:	687b      	ldr	r3, [r7, #4]
 810921e:	3304      	adds	r3, #4
 8109220:	4619      	mov	r1, r3
 8109222:	4610      	mov	r0, r2
 8109224:	f000 fb72 	bl	810990c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8109228:	687b      	ldr	r3, [r7, #4]
 810922a:	2201      	movs	r2, #1
 810922c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8109230:	687b      	ldr	r3, [r7, #4]
 8109232:	2201      	movs	r2, #1
 8109234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8109238:	687b      	ldr	r3, [r7, #4]
 810923a:	2201      	movs	r2, #1
 810923c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8109240:	687b      	ldr	r3, [r7, #4]
 8109242:	2201      	movs	r2, #1
 8109244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8109248:	687b      	ldr	r3, [r7, #4]
 810924a:	2201      	movs	r2, #1
 810924c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8109250:	687b      	ldr	r3, [r7, #4]
 8109252:	2201      	movs	r2, #1
 8109254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8109258:	687b      	ldr	r3, [r7, #4]
 810925a:	2201      	movs	r2, #1
 810925c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8109260:	687b      	ldr	r3, [r7, #4]
 8109262:	2201      	movs	r2, #1
 8109264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8109268:	687b      	ldr	r3, [r7, #4]
 810926a:	2201      	movs	r2, #1
 810926c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8109270:	687b      	ldr	r3, [r7, #4]
 8109272:	2201      	movs	r2, #1
 8109274:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8109278:	687b      	ldr	r3, [r7, #4]
 810927a:	2201      	movs	r2, #1
 810927c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8109280:	687b      	ldr	r3, [r7, #4]
 8109282:	2201      	movs	r2, #1
 8109284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8109288:	2300      	movs	r3, #0
}
 810928a:	4618      	mov	r0, r3
 810928c:	3708      	adds	r7, #8
 810928e:	46bd      	mov	sp, r7
 8109290:	bd80      	pop	{r7, pc}
	...

08109294 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8109294:	b480      	push	{r7}
 8109296:	b085      	sub	sp, #20
 8109298:	af00      	add	r7, sp, #0
 810929a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 810929c:	687b      	ldr	r3, [r7, #4]
 810929e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81092a2:	b2db      	uxtb	r3, r3
 81092a4:	2b01      	cmp	r3, #1
 81092a6:	d001      	beq.n	81092ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 81092a8:	2301      	movs	r3, #1
 81092aa:	e047      	b.n	810933c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81092ac:	687b      	ldr	r3, [r7, #4]
 81092ae:	2202      	movs	r2, #2
 81092b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81092b4:	687b      	ldr	r3, [r7, #4]
 81092b6:	681b      	ldr	r3, [r3, #0]
 81092b8:	4a23      	ldr	r2, [pc, #140]	; (8109348 <HAL_TIM_Base_Start+0xb4>)
 81092ba:	4293      	cmp	r3, r2
 81092bc:	d01d      	beq.n	81092fa <HAL_TIM_Base_Start+0x66>
 81092be:	687b      	ldr	r3, [r7, #4]
 81092c0:	681b      	ldr	r3, [r3, #0]
 81092c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81092c6:	d018      	beq.n	81092fa <HAL_TIM_Base_Start+0x66>
 81092c8:	687b      	ldr	r3, [r7, #4]
 81092ca:	681b      	ldr	r3, [r3, #0]
 81092cc:	4a1f      	ldr	r2, [pc, #124]	; (810934c <HAL_TIM_Base_Start+0xb8>)
 81092ce:	4293      	cmp	r3, r2
 81092d0:	d013      	beq.n	81092fa <HAL_TIM_Base_Start+0x66>
 81092d2:	687b      	ldr	r3, [r7, #4]
 81092d4:	681b      	ldr	r3, [r3, #0]
 81092d6:	4a1e      	ldr	r2, [pc, #120]	; (8109350 <HAL_TIM_Base_Start+0xbc>)
 81092d8:	4293      	cmp	r3, r2
 81092da:	d00e      	beq.n	81092fa <HAL_TIM_Base_Start+0x66>
 81092dc:	687b      	ldr	r3, [r7, #4]
 81092de:	681b      	ldr	r3, [r3, #0]
 81092e0:	4a1c      	ldr	r2, [pc, #112]	; (8109354 <HAL_TIM_Base_Start+0xc0>)
 81092e2:	4293      	cmp	r3, r2
 81092e4:	d009      	beq.n	81092fa <HAL_TIM_Base_Start+0x66>
 81092e6:	687b      	ldr	r3, [r7, #4]
 81092e8:	681b      	ldr	r3, [r3, #0]
 81092ea:	4a1b      	ldr	r2, [pc, #108]	; (8109358 <HAL_TIM_Base_Start+0xc4>)
 81092ec:	4293      	cmp	r3, r2
 81092ee:	d004      	beq.n	81092fa <HAL_TIM_Base_Start+0x66>
 81092f0:	687b      	ldr	r3, [r7, #4]
 81092f2:	681b      	ldr	r3, [r3, #0]
 81092f4:	4a19      	ldr	r2, [pc, #100]	; (810935c <HAL_TIM_Base_Start+0xc8>)
 81092f6:	4293      	cmp	r3, r2
 81092f8:	d115      	bne.n	8109326 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81092fa:	687b      	ldr	r3, [r7, #4]
 81092fc:	681b      	ldr	r3, [r3, #0]
 81092fe:	689a      	ldr	r2, [r3, #8]
 8109300:	4b17      	ldr	r3, [pc, #92]	; (8109360 <HAL_TIM_Base_Start+0xcc>)
 8109302:	4013      	ands	r3, r2
 8109304:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8109306:	68fb      	ldr	r3, [r7, #12]
 8109308:	2b06      	cmp	r3, #6
 810930a:	d015      	beq.n	8109338 <HAL_TIM_Base_Start+0xa4>
 810930c:	68fb      	ldr	r3, [r7, #12]
 810930e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8109312:	d011      	beq.n	8109338 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8109314:	687b      	ldr	r3, [r7, #4]
 8109316:	681b      	ldr	r3, [r3, #0]
 8109318:	681a      	ldr	r2, [r3, #0]
 810931a:	687b      	ldr	r3, [r7, #4]
 810931c:	681b      	ldr	r3, [r3, #0]
 810931e:	f042 0201 	orr.w	r2, r2, #1
 8109322:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8109324:	e008      	b.n	8109338 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8109326:	687b      	ldr	r3, [r7, #4]
 8109328:	681b      	ldr	r3, [r3, #0]
 810932a:	681a      	ldr	r2, [r3, #0]
 810932c:	687b      	ldr	r3, [r7, #4]
 810932e:	681b      	ldr	r3, [r3, #0]
 8109330:	f042 0201 	orr.w	r2, r2, #1
 8109334:	601a      	str	r2, [r3, #0]
 8109336:	e000      	b.n	810933a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8109338:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810933a:	2300      	movs	r3, #0
}
 810933c:	4618      	mov	r0, r3
 810933e:	3714      	adds	r7, #20
 8109340:	46bd      	mov	sp, r7
 8109342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109346:	4770      	bx	lr
 8109348:	40010000 	.word	0x40010000
 810934c:	40000400 	.word	0x40000400
 8109350:	40000800 	.word	0x40000800
 8109354:	40000c00 	.word	0x40000c00
 8109358:	40010400 	.word	0x40010400
 810935c:	40001800 	.word	0x40001800
 8109360:	00010007 	.word	0x00010007

08109364 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8109364:	b480      	push	{r7}
 8109366:	b083      	sub	sp, #12
 8109368:	af00      	add	r7, sp, #0
 810936a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 810936c:	687b      	ldr	r3, [r7, #4]
 810936e:	681b      	ldr	r3, [r3, #0]
 8109370:	6a1a      	ldr	r2, [r3, #32]
 8109372:	f241 1311 	movw	r3, #4369	; 0x1111
 8109376:	4013      	ands	r3, r2
 8109378:	2b00      	cmp	r3, #0
 810937a:	d10f      	bne.n	810939c <HAL_TIM_Base_Stop+0x38>
 810937c:	687b      	ldr	r3, [r7, #4]
 810937e:	681b      	ldr	r3, [r3, #0]
 8109380:	6a1a      	ldr	r2, [r3, #32]
 8109382:	f240 4344 	movw	r3, #1092	; 0x444
 8109386:	4013      	ands	r3, r2
 8109388:	2b00      	cmp	r3, #0
 810938a:	d107      	bne.n	810939c <HAL_TIM_Base_Stop+0x38>
 810938c:	687b      	ldr	r3, [r7, #4]
 810938e:	681b      	ldr	r3, [r3, #0]
 8109390:	681a      	ldr	r2, [r3, #0]
 8109392:	687b      	ldr	r3, [r7, #4]
 8109394:	681b      	ldr	r3, [r3, #0]
 8109396:	f022 0201 	bic.w	r2, r2, #1
 810939a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 810939c:	687b      	ldr	r3, [r7, #4]
 810939e:	2201      	movs	r2, #1
 81093a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 81093a4:	2300      	movs	r3, #0
}
 81093a6:	4618      	mov	r0, r3
 81093a8:	370c      	adds	r7, #12
 81093aa:	46bd      	mov	sp, r7
 81093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81093b0:	4770      	bx	lr
	...

081093b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 81093b4:	b480      	push	{r7}
 81093b6:	b085      	sub	sp, #20
 81093b8:	af00      	add	r7, sp, #0
 81093ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 81093bc:	687b      	ldr	r3, [r7, #4]
 81093be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81093c2:	b2db      	uxtb	r3, r3
 81093c4:	2b01      	cmp	r3, #1
 81093c6:	d001      	beq.n	81093cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 81093c8:	2301      	movs	r3, #1
 81093ca:	e04f      	b.n	810946c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81093cc:	687b      	ldr	r3, [r7, #4]
 81093ce:	2202      	movs	r2, #2
 81093d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 81093d4:	687b      	ldr	r3, [r7, #4]
 81093d6:	681b      	ldr	r3, [r3, #0]
 81093d8:	68da      	ldr	r2, [r3, #12]
 81093da:	687b      	ldr	r3, [r7, #4]
 81093dc:	681b      	ldr	r3, [r3, #0]
 81093de:	f042 0201 	orr.w	r2, r2, #1
 81093e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81093e4:	687b      	ldr	r3, [r7, #4]
 81093e6:	681b      	ldr	r3, [r3, #0]
 81093e8:	4a23      	ldr	r2, [pc, #140]	; (8109478 <HAL_TIM_Base_Start_IT+0xc4>)
 81093ea:	4293      	cmp	r3, r2
 81093ec:	d01d      	beq.n	810942a <HAL_TIM_Base_Start_IT+0x76>
 81093ee:	687b      	ldr	r3, [r7, #4]
 81093f0:	681b      	ldr	r3, [r3, #0]
 81093f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81093f6:	d018      	beq.n	810942a <HAL_TIM_Base_Start_IT+0x76>
 81093f8:	687b      	ldr	r3, [r7, #4]
 81093fa:	681b      	ldr	r3, [r3, #0]
 81093fc:	4a1f      	ldr	r2, [pc, #124]	; (810947c <HAL_TIM_Base_Start_IT+0xc8>)
 81093fe:	4293      	cmp	r3, r2
 8109400:	d013      	beq.n	810942a <HAL_TIM_Base_Start_IT+0x76>
 8109402:	687b      	ldr	r3, [r7, #4]
 8109404:	681b      	ldr	r3, [r3, #0]
 8109406:	4a1e      	ldr	r2, [pc, #120]	; (8109480 <HAL_TIM_Base_Start_IT+0xcc>)
 8109408:	4293      	cmp	r3, r2
 810940a:	d00e      	beq.n	810942a <HAL_TIM_Base_Start_IT+0x76>
 810940c:	687b      	ldr	r3, [r7, #4]
 810940e:	681b      	ldr	r3, [r3, #0]
 8109410:	4a1c      	ldr	r2, [pc, #112]	; (8109484 <HAL_TIM_Base_Start_IT+0xd0>)
 8109412:	4293      	cmp	r3, r2
 8109414:	d009      	beq.n	810942a <HAL_TIM_Base_Start_IT+0x76>
 8109416:	687b      	ldr	r3, [r7, #4]
 8109418:	681b      	ldr	r3, [r3, #0]
 810941a:	4a1b      	ldr	r2, [pc, #108]	; (8109488 <HAL_TIM_Base_Start_IT+0xd4>)
 810941c:	4293      	cmp	r3, r2
 810941e:	d004      	beq.n	810942a <HAL_TIM_Base_Start_IT+0x76>
 8109420:	687b      	ldr	r3, [r7, #4]
 8109422:	681b      	ldr	r3, [r3, #0]
 8109424:	4a19      	ldr	r2, [pc, #100]	; (810948c <HAL_TIM_Base_Start_IT+0xd8>)
 8109426:	4293      	cmp	r3, r2
 8109428:	d115      	bne.n	8109456 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810942a:	687b      	ldr	r3, [r7, #4]
 810942c:	681b      	ldr	r3, [r3, #0]
 810942e:	689a      	ldr	r2, [r3, #8]
 8109430:	4b17      	ldr	r3, [pc, #92]	; (8109490 <HAL_TIM_Base_Start_IT+0xdc>)
 8109432:	4013      	ands	r3, r2
 8109434:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8109436:	68fb      	ldr	r3, [r7, #12]
 8109438:	2b06      	cmp	r3, #6
 810943a:	d015      	beq.n	8109468 <HAL_TIM_Base_Start_IT+0xb4>
 810943c:	68fb      	ldr	r3, [r7, #12]
 810943e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8109442:	d011      	beq.n	8109468 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8109444:	687b      	ldr	r3, [r7, #4]
 8109446:	681b      	ldr	r3, [r3, #0]
 8109448:	681a      	ldr	r2, [r3, #0]
 810944a:	687b      	ldr	r3, [r7, #4]
 810944c:	681b      	ldr	r3, [r3, #0]
 810944e:	f042 0201 	orr.w	r2, r2, #1
 8109452:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8109454:	e008      	b.n	8109468 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8109456:	687b      	ldr	r3, [r7, #4]
 8109458:	681b      	ldr	r3, [r3, #0]
 810945a:	681a      	ldr	r2, [r3, #0]
 810945c:	687b      	ldr	r3, [r7, #4]
 810945e:	681b      	ldr	r3, [r3, #0]
 8109460:	f042 0201 	orr.w	r2, r2, #1
 8109464:	601a      	str	r2, [r3, #0]
 8109466:	e000      	b.n	810946a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8109468:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810946a:	2300      	movs	r3, #0
}
 810946c:	4618      	mov	r0, r3
 810946e:	3714      	adds	r7, #20
 8109470:	46bd      	mov	sp, r7
 8109472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109476:	4770      	bx	lr
 8109478:	40010000 	.word	0x40010000
 810947c:	40000400 	.word	0x40000400
 8109480:	40000800 	.word	0x40000800
 8109484:	40000c00 	.word	0x40000c00
 8109488:	40010400 	.word	0x40010400
 810948c:	40001800 	.word	0x40001800
 8109490:	00010007 	.word	0x00010007

08109494 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8109494:	b580      	push	{r7, lr}
 8109496:	b082      	sub	sp, #8
 8109498:	af00      	add	r7, sp, #0
 810949a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 810949c:	687b      	ldr	r3, [r7, #4]
 810949e:	681b      	ldr	r3, [r3, #0]
 81094a0:	691b      	ldr	r3, [r3, #16]
 81094a2:	f003 0302 	and.w	r3, r3, #2
 81094a6:	2b02      	cmp	r3, #2
 81094a8:	d122      	bne.n	81094f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 81094aa:	687b      	ldr	r3, [r7, #4]
 81094ac:	681b      	ldr	r3, [r3, #0]
 81094ae:	68db      	ldr	r3, [r3, #12]
 81094b0:	f003 0302 	and.w	r3, r3, #2
 81094b4:	2b02      	cmp	r3, #2
 81094b6:	d11b      	bne.n	81094f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 81094b8:	687b      	ldr	r3, [r7, #4]
 81094ba:	681b      	ldr	r3, [r3, #0]
 81094bc:	f06f 0202 	mvn.w	r2, #2
 81094c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 81094c2:	687b      	ldr	r3, [r7, #4]
 81094c4:	2201      	movs	r2, #1
 81094c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 81094c8:	687b      	ldr	r3, [r7, #4]
 81094ca:	681b      	ldr	r3, [r3, #0]
 81094cc:	699b      	ldr	r3, [r3, #24]
 81094ce:	f003 0303 	and.w	r3, r3, #3
 81094d2:	2b00      	cmp	r3, #0
 81094d4:	d003      	beq.n	81094de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 81094d6:	6878      	ldr	r0, [r7, #4]
 81094d8:	f000 f9fa 	bl	81098d0 <HAL_TIM_IC_CaptureCallback>
 81094dc:	e005      	b.n	81094ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 81094de:	6878      	ldr	r0, [r7, #4]
 81094e0:	f000 f9ec 	bl	81098bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 81094e4:	6878      	ldr	r0, [r7, #4]
 81094e6:	f000 f9fd 	bl	81098e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81094ea:	687b      	ldr	r3, [r7, #4]
 81094ec:	2200      	movs	r2, #0
 81094ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 81094f0:	687b      	ldr	r3, [r7, #4]
 81094f2:	681b      	ldr	r3, [r3, #0]
 81094f4:	691b      	ldr	r3, [r3, #16]
 81094f6:	f003 0304 	and.w	r3, r3, #4
 81094fa:	2b04      	cmp	r3, #4
 81094fc:	d122      	bne.n	8109544 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 81094fe:	687b      	ldr	r3, [r7, #4]
 8109500:	681b      	ldr	r3, [r3, #0]
 8109502:	68db      	ldr	r3, [r3, #12]
 8109504:	f003 0304 	and.w	r3, r3, #4
 8109508:	2b04      	cmp	r3, #4
 810950a:	d11b      	bne.n	8109544 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 810950c:	687b      	ldr	r3, [r7, #4]
 810950e:	681b      	ldr	r3, [r3, #0]
 8109510:	f06f 0204 	mvn.w	r2, #4
 8109514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8109516:	687b      	ldr	r3, [r7, #4]
 8109518:	2202      	movs	r2, #2
 810951a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 810951c:	687b      	ldr	r3, [r7, #4]
 810951e:	681b      	ldr	r3, [r3, #0]
 8109520:	699b      	ldr	r3, [r3, #24]
 8109522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8109526:	2b00      	cmp	r3, #0
 8109528:	d003      	beq.n	8109532 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810952a:	6878      	ldr	r0, [r7, #4]
 810952c:	f000 f9d0 	bl	81098d0 <HAL_TIM_IC_CaptureCallback>
 8109530:	e005      	b.n	810953e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8109532:	6878      	ldr	r0, [r7, #4]
 8109534:	f000 f9c2 	bl	81098bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8109538:	6878      	ldr	r0, [r7, #4]
 810953a:	f000 f9d3 	bl	81098e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810953e:	687b      	ldr	r3, [r7, #4]
 8109540:	2200      	movs	r2, #0
 8109542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8109544:	687b      	ldr	r3, [r7, #4]
 8109546:	681b      	ldr	r3, [r3, #0]
 8109548:	691b      	ldr	r3, [r3, #16]
 810954a:	f003 0308 	and.w	r3, r3, #8
 810954e:	2b08      	cmp	r3, #8
 8109550:	d122      	bne.n	8109598 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8109552:	687b      	ldr	r3, [r7, #4]
 8109554:	681b      	ldr	r3, [r3, #0]
 8109556:	68db      	ldr	r3, [r3, #12]
 8109558:	f003 0308 	and.w	r3, r3, #8
 810955c:	2b08      	cmp	r3, #8
 810955e:	d11b      	bne.n	8109598 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8109560:	687b      	ldr	r3, [r7, #4]
 8109562:	681b      	ldr	r3, [r3, #0]
 8109564:	f06f 0208 	mvn.w	r2, #8
 8109568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 810956a:	687b      	ldr	r3, [r7, #4]
 810956c:	2204      	movs	r2, #4
 810956e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8109570:	687b      	ldr	r3, [r7, #4]
 8109572:	681b      	ldr	r3, [r3, #0]
 8109574:	69db      	ldr	r3, [r3, #28]
 8109576:	f003 0303 	and.w	r3, r3, #3
 810957a:	2b00      	cmp	r3, #0
 810957c:	d003      	beq.n	8109586 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810957e:	6878      	ldr	r0, [r7, #4]
 8109580:	f000 f9a6 	bl	81098d0 <HAL_TIM_IC_CaptureCallback>
 8109584:	e005      	b.n	8109592 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8109586:	6878      	ldr	r0, [r7, #4]
 8109588:	f000 f998 	bl	81098bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810958c:	6878      	ldr	r0, [r7, #4]
 810958e:	f000 f9a9 	bl	81098e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8109592:	687b      	ldr	r3, [r7, #4]
 8109594:	2200      	movs	r2, #0
 8109596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8109598:	687b      	ldr	r3, [r7, #4]
 810959a:	681b      	ldr	r3, [r3, #0]
 810959c:	691b      	ldr	r3, [r3, #16]
 810959e:	f003 0310 	and.w	r3, r3, #16
 81095a2:	2b10      	cmp	r3, #16
 81095a4:	d122      	bne.n	81095ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 81095a6:	687b      	ldr	r3, [r7, #4]
 81095a8:	681b      	ldr	r3, [r3, #0]
 81095aa:	68db      	ldr	r3, [r3, #12]
 81095ac:	f003 0310 	and.w	r3, r3, #16
 81095b0:	2b10      	cmp	r3, #16
 81095b2:	d11b      	bne.n	81095ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 81095b4:	687b      	ldr	r3, [r7, #4]
 81095b6:	681b      	ldr	r3, [r3, #0]
 81095b8:	f06f 0210 	mvn.w	r2, #16
 81095bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 81095be:	687b      	ldr	r3, [r7, #4]
 81095c0:	2208      	movs	r2, #8
 81095c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 81095c4:	687b      	ldr	r3, [r7, #4]
 81095c6:	681b      	ldr	r3, [r3, #0]
 81095c8:	69db      	ldr	r3, [r3, #28]
 81095ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81095ce:	2b00      	cmp	r3, #0
 81095d0:	d003      	beq.n	81095da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81095d2:	6878      	ldr	r0, [r7, #4]
 81095d4:	f000 f97c 	bl	81098d0 <HAL_TIM_IC_CaptureCallback>
 81095d8:	e005      	b.n	81095e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81095da:	6878      	ldr	r0, [r7, #4]
 81095dc:	f000 f96e 	bl	81098bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81095e0:	6878      	ldr	r0, [r7, #4]
 81095e2:	f000 f97f 	bl	81098e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81095e6:	687b      	ldr	r3, [r7, #4]
 81095e8:	2200      	movs	r2, #0
 81095ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 81095ec:	687b      	ldr	r3, [r7, #4]
 81095ee:	681b      	ldr	r3, [r3, #0]
 81095f0:	691b      	ldr	r3, [r3, #16]
 81095f2:	f003 0301 	and.w	r3, r3, #1
 81095f6:	2b01      	cmp	r3, #1
 81095f8:	d10e      	bne.n	8109618 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 81095fa:	687b      	ldr	r3, [r7, #4]
 81095fc:	681b      	ldr	r3, [r3, #0]
 81095fe:	68db      	ldr	r3, [r3, #12]
 8109600:	f003 0301 	and.w	r3, r3, #1
 8109604:	2b01      	cmp	r3, #1
 8109606:	d107      	bne.n	8109618 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8109608:	687b      	ldr	r3, [r7, #4]
 810960a:	681b      	ldr	r3, [r3, #0]
 810960c:	f06f 0201 	mvn.w	r2, #1
 8109610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8109612:	6878      	ldr	r0, [r7, #4]
 8109614:	f7f7 fa6c 	bl	8100af0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8109618:	687b      	ldr	r3, [r7, #4]
 810961a:	681b      	ldr	r3, [r3, #0]
 810961c:	691b      	ldr	r3, [r3, #16]
 810961e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8109622:	2b80      	cmp	r3, #128	; 0x80
 8109624:	d10e      	bne.n	8109644 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8109626:	687b      	ldr	r3, [r7, #4]
 8109628:	681b      	ldr	r3, [r3, #0]
 810962a:	68db      	ldr	r3, [r3, #12]
 810962c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8109630:	2b80      	cmp	r3, #128	; 0x80
 8109632:	d107      	bne.n	8109644 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8109634:	687b      	ldr	r3, [r7, #4]
 8109636:	681b      	ldr	r3, [r3, #0]
 8109638:	f06f 0280 	mvn.w	r2, #128	; 0x80
 810963c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 810963e:	6878      	ldr	r0, [r7, #4]
 8109640:	f000 fb2c 	bl	8109c9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8109644:	687b      	ldr	r3, [r7, #4]
 8109646:	681b      	ldr	r3, [r3, #0]
 8109648:	691b      	ldr	r3, [r3, #16]
 810964a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810964e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8109652:	d10e      	bne.n	8109672 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8109654:	687b      	ldr	r3, [r7, #4]
 8109656:	681b      	ldr	r3, [r3, #0]
 8109658:	68db      	ldr	r3, [r3, #12]
 810965a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810965e:	2b80      	cmp	r3, #128	; 0x80
 8109660:	d107      	bne.n	8109672 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8109662:	687b      	ldr	r3, [r7, #4]
 8109664:	681b      	ldr	r3, [r3, #0]
 8109666:	f46f 7280 	mvn.w	r2, #256	; 0x100
 810966a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 810966c:	6878      	ldr	r0, [r7, #4]
 810966e:	f000 fb1f 	bl	8109cb0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8109672:	687b      	ldr	r3, [r7, #4]
 8109674:	681b      	ldr	r3, [r3, #0]
 8109676:	691b      	ldr	r3, [r3, #16]
 8109678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810967c:	2b40      	cmp	r3, #64	; 0x40
 810967e:	d10e      	bne.n	810969e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8109680:	687b      	ldr	r3, [r7, #4]
 8109682:	681b      	ldr	r3, [r3, #0]
 8109684:	68db      	ldr	r3, [r3, #12]
 8109686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810968a:	2b40      	cmp	r3, #64	; 0x40
 810968c:	d107      	bne.n	810969e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 810968e:	687b      	ldr	r3, [r7, #4]
 8109690:	681b      	ldr	r3, [r3, #0]
 8109692:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8109696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8109698:	6878      	ldr	r0, [r7, #4]
 810969a:	f000 f92d 	bl	81098f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 810969e:	687b      	ldr	r3, [r7, #4]
 81096a0:	681b      	ldr	r3, [r3, #0]
 81096a2:	691b      	ldr	r3, [r3, #16]
 81096a4:	f003 0320 	and.w	r3, r3, #32
 81096a8:	2b20      	cmp	r3, #32
 81096aa:	d10e      	bne.n	81096ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 81096ac:	687b      	ldr	r3, [r7, #4]
 81096ae:	681b      	ldr	r3, [r3, #0]
 81096b0:	68db      	ldr	r3, [r3, #12]
 81096b2:	f003 0320 	and.w	r3, r3, #32
 81096b6:	2b20      	cmp	r3, #32
 81096b8:	d107      	bne.n	81096ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 81096ba:	687b      	ldr	r3, [r7, #4]
 81096bc:	681b      	ldr	r3, [r3, #0]
 81096be:	f06f 0220 	mvn.w	r2, #32
 81096c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 81096c4:	6878      	ldr	r0, [r7, #4]
 81096c6:	f000 fadf 	bl	8109c88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 81096ca:	bf00      	nop
 81096cc:	3708      	adds	r7, #8
 81096ce:	46bd      	mov	sp, r7
 81096d0:	bd80      	pop	{r7, pc}
	...

081096d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 81096d4:	b580      	push	{r7, lr}
 81096d6:	b084      	sub	sp, #16
 81096d8:	af00      	add	r7, sp, #0
 81096da:	6078      	str	r0, [r7, #4]
 81096dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 81096de:	687b      	ldr	r3, [r7, #4]
 81096e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81096e4:	2b01      	cmp	r3, #1
 81096e6:	d101      	bne.n	81096ec <HAL_TIM_ConfigClockSource+0x18>
 81096e8:	2302      	movs	r3, #2
 81096ea:	e0dd      	b.n	81098a8 <HAL_TIM_ConfigClockSource+0x1d4>
 81096ec:	687b      	ldr	r3, [r7, #4]
 81096ee:	2201      	movs	r2, #1
 81096f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 81096f4:	687b      	ldr	r3, [r7, #4]
 81096f6:	2202      	movs	r2, #2
 81096f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 81096fc:	687b      	ldr	r3, [r7, #4]
 81096fe:	681b      	ldr	r3, [r3, #0]
 8109700:	689b      	ldr	r3, [r3, #8]
 8109702:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8109704:	68fb      	ldr	r3, [r7, #12]
 8109706:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 810970a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 810970e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8109710:	68fb      	ldr	r3, [r7, #12]
 8109712:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8109716:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8109718:	687b      	ldr	r3, [r7, #4]
 810971a:	681b      	ldr	r3, [r3, #0]
 810971c:	68fa      	ldr	r2, [r7, #12]
 810971e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8109720:	683b      	ldr	r3, [r7, #0]
 8109722:	681b      	ldr	r3, [r3, #0]
 8109724:	4a62      	ldr	r2, [pc, #392]	; (81098b0 <HAL_TIM_ConfigClockSource+0x1dc>)
 8109726:	4293      	cmp	r3, r2
 8109728:	f000 80a9 	beq.w	810987e <HAL_TIM_ConfigClockSource+0x1aa>
 810972c:	4a60      	ldr	r2, [pc, #384]	; (81098b0 <HAL_TIM_ConfigClockSource+0x1dc>)
 810972e:	4293      	cmp	r3, r2
 8109730:	f200 80ae 	bhi.w	8109890 <HAL_TIM_ConfigClockSource+0x1bc>
 8109734:	4a5f      	ldr	r2, [pc, #380]	; (81098b4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8109736:	4293      	cmp	r3, r2
 8109738:	f000 80a1 	beq.w	810987e <HAL_TIM_ConfigClockSource+0x1aa>
 810973c:	4a5d      	ldr	r2, [pc, #372]	; (81098b4 <HAL_TIM_ConfigClockSource+0x1e0>)
 810973e:	4293      	cmp	r3, r2
 8109740:	f200 80a6 	bhi.w	8109890 <HAL_TIM_ConfigClockSource+0x1bc>
 8109744:	4a5c      	ldr	r2, [pc, #368]	; (81098b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8109746:	4293      	cmp	r3, r2
 8109748:	f000 8099 	beq.w	810987e <HAL_TIM_ConfigClockSource+0x1aa>
 810974c:	4a5a      	ldr	r2, [pc, #360]	; (81098b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 810974e:	4293      	cmp	r3, r2
 8109750:	f200 809e 	bhi.w	8109890 <HAL_TIM_ConfigClockSource+0x1bc>
 8109754:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8109758:	f000 8091 	beq.w	810987e <HAL_TIM_ConfigClockSource+0x1aa>
 810975c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8109760:	f200 8096 	bhi.w	8109890 <HAL_TIM_ConfigClockSource+0x1bc>
 8109764:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8109768:	f000 8089 	beq.w	810987e <HAL_TIM_ConfigClockSource+0x1aa>
 810976c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8109770:	f200 808e 	bhi.w	8109890 <HAL_TIM_ConfigClockSource+0x1bc>
 8109774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8109778:	d03e      	beq.n	81097f8 <HAL_TIM_ConfigClockSource+0x124>
 810977a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810977e:	f200 8087 	bhi.w	8109890 <HAL_TIM_ConfigClockSource+0x1bc>
 8109782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8109786:	f000 8085 	beq.w	8109894 <HAL_TIM_ConfigClockSource+0x1c0>
 810978a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810978e:	d87f      	bhi.n	8109890 <HAL_TIM_ConfigClockSource+0x1bc>
 8109790:	2b70      	cmp	r3, #112	; 0x70
 8109792:	d01a      	beq.n	81097ca <HAL_TIM_ConfigClockSource+0xf6>
 8109794:	2b70      	cmp	r3, #112	; 0x70
 8109796:	d87b      	bhi.n	8109890 <HAL_TIM_ConfigClockSource+0x1bc>
 8109798:	2b60      	cmp	r3, #96	; 0x60
 810979a:	d050      	beq.n	810983e <HAL_TIM_ConfigClockSource+0x16a>
 810979c:	2b60      	cmp	r3, #96	; 0x60
 810979e:	d877      	bhi.n	8109890 <HAL_TIM_ConfigClockSource+0x1bc>
 81097a0:	2b50      	cmp	r3, #80	; 0x50
 81097a2:	d03c      	beq.n	810981e <HAL_TIM_ConfigClockSource+0x14a>
 81097a4:	2b50      	cmp	r3, #80	; 0x50
 81097a6:	d873      	bhi.n	8109890 <HAL_TIM_ConfigClockSource+0x1bc>
 81097a8:	2b40      	cmp	r3, #64	; 0x40
 81097aa:	d058      	beq.n	810985e <HAL_TIM_ConfigClockSource+0x18a>
 81097ac:	2b40      	cmp	r3, #64	; 0x40
 81097ae:	d86f      	bhi.n	8109890 <HAL_TIM_ConfigClockSource+0x1bc>
 81097b0:	2b30      	cmp	r3, #48	; 0x30
 81097b2:	d064      	beq.n	810987e <HAL_TIM_ConfigClockSource+0x1aa>
 81097b4:	2b30      	cmp	r3, #48	; 0x30
 81097b6:	d86b      	bhi.n	8109890 <HAL_TIM_ConfigClockSource+0x1bc>
 81097b8:	2b20      	cmp	r3, #32
 81097ba:	d060      	beq.n	810987e <HAL_TIM_ConfigClockSource+0x1aa>
 81097bc:	2b20      	cmp	r3, #32
 81097be:	d867      	bhi.n	8109890 <HAL_TIM_ConfigClockSource+0x1bc>
 81097c0:	2b00      	cmp	r3, #0
 81097c2:	d05c      	beq.n	810987e <HAL_TIM_ConfigClockSource+0x1aa>
 81097c4:	2b10      	cmp	r3, #16
 81097c6:	d05a      	beq.n	810987e <HAL_TIM_ConfigClockSource+0x1aa>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 81097c8:	e062      	b.n	8109890 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 81097ca:	687b      	ldr	r3, [r7, #4]
 81097cc:	6818      	ldr	r0, [r3, #0]
 81097ce:	683b      	ldr	r3, [r7, #0]
 81097d0:	6899      	ldr	r1, [r3, #8]
 81097d2:	683b      	ldr	r3, [r7, #0]
 81097d4:	685a      	ldr	r2, [r3, #4]
 81097d6:	683b      	ldr	r3, [r7, #0]
 81097d8:	68db      	ldr	r3, [r3, #12]
 81097da:	f000 f9ad 	bl	8109b38 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 81097de:	687b      	ldr	r3, [r7, #4]
 81097e0:	681b      	ldr	r3, [r3, #0]
 81097e2:	689b      	ldr	r3, [r3, #8]
 81097e4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 81097e6:	68fb      	ldr	r3, [r7, #12]
 81097e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 81097ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 81097ee:	687b      	ldr	r3, [r7, #4]
 81097f0:	681b      	ldr	r3, [r3, #0]
 81097f2:	68fa      	ldr	r2, [r7, #12]
 81097f4:	609a      	str	r2, [r3, #8]
      break;
 81097f6:	e04e      	b.n	8109896 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_ETR_SetConfig(htim->Instance,
 81097f8:	687b      	ldr	r3, [r7, #4]
 81097fa:	6818      	ldr	r0, [r3, #0]
 81097fc:	683b      	ldr	r3, [r7, #0]
 81097fe:	6899      	ldr	r1, [r3, #8]
 8109800:	683b      	ldr	r3, [r7, #0]
 8109802:	685a      	ldr	r2, [r3, #4]
 8109804:	683b      	ldr	r3, [r7, #0]
 8109806:	68db      	ldr	r3, [r3, #12]
 8109808:	f000 f996 	bl	8109b38 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 810980c:	687b      	ldr	r3, [r7, #4]
 810980e:	681b      	ldr	r3, [r3, #0]
 8109810:	689a      	ldr	r2, [r3, #8]
 8109812:	687b      	ldr	r3, [r7, #4]
 8109814:	681b      	ldr	r3, [r3, #0]
 8109816:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 810981a:	609a      	str	r2, [r3, #8]
      break;
 810981c:	e03b      	b.n	8109896 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 810981e:	687b      	ldr	r3, [r7, #4]
 8109820:	6818      	ldr	r0, [r3, #0]
 8109822:	683b      	ldr	r3, [r7, #0]
 8109824:	6859      	ldr	r1, [r3, #4]
 8109826:	683b      	ldr	r3, [r7, #0]
 8109828:	68db      	ldr	r3, [r3, #12]
 810982a:	461a      	mov	r2, r3
 810982c:	f000 f908 	bl	8109a40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8109830:	687b      	ldr	r3, [r7, #4]
 8109832:	681b      	ldr	r3, [r3, #0]
 8109834:	2150      	movs	r1, #80	; 0x50
 8109836:	4618      	mov	r0, r3
 8109838:	f000 f961 	bl	8109afe <TIM_ITRx_SetConfig>
      break;
 810983c:	e02b      	b.n	8109896 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 810983e:	687b      	ldr	r3, [r7, #4]
 8109840:	6818      	ldr	r0, [r3, #0]
 8109842:	683b      	ldr	r3, [r7, #0]
 8109844:	6859      	ldr	r1, [r3, #4]
 8109846:	683b      	ldr	r3, [r7, #0]
 8109848:	68db      	ldr	r3, [r3, #12]
 810984a:	461a      	mov	r2, r3
 810984c:	f000 f927 	bl	8109a9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8109850:	687b      	ldr	r3, [r7, #4]
 8109852:	681b      	ldr	r3, [r3, #0]
 8109854:	2160      	movs	r1, #96	; 0x60
 8109856:	4618      	mov	r0, r3
 8109858:	f000 f951 	bl	8109afe <TIM_ITRx_SetConfig>
      break;
 810985c:	e01b      	b.n	8109896 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 810985e:	687b      	ldr	r3, [r7, #4]
 8109860:	6818      	ldr	r0, [r3, #0]
 8109862:	683b      	ldr	r3, [r7, #0]
 8109864:	6859      	ldr	r1, [r3, #4]
 8109866:	683b      	ldr	r3, [r7, #0]
 8109868:	68db      	ldr	r3, [r3, #12]
 810986a:	461a      	mov	r2, r3
 810986c:	f000 f8e8 	bl	8109a40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8109870:	687b      	ldr	r3, [r7, #4]
 8109872:	681b      	ldr	r3, [r3, #0]
 8109874:	2140      	movs	r1, #64	; 0x40
 8109876:	4618      	mov	r0, r3
 8109878:	f000 f941 	bl	8109afe <TIM_ITRx_SetConfig>
      break;
 810987c:	e00b      	b.n	8109896 <HAL_TIM_ConfigClockSource+0x1c2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 810987e:	687b      	ldr	r3, [r7, #4]
 8109880:	681a      	ldr	r2, [r3, #0]
 8109882:	683b      	ldr	r3, [r7, #0]
 8109884:	681b      	ldr	r3, [r3, #0]
 8109886:	4619      	mov	r1, r3
 8109888:	4610      	mov	r0, r2
 810988a:	f000 f938 	bl	8109afe <TIM_ITRx_SetConfig>
        break;
 810988e:	e002      	b.n	8109896 <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 8109890:	bf00      	nop
 8109892:	e000      	b.n	8109896 <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 8109894:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8109896:	687b      	ldr	r3, [r7, #4]
 8109898:	2201      	movs	r2, #1
 810989a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 810989e:	687b      	ldr	r3, [r7, #4]
 81098a0:	2200      	movs	r2, #0
 81098a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 81098a6:	2300      	movs	r3, #0
}
 81098a8:	4618      	mov	r0, r3
 81098aa:	3710      	adds	r7, #16
 81098ac:	46bd      	mov	sp, r7
 81098ae:	bd80      	pop	{r7, pc}
 81098b0:	00100040 	.word	0x00100040
 81098b4:	00100030 	.word	0x00100030
 81098b8:	00100020 	.word	0x00100020

081098bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 81098bc:	b480      	push	{r7}
 81098be:	b083      	sub	sp, #12
 81098c0:	af00      	add	r7, sp, #0
 81098c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 81098c4:	bf00      	nop
 81098c6:	370c      	adds	r7, #12
 81098c8:	46bd      	mov	sp, r7
 81098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81098ce:	4770      	bx	lr

081098d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 81098d0:	b480      	push	{r7}
 81098d2:	b083      	sub	sp, #12
 81098d4:	af00      	add	r7, sp, #0
 81098d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 81098d8:	bf00      	nop
 81098da:	370c      	adds	r7, #12
 81098dc:	46bd      	mov	sp, r7
 81098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81098e2:	4770      	bx	lr

081098e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 81098e4:	b480      	push	{r7}
 81098e6:	b083      	sub	sp, #12
 81098e8:	af00      	add	r7, sp, #0
 81098ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 81098ec:	bf00      	nop
 81098ee:	370c      	adds	r7, #12
 81098f0:	46bd      	mov	sp, r7
 81098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81098f6:	4770      	bx	lr

081098f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 81098f8:	b480      	push	{r7}
 81098fa:	b083      	sub	sp, #12
 81098fc:	af00      	add	r7, sp, #0
 81098fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8109900:	bf00      	nop
 8109902:	370c      	adds	r7, #12
 8109904:	46bd      	mov	sp, r7
 8109906:	f85d 7b04 	ldr.w	r7, [sp], #4
 810990a:	4770      	bx	lr

0810990c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 810990c:	b480      	push	{r7}
 810990e:	b085      	sub	sp, #20
 8109910:	af00      	add	r7, sp, #0
 8109912:	6078      	str	r0, [r7, #4]
 8109914:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8109916:	687b      	ldr	r3, [r7, #4]
 8109918:	681b      	ldr	r3, [r3, #0]
 810991a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810991c:	687b      	ldr	r3, [r7, #4]
 810991e:	4a40      	ldr	r2, [pc, #256]	; (8109a20 <TIM_Base_SetConfig+0x114>)
 8109920:	4293      	cmp	r3, r2
 8109922:	d013      	beq.n	810994c <TIM_Base_SetConfig+0x40>
 8109924:	687b      	ldr	r3, [r7, #4]
 8109926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810992a:	d00f      	beq.n	810994c <TIM_Base_SetConfig+0x40>
 810992c:	687b      	ldr	r3, [r7, #4]
 810992e:	4a3d      	ldr	r2, [pc, #244]	; (8109a24 <TIM_Base_SetConfig+0x118>)
 8109930:	4293      	cmp	r3, r2
 8109932:	d00b      	beq.n	810994c <TIM_Base_SetConfig+0x40>
 8109934:	687b      	ldr	r3, [r7, #4]
 8109936:	4a3c      	ldr	r2, [pc, #240]	; (8109a28 <TIM_Base_SetConfig+0x11c>)
 8109938:	4293      	cmp	r3, r2
 810993a:	d007      	beq.n	810994c <TIM_Base_SetConfig+0x40>
 810993c:	687b      	ldr	r3, [r7, #4]
 810993e:	4a3b      	ldr	r2, [pc, #236]	; (8109a2c <TIM_Base_SetConfig+0x120>)
 8109940:	4293      	cmp	r3, r2
 8109942:	d003      	beq.n	810994c <TIM_Base_SetConfig+0x40>
 8109944:	687b      	ldr	r3, [r7, #4]
 8109946:	4a3a      	ldr	r2, [pc, #232]	; (8109a30 <TIM_Base_SetConfig+0x124>)
 8109948:	4293      	cmp	r3, r2
 810994a:	d108      	bne.n	810995e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 810994c:	68fb      	ldr	r3, [r7, #12]
 810994e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8109952:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8109954:	683b      	ldr	r3, [r7, #0]
 8109956:	685b      	ldr	r3, [r3, #4]
 8109958:	68fa      	ldr	r2, [r7, #12]
 810995a:	4313      	orrs	r3, r2
 810995c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810995e:	687b      	ldr	r3, [r7, #4]
 8109960:	4a2f      	ldr	r2, [pc, #188]	; (8109a20 <TIM_Base_SetConfig+0x114>)
 8109962:	4293      	cmp	r3, r2
 8109964:	d01f      	beq.n	81099a6 <TIM_Base_SetConfig+0x9a>
 8109966:	687b      	ldr	r3, [r7, #4]
 8109968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810996c:	d01b      	beq.n	81099a6 <TIM_Base_SetConfig+0x9a>
 810996e:	687b      	ldr	r3, [r7, #4]
 8109970:	4a2c      	ldr	r2, [pc, #176]	; (8109a24 <TIM_Base_SetConfig+0x118>)
 8109972:	4293      	cmp	r3, r2
 8109974:	d017      	beq.n	81099a6 <TIM_Base_SetConfig+0x9a>
 8109976:	687b      	ldr	r3, [r7, #4]
 8109978:	4a2b      	ldr	r2, [pc, #172]	; (8109a28 <TIM_Base_SetConfig+0x11c>)
 810997a:	4293      	cmp	r3, r2
 810997c:	d013      	beq.n	81099a6 <TIM_Base_SetConfig+0x9a>
 810997e:	687b      	ldr	r3, [r7, #4]
 8109980:	4a2a      	ldr	r2, [pc, #168]	; (8109a2c <TIM_Base_SetConfig+0x120>)
 8109982:	4293      	cmp	r3, r2
 8109984:	d00f      	beq.n	81099a6 <TIM_Base_SetConfig+0x9a>
 8109986:	687b      	ldr	r3, [r7, #4]
 8109988:	4a29      	ldr	r2, [pc, #164]	; (8109a30 <TIM_Base_SetConfig+0x124>)
 810998a:	4293      	cmp	r3, r2
 810998c:	d00b      	beq.n	81099a6 <TIM_Base_SetConfig+0x9a>
 810998e:	687b      	ldr	r3, [r7, #4]
 8109990:	4a28      	ldr	r2, [pc, #160]	; (8109a34 <TIM_Base_SetConfig+0x128>)
 8109992:	4293      	cmp	r3, r2
 8109994:	d007      	beq.n	81099a6 <TIM_Base_SetConfig+0x9a>
 8109996:	687b      	ldr	r3, [r7, #4]
 8109998:	4a27      	ldr	r2, [pc, #156]	; (8109a38 <TIM_Base_SetConfig+0x12c>)
 810999a:	4293      	cmp	r3, r2
 810999c:	d003      	beq.n	81099a6 <TIM_Base_SetConfig+0x9a>
 810999e:	687b      	ldr	r3, [r7, #4]
 81099a0:	4a26      	ldr	r2, [pc, #152]	; (8109a3c <TIM_Base_SetConfig+0x130>)
 81099a2:	4293      	cmp	r3, r2
 81099a4:	d108      	bne.n	81099b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 81099a6:	68fb      	ldr	r3, [r7, #12]
 81099a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81099ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 81099ae:	683b      	ldr	r3, [r7, #0]
 81099b0:	68db      	ldr	r3, [r3, #12]
 81099b2:	68fa      	ldr	r2, [r7, #12]
 81099b4:	4313      	orrs	r3, r2
 81099b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 81099b8:	68fb      	ldr	r3, [r7, #12]
 81099ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 81099be:	683b      	ldr	r3, [r7, #0]
 81099c0:	695b      	ldr	r3, [r3, #20]
 81099c2:	4313      	orrs	r3, r2
 81099c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 81099c6:	687b      	ldr	r3, [r7, #4]
 81099c8:	68fa      	ldr	r2, [r7, #12]
 81099ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 81099cc:	683b      	ldr	r3, [r7, #0]
 81099ce:	689a      	ldr	r2, [r3, #8]
 81099d0:	687b      	ldr	r3, [r7, #4]
 81099d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 81099d4:	683b      	ldr	r3, [r7, #0]
 81099d6:	681a      	ldr	r2, [r3, #0]
 81099d8:	687b      	ldr	r3, [r7, #4]
 81099da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 81099dc:	687b      	ldr	r3, [r7, #4]
 81099de:	4a10      	ldr	r2, [pc, #64]	; (8109a20 <TIM_Base_SetConfig+0x114>)
 81099e0:	4293      	cmp	r3, r2
 81099e2:	d00f      	beq.n	8109a04 <TIM_Base_SetConfig+0xf8>
 81099e4:	687b      	ldr	r3, [r7, #4]
 81099e6:	4a12      	ldr	r2, [pc, #72]	; (8109a30 <TIM_Base_SetConfig+0x124>)
 81099e8:	4293      	cmp	r3, r2
 81099ea:	d00b      	beq.n	8109a04 <TIM_Base_SetConfig+0xf8>
 81099ec:	687b      	ldr	r3, [r7, #4]
 81099ee:	4a11      	ldr	r2, [pc, #68]	; (8109a34 <TIM_Base_SetConfig+0x128>)
 81099f0:	4293      	cmp	r3, r2
 81099f2:	d007      	beq.n	8109a04 <TIM_Base_SetConfig+0xf8>
 81099f4:	687b      	ldr	r3, [r7, #4]
 81099f6:	4a10      	ldr	r2, [pc, #64]	; (8109a38 <TIM_Base_SetConfig+0x12c>)
 81099f8:	4293      	cmp	r3, r2
 81099fa:	d003      	beq.n	8109a04 <TIM_Base_SetConfig+0xf8>
 81099fc:	687b      	ldr	r3, [r7, #4]
 81099fe:	4a0f      	ldr	r2, [pc, #60]	; (8109a3c <TIM_Base_SetConfig+0x130>)
 8109a00:	4293      	cmp	r3, r2
 8109a02:	d103      	bne.n	8109a0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8109a04:	683b      	ldr	r3, [r7, #0]
 8109a06:	691a      	ldr	r2, [r3, #16]
 8109a08:	687b      	ldr	r3, [r7, #4]
 8109a0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8109a0c:	687b      	ldr	r3, [r7, #4]
 8109a0e:	2201      	movs	r2, #1
 8109a10:	615a      	str	r2, [r3, #20]
}
 8109a12:	bf00      	nop
 8109a14:	3714      	adds	r7, #20
 8109a16:	46bd      	mov	sp, r7
 8109a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a1c:	4770      	bx	lr
 8109a1e:	bf00      	nop
 8109a20:	40010000 	.word	0x40010000
 8109a24:	40000400 	.word	0x40000400
 8109a28:	40000800 	.word	0x40000800
 8109a2c:	40000c00 	.word	0x40000c00
 8109a30:	40010400 	.word	0x40010400
 8109a34:	40014000 	.word	0x40014000
 8109a38:	40014400 	.word	0x40014400
 8109a3c:	40014800 	.word	0x40014800

08109a40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8109a40:	b480      	push	{r7}
 8109a42:	b087      	sub	sp, #28
 8109a44:	af00      	add	r7, sp, #0
 8109a46:	60f8      	str	r0, [r7, #12]
 8109a48:	60b9      	str	r1, [r7, #8]
 8109a4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8109a4c:	68fb      	ldr	r3, [r7, #12]
 8109a4e:	6a1b      	ldr	r3, [r3, #32]
 8109a50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8109a52:	68fb      	ldr	r3, [r7, #12]
 8109a54:	6a1b      	ldr	r3, [r3, #32]
 8109a56:	f023 0201 	bic.w	r2, r3, #1
 8109a5a:	68fb      	ldr	r3, [r7, #12]
 8109a5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8109a5e:	68fb      	ldr	r3, [r7, #12]
 8109a60:	699b      	ldr	r3, [r3, #24]
 8109a62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8109a64:	693b      	ldr	r3, [r7, #16]
 8109a66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8109a6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8109a6c:	687b      	ldr	r3, [r7, #4]
 8109a6e:	011b      	lsls	r3, r3, #4
 8109a70:	693a      	ldr	r2, [r7, #16]
 8109a72:	4313      	orrs	r3, r2
 8109a74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8109a76:	697b      	ldr	r3, [r7, #20]
 8109a78:	f023 030a 	bic.w	r3, r3, #10
 8109a7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8109a7e:	697a      	ldr	r2, [r7, #20]
 8109a80:	68bb      	ldr	r3, [r7, #8]
 8109a82:	4313      	orrs	r3, r2
 8109a84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8109a86:	68fb      	ldr	r3, [r7, #12]
 8109a88:	693a      	ldr	r2, [r7, #16]
 8109a8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8109a8c:	68fb      	ldr	r3, [r7, #12]
 8109a8e:	697a      	ldr	r2, [r7, #20]
 8109a90:	621a      	str	r2, [r3, #32]
}
 8109a92:	bf00      	nop
 8109a94:	371c      	adds	r7, #28
 8109a96:	46bd      	mov	sp, r7
 8109a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a9c:	4770      	bx	lr

08109a9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8109a9e:	b480      	push	{r7}
 8109aa0:	b087      	sub	sp, #28
 8109aa2:	af00      	add	r7, sp, #0
 8109aa4:	60f8      	str	r0, [r7, #12]
 8109aa6:	60b9      	str	r1, [r7, #8]
 8109aa8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8109aaa:	68fb      	ldr	r3, [r7, #12]
 8109aac:	6a1b      	ldr	r3, [r3, #32]
 8109aae:	f023 0210 	bic.w	r2, r3, #16
 8109ab2:	68fb      	ldr	r3, [r7, #12]
 8109ab4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8109ab6:	68fb      	ldr	r3, [r7, #12]
 8109ab8:	699b      	ldr	r3, [r3, #24]
 8109aba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8109abc:	68fb      	ldr	r3, [r7, #12]
 8109abe:	6a1b      	ldr	r3, [r3, #32]
 8109ac0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8109ac2:	697b      	ldr	r3, [r7, #20]
 8109ac4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8109ac8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8109aca:	687b      	ldr	r3, [r7, #4]
 8109acc:	031b      	lsls	r3, r3, #12
 8109ace:	697a      	ldr	r2, [r7, #20]
 8109ad0:	4313      	orrs	r3, r2
 8109ad2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8109ad4:	693b      	ldr	r3, [r7, #16]
 8109ad6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8109ada:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8109adc:	68bb      	ldr	r3, [r7, #8]
 8109ade:	011b      	lsls	r3, r3, #4
 8109ae0:	693a      	ldr	r2, [r7, #16]
 8109ae2:	4313      	orrs	r3, r2
 8109ae4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8109ae6:	68fb      	ldr	r3, [r7, #12]
 8109ae8:	697a      	ldr	r2, [r7, #20]
 8109aea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8109aec:	68fb      	ldr	r3, [r7, #12]
 8109aee:	693a      	ldr	r2, [r7, #16]
 8109af0:	621a      	str	r2, [r3, #32]
}
 8109af2:	bf00      	nop
 8109af4:	371c      	adds	r7, #28
 8109af6:	46bd      	mov	sp, r7
 8109af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109afc:	4770      	bx	lr

08109afe <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8109afe:	b480      	push	{r7}
 8109b00:	b085      	sub	sp, #20
 8109b02:	af00      	add	r7, sp, #0
 8109b04:	6078      	str	r0, [r7, #4]
 8109b06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8109b08:	687b      	ldr	r3, [r7, #4]
 8109b0a:	689b      	ldr	r3, [r3, #8]
 8109b0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8109b0e:	68fb      	ldr	r3, [r7, #12]
 8109b10:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8109b14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8109b18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8109b1a:	683a      	ldr	r2, [r7, #0]
 8109b1c:	68fb      	ldr	r3, [r7, #12]
 8109b1e:	4313      	orrs	r3, r2
 8109b20:	f043 0307 	orr.w	r3, r3, #7
 8109b24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8109b26:	687b      	ldr	r3, [r7, #4]
 8109b28:	68fa      	ldr	r2, [r7, #12]
 8109b2a:	609a      	str	r2, [r3, #8]
}
 8109b2c:	bf00      	nop
 8109b2e:	3714      	adds	r7, #20
 8109b30:	46bd      	mov	sp, r7
 8109b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109b36:	4770      	bx	lr

08109b38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8109b38:	b480      	push	{r7}
 8109b3a:	b087      	sub	sp, #28
 8109b3c:	af00      	add	r7, sp, #0
 8109b3e:	60f8      	str	r0, [r7, #12]
 8109b40:	60b9      	str	r1, [r7, #8]
 8109b42:	607a      	str	r2, [r7, #4]
 8109b44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8109b46:	68fb      	ldr	r3, [r7, #12]
 8109b48:	689b      	ldr	r3, [r3, #8]
 8109b4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8109b4c:	697b      	ldr	r3, [r7, #20]
 8109b4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8109b52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8109b54:	683b      	ldr	r3, [r7, #0]
 8109b56:	021a      	lsls	r2, r3, #8
 8109b58:	687b      	ldr	r3, [r7, #4]
 8109b5a:	431a      	orrs	r2, r3
 8109b5c:	68bb      	ldr	r3, [r7, #8]
 8109b5e:	4313      	orrs	r3, r2
 8109b60:	697a      	ldr	r2, [r7, #20]
 8109b62:	4313      	orrs	r3, r2
 8109b64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8109b66:	68fb      	ldr	r3, [r7, #12]
 8109b68:	697a      	ldr	r2, [r7, #20]
 8109b6a:	609a      	str	r2, [r3, #8]
}
 8109b6c:	bf00      	nop
 8109b6e:	371c      	adds	r7, #28
 8109b70:	46bd      	mov	sp, r7
 8109b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109b76:	4770      	bx	lr

08109b78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8109b78:	b480      	push	{r7}
 8109b7a:	b085      	sub	sp, #20
 8109b7c:	af00      	add	r7, sp, #0
 8109b7e:	6078      	str	r0, [r7, #4]
 8109b80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8109b82:	687b      	ldr	r3, [r7, #4]
 8109b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8109b88:	2b01      	cmp	r3, #1
 8109b8a:	d101      	bne.n	8109b90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8109b8c:	2302      	movs	r3, #2
 8109b8e:	e068      	b.n	8109c62 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8109b90:	687b      	ldr	r3, [r7, #4]
 8109b92:	2201      	movs	r2, #1
 8109b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8109b98:	687b      	ldr	r3, [r7, #4]
 8109b9a:	2202      	movs	r2, #2
 8109b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8109ba0:	687b      	ldr	r3, [r7, #4]
 8109ba2:	681b      	ldr	r3, [r3, #0]
 8109ba4:	685b      	ldr	r3, [r3, #4]
 8109ba6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8109ba8:	687b      	ldr	r3, [r7, #4]
 8109baa:	681b      	ldr	r3, [r3, #0]
 8109bac:	689b      	ldr	r3, [r3, #8]
 8109bae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8109bb0:	687b      	ldr	r3, [r7, #4]
 8109bb2:	681b      	ldr	r3, [r3, #0]
 8109bb4:	4a2e      	ldr	r2, [pc, #184]	; (8109c70 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8109bb6:	4293      	cmp	r3, r2
 8109bb8:	d004      	beq.n	8109bc4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8109bba:	687b      	ldr	r3, [r7, #4]
 8109bbc:	681b      	ldr	r3, [r3, #0]
 8109bbe:	4a2d      	ldr	r2, [pc, #180]	; (8109c74 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8109bc0:	4293      	cmp	r3, r2
 8109bc2:	d108      	bne.n	8109bd6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8109bc4:	68fb      	ldr	r3, [r7, #12]
 8109bc6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8109bca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8109bcc:	683b      	ldr	r3, [r7, #0]
 8109bce:	685b      	ldr	r3, [r3, #4]
 8109bd0:	68fa      	ldr	r2, [r7, #12]
 8109bd2:	4313      	orrs	r3, r2
 8109bd4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8109bd6:	68fb      	ldr	r3, [r7, #12]
 8109bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8109bdc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8109bde:	683b      	ldr	r3, [r7, #0]
 8109be0:	681b      	ldr	r3, [r3, #0]
 8109be2:	68fa      	ldr	r2, [r7, #12]
 8109be4:	4313      	orrs	r3, r2
 8109be6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8109be8:	687b      	ldr	r3, [r7, #4]
 8109bea:	681b      	ldr	r3, [r3, #0]
 8109bec:	68fa      	ldr	r2, [r7, #12]
 8109bee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8109bf0:	687b      	ldr	r3, [r7, #4]
 8109bf2:	681b      	ldr	r3, [r3, #0]
 8109bf4:	4a1e      	ldr	r2, [pc, #120]	; (8109c70 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8109bf6:	4293      	cmp	r3, r2
 8109bf8:	d01d      	beq.n	8109c36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8109bfa:	687b      	ldr	r3, [r7, #4]
 8109bfc:	681b      	ldr	r3, [r3, #0]
 8109bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8109c02:	d018      	beq.n	8109c36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8109c04:	687b      	ldr	r3, [r7, #4]
 8109c06:	681b      	ldr	r3, [r3, #0]
 8109c08:	4a1b      	ldr	r2, [pc, #108]	; (8109c78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8109c0a:	4293      	cmp	r3, r2
 8109c0c:	d013      	beq.n	8109c36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8109c0e:	687b      	ldr	r3, [r7, #4]
 8109c10:	681b      	ldr	r3, [r3, #0]
 8109c12:	4a1a      	ldr	r2, [pc, #104]	; (8109c7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8109c14:	4293      	cmp	r3, r2
 8109c16:	d00e      	beq.n	8109c36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8109c18:	687b      	ldr	r3, [r7, #4]
 8109c1a:	681b      	ldr	r3, [r3, #0]
 8109c1c:	4a18      	ldr	r2, [pc, #96]	; (8109c80 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8109c1e:	4293      	cmp	r3, r2
 8109c20:	d009      	beq.n	8109c36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8109c22:	687b      	ldr	r3, [r7, #4]
 8109c24:	681b      	ldr	r3, [r3, #0]
 8109c26:	4a13      	ldr	r2, [pc, #76]	; (8109c74 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8109c28:	4293      	cmp	r3, r2
 8109c2a:	d004      	beq.n	8109c36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8109c2c:	687b      	ldr	r3, [r7, #4]
 8109c2e:	681b      	ldr	r3, [r3, #0]
 8109c30:	4a14      	ldr	r2, [pc, #80]	; (8109c84 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8109c32:	4293      	cmp	r3, r2
 8109c34:	d10c      	bne.n	8109c50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8109c36:	68bb      	ldr	r3, [r7, #8]
 8109c38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8109c3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8109c3e:	683b      	ldr	r3, [r7, #0]
 8109c40:	689b      	ldr	r3, [r3, #8]
 8109c42:	68ba      	ldr	r2, [r7, #8]
 8109c44:	4313      	orrs	r3, r2
 8109c46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8109c48:	687b      	ldr	r3, [r7, #4]
 8109c4a:	681b      	ldr	r3, [r3, #0]
 8109c4c:	68ba      	ldr	r2, [r7, #8]
 8109c4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8109c50:	687b      	ldr	r3, [r7, #4]
 8109c52:	2201      	movs	r2, #1
 8109c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8109c58:	687b      	ldr	r3, [r7, #4]
 8109c5a:	2200      	movs	r2, #0
 8109c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8109c60:	2300      	movs	r3, #0
}
 8109c62:	4618      	mov	r0, r3
 8109c64:	3714      	adds	r7, #20
 8109c66:	46bd      	mov	sp, r7
 8109c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109c6c:	4770      	bx	lr
 8109c6e:	bf00      	nop
 8109c70:	40010000 	.word	0x40010000
 8109c74:	40010400 	.word	0x40010400
 8109c78:	40000400 	.word	0x40000400
 8109c7c:	40000800 	.word	0x40000800
 8109c80:	40000c00 	.word	0x40000c00
 8109c84:	40001800 	.word	0x40001800

08109c88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8109c88:	b480      	push	{r7}
 8109c8a:	b083      	sub	sp, #12
 8109c8c:	af00      	add	r7, sp, #0
 8109c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8109c90:	bf00      	nop
 8109c92:	370c      	adds	r7, #12
 8109c94:	46bd      	mov	sp, r7
 8109c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109c9a:	4770      	bx	lr

08109c9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8109c9c:	b480      	push	{r7}
 8109c9e:	b083      	sub	sp, #12
 8109ca0:	af00      	add	r7, sp, #0
 8109ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8109ca4:	bf00      	nop
 8109ca6:	370c      	adds	r7, #12
 8109ca8:	46bd      	mov	sp, r7
 8109caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109cae:	4770      	bx	lr

08109cb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8109cb0:	b480      	push	{r7}
 8109cb2:	b083      	sub	sp, #12
 8109cb4:	af00      	add	r7, sp, #0
 8109cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8109cb8:	bf00      	nop
 8109cba:	370c      	adds	r7, #12
 8109cbc:	46bd      	mov	sp, r7
 8109cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109cc2:	4770      	bx	lr

08109cc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8109cc4:	b580      	push	{r7, lr}
 8109cc6:	b082      	sub	sp, #8
 8109cc8:	af00      	add	r7, sp, #0
 8109cca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8109ccc:	687b      	ldr	r3, [r7, #4]
 8109cce:	2b00      	cmp	r3, #0
 8109cd0:	d101      	bne.n	8109cd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8109cd2:	2301      	movs	r3, #1
 8109cd4:	e042      	b.n	8109d5c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8109cd6:	687b      	ldr	r3, [r7, #4]
 8109cd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8109cdc:	2b00      	cmp	r3, #0
 8109cde:	d106      	bne.n	8109cee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8109ce0:	687b      	ldr	r3, [r7, #4]
 8109ce2:	2200      	movs	r2, #0
 8109ce4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8109ce8:	6878      	ldr	r0, [r7, #4]
 8109cea:	f7f7 f8dd 	bl	8100ea8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8109cee:	687b      	ldr	r3, [r7, #4]
 8109cf0:	2224      	movs	r2, #36	; 0x24
 8109cf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8109cf6:	687b      	ldr	r3, [r7, #4]
 8109cf8:	681b      	ldr	r3, [r3, #0]
 8109cfa:	681a      	ldr	r2, [r3, #0]
 8109cfc:	687b      	ldr	r3, [r7, #4]
 8109cfe:	681b      	ldr	r3, [r3, #0]
 8109d00:	f022 0201 	bic.w	r2, r2, #1
 8109d04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8109d06:	6878      	ldr	r0, [r7, #4]
 8109d08:	f000 fb86 	bl	810a418 <UART_SetConfig>
 8109d0c:	4603      	mov	r3, r0
 8109d0e:	2b01      	cmp	r3, #1
 8109d10:	d101      	bne.n	8109d16 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8109d12:	2301      	movs	r3, #1
 8109d14:	e022      	b.n	8109d5c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8109d16:	687b      	ldr	r3, [r7, #4]
 8109d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109d1a:	2b00      	cmp	r3, #0
 8109d1c:	d002      	beq.n	8109d24 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8109d1e:	6878      	ldr	r0, [r7, #4]
 8109d20:	f001 f8da 	bl	810aed8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8109d24:	687b      	ldr	r3, [r7, #4]
 8109d26:	681b      	ldr	r3, [r3, #0]
 8109d28:	685a      	ldr	r2, [r3, #4]
 8109d2a:	687b      	ldr	r3, [r7, #4]
 8109d2c:	681b      	ldr	r3, [r3, #0]
 8109d2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8109d32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8109d34:	687b      	ldr	r3, [r7, #4]
 8109d36:	681b      	ldr	r3, [r3, #0]
 8109d38:	689a      	ldr	r2, [r3, #8]
 8109d3a:	687b      	ldr	r3, [r7, #4]
 8109d3c:	681b      	ldr	r3, [r3, #0]
 8109d3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8109d42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8109d44:	687b      	ldr	r3, [r7, #4]
 8109d46:	681b      	ldr	r3, [r3, #0]
 8109d48:	681a      	ldr	r2, [r3, #0]
 8109d4a:	687b      	ldr	r3, [r7, #4]
 8109d4c:	681b      	ldr	r3, [r3, #0]
 8109d4e:	f042 0201 	orr.w	r2, r2, #1
 8109d52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8109d54:	6878      	ldr	r0, [r7, #4]
 8109d56:	f001 f961 	bl	810b01c <UART_CheckIdleState>
 8109d5a:	4603      	mov	r3, r0
}
 8109d5c:	4618      	mov	r0, r3
 8109d5e:	3708      	adds	r7, #8
 8109d60:	46bd      	mov	sp, r7
 8109d62:	bd80      	pop	{r7, pc}

08109d64 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8109d64:	b580      	push	{r7, lr}
 8109d66:	b084      	sub	sp, #16
 8109d68:	af00      	add	r7, sp, #0
 8109d6a:	60f8      	str	r0, [r7, #12]
 8109d6c:	60b9      	str	r1, [r7, #8]
 8109d6e:	4613      	mov	r3, r2
 8109d70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8109d72:	68fb      	ldr	r3, [r7, #12]
 8109d74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8109d78:	2b20      	cmp	r3, #32
 8109d7a:	d168      	bne.n	8109e4e <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8109d7c:	68bb      	ldr	r3, [r7, #8]
 8109d7e:	2b00      	cmp	r3, #0
 8109d80:	d002      	beq.n	8109d88 <HAL_UART_Transmit_DMA+0x24>
 8109d82:	88fb      	ldrh	r3, [r7, #6]
 8109d84:	2b00      	cmp	r3, #0
 8109d86:	d101      	bne.n	8109d8c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8109d88:	2301      	movs	r3, #1
 8109d8a:	e061      	b.n	8109e50 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8109d8c:	68fb      	ldr	r3, [r7, #12]
 8109d8e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8109d92:	2b01      	cmp	r3, #1
 8109d94:	d101      	bne.n	8109d9a <HAL_UART_Transmit_DMA+0x36>
 8109d96:	2302      	movs	r3, #2
 8109d98:	e05a      	b.n	8109e50 <HAL_UART_Transmit_DMA+0xec>
 8109d9a:	68fb      	ldr	r3, [r7, #12]
 8109d9c:	2201      	movs	r2, #1
 8109d9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8109da2:	68fb      	ldr	r3, [r7, #12]
 8109da4:	68ba      	ldr	r2, [r7, #8]
 8109da6:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8109da8:	68fb      	ldr	r3, [r7, #12]
 8109daa:	88fa      	ldrh	r2, [r7, #6]
 8109dac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8109db0:	68fb      	ldr	r3, [r7, #12]
 8109db2:	88fa      	ldrh	r2, [r7, #6]
 8109db4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8109db8:	68fb      	ldr	r3, [r7, #12]
 8109dba:	2200      	movs	r2, #0
 8109dbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8109dc0:	68fb      	ldr	r3, [r7, #12]
 8109dc2:	2221      	movs	r2, #33	; 0x21
 8109dc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8109dc8:	68fb      	ldr	r3, [r7, #12]
 8109dca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8109dcc:	2b00      	cmp	r3, #0
 8109dce:	d02c      	beq.n	8109e2a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8109dd0:	68fb      	ldr	r3, [r7, #12]
 8109dd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8109dd4:	4a20      	ldr	r2, [pc, #128]	; (8109e58 <HAL_UART_Transmit_DMA+0xf4>)
 8109dd6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8109dd8:	68fb      	ldr	r3, [r7, #12]
 8109dda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8109ddc:	4a1f      	ldr	r2, [pc, #124]	; (8109e5c <HAL_UART_Transmit_DMA+0xf8>)
 8109dde:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8109de0:	68fb      	ldr	r3, [r7, #12]
 8109de2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8109de4:	4a1e      	ldr	r2, [pc, #120]	; (8109e60 <HAL_UART_Transmit_DMA+0xfc>)
 8109de6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8109de8:	68fb      	ldr	r3, [r7, #12]
 8109dea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8109dec:	2200      	movs	r2, #0
 8109dee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8109df0:	68fb      	ldr	r3, [r7, #12]
 8109df2:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8109df4:	68fb      	ldr	r3, [r7, #12]
 8109df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8109df8:	4619      	mov	r1, r3
 8109dfa:	68fb      	ldr	r3, [r7, #12]
 8109dfc:	681b      	ldr	r3, [r3, #0]
 8109dfe:	3328      	adds	r3, #40	; 0x28
 8109e00:	461a      	mov	r2, r3
 8109e02:	88fb      	ldrh	r3, [r7, #6]
 8109e04:	f7fa f8f2 	bl	8103fec <HAL_DMA_Start_IT>
 8109e08:	4603      	mov	r3, r0
 8109e0a:	2b00      	cmp	r3, #0
 8109e0c:	d00d      	beq.n	8109e2a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8109e0e:	68fb      	ldr	r3, [r7, #12]
 8109e10:	2210      	movs	r2, #16
 8109e12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8109e16:	68fb      	ldr	r3, [r7, #12]
 8109e18:	2200      	movs	r2, #0
 8109e1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8109e1e:	68fb      	ldr	r3, [r7, #12]
 8109e20:	2220      	movs	r2, #32
 8109e22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8109e26:	2301      	movs	r3, #1
 8109e28:	e012      	b.n	8109e50 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8109e2a:	68fb      	ldr	r3, [r7, #12]
 8109e2c:	681b      	ldr	r3, [r3, #0]
 8109e2e:	2240      	movs	r2, #64	; 0x40
 8109e30:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8109e32:	68fb      	ldr	r3, [r7, #12]
 8109e34:	2200      	movs	r2, #0
 8109e36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8109e3a:	68fb      	ldr	r3, [r7, #12]
 8109e3c:	681b      	ldr	r3, [r3, #0]
 8109e3e:	689a      	ldr	r2, [r3, #8]
 8109e40:	68fb      	ldr	r3, [r7, #12]
 8109e42:	681b      	ldr	r3, [r3, #0]
 8109e44:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8109e48:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8109e4a:	2300      	movs	r3, #0
 8109e4c:	e000      	b.n	8109e50 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8109e4e:	2302      	movs	r3, #2
  }
}
 8109e50:	4618      	mov	r0, r3
 8109e52:	3710      	adds	r7, #16
 8109e54:	46bd      	mov	sp, r7
 8109e56:	bd80      	pop	{r7, pc}
 8109e58:	0810b253 	.word	0x0810b253
 8109e5c:	0810b2a3 	.word	0x0810b2a3
 8109e60:	0810b2bf 	.word	0x0810b2bf

08109e64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8109e64:	b580      	push	{r7, lr}
 8109e66:	b088      	sub	sp, #32
 8109e68:	af00      	add	r7, sp, #0
 8109e6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8109e6c:	687b      	ldr	r3, [r7, #4]
 8109e6e:	681b      	ldr	r3, [r3, #0]
 8109e70:	69db      	ldr	r3, [r3, #28]
 8109e72:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8109e74:	687b      	ldr	r3, [r7, #4]
 8109e76:	681b      	ldr	r3, [r3, #0]
 8109e78:	681b      	ldr	r3, [r3, #0]
 8109e7a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8109e7c:	687b      	ldr	r3, [r7, #4]
 8109e7e:	681b      	ldr	r3, [r3, #0]
 8109e80:	689b      	ldr	r3, [r3, #8]
 8109e82:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8109e84:	69fa      	ldr	r2, [r7, #28]
 8109e86:	f640 030f 	movw	r3, #2063	; 0x80f
 8109e8a:	4013      	ands	r3, r2
 8109e8c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8109e8e:	693b      	ldr	r3, [r7, #16]
 8109e90:	2b00      	cmp	r3, #0
 8109e92:	d118      	bne.n	8109ec6 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8109e94:	69fb      	ldr	r3, [r7, #28]
 8109e96:	f003 0320 	and.w	r3, r3, #32
 8109e9a:	2b00      	cmp	r3, #0
 8109e9c:	d013      	beq.n	8109ec6 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8109e9e:	69bb      	ldr	r3, [r7, #24]
 8109ea0:	f003 0320 	and.w	r3, r3, #32
 8109ea4:	2b00      	cmp	r3, #0
 8109ea6:	d104      	bne.n	8109eb2 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8109ea8:	697b      	ldr	r3, [r7, #20]
 8109eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8109eae:	2b00      	cmp	r3, #0
 8109eb0:	d009      	beq.n	8109ec6 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8109eb2:	687b      	ldr	r3, [r7, #4]
 8109eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8109eb6:	2b00      	cmp	r3, #0
 8109eb8:	f000 8282 	beq.w	810a3c0 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8109ebc:	687b      	ldr	r3, [r7, #4]
 8109ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8109ec0:	6878      	ldr	r0, [r7, #4]
 8109ec2:	4798      	blx	r3
      }
      return;
 8109ec4:	e27c      	b.n	810a3c0 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8109ec6:	693b      	ldr	r3, [r7, #16]
 8109ec8:	2b00      	cmp	r3, #0
 8109eca:	f000 80ef 	beq.w	810a0ac <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8109ece:	697a      	ldr	r2, [r7, #20]
 8109ed0:	4b73      	ldr	r3, [pc, #460]	; (810a0a0 <HAL_UART_IRQHandler+0x23c>)
 8109ed2:	4013      	ands	r3, r2
 8109ed4:	2b00      	cmp	r3, #0
 8109ed6:	d105      	bne.n	8109ee4 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8109ed8:	69ba      	ldr	r2, [r7, #24]
 8109eda:	4b72      	ldr	r3, [pc, #456]	; (810a0a4 <HAL_UART_IRQHandler+0x240>)
 8109edc:	4013      	ands	r3, r2
 8109ede:	2b00      	cmp	r3, #0
 8109ee0:	f000 80e4 	beq.w	810a0ac <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8109ee4:	69fb      	ldr	r3, [r7, #28]
 8109ee6:	f003 0301 	and.w	r3, r3, #1
 8109eea:	2b00      	cmp	r3, #0
 8109eec:	d010      	beq.n	8109f10 <HAL_UART_IRQHandler+0xac>
 8109eee:	69bb      	ldr	r3, [r7, #24]
 8109ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8109ef4:	2b00      	cmp	r3, #0
 8109ef6:	d00b      	beq.n	8109f10 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8109ef8:	687b      	ldr	r3, [r7, #4]
 8109efa:	681b      	ldr	r3, [r3, #0]
 8109efc:	2201      	movs	r2, #1
 8109efe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8109f00:	687b      	ldr	r3, [r7, #4]
 8109f02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8109f06:	f043 0201 	orr.w	r2, r3, #1
 8109f0a:	687b      	ldr	r3, [r7, #4]
 8109f0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8109f10:	69fb      	ldr	r3, [r7, #28]
 8109f12:	f003 0302 	and.w	r3, r3, #2
 8109f16:	2b00      	cmp	r3, #0
 8109f18:	d010      	beq.n	8109f3c <HAL_UART_IRQHandler+0xd8>
 8109f1a:	697b      	ldr	r3, [r7, #20]
 8109f1c:	f003 0301 	and.w	r3, r3, #1
 8109f20:	2b00      	cmp	r3, #0
 8109f22:	d00b      	beq.n	8109f3c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8109f24:	687b      	ldr	r3, [r7, #4]
 8109f26:	681b      	ldr	r3, [r3, #0]
 8109f28:	2202      	movs	r2, #2
 8109f2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8109f2c:	687b      	ldr	r3, [r7, #4]
 8109f2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8109f32:	f043 0204 	orr.w	r2, r3, #4
 8109f36:	687b      	ldr	r3, [r7, #4]
 8109f38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8109f3c:	69fb      	ldr	r3, [r7, #28]
 8109f3e:	f003 0304 	and.w	r3, r3, #4
 8109f42:	2b00      	cmp	r3, #0
 8109f44:	d010      	beq.n	8109f68 <HAL_UART_IRQHandler+0x104>
 8109f46:	697b      	ldr	r3, [r7, #20]
 8109f48:	f003 0301 	and.w	r3, r3, #1
 8109f4c:	2b00      	cmp	r3, #0
 8109f4e:	d00b      	beq.n	8109f68 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8109f50:	687b      	ldr	r3, [r7, #4]
 8109f52:	681b      	ldr	r3, [r3, #0]
 8109f54:	2204      	movs	r2, #4
 8109f56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8109f58:	687b      	ldr	r3, [r7, #4]
 8109f5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8109f5e:	f043 0202 	orr.w	r2, r3, #2
 8109f62:	687b      	ldr	r3, [r7, #4]
 8109f64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8109f68:	69fb      	ldr	r3, [r7, #28]
 8109f6a:	f003 0308 	and.w	r3, r3, #8
 8109f6e:	2b00      	cmp	r3, #0
 8109f70:	d015      	beq.n	8109f9e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8109f72:	69bb      	ldr	r3, [r7, #24]
 8109f74:	f003 0320 	and.w	r3, r3, #32
 8109f78:	2b00      	cmp	r3, #0
 8109f7a:	d104      	bne.n	8109f86 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8109f7c:	697a      	ldr	r2, [r7, #20]
 8109f7e:	4b48      	ldr	r3, [pc, #288]	; (810a0a0 <HAL_UART_IRQHandler+0x23c>)
 8109f80:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8109f82:	2b00      	cmp	r3, #0
 8109f84:	d00b      	beq.n	8109f9e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8109f86:	687b      	ldr	r3, [r7, #4]
 8109f88:	681b      	ldr	r3, [r3, #0]
 8109f8a:	2208      	movs	r2, #8
 8109f8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8109f8e:	687b      	ldr	r3, [r7, #4]
 8109f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8109f94:	f043 0208 	orr.w	r2, r3, #8
 8109f98:	687b      	ldr	r3, [r7, #4]
 8109f9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8109f9e:	69fb      	ldr	r3, [r7, #28]
 8109fa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8109fa4:	2b00      	cmp	r3, #0
 8109fa6:	d011      	beq.n	8109fcc <HAL_UART_IRQHandler+0x168>
 8109fa8:	69bb      	ldr	r3, [r7, #24]
 8109faa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8109fae:	2b00      	cmp	r3, #0
 8109fb0:	d00c      	beq.n	8109fcc <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8109fb2:	687b      	ldr	r3, [r7, #4]
 8109fb4:	681b      	ldr	r3, [r3, #0]
 8109fb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8109fba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8109fbc:	687b      	ldr	r3, [r7, #4]
 8109fbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8109fc2:	f043 0220 	orr.w	r2, r3, #32
 8109fc6:	687b      	ldr	r3, [r7, #4]
 8109fc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8109fcc:	687b      	ldr	r3, [r7, #4]
 8109fce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8109fd2:	2b00      	cmp	r3, #0
 8109fd4:	f000 81f6 	beq.w	810a3c4 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8109fd8:	69fb      	ldr	r3, [r7, #28]
 8109fda:	f003 0320 	and.w	r3, r3, #32
 8109fde:	2b00      	cmp	r3, #0
 8109fe0:	d011      	beq.n	810a006 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8109fe2:	69bb      	ldr	r3, [r7, #24]
 8109fe4:	f003 0320 	and.w	r3, r3, #32
 8109fe8:	2b00      	cmp	r3, #0
 8109fea:	d104      	bne.n	8109ff6 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8109fec:	697b      	ldr	r3, [r7, #20]
 8109fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8109ff2:	2b00      	cmp	r3, #0
 8109ff4:	d007      	beq.n	810a006 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8109ff6:	687b      	ldr	r3, [r7, #4]
 8109ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8109ffa:	2b00      	cmp	r3, #0
 8109ffc:	d003      	beq.n	810a006 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8109ffe:	687b      	ldr	r3, [r7, #4]
 810a000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810a002:	6878      	ldr	r0, [r7, #4]
 810a004:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 810a006:	687b      	ldr	r3, [r7, #4]
 810a008:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810a00c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810a00e:	687b      	ldr	r3, [r7, #4]
 810a010:	681b      	ldr	r3, [r3, #0]
 810a012:	689b      	ldr	r3, [r3, #8]
 810a014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810a018:	2b40      	cmp	r3, #64	; 0x40
 810a01a:	d004      	beq.n	810a026 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 810a01c:	68fb      	ldr	r3, [r7, #12]
 810a01e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810a022:	2b00      	cmp	r3, #0
 810a024:	d031      	beq.n	810a08a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 810a026:	6878      	ldr	r0, [r7, #4]
 810a028:	f001 f8e1 	bl	810b1ee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810a02c:	687b      	ldr	r3, [r7, #4]
 810a02e:	681b      	ldr	r3, [r3, #0]
 810a030:	689b      	ldr	r3, [r3, #8]
 810a032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810a036:	2b40      	cmp	r3, #64	; 0x40
 810a038:	d123      	bne.n	810a082 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810a03a:	687b      	ldr	r3, [r7, #4]
 810a03c:	681b      	ldr	r3, [r3, #0]
 810a03e:	689a      	ldr	r2, [r3, #8]
 810a040:	687b      	ldr	r3, [r7, #4]
 810a042:	681b      	ldr	r3, [r3, #0]
 810a044:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810a048:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 810a04a:	687b      	ldr	r3, [r7, #4]
 810a04c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a04e:	2b00      	cmp	r3, #0
 810a050:	d013      	beq.n	810a07a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 810a052:	687b      	ldr	r3, [r7, #4]
 810a054:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a056:	4a14      	ldr	r2, [pc, #80]	; (810a0a8 <HAL_UART_IRQHandler+0x244>)
 810a058:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 810a05a:	687b      	ldr	r3, [r7, #4]
 810a05c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a05e:	4618      	mov	r0, r3
 810a060:	f7fa fd4c 	bl	8104afc <HAL_DMA_Abort_IT>
 810a064:	4603      	mov	r3, r0
 810a066:	2b00      	cmp	r3, #0
 810a068:	d017      	beq.n	810a09a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 810a06a:	687b      	ldr	r3, [r7, #4]
 810a06c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a06e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810a070:	687a      	ldr	r2, [r7, #4]
 810a072:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 810a074:	4610      	mov	r0, r2
 810a076:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810a078:	e00f      	b.n	810a09a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 810a07a:	6878      	ldr	r0, [r7, #4]
 810a07c:	f000 f9b6 	bl	810a3ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810a080:	e00b      	b.n	810a09a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 810a082:	6878      	ldr	r0, [r7, #4]
 810a084:	f000 f9b2 	bl	810a3ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810a088:	e007      	b.n	810a09a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 810a08a:	6878      	ldr	r0, [r7, #4]
 810a08c:	f000 f9ae 	bl	810a3ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 810a090:	687b      	ldr	r3, [r7, #4]
 810a092:	2200      	movs	r2, #0
 810a094:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 810a098:	e194      	b.n	810a3c4 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810a09a:	bf00      	nop
    return;
 810a09c:	e192      	b.n	810a3c4 <HAL_UART_IRQHandler+0x560>
 810a09e:	bf00      	nop
 810a0a0:	10000001 	.word	0x10000001
 810a0a4:	04000120 	.word	0x04000120
 810a0a8:	0810b33f 	.word	0x0810b33f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810a0ac:	687b      	ldr	r3, [r7, #4]
 810a0ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810a0b0:	2b01      	cmp	r3, #1
 810a0b2:	f040 8111 	bne.w	810a2d8 <HAL_UART_IRQHandler+0x474>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 810a0b6:	69fb      	ldr	r3, [r7, #28]
 810a0b8:	f003 0310 	and.w	r3, r3, #16
 810a0bc:	2b00      	cmp	r3, #0
 810a0be:	f000 810b 	beq.w	810a2d8 <HAL_UART_IRQHandler+0x474>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 810a0c2:	69bb      	ldr	r3, [r7, #24]
 810a0c4:	f003 0310 	and.w	r3, r3, #16
 810a0c8:	2b00      	cmp	r3, #0
 810a0ca:	f000 8105 	beq.w	810a2d8 <HAL_UART_IRQHandler+0x474>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810a0ce:	687b      	ldr	r3, [r7, #4]
 810a0d0:	681b      	ldr	r3, [r3, #0]
 810a0d2:	2210      	movs	r2, #16
 810a0d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810a0d6:	687b      	ldr	r3, [r7, #4]
 810a0d8:	681b      	ldr	r3, [r3, #0]
 810a0da:	689b      	ldr	r3, [r3, #8]
 810a0dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810a0e0:	2b40      	cmp	r3, #64	; 0x40
 810a0e2:	f040 80bb 	bne.w	810a25c <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 810a0e6:	687b      	ldr	r3, [r7, #4]
 810a0e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a0ea:	681b      	ldr	r3, [r3, #0]
 810a0ec:	4a97      	ldr	r2, [pc, #604]	; (810a34c <HAL_UART_IRQHandler+0x4e8>)
 810a0ee:	4293      	cmp	r3, r2
 810a0f0:	d059      	beq.n	810a1a6 <HAL_UART_IRQHandler+0x342>
 810a0f2:	687b      	ldr	r3, [r7, #4]
 810a0f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a0f6:	681b      	ldr	r3, [r3, #0]
 810a0f8:	4a95      	ldr	r2, [pc, #596]	; (810a350 <HAL_UART_IRQHandler+0x4ec>)
 810a0fa:	4293      	cmp	r3, r2
 810a0fc:	d053      	beq.n	810a1a6 <HAL_UART_IRQHandler+0x342>
 810a0fe:	687b      	ldr	r3, [r7, #4]
 810a100:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a102:	681b      	ldr	r3, [r3, #0]
 810a104:	4a93      	ldr	r2, [pc, #588]	; (810a354 <HAL_UART_IRQHandler+0x4f0>)
 810a106:	4293      	cmp	r3, r2
 810a108:	d04d      	beq.n	810a1a6 <HAL_UART_IRQHandler+0x342>
 810a10a:	687b      	ldr	r3, [r7, #4]
 810a10c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a10e:	681b      	ldr	r3, [r3, #0]
 810a110:	4a91      	ldr	r2, [pc, #580]	; (810a358 <HAL_UART_IRQHandler+0x4f4>)
 810a112:	4293      	cmp	r3, r2
 810a114:	d047      	beq.n	810a1a6 <HAL_UART_IRQHandler+0x342>
 810a116:	687b      	ldr	r3, [r7, #4]
 810a118:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a11a:	681b      	ldr	r3, [r3, #0]
 810a11c:	4a8f      	ldr	r2, [pc, #572]	; (810a35c <HAL_UART_IRQHandler+0x4f8>)
 810a11e:	4293      	cmp	r3, r2
 810a120:	d041      	beq.n	810a1a6 <HAL_UART_IRQHandler+0x342>
 810a122:	687b      	ldr	r3, [r7, #4]
 810a124:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a126:	681b      	ldr	r3, [r3, #0]
 810a128:	4a8d      	ldr	r2, [pc, #564]	; (810a360 <HAL_UART_IRQHandler+0x4fc>)
 810a12a:	4293      	cmp	r3, r2
 810a12c:	d03b      	beq.n	810a1a6 <HAL_UART_IRQHandler+0x342>
 810a12e:	687b      	ldr	r3, [r7, #4]
 810a130:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a132:	681b      	ldr	r3, [r3, #0]
 810a134:	4a8b      	ldr	r2, [pc, #556]	; (810a364 <HAL_UART_IRQHandler+0x500>)
 810a136:	4293      	cmp	r3, r2
 810a138:	d035      	beq.n	810a1a6 <HAL_UART_IRQHandler+0x342>
 810a13a:	687b      	ldr	r3, [r7, #4]
 810a13c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a13e:	681b      	ldr	r3, [r3, #0]
 810a140:	4a89      	ldr	r2, [pc, #548]	; (810a368 <HAL_UART_IRQHandler+0x504>)
 810a142:	4293      	cmp	r3, r2
 810a144:	d02f      	beq.n	810a1a6 <HAL_UART_IRQHandler+0x342>
 810a146:	687b      	ldr	r3, [r7, #4]
 810a148:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a14a:	681b      	ldr	r3, [r3, #0]
 810a14c:	4a87      	ldr	r2, [pc, #540]	; (810a36c <HAL_UART_IRQHandler+0x508>)
 810a14e:	4293      	cmp	r3, r2
 810a150:	d029      	beq.n	810a1a6 <HAL_UART_IRQHandler+0x342>
 810a152:	687b      	ldr	r3, [r7, #4]
 810a154:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a156:	681b      	ldr	r3, [r3, #0]
 810a158:	4a85      	ldr	r2, [pc, #532]	; (810a370 <HAL_UART_IRQHandler+0x50c>)
 810a15a:	4293      	cmp	r3, r2
 810a15c:	d023      	beq.n	810a1a6 <HAL_UART_IRQHandler+0x342>
 810a15e:	687b      	ldr	r3, [r7, #4]
 810a160:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a162:	681b      	ldr	r3, [r3, #0]
 810a164:	4a83      	ldr	r2, [pc, #524]	; (810a374 <HAL_UART_IRQHandler+0x510>)
 810a166:	4293      	cmp	r3, r2
 810a168:	d01d      	beq.n	810a1a6 <HAL_UART_IRQHandler+0x342>
 810a16a:	687b      	ldr	r3, [r7, #4]
 810a16c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a16e:	681b      	ldr	r3, [r3, #0]
 810a170:	4a81      	ldr	r2, [pc, #516]	; (810a378 <HAL_UART_IRQHandler+0x514>)
 810a172:	4293      	cmp	r3, r2
 810a174:	d017      	beq.n	810a1a6 <HAL_UART_IRQHandler+0x342>
 810a176:	687b      	ldr	r3, [r7, #4]
 810a178:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a17a:	681b      	ldr	r3, [r3, #0]
 810a17c:	4a7f      	ldr	r2, [pc, #508]	; (810a37c <HAL_UART_IRQHandler+0x518>)
 810a17e:	4293      	cmp	r3, r2
 810a180:	d011      	beq.n	810a1a6 <HAL_UART_IRQHandler+0x342>
 810a182:	687b      	ldr	r3, [r7, #4]
 810a184:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a186:	681b      	ldr	r3, [r3, #0]
 810a188:	4a7d      	ldr	r2, [pc, #500]	; (810a380 <HAL_UART_IRQHandler+0x51c>)
 810a18a:	4293      	cmp	r3, r2
 810a18c:	d00b      	beq.n	810a1a6 <HAL_UART_IRQHandler+0x342>
 810a18e:	687b      	ldr	r3, [r7, #4]
 810a190:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a192:	681b      	ldr	r3, [r3, #0]
 810a194:	4a7b      	ldr	r2, [pc, #492]	; (810a384 <HAL_UART_IRQHandler+0x520>)
 810a196:	4293      	cmp	r3, r2
 810a198:	d005      	beq.n	810a1a6 <HAL_UART_IRQHandler+0x342>
 810a19a:	687b      	ldr	r3, [r7, #4]
 810a19c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a19e:	681b      	ldr	r3, [r3, #0]
 810a1a0:	4a79      	ldr	r2, [pc, #484]	; (810a388 <HAL_UART_IRQHandler+0x524>)
 810a1a2:	4293      	cmp	r3, r2
 810a1a4:	d105      	bne.n	810a1b2 <HAL_UART_IRQHandler+0x34e>
 810a1a6:	687b      	ldr	r3, [r7, #4]
 810a1a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a1aa:	681b      	ldr	r3, [r3, #0]
 810a1ac:	685b      	ldr	r3, [r3, #4]
 810a1ae:	b29b      	uxth	r3, r3
 810a1b0:	e004      	b.n	810a1bc <HAL_UART_IRQHandler+0x358>
 810a1b2:	687b      	ldr	r3, [r7, #4]
 810a1b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a1b6:	681b      	ldr	r3, [r3, #0]
 810a1b8:	685b      	ldr	r3, [r3, #4]
 810a1ba:	b29b      	uxth	r3, r3
 810a1bc:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 810a1be:	893b      	ldrh	r3, [r7, #8]
 810a1c0:	2b00      	cmp	r3, #0
 810a1c2:	f000 8101 	beq.w	810a3c8 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 810a1c6:	687b      	ldr	r3, [r7, #4]
 810a1c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 810a1cc:	893a      	ldrh	r2, [r7, #8]
 810a1ce:	429a      	cmp	r2, r3
 810a1d0:	f080 80fa 	bcs.w	810a3c8 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 810a1d4:	687b      	ldr	r3, [r7, #4]
 810a1d6:	893a      	ldrh	r2, [r7, #8]
 810a1d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 810a1dc:	687b      	ldr	r3, [r7, #4]
 810a1de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a1e0:	69db      	ldr	r3, [r3, #28]
 810a1e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810a1e6:	d02b      	beq.n	810a240 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810a1e8:	687b      	ldr	r3, [r7, #4]
 810a1ea:	681b      	ldr	r3, [r3, #0]
 810a1ec:	681a      	ldr	r2, [r3, #0]
 810a1ee:	687b      	ldr	r3, [r7, #4]
 810a1f0:	681b      	ldr	r3, [r3, #0]
 810a1f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810a1f6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810a1f8:	687b      	ldr	r3, [r7, #4]
 810a1fa:	681b      	ldr	r3, [r3, #0]
 810a1fc:	689a      	ldr	r2, [r3, #8]
 810a1fe:	687b      	ldr	r3, [r7, #4]
 810a200:	681b      	ldr	r3, [r3, #0]
 810a202:	f022 0201 	bic.w	r2, r2, #1
 810a206:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810a208:	687b      	ldr	r3, [r7, #4]
 810a20a:	681b      	ldr	r3, [r3, #0]
 810a20c:	689a      	ldr	r2, [r3, #8]
 810a20e:	687b      	ldr	r3, [r7, #4]
 810a210:	681b      	ldr	r3, [r3, #0]
 810a212:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810a216:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 810a218:	687b      	ldr	r3, [r7, #4]
 810a21a:	2220      	movs	r2, #32
 810a21c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810a220:	687b      	ldr	r3, [r7, #4]
 810a222:	2200      	movs	r2, #0
 810a224:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810a226:	687b      	ldr	r3, [r7, #4]
 810a228:	681b      	ldr	r3, [r3, #0]
 810a22a:	681a      	ldr	r2, [r3, #0]
 810a22c:	687b      	ldr	r3, [r7, #4]
 810a22e:	681b      	ldr	r3, [r3, #0]
 810a230:	f022 0210 	bic.w	r2, r2, #16
 810a234:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 810a236:	687b      	ldr	r3, [r7, #4]
 810a238:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a23a:	4618      	mov	r0, r3
 810a23c:	f7fa f940 	bl	81044c0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 810a240:	687b      	ldr	r3, [r7, #4]
 810a242:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 810a246:	687b      	ldr	r3, [r7, #4]
 810a248:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810a24c:	b29b      	uxth	r3, r3
 810a24e:	1ad3      	subs	r3, r2, r3
 810a250:	b29b      	uxth	r3, r3
 810a252:	4619      	mov	r1, r3
 810a254:	6878      	ldr	r0, [r7, #4]
 810a256:	f000 f8d3 	bl	810a400 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810a25a:	e0b5      	b.n	810a3c8 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 810a25c:	687b      	ldr	r3, [r7, #4]
 810a25e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 810a262:	687b      	ldr	r3, [r7, #4]
 810a264:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810a268:	b29b      	uxth	r3, r3
 810a26a:	1ad3      	subs	r3, r2, r3
 810a26c:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 810a26e:	687b      	ldr	r3, [r7, #4]
 810a270:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810a274:	b29b      	uxth	r3, r3
 810a276:	2b00      	cmp	r3, #0
 810a278:	f000 80a8 	beq.w	810a3cc <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 810a27c:	897b      	ldrh	r3, [r7, #10]
 810a27e:	2b00      	cmp	r3, #0
 810a280:	f000 80a4 	beq.w	810a3cc <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810a284:	687b      	ldr	r3, [r7, #4]
 810a286:	681b      	ldr	r3, [r3, #0]
 810a288:	681a      	ldr	r2, [r3, #0]
 810a28a:	687b      	ldr	r3, [r7, #4]
 810a28c:	681b      	ldr	r3, [r3, #0]
 810a28e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 810a292:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810a294:	687b      	ldr	r3, [r7, #4]
 810a296:	681b      	ldr	r3, [r3, #0]
 810a298:	689b      	ldr	r3, [r3, #8]
 810a29a:	687a      	ldr	r2, [r7, #4]
 810a29c:	6812      	ldr	r2, [r2, #0]
 810a29e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810a2a2:	f023 0301 	bic.w	r3, r3, #1
 810a2a6:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 810a2a8:	687b      	ldr	r3, [r7, #4]
 810a2aa:	2220      	movs	r2, #32
 810a2ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810a2b0:	687b      	ldr	r3, [r7, #4]
 810a2b2:	2200      	movs	r2, #0
 810a2b4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 810a2b6:	687b      	ldr	r3, [r7, #4]
 810a2b8:	2200      	movs	r2, #0
 810a2ba:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810a2bc:	687b      	ldr	r3, [r7, #4]
 810a2be:	681b      	ldr	r3, [r3, #0]
 810a2c0:	681a      	ldr	r2, [r3, #0]
 810a2c2:	687b      	ldr	r3, [r7, #4]
 810a2c4:	681b      	ldr	r3, [r3, #0]
 810a2c6:	f022 0210 	bic.w	r2, r2, #16
 810a2ca:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 810a2cc:	897b      	ldrh	r3, [r7, #10]
 810a2ce:	4619      	mov	r1, r3
 810a2d0:	6878      	ldr	r0, [r7, #4]
 810a2d2:	f000 f895 	bl	810a400 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810a2d6:	e079      	b.n	810a3cc <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 810a2d8:	69fb      	ldr	r3, [r7, #28]
 810a2da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810a2de:	2b00      	cmp	r3, #0
 810a2e0:	d00d      	beq.n	810a2fe <HAL_UART_IRQHandler+0x49a>
 810a2e2:	697b      	ldr	r3, [r7, #20]
 810a2e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810a2e8:	2b00      	cmp	r3, #0
 810a2ea:	d008      	beq.n	810a2fe <HAL_UART_IRQHandler+0x49a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 810a2ec:	687b      	ldr	r3, [r7, #4]
 810a2ee:	681b      	ldr	r3, [r3, #0]
 810a2f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 810a2f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 810a2f6:	6878      	ldr	r0, [r7, #4]
 810a2f8:	f001 f851 	bl	810b39e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810a2fc:	e069      	b.n	810a3d2 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 810a2fe:	69fb      	ldr	r3, [r7, #28]
 810a300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810a304:	2b00      	cmp	r3, #0
 810a306:	d012      	beq.n	810a32e <HAL_UART_IRQHandler+0x4ca>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 810a308:	69bb      	ldr	r3, [r7, #24]
 810a30a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810a30e:	2b00      	cmp	r3, #0
 810a310:	d104      	bne.n	810a31c <HAL_UART_IRQHandler+0x4b8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 810a312:	697b      	ldr	r3, [r7, #20]
 810a314:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810a318:	2b00      	cmp	r3, #0
 810a31a:	d008      	beq.n	810a32e <HAL_UART_IRQHandler+0x4ca>
  {
    if (huart->TxISR != NULL)
 810a31c:	687b      	ldr	r3, [r7, #4]
 810a31e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810a320:	2b00      	cmp	r3, #0
 810a322:	d055      	beq.n	810a3d0 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 810a324:	687b      	ldr	r3, [r7, #4]
 810a326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810a328:	6878      	ldr	r0, [r7, #4]
 810a32a:	4798      	blx	r3
    }
    return;
 810a32c:	e050      	b.n	810a3d0 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 810a32e:	69fb      	ldr	r3, [r7, #28]
 810a330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810a334:	2b00      	cmp	r3, #0
 810a336:	d029      	beq.n	810a38c <HAL_UART_IRQHandler+0x528>
 810a338:	69bb      	ldr	r3, [r7, #24]
 810a33a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810a33e:	2b00      	cmp	r3, #0
 810a340:	d024      	beq.n	810a38c <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 810a342:	6878      	ldr	r0, [r7, #4]
 810a344:	f001 f811 	bl	810b36a <UART_EndTransmit_IT>
    return;
 810a348:	e043      	b.n	810a3d2 <HAL_UART_IRQHandler+0x56e>
 810a34a:	bf00      	nop
 810a34c:	40020010 	.word	0x40020010
 810a350:	40020028 	.word	0x40020028
 810a354:	40020040 	.word	0x40020040
 810a358:	40020058 	.word	0x40020058
 810a35c:	40020070 	.word	0x40020070
 810a360:	40020088 	.word	0x40020088
 810a364:	400200a0 	.word	0x400200a0
 810a368:	400200b8 	.word	0x400200b8
 810a36c:	40020410 	.word	0x40020410
 810a370:	40020428 	.word	0x40020428
 810a374:	40020440 	.word	0x40020440
 810a378:	40020458 	.word	0x40020458
 810a37c:	40020470 	.word	0x40020470
 810a380:	40020488 	.word	0x40020488
 810a384:	400204a0 	.word	0x400204a0
 810a388:	400204b8 	.word	0x400204b8
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 810a38c:	69fb      	ldr	r3, [r7, #28]
 810a38e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810a392:	2b00      	cmp	r3, #0
 810a394:	d008      	beq.n	810a3a8 <HAL_UART_IRQHandler+0x544>
 810a396:	69bb      	ldr	r3, [r7, #24]
 810a398:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810a39c:	2b00      	cmp	r3, #0
 810a39e:	d003      	beq.n	810a3a8 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 810a3a0:	6878      	ldr	r0, [r7, #4]
 810a3a2:	f001 f810 	bl	810b3c6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810a3a6:	e014      	b.n	810a3d2 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 810a3a8:	69fb      	ldr	r3, [r7, #28]
 810a3aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810a3ae:	2b00      	cmp	r3, #0
 810a3b0:	d00f      	beq.n	810a3d2 <HAL_UART_IRQHandler+0x56e>
 810a3b2:	69bb      	ldr	r3, [r7, #24]
 810a3b4:	2b00      	cmp	r3, #0
 810a3b6:	da0c      	bge.n	810a3d2 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 810a3b8:	6878      	ldr	r0, [r7, #4]
 810a3ba:	f000 fffa 	bl	810b3b2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810a3be:	e008      	b.n	810a3d2 <HAL_UART_IRQHandler+0x56e>
      return;
 810a3c0:	bf00      	nop
 810a3c2:	e006      	b.n	810a3d2 <HAL_UART_IRQHandler+0x56e>
    return;
 810a3c4:	bf00      	nop
 810a3c6:	e004      	b.n	810a3d2 <HAL_UART_IRQHandler+0x56e>
      return;
 810a3c8:	bf00      	nop
 810a3ca:	e002      	b.n	810a3d2 <HAL_UART_IRQHandler+0x56e>
      return;
 810a3cc:	bf00      	nop
 810a3ce:	e000      	b.n	810a3d2 <HAL_UART_IRQHandler+0x56e>
    return;
 810a3d0:	bf00      	nop
  }
}
 810a3d2:	3720      	adds	r7, #32
 810a3d4:	46bd      	mov	sp, r7
 810a3d6:	bd80      	pop	{r7, pc}

0810a3d8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 810a3d8:	b480      	push	{r7}
 810a3da:	b083      	sub	sp, #12
 810a3dc:	af00      	add	r7, sp, #0
 810a3de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 810a3e0:	bf00      	nop
 810a3e2:	370c      	adds	r7, #12
 810a3e4:	46bd      	mov	sp, r7
 810a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a3ea:	4770      	bx	lr

0810a3ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 810a3ec:	b480      	push	{r7}
 810a3ee:	b083      	sub	sp, #12
 810a3f0:	af00      	add	r7, sp, #0
 810a3f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 810a3f4:	bf00      	nop
 810a3f6:	370c      	adds	r7, #12
 810a3f8:	46bd      	mov	sp, r7
 810a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a3fe:	4770      	bx	lr

0810a400 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 810a400:	b480      	push	{r7}
 810a402:	b083      	sub	sp, #12
 810a404:	af00      	add	r7, sp, #0
 810a406:	6078      	str	r0, [r7, #4]
 810a408:	460b      	mov	r3, r1
 810a40a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 810a40c:	bf00      	nop
 810a40e:	370c      	adds	r7, #12
 810a410:	46bd      	mov	sp, r7
 810a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a416:	4770      	bx	lr

0810a418 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 810a418:	b5b0      	push	{r4, r5, r7, lr}
 810a41a:	b08e      	sub	sp, #56	; 0x38
 810a41c:	af00      	add	r7, sp, #0
 810a41e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810a420:	2300      	movs	r3, #0
 810a422:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810a426:	687b      	ldr	r3, [r7, #4]
 810a428:	689a      	ldr	r2, [r3, #8]
 810a42a:	687b      	ldr	r3, [r7, #4]
 810a42c:	691b      	ldr	r3, [r3, #16]
 810a42e:	431a      	orrs	r2, r3
 810a430:	687b      	ldr	r3, [r7, #4]
 810a432:	695b      	ldr	r3, [r3, #20]
 810a434:	431a      	orrs	r2, r3
 810a436:	687b      	ldr	r3, [r7, #4]
 810a438:	69db      	ldr	r3, [r3, #28]
 810a43a:	4313      	orrs	r3, r2
 810a43c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810a43e:	687b      	ldr	r3, [r7, #4]
 810a440:	681b      	ldr	r3, [r3, #0]
 810a442:	681a      	ldr	r2, [r3, #0]
 810a444:	4bc0      	ldr	r3, [pc, #768]	; (810a748 <UART_SetConfig+0x330>)
 810a446:	4013      	ands	r3, r2
 810a448:	687a      	ldr	r2, [r7, #4]
 810a44a:	6812      	ldr	r2, [r2, #0]
 810a44c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 810a44e:	430b      	orrs	r3, r1
 810a450:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810a452:	687b      	ldr	r3, [r7, #4]
 810a454:	681b      	ldr	r3, [r3, #0]
 810a456:	685b      	ldr	r3, [r3, #4]
 810a458:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 810a45c:	687b      	ldr	r3, [r7, #4]
 810a45e:	68da      	ldr	r2, [r3, #12]
 810a460:	687b      	ldr	r3, [r7, #4]
 810a462:	681b      	ldr	r3, [r3, #0]
 810a464:	430a      	orrs	r2, r1
 810a466:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810a468:	687b      	ldr	r3, [r7, #4]
 810a46a:	699b      	ldr	r3, [r3, #24]
 810a46c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810a46e:	687b      	ldr	r3, [r7, #4]
 810a470:	681b      	ldr	r3, [r3, #0]
 810a472:	4ab6      	ldr	r2, [pc, #728]	; (810a74c <UART_SetConfig+0x334>)
 810a474:	4293      	cmp	r3, r2
 810a476:	d004      	beq.n	810a482 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810a478:	687b      	ldr	r3, [r7, #4]
 810a47a:	6a1b      	ldr	r3, [r3, #32]
 810a47c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810a47e:	4313      	orrs	r3, r2
 810a480:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810a482:	687b      	ldr	r3, [r7, #4]
 810a484:	681b      	ldr	r3, [r3, #0]
 810a486:	689b      	ldr	r3, [r3, #8]
 810a488:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 810a48c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 810a490:	687a      	ldr	r2, [r7, #4]
 810a492:	6812      	ldr	r2, [r2, #0]
 810a494:	6b79      	ldr	r1, [r7, #52]	; 0x34
 810a496:	430b      	orrs	r3, r1
 810a498:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810a49a:	687b      	ldr	r3, [r7, #4]
 810a49c:	681b      	ldr	r3, [r3, #0]
 810a49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a4a0:	f023 010f 	bic.w	r1, r3, #15
 810a4a4:	687b      	ldr	r3, [r7, #4]
 810a4a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810a4a8:	687b      	ldr	r3, [r7, #4]
 810a4aa:	681b      	ldr	r3, [r3, #0]
 810a4ac:	430a      	orrs	r2, r1
 810a4ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810a4b0:	687b      	ldr	r3, [r7, #4]
 810a4b2:	681b      	ldr	r3, [r3, #0]
 810a4b4:	4aa6      	ldr	r2, [pc, #664]	; (810a750 <UART_SetConfig+0x338>)
 810a4b6:	4293      	cmp	r3, r2
 810a4b8:	d176      	bne.n	810a5a8 <UART_SetConfig+0x190>
 810a4ba:	4ba6      	ldr	r3, [pc, #664]	; (810a754 <UART_SetConfig+0x33c>)
 810a4bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a4be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810a4c2:	2b28      	cmp	r3, #40	; 0x28
 810a4c4:	d86c      	bhi.n	810a5a0 <UART_SetConfig+0x188>
 810a4c6:	a201      	add	r2, pc, #4	; (adr r2, 810a4cc <UART_SetConfig+0xb4>)
 810a4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a4cc:	0810a571 	.word	0x0810a571
 810a4d0:	0810a5a1 	.word	0x0810a5a1
 810a4d4:	0810a5a1 	.word	0x0810a5a1
 810a4d8:	0810a5a1 	.word	0x0810a5a1
 810a4dc:	0810a5a1 	.word	0x0810a5a1
 810a4e0:	0810a5a1 	.word	0x0810a5a1
 810a4e4:	0810a5a1 	.word	0x0810a5a1
 810a4e8:	0810a5a1 	.word	0x0810a5a1
 810a4ec:	0810a579 	.word	0x0810a579
 810a4f0:	0810a5a1 	.word	0x0810a5a1
 810a4f4:	0810a5a1 	.word	0x0810a5a1
 810a4f8:	0810a5a1 	.word	0x0810a5a1
 810a4fc:	0810a5a1 	.word	0x0810a5a1
 810a500:	0810a5a1 	.word	0x0810a5a1
 810a504:	0810a5a1 	.word	0x0810a5a1
 810a508:	0810a5a1 	.word	0x0810a5a1
 810a50c:	0810a581 	.word	0x0810a581
 810a510:	0810a5a1 	.word	0x0810a5a1
 810a514:	0810a5a1 	.word	0x0810a5a1
 810a518:	0810a5a1 	.word	0x0810a5a1
 810a51c:	0810a5a1 	.word	0x0810a5a1
 810a520:	0810a5a1 	.word	0x0810a5a1
 810a524:	0810a5a1 	.word	0x0810a5a1
 810a528:	0810a5a1 	.word	0x0810a5a1
 810a52c:	0810a589 	.word	0x0810a589
 810a530:	0810a5a1 	.word	0x0810a5a1
 810a534:	0810a5a1 	.word	0x0810a5a1
 810a538:	0810a5a1 	.word	0x0810a5a1
 810a53c:	0810a5a1 	.word	0x0810a5a1
 810a540:	0810a5a1 	.word	0x0810a5a1
 810a544:	0810a5a1 	.word	0x0810a5a1
 810a548:	0810a5a1 	.word	0x0810a5a1
 810a54c:	0810a591 	.word	0x0810a591
 810a550:	0810a5a1 	.word	0x0810a5a1
 810a554:	0810a5a1 	.word	0x0810a5a1
 810a558:	0810a5a1 	.word	0x0810a5a1
 810a55c:	0810a5a1 	.word	0x0810a5a1
 810a560:	0810a5a1 	.word	0x0810a5a1
 810a564:	0810a5a1 	.word	0x0810a5a1
 810a568:	0810a5a1 	.word	0x0810a5a1
 810a56c:	0810a599 	.word	0x0810a599
 810a570:	2301      	movs	r3, #1
 810a572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a576:	e220      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a578:	2304      	movs	r3, #4
 810a57a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a57e:	e21c      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a580:	2308      	movs	r3, #8
 810a582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a586:	e218      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a588:	2310      	movs	r3, #16
 810a58a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a58e:	e214      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a590:	2320      	movs	r3, #32
 810a592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a596:	e210      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a598:	2340      	movs	r3, #64	; 0x40
 810a59a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a59e:	e20c      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a5a0:	2380      	movs	r3, #128	; 0x80
 810a5a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a5a6:	e208      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a5a8:	687b      	ldr	r3, [r7, #4]
 810a5aa:	681b      	ldr	r3, [r3, #0]
 810a5ac:	4a6a      	ldr	r2, [pc, #424]	; (810a758 <UART_SetConfig+0x340>)
 810a5ae:	4293      	cmp	r3, r2
 810a5b0:	d130      	bne.n	810a614 <UART_SetConfig+0x1fc>
 810a5b2:	4b68      	ldr	r3, [pc, #416]	; (810a754 <UART_SetConfig+0x33c>)
 810a5b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a5b6:	f003 0307 	and.w	r3, r3, #7
 810a5ba:	2b05      	cmp	r3, #5
 810a5bc:	d826      	bhi.n	810a60c <UART_SetConfig+0x1f4>
 810a5be:	a201      	add	r2, pc, #4	; (adr r2, 810a5c4 <UART_SetConfig+0x1ac>)
 810a5c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a5c4:	0810a5dd 	.word	0x0810a5dd
 810a5c8:	0810a5e5 	.word	0x0810a5e5
 810a5cc:	0810a5ed 	.word	0x0810a5ed
 810a5d0:	0810a5f5 	.word	0x0810a5f5
 810a5d4:	0810a5fd 	.word	0x0810a5fd
 810a5d8:	0810a605 	.word	0x0810a605
 810a5dc:	2300      	movs	r3, #0
 810a5de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a5e2:	e1ea      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a5e4:	2304      	movs	r3, #4
 810a5e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a5ea:	e1e6      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a5ec:	2308      	movs	r3, #8
 810a5ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a5f2:	e1e2      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a5f4:	2310      	movs	r3, #16
 810a5f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a5fa:	e1de      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a5fc:	2320      	movs	r3, #32
 810a5fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a602:	e1da      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a604:	2340      	movs	r3, #64	; 0x40
 810a606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a60a:	e1d6      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a60c:	2380      	movs	r3, #128	; 0x80
 810a60e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a612:	e1d2      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a614:	687b      	ldr	r3, [r7, #4]
 810a616:	681b      	ldr	r3, [r3, #0]
 810a618:	4a50      	ldr	r2, [pc, #320]	; (810a75c <UART_SetConfig+0x344>)
 810a61a:	4293      	cmp	r3, r2
 810a61c:	d130      	bne.n	810a680 <UART_SetConfig+0x268>
 810a61e:	4b4d      	ldr	r3, [pc, #308]	; (810a754 <UART_SetConfig+0x33c>)
 810a620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a622:	f003 0307 	and.w	r3, r3, #7
 810a626:	2b05      	cmp	r3, #5
 810a628:	d826      	bhi.n	810a678 <UART_SetConfig+0x260>
 810a62a:	a201      	add	r2, pc, #4	; (adr r2, 810a630 <UART_SetConfig+0x218>)
 810a62c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a630:	0810a649 	.word	0x0810a649
 810a634:	0810a651 	.word	0x0810a651
 810a638:	0810a659 	.word	0x0810a659
 810a63c:	0810a661 	.word	0x0810a661
 810a640:	0810a669 	.word	0x0810a669
 810a644:	0810a671 	.word	0x0810a671
 810a648:	2300      	movs	r3, #0
 810a64a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a64e:	e1b4      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a650:	2304      	movs	r3, #4
 810a652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a656:	e1b0      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a658:	2308      	movs	r3, #8
 810a65a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a65e:	e1ac      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a660:	2310      	movs	r3, #16
 810a662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a666:	e1a8      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a668:	2320      	movs	r3, #32
 810a66a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a66e:	e1a4      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a670:	2340      	movs	r3, #64	; 0x40
 810a672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a676:	e1a0      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a678:	2380      	movs	r3, #128	; 0x80
 810a67a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a67e:	e19c      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a680:	687b      	ldr	r3, [r7, #4]
 810a682:	681b      	ldr	r3, [r3, #0]
 810a684:	4a36      	ldr	r2, [pc, #216]	; (810a760 <UART_SetConfig+0x348>)
 810a686:	4293      	cmp	r3, r2
 810a688:	d130      	bne.n	810a6ec <UART_SetConfig+0x2d4>
 810a68a:	4b32      	ldr	r3, [pc, #200]	; (810a754 <UART_SetConfig+0x33c>)
 810a68c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a68e:	f003 0307 	and.w	r3, r3, #7
 810a692:	2b05      	cmp	r3, #5
 810a694:	d826      	bhi.n	810a6e4 <UART_SetConfig+0x2cc>
 810a696:	a201      	add	r2, pc, #4	; (adr r2, 810a69c <UART_SetConfig+0x284>)
 810a698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a69c:	0810a6b5 	.word	0x0810a6b5
 810a6a0:	0810a6bd 	.word	0x0810a6bd
 810a6a4:	0810a6c5 	.word	0x0810a6c5
 810a6a8:	0810a6cd 	.word	0x0810a6cd
 810a6ac:	0810a6d5 	.word	0x0810a6d5
 810a6b0:	0810a6dd 	.word	0x0810a6dd
 810a6b4:	2300      	movs	r3, #0
 810a6b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a6ba:	e17e      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a6bc:	2304      	movs	r3, #4
 810a6be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a6c2:	e17a      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a6c4:	2308      	movs	r3, #8
 810a6c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a6ca:	e176      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a6cc:	2310      	movs	r3, #16
 810a6ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a6d2:	e172      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a6d4:	2320      	movs	r3, #32
 810a6d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a6da:	e16e      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a6dc:	2340      	movs	r3, #64	; 0x40
 810a6de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a6e2:	e16a      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a6e4:	2380      	movs	r3, #128	; 0x80
 810a6e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a6ea:	e166      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a6ec:	687b      	ldr	r3, [r7, #4]
 810a6ee:	681b      	ldr	r3, [r3, #0]
 810a6f0:	4a1c      	ldr	r2, [pc, #112]	; (810a764 <UART_SetConfig+0x34c>)
 810a6f2:	4293      	cmp	r3, r2
 810a6f4:	d140      	bne.n	810a778 <UART_SetConfig+0x360>
 810a6f6:	4b17      	ldr	r3, [pc, #92]	; (810a754 <UART_SetConfig+0x33c>)
 810a6f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a6fa:	f003 0307 	and.w	r3, r3, #7
 810a6fe:	2b05      	cmp	r3, #5
 810a700:	d836      	bhi.n	810a770 <UART_SetConfig+0x358>
 810a702:	a201      	add	r2, pc, #4	; (adr r2, 810a708 <UART_SetConfig+0x2f0>)
 810a704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a708:	0810a721 	.word	0x0810a721
 810a70c:	0810a729 	.word	0x0810a729
 810a710:	0810a731 	.word	0x0810a731
 810a714:	0810a739 	.word	0x0810a739
 810a718:	0810a741 	.word	0x0810a741
 810a71c:	0810a769 	.word	0x0810a769
 810a720:	2300      	movs	r3, #0
 810a722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a726:	e148      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a728:	2304      	movs	r3, #4
 810a72a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a72e:	e144      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a730:	2308      	movs	r3, #8
 810a732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a736:	e140      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a738:	2310      	movs	r3, #16
 810a73a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a73e:	e13c      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a740:	2320      	movs	r3, #32
 810a742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a746:	e138      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a748:	cfff69f3 	.word	0xcfff69f3
 810a74c:	58000c00 	.word	0x58000c00
 810a750:	40011000 	.word	0x40011000
 810a754:	58024400 	.word	0x58024400
 810a758:	40004400 	.word	0x40004400
 810a75c:	40004800 	.word	0x40004800
 810a760:	40004c00 	.word	0x40004c00
 810a764:	40005000 	.word	0x40005000
 810a768:	2340      	movs	r3, #64	; 0x40
 810a76a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a76e:	e124      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a770:	2380      	movs	r3, #128	; 0x80
 810a772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a776:	e120      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a778:	687b      	ldr	r3, [r7, #4]
 810a77a:	681b      	ldr	r3, [r3, #0]
 810a77c:	4acc      	ldr	r2, [pc, #816]	; (810aab0 <UART_SetConfig+0x698>)
 810a77e:	4293      	cmp	r3, r2
 810a780:	d176      	bne.n	810a870 <UART_SetConfig+0x458>
 810a782:	4bcc      	ldr	r3, [pc, #816]	; (810aab4 <UART_SetConfig+0x69c>)
 810a784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a786:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810a78a:	2b28      	cmp	r3, #40	; 0x28
 810a78c:	d86c      	bhi.n	810a868 <UART_SetConfig+0x450>
 810a78e:	a201      	add	r2, pc, #4	; (adr r2, 810a794 <UART_SetConfig+0x37c>)
 810a790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a794:	0810a839 	.word	0x0810a839
 810a798:	0810a869 	.word	0x0810a869
 810a79c:	0810a869 	.word	0x0810a869
 810a7a0:	0810a869 	.word	0x0810a869
 810a7a4:	0810a869 	.word	0x0810a869
 810a7a8:	0810a869 	.word	0x0810a869
 810a7ac:	0810a869 	.word	0x0810a869
 810a7b0:	0810a869 	.word	0x0810a869
 810a7b4:	0810a841 	.word	0x0810a841
 810a7b8:	0810a869 	.word	0x0810a869
 810a7bc:	0810a869 	.word	0x0810a869
 810a7c0:	0810a869 	.word	0x0810a869
 810a7c4:	0810a869 	.word	0x0810a869
 810a7c8:	0810a869 	.word	0x0810a869
 810a7cc:	0810a869 	.word	0x0810a869
 810a7d0:	0810a869 	.word	0x0810a869
 810a7d4:	0810a849 	.word	0x0810a849
 810a7d8:	0810a869 	.word	0x0810a869
 810a7dc:	0810a869 	.word	0x0810a869
 810a7e0:	0810a869 	.word	0x0810a869
 810a7e4:	0810a869 	.word	0x0810a869
 810a7e8:	0810a869 	.word	0x0810a869
 810a7ec:	0810a869 	.word	0x0810a869
 810a7f0:	0810a869 	.word	0x0810a869
 810a7f4:	0810a851 	.word	0x0810a851
 810a7f8:	0810a869 	.word	0x0810a869
 810a7fc:	0810a869 	.word	0x0810a869
 810a800:	0810a869 	.word	0x0810a869
 810a804:	0810a869 	.word	0x0810a869
 810a808:	0810a869 	.word	0x0810a869
 810a80c:	0810a869 	.word	0x0810a869
 810a810:	0810a869 	.word	0x0810a869
 810a814:	0810a859 	.word	0x0810a859
 810a818:	0810a869 	.word	0x0810a869
 810a81c:	0810a869 	.word	0x0810a869
 810a820:	0810a869 	.word	0x0810a869
 810a824:	0810a869 	.word	0x0810a869
 810a828:	0810a869 	.word	0x0810a869
 810a82c:	0810a869 	.word	0x0810a869
 810a830:	0810a869 	.word	0x0810a869
 810a834:	0810a861 	.word	0x0810a861
 810a838:	2301      	movs	r3, #1
 810a83a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a83e:	e0bc      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a840:	2304      	movs	r3, #4
 810a842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a846:	e0b8      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a848:	2308      	movs	r3, #8
 810a84a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a84e:	e0b4      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a850:	2310      	movs	r3, #16
 810a852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a856:	e0b0      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a858:	2320      	movs	r3, #32
 810a85a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a85e:	e0ac      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a860:	2340      	movs	r3, #64	; 0x40
 810a862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a866:	e0a8      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a868:	2380      	movs	r3, #128	; 0x80
 810a86a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a86e:	e0a4      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a870:	687b      	ldr	r3, [r7, #4]
 810a872:	681b      	ldr	r3, [r3, #0]
 810a874:	4a90      	ldr	r2, [pc, #576]	; (810aab8 <UART_SetConfig+0x6a0>)
 810a876:	4293      	cmp	r3, r2
 810a878:	d130      	bne.n	810a8dc <UART_SetConfig+0x4c4>
 810a87a:	4b8e      	ldr	r3, [pc, #568]	; (810aab4 <UART_SetConfig+0x69c>)
 810a87c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a87e:	f003 0307 	and.w	r3, r3, #7
 810a882:	2b05      	cmp	r3, #5
 810a884:	d826      	bhi.n	810a8d4 <UART_SetConfig+0x4bc>
 810a886:	a201      	add	r2, pc, #4	; (adr r2, 810a88c <UART_SetConfig+0x474>)
 810a888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a88c:	0810a8a5 	.word	0x0810a8a5
 810a890:	0810a8ad 	.word	0x0810a8ad
 810a894:	0810a8b5 	.word	0x0810a8b5
 810a898:	0810a8bd 	.word	0x0810a8bd
 810a89c:	0810a8c5 	.word	0x0810a8c5
 810a8a0:	0810a8cd 	.word	0x0810a8cd
 810a8a4:	2300      	movs	r3, #0
 810a8a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a8aa:	e086      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a8ac:	2304      	movs	r3, #4
 810a8ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a8b2:	e082      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a8b4:	2308      	movs	r3, #8
 810a8b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a8ba:	e07e      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a8bc:	2310      	movs	r3, #16
 810a8be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a8c2:	e07a      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a8c4:	2320      	movs	r3, #32
 810a8c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a8ca:	e076      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a8cc:	2340      	movs	r3, #64	; 0x40
 810a8ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a8d2:	e072      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a8d4:	2380      	movs	r3, #128	; 0x80
 810a8d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a8da:	e06e      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a8dc:	687b      	ldr	r3, [r7, #4]
 810a8de:	681b      	ldr	r3, [r3, #0]
 810a8e0:	4a76      	ldr	r2, [pc, #472]	; (810aabc <UART_SetConfig+0x6a4>)
 810a8e2:	4293      	cmp	r3, r2
 810a8e4:	d130      	bne.n	810a948 <UART_SetConfig+0x530>
 810a8e6:	4b73      	ldr	r3, [pc, #460]	; (810aab4 <UART_SetConfig+0x69c>)
 810a8e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a8ea:	f003 0307 	and.w	r3, r3, #7
 810a8ee:	2b05      	cmp	r3, #5
 810a8f0:	d826      	bhi.n	810a940 <UART_SetConfig+0x528>
 810a8f2:	a201      	add	r2, pc, #4	; (adr r2, 810a8f8 <UART_SetConfig+0x4e0>)
 810a8f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a8f8:	0810a911 	.word	0x0810a911
 810a8fc:	0810a919 	.word	0x0810a919
 810a900:	0810a921 	.word	0x0810a921
 810a904:	0810a929 	.word	0x0810a929
 810a908:	0810a931 	.word	0x0810a931
 810a90c:	0810a939 	.word	0x0810a939
 810a910:	2300      	movs	r3, #0
 810a912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a916:	e050      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a918:	2304      	movs	r3, #4
 810a91a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a91e:	e04c      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a920:	2308      	movs	r3, #8
 810a922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a926:	e048      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a928:	2310      	movs	r3, #16
 810a92a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a92e:	e044      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a930:	2320      	movs	r3, #32
 810a932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a936:	e040      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a938:	2340      	movs	r3, #64	; 0x40
 810a93a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a93e:	e03c      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a940:	2380      	movs	r3, #128	; 0x80
 810a942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a946:	e038      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a948:	687b      	ldr	r3, [r7, #4]
 810a94a:	681b      	ldr	r3, [r3, #0]
 810a94c:	4a5c      	ldr	r2, [pc, #368]	; (810aac0 <UART_SetConfig+0x6a8>)
 810a94e:	4293      	cmp	r3, r2
 810a950:	d130      	bne.n	810a9b4 <UART_SetConfig+0x59c>
 810a952:	4b58      	ldr	r3, [pc, #352]	; (810aab4 <UART_SetConfig+0x69c>)
 810a954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810a956:	f003 0307 	and.w	r3, r3, #7
 810a95a:	2b05      	cmp	r3, #5
 810a95c:	d826      	bhi.n	810a9ac <UART_SetConfig+0x594>
 810a95e:	a201      	add	r2, pc, #4	; (adr r2, 810a964 <UART_SetConfig+0x54c>)
 810a960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a964:	0810a97d 	.word	0x0810a97d
 810a968:	0810a985 	.word	0x0810a985
 810a96c:	0810a98d 	.word	0x0810a98d
 810a970:	0810a995 	.word	0x0810a995
 810a974:	0810a99d 	.word	0x0810a99d
 810a978:	0810a9a5 	.word	0x0810a9a5
 810a97c:	2302      	movs	r3, #2
 810a97e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a982:	e01a      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a984:	2304      	movs	r3, #4
 810a986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a98a:	e016      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a98c:	2308      	movs	r3, #8
 810a98e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a992:	e012      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a994:	2310      	movs	r3, #16
 810a996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a99a:	e00e      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a99c:	2320      	movs	r3, #32
 810a99e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a9a2:	e00a      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a9a4:	2340      	movs	r3, #64	; 0x40
 810a9a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a9aa:	e006      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a9ac:	2380      	movs	r3, #128	; 0x80
 810a9ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a9b2:	e002      	b.n	810a9ba <UART_SetConfig+0x5a2>
 810a9b4:	2380      	movs	r3, #128	; 0x80
 810a9b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810a9ba:	687b      	ldr	r3, [r7, #4]
 810a9bc:	681b      	ldr	r3, [r3, #0]
 810a9be:	4a40      	ldr	r2, [pc, #256]	; (810aac0 <UART_SetConfig+0x6a8>)
 810a9c0:	4293      	cmp	r3, r2
 810a9c2:	f040 80ef 	bne.w	810aba4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810a9c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810a9ca:	2b20      	cmp	r3, #32
 810a9cc:	dc46      	bgt.n	810aa5c <UART_SetConfig+0x644>
 810a9ce:	2b02      	cmp	r3, #2
 810a9d0:	f2c0 8081 	blt.w	810aad6 <UART_SetConfig+0x6be>
 810a9d4:	3b02      	subs	r3, #2
 810a9d6:	2b1e      	cmp	r3, #30
 810a9d8:	d87d      	bhi.n	810aad6 <UART_SetConfig+0x6be>
 810a9da:	a201      	add	r2, pc, #4	; (adr r2, 810a9e0 <UART_SetConfig+0x5c8>)
 810a9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a9e0:	0810aa63 	.word	0x0810aa63
 810a9e4:	0810aad7 	.word	0x0810aad7
 810a9e8:	0810aa6b 	.word	0x0810aa6b
 810a9ec:	0810aad7 	.word	0x0810aad7
 810a9f0:	0810aad7 	.word	0x0810aad7
 810a9f4:	0810aad7 	.word	0x0810aad7
 810a9f8:	0810aa7b 	.word	0x0810aa7b
 810a9fc:	0810aad7 	.word	0x0810aad7
 810aa00:	0810aad7 	.word	0x0810aad7
 810aa04:	0810aad7 	.word	0x0810aad7
 810aa08:	0810aad7 	.word	0x0810aad7
 810aa0c:	0810aad7 	.word	0x0810aad7
 810aa10:	0810aad7 	.word	0x0810aad7
 810aa14:	0810aad7 	.word	0x0810aad7
 810aa18:	0810aa8b 	.word	0x0810aa8b
 810aa1c:	0810aad7 	.word	0x0810aad7
 810aa20:	0810aad7 	.word	0x0810aad7
 810aa24:	0810aad7 	.word	0x0810aad7
 810aa28:	0810aad7 	.word	0x0810aad7
 810aa2c:	0810aad7 	.word	0x0810aad7
 810aa30:	0810aad7 	.word	0x0810aad7
 810aa34:	0810aad7 	.word	0x0810aad7
 810aa38:	0810aad7 	.word	0x0810aad7
 810aa3c:	0810aad7 	.word	0x0810aad7
 810aa40:	0810aad7 	.word	0x0810aad7
 810aa44:	0810aad7 	.word	0x0810aad7
 810aa48:	0810aad7 	.word	0x0810aad7
 810aa4c:	0810aad7 	.word	0x0810aad7
 810aa50:	0810aad7 	.word	0x0810aad7
 810aa54:	0810aad7 	.word	0x0810aad7
 810aa58:	0810aac9 	.word	0x0810aac9
 810aa5c:	2b40      	cmp	r3, #64	; 0x40
 810aa5e:	d036      	beq.n	810aace <UART_SetConfig+0x6b6>
 810aa60:	e039      	b.n	810aad6 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810aa62:	f7fd fe4b 	bl	81086fc <HAL_RCCEx_GetD3PCLK1Freq>
 810aa66:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810aa68:	e03b      	b.n	810aae2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810aa6a:	f107 0314 	add.w	r3, r7, #20
 810aa6e:	4618      	mov	r0, r3
 810aa70:	f7fd fe5a 	bl	8108728 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810aa74:	69bb      	ldr	r3, [r7, #24]
 810aa76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810aa78:	e033      	b.n	810aae2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810aa7a:	f107 0308 	add.w	r3, r7, #8
 810aa7e:	4618      	mov	r0, r3
 810aa80:	f7fd ffa6 	bl	81089d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810aa84:	68fb      	ldr	r3, [r7, #12]
 810aa86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810aa88:	e02b      	b.n	810aae2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810aa8a:	4b0a      	ldr	r3, [pc, #40]	; (810aab4 <UART_SetConfig+0x69c>)
 810aa8c:	681b      	ldr	r3, [r3, #0]
 810aa8e:	f003 0320 	and.w	r3, r3, #32
 810aa92:	2b00      	cmp	r3, #0
 810aa94:	d009      	beq.n	810aaaa <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810aa96:	4b07      	ldr	r3, [pc, #28]	; (810aab4 <UART_SetConfig+0x69c>)
 810aa98:	681b      	ldr	r3, [r3, #0]
 810aa9a:	08db      	lsrs	r3, r3, #3
 810aa9c:	f003 0303 	and.w	r3, r3, #3
 810aaa0:	4a08      	ldr	r2, [pc, #32]	; (810aac4 <UART_SetConfig+0x6ac>)
 810aaa2:	fa22 f303 	lsr.w	r3, r2, r3
 810aaa6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810aaa8:	e01b      	b.n	810aae2 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 810aaaa:	4b06      	ldr	r3, [pc, #24]	; (810aac4 <UART_SetConfig+0x6ac>)
 810aaac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810aaae:	e018      	b.n	810aae2 <UART_SetConfig+0x6ca>
 810aab0:	40011400 	.word	0x40011400
 810aab4:	58024400 	.word	0x58024400
 810aab8:	40007800 	.word	0x40007800
 810aabc:	40007c00 	.word	0x40007c00
 810aac0:	58000c00 	.word	0x58000c00
 810aac4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810aac8:	4bc4      	ldr	r3, [pc, #784]	; (810addc <UART_SetConfig+0x9c4>)
 810aaca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810aacc:	e009      	b.n	810aae2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810aace:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810aad2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810aad4:	e005      	b.n	810aae2 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 810aad6:	2300      	movs	r3, #0
 810aad8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810aada:	2301      	movs	r3, #1
 810aadc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810aae0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810aae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810aae4:	2b00      	cmp	r3, #0
 810aae6:	f000 81da 	beq.w	810ae9e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810aaea:	687b      	ldr	r3, [r7, #4]
 810aaec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810aaee:	4abc      	ldr	r2, [pc, #752]	; (810ade0 <UART_SetConfig+0x9c8>)
 810aaf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810aaf4:	461a      	mov	r2, r3
 810aaf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810aaf8:	fbb3 f3f2 	udiv	r3, r3, r2
 810aafc:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810aafe:	687b      	ldr	r3, [r7, #4]
 810ab00:	685a      	ldr	r2, [r3, #4]
 810ab02:	4613      	mov	r3, r2
 810ab04:	005b      	lsls	r3, r3, #1
 810ab06:	4413      	add	r3, r2
 810ab08:	6a3a      	ldr	r2, [r7, #32]
 810ab0a:	429a      	cmp	r2, r3
 810ab0c:	d305      	bcc.n	810ab1a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810ab0e:	687b      	ldr	r3, [r7, #4]
 810ab10:	685b      	ldr	r3, [r3, #4]
 810ab12:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810ab14:	6a3a      	ldr	r2, [r7, #32]
 810ab16:	429a      	cmp	r2, r3
 810ab18:	d903      	bls.n	810ab22 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 810ab1a:	2301      	movs	r3, #1
 810ab1c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810ab20:	e1bd      	b.n	810ae9e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810ab22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810ab24:	4618      	mov	r0, r3
 810ab26:	f04f 0100 	mov.w	r1, #0
 810ab2a:	687b      	ldr	r3, [r7, #4]
 810ab2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810ab2e:	4aac      	ldr	r2, [pc, #688]	; (810ade0 <UART_SetConfig+0x9c8>)
 810ab30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810ab34:	b29a      	uxth	r2, r3
 810ab36:	f04f 0300 	mov.w	r3, #0
 810ab3a:	f7f5 fc29 	bl	8100390 <__aeabi_uldivmod>
 810ab3e:	4602      	mov	r2, r0
 810ab40:	460b      	mov	r3, r1
 810ab42:	4610      	mov	r0, r2
 810ab44:	4619      	mov	r1, r3
 810ab46:	f04f 0200 	mov.w	r2, #0
 810ab4a:	f04f 0300 	mov.w	r3, #0
 810ab4e:	020b      	lsls	r3, r1, #8
 810ab50:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810ab54:	0202      	lsls	r2, r0, #8
 810ab56:	6879      	ldr	r1, [r7, #4]
 810ab58:	6849      	ldr	r1, [r1, #4]
 810ab5a:	0849      	lsrs	r1, r1, #1
 810ab5c:	4608      	mov	r0, r1
 810ab5e:	f04f 0100 	mov.w	r1, #0
 810ab62:	1814      	adds	r4, r2, r0
 810ab64:	eb43 0501 	adc.w	r5, r3, r1
 810ab68:	687b      	ldr	r3, [r7, #4]
 810ab6a:	685b      	ldr	r3, [r3, #4]
 810ab6c:	461a      	mov	r2, r3
 810ab6e:	f04f 0300 	mov.w	r3, #0
 810ab72:	4620      	mov	r0, r4
 810ab74:	4629      	mov	r1, r5
 810ab76:	f7f5 fc0b 	bl	8100390 <__aeabi_uldivmod>
 810ab7a:	4602      	mov	r2, r0
 810ab7c:	460b      	mov	r3, r1
 810ab7e:	4613      	mov	r3, r2
 810ab80:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810ab82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810ab84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810ab88:	d308      	bcc.n	810ab9c <UART_SetConfig+0x784>
 810ab8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810ab8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810ab90:	d204      	bcs.n	810ab9c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 810ab92:	687b      	ldr	r3, [r7, #4]
 810ab94:	681b      	ldr	r3, [r3, #0]
 810ab96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810ab98:	60da      	str	r2, [r3, #12]
 810ab9a:	e180      	b.n	810ae9e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 810ab9c:	2301      	movs	r3, #1
 810ab9e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810aba2:	e17c      	b.n	810ae9e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810aba4:	687b      	ldr	r3, [r7, #4]
 810aba6:	69db      	ldr	r3, [r3, #28]
 810aba8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810abac:	f040 80bf 	bne.w	810ad2e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 810abb0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810abb4:	2b20      	cmp	r3, #32
 810abb6:	dc49      	bgt.n	810ac4c <UART_SetConfig+0x834>
 810abb8:	2b00      	cmp	r3, #0
 810abba:	db7c      	blt.n	810acb6 <UART_SetConfig+0x89e>
 810abbc:	2b20      	cmp	r3, #32
 810abbe:	d87a      	bhi.n	810acb6 <UART_SetConfig+0x89e>
 810abc0:	a201      	add	r2, pc, #4	; (adr r2, 810abc8 <UART_SetConfig+0x7b0>)
 810abc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810abc6:	bf00      	nop
 810abc8:	0810ac53 	.word	0x0810ac53
 810abcc:	0810ac5b 	.word	0x0810ac5b
 810abd0:	0810acb7 	.word	0x0810acb7
 810abd4:	0810acb7 	.word	0x0810acb7
 810abd8:	0810ac63 	.word	0x0810ac63
 810abdc:	0810acb7 	.word	0x0810acb7
 810abe0:	0810acb7 	.word	0x0810acb7
 810abe4:	0810acb7 	.word	0x0810acb7
 810abe8:	0810ac73 	.word	0x0810ac73
 810abec:	0810acb7 	.word	0x0810acb7
 810abf0:	0810acb7 	.word	0x0810acb7
 810abf4:	0810acb7 	.word	0x0810acb7
 810abf8:	0810acb7 	.word	0x0810acb7
 810abfc:	0810acb7 	.word	0x0810acb7
 810ac00:	0810acb7 	.word	0x0810acb7
 810ac04:	0810acb7 	.word	0x0810acb7
 810ac08:	0810ac83 	.word	0x0810ac83
 810ac0c:	0810acb7 	.word	0x0810acb7
 810ac10:	0810acb7 	.word	0x0810acb7
 810ac14:	0810acb7 	.word	0x0810acb7
 810ac18:	0810acb7 	.word	0x0810acb7
 810ac1c:	0810acb7 	.word	0x0810acb7
 810ac20:	0810acb7 	.word	0x0810acb7
 810ac24:	0810acb7 	.word	0x0810acb7
 810ac28:	0810acb7 	.word	0x0810acb7
 810ac2c:	0810acb7 	.word	0x0810acb7
 810ac30:	0810acb7 	.word	0x0810acb7
 810ac34:	0810acb7 	.word	0x0810acb7
 810ac38:	0810acb7 	.word	0x0810acb7
 810ac3c:	0810acb7 	.word	0x0810acb7
 810ac40:	0810acb7 	.word	0x0810acb7
 810ac44:	0810acb7 	.word	0x0810acb7
 810ac48:	0810aca9 	.word	0x0810aca9
 810ac4c:	2b40      	cmp	r3, #64	; 0x40
 810ac4e:	d02e      	beq.n	810acae <UART_SetConfig+0x896>
 810ac50:	e031      	b.n	810acb6 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810ac52:	f7fc f8d3 	bl	8106dfc <HAL_RCC_GetPCLK1Freq>
 810ac56:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810ac58:	e033      	b.n	810acc2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810ac5a:	f7fc f8e5 	bl	8106e28 <HAL_RCC_GetPCLK2Freq>
 810ac5e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810ac60:	e02f      	b.n	810acc2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810ac62:	f107 0314 	add.w	r3, r7, #20
 810ac66:	4618      	mov	r0, r3
 810ac68:	f7fd fd5e 	bl	8108728 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810ac6c:	69bb      	ldr	r3, [r7, #24]
 810ac6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810ac70:	e027      	b.n	810acc2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810ac72:	f107 0308 	add.w	r3, r7, #8
 810ac76:	4618      	mov	r0, r3
 810ac78:	f7fd feaa 	bl	81089d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810ac7c:	68fb      	ldr	r3, [r7, #12]
 810ac7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810ac80:	e01f      	b.n	810acc2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810ac82:	4b58      	ldr	r3, [pc, #352]	; (810ade4 <UART_SetConfig+0x9cc>)
 810ac84:	681b      	ldr	r3, [r3, #0]
 810ac86:	f003 0320 	and.w	r3, r3, #32
 810ac8a:	2b00      	cmp	r3, #0
 810ac8c:	d009      	beq.n	810aca2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810ac8e:	4b55      	ldr	r3, [pc, #340]	; (810ade4 <UART_SetConfig+0x9cc>)
 810ac90:	681b      	ldr	r3, [r3, #0]
 810ac92:	08db      	lsrs	r3, r3, #3
 810ac94:	f003 0303 	and.w	r3, r3, #3
 810ac98:	4a53      	ldr	r2, [pc, #332]	; (810ade8 <UART_SetConfig+0x9d0>)
 810ac9a:	fa22 f303 	lsr.w	r3, r2, r3
 810ac9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810aca0:	e00f      	b.n	810acc2 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 810aca2:	4b51      	ldr	r3, [pc, #324]	; (810ade8 <UART_SetConfig+0x9d0>)
 810aca4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810aca6:	e00c      	b.n	810acc2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810aca8:	4b4c      	ldr	r3, [pc, #304]	; (810addc <UART_SetConfig+0x9c4>)
 810acaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810acac:	e009      	b.n	810acc2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810acae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810acb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810acb4:	e005      	b.n	810acc2 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 810acb6:	2300      	movs	r3, #0
 810acb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810acba:	2301      	movs	r3, #1
 810acbc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810acc0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810acc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810acc4:	2b00      	cmp	r3, #0
 810acc6:	f000 80ea 	beq.w	810ae9e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810acca:	687b      	ldr	r3, [r7, #4]
 810accc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810acce:	4a44      	ldr	r2, [pc, #272]	; (810ade0 <UART_SetConfig+0x9c8>)
 810acd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810acd4:	461a      	mov	r2, r3
 810acd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810acd8:	fbb3 f3f2 	udiv	r3, r3, r2
 810acdc:	005a      	lsls	r2, r3, #1
 810acde:	687b      	ldr	r3, [r7, #4]
 810ace0:	685b      	ldr	r3, [r3, #4]
 810ace2:	085b      	lsrs	r3, r3, #1
 810ace4:	441a      	add	r2, r3
 810ace6:	687b      	ldr	r3, [r7, #4]
 810ace8:	685b      	ldr	r3, [r3, #4]
 810acea:	fbb2 f3f3 	udiv	r3, r2, r3
 810acee:	b29b      	uxth	r3, r3
 810acf0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810acf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810acf4:	2b0f      	cmp	r3, #15
 810acf6:	d916      	bls.n	810ad26 <UART_SetConfig+0x90e>
 810acf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810acfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810acfe:	d212      	bcs.n	810ad26 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810ad00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810ad02:	b29b      	uxth	r3, r3
 810ad04:	f023 030f 	bic.w	r3, r3, #15
 810ad08:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810ad0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810ad0c:	085b      	lsrs	r3, r3, #1
 810ad0e:	b29b      	uxth	r3, r3
 810ad10:	f003 0307 	and.w	r3, r3, #7
 810ad14:	b29a      	uxth	r2, r3
 810ad16:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 810ad18:	4313      	orrs	r3, r2
 810ad1a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 810ad1c:	687b      	ldr	r3, [r7, #4]
 810ad1e:	681b      	ldr	r3, [r3, #0]
 810ad20:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 810ad22:	60da      	str	r2, [r3, #12]
 810ad24:	e0bb      	b.n	810ae9e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 810ad26:	2301      	movs	r3, #1
 810ad28:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810ad2c:	e0b7      	b.n	810ae9e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 810ad2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810ad32:	2b20      	cmp	r3, #32
 810ad34:	dc4a      	bgt.n	810adcc <UART_SetConfig+0x9b4>
 810ad36:	2b00      	cmp	r3, #0
 810ad38:	f2c0 8086 	blt.w	810ae48 <UART_SetConfig+0xa30>
 810ad3c:	2b20      	cmp	r3, #32
 810ad3e:	f200 8083 	bhi.w	810ae48 <UART_SetConfig+0xa30>
 810ad42:	a201      	add	r2, pc, #4	; (adr r2, 810ad48 <UART_SetConfig+0x930>)
 810ad44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ad48:	0810add3 	.word	0x0810add3
 810ad4c:	0810aded 	.word	0x0810aded
 810ad50:	0810ae49 	.word	0x0810ae49
 810ad54:	0810ae49 	.word	0x0810ae49
 810ad58:	0810adf5 	.word	0x0810adf5
 810ad5c:	0810ae49 	.word	0x0810ae49
 810ad60:	0810ae49 	.word	0x0810ae49
 810ad64:	0810ae49 	.word	0x0810ae49
 810ad68:	0810ae05 	.word	0x0810ae05
 810ad6c:	0810ae49 	.word	0x0810ae49
 810ad70:	0810ae49 	.word	0x0810ae49
 810ad74:	0810ae49 	.word	0x0810ae49
 810ad78:	0810ae49 	.word	0x0810ae49
 810ad7c:	0810ae49 	.word	0x0810ae49
 810ad80:	0810ae49 	.word	0x0810ae49
 810ad84:	0810ae49 	.word	0x0810ae49
 810ad88:	0810ae15 	.word	0x0810ae15
 810ad8c:	0810ae49 	.word	0x0810ae49
 810ad90:	0810ae49 	.word	0x0810ae49
 810ad94:	0810ae49 	.word	0x0810ae49
 810ad98:	0810ae49 	.word	0x0810ae49
 810ad9c:	0810ae49 	.word	0x0810ae49
 810ada0:	0810ae49 	.word	0x0810ae49
 810ada4:	0810ae49 	.word	0x0810ae49
 810ada8:	0810ae49 	.word	0x0810ae49
 810adac:	0810ae49 	.word	0x0810ae49
 810adb0:	0810ae49 	.word	0x0810ae49
 810adb4:	0810ae49 	.word	0x0810ae49
 810adb8:	0810ae49 	.word	0x0810ae49
 810adbc:	0810ae49 	.word	0x0810ae49
 810adc0:	0810ae49 	.word	0x0810ae49
 810adc4:	0810ae49 	.word	0x0810ae49
 810adc8:	0810ae3b 	.word	0x0810ae3b
 810adcc:	2b40      	cmp	r3, #64	; 0x40
 810adce:	d037      	beq.n	810ae40 <UART_SetConfig+0xa28>
 810add0:	e03a      	b.n	810ae48 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810add2:	f7fc f813 	bl	8106dfc <HAL_RCC_GetPCLK1Freq>
 810add6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810add8:	e03c      	b.n	810ae54 <UART_SetConfig+0xa3c>
 810adda:	bf00      	nop
 810addc:	003d0900 	.word	0x003d0900
 810ade0:	08110280 	.word	0x08110280
 810ade4:	58024400 	.word	0x58024400
 810ade8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810adec:	f7fc f81c 	bl	8106e28 <HAL_RCC_GetPCLK2Freq>
 810adf0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810adf2:	e02f      	b.n	810ae54 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810adf4:	f107 0314 	add.w	r3, r7, #20
 810adf8:	4618      	mov	r0, r3
 810adfa:	f7fd fc95 	bl	8108728 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810adfe:	69bb      	ldr	r3, [r7, #24]
 810ae00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810ae02:	e027      	b.n	810ae54 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810ae04:	f107 0308 	add.w	r3, r7, #8
 810ae08:	4618      	mov	r0, r3
 810ae0a:	f7fd fde1 	bl	81089d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810ae0e:	68fb      	ldr	r3, [r7, #12]
 810ae10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810ae12:	e01f      	b.n	810ae54 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810ae14:	4b2c      	ldr	r3, [pc, #176]	; (810aec8 <UART_SetConfig+0xab0>)
 810ae16:	681b      	ldr	r3, [r3, #0]
 810ae18:	f003 0320 	and.w	r3, r3, #32
 810ae1c:	2b00      	cmp	r3, #0
 810ae1e:	d009      	beq.n	810ae34 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810ae20:	4b29      	ldr	r3, [pc, #164]	; (810aec8 <UART_SetConfig+0xab0>)
 810ae22:	681b      	ldr	r3, [r3, #0]
 810ae24:	08db      	lsrs	r3, r3, #3
 810ae26:	f003 0303 	and.w	r3, r3, #3
 810ae2a:	4a28      	ldr	r2, [pc, #160]	; (810aecc <UART_SetConfig+0xab4>)
 810ae2c:	fa22 f303 	lsr.w	r3, r2, r3
 810ae30:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810ae32:	e00f      	b.n	810ae54 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 810ae34:	4b25      	ldr	r3, [pc, #148]	; (810aecc <UART_SetConfig+0xab4>)
 810ae36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810ae38:	e00c      	b.n	810ae54 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810ae3a:	4b25      	ldr	r3, [pc, #148]	; (810aed0 <UART_SetConfig+0xab8>)
 810ae3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810ae3e:	e009      	b.n	810ae54 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810ae40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810ae44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810ae46:	e005      	b.n	810ae54 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 810ae48:	2300      	movs	r3, #0
 810ae4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810ae4c:	2301      	movs	r3, #1
 810ae4e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810ae52:	bf00      	nop
    }

    if (pclk != 0U)
 810ae54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810ae56:	2b00      	cmp	r3, #0
 810ae58:	d021      	beq.n	810ae9e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810ae5a:	687b      	ldr	r3, [r7, #4]
 810ae5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810ae5e:	4a1d      	ldr	r2, [pc, #116]	; (810aed4 <UART_SetConfig+0xabc>)
 810ae60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810ae64:	461a      	mov	r2, r3
 810ae66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810ae68:	fbb3 f2f2 	udiv	r2, r3, r2
 810ae6c:	687b      	ldr	r3, [r7, #4]
 810ae6e:	685b      	ldr	r3, [r3, #4]
 810ae70:	085b      	lsrs	r3, r3, #1
 810ae72:	441a      	add	r2, r3
 810ae74:	687b      	ldr	r3, [r7, #4]
 810ae76:	685b      	ldr	r3, [r3, #4]
 810ae78:	fbb2 f3f3 	udiv	r3, r2, r3
 810ae7c:	b29b      	uxth	r3, r3
 810ae7e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810ae80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810ae82:	2b0f      	cmp	r3, #15
 810ae84:	d908      	bls.n	810ae98 <UART_SetConfig+0xa80>
 810ae86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810ae88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810ae8c:	d204      	bcs.n	810ae98 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 810ae8e:	687b      	ldr	r3, [r7, #4]
 810ae90:	681b      	ldr	r3, [r3, #0]
 810ae92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810ae94:	60da      	str	r2, [r3, #12]
 810ae96:	e002      	b.n	810ae9e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 810ae98:	2301      	movs	r3, #1
 810ae9a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810ae9e:	687b      	ldr	r3, [r7, #4]
 810aea0:	2201      	movs	r2, #1
 810aea2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 810aea6:	687b      	ldr	r3, [r7, #4]
 810aea8:	2201      	movs	r2, #1
 810aeaa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810aeae:	687b      	ldr	r3, [r7, #4]
 810aeb0:	2200      	movs	r2, #0
 810aeb2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 810aeb4:	687b      	ldr	r3, [r7, #4]
 810aeb6:	2200      	movs	r2, #0
 810aeb8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 810aeba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 810aebe:	4618      	mov	r0, r3
 810aec0:	3738      	adds	r7, #56	; 0x38
 810aec2:	46bd      	mov	sp, r7
 810aec4:	bdb0      	pop	{r4, r5, r7, pc}
 810aec6:	bf00      	nop
 810aec8:	58024400 	.word	0x58024400
 810aecc:	03d09000 	.word	0x03d09000
 810aed0:	003d0900 	.word	0x003d0900
 810aed4:	08110280 	.word	0x08110280

0810aed8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810aed8:	b480      	push	{r7}
 810aeda:	b083      	sub	sp, #12
 810aedc:	af00      	add	r7, sp, #0
 810aede:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810aee0:	687b      	ldr	r3, [r7, #4]
 810aee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810aee4:	f003 0301 	and.w	r3, r3, #1
 810aee8:	2b00      	cmp	r3, #0
 810aeea:	d00a      	beq.n	810af02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810aeec:	687b      	ldr	r3, [r7, #4]
 810aeee:	681b      	ldr	r3, [r3, #0]
 810aef0:	685b      	ldr	r3, [r3, #4]
 810aef2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 810aef6:	687b      	ldr	r3, [r7, #4]
 810aef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810aefa:	687b      	ldr	r3, [r7, #4]
 810aefc:	681b      	ldr	r3, [r3, #0]
 810aefe:	430a      	orrs	r2, r1
 810af00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810af02:	687b      	ldr	r3, [r7, #4]
 810af04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810af06:	f003 0302 	and.w	r3, r3, #2
 810af0a:	2b00      	cmp	r3, #0
 810af0c:	d00a      	beq.n	810af24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810af0e:	687b      	ldr	r3, [r7, #4]
 810af10:	681b      	ldr	r3, [r3, #0]
 810af12:	685b      	ldr	r3, [r3, #4]
 810af14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 810af18:	687b      	ldr	r3, [r7, #4]
 810af1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810af1c:	687b      	ldr	r3, [r7, #4]
 810af1e:	681b      	ldr	r3, [r3, #0]
 810af20:	430a      	orrs	r2, r1
 810af22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810af24:	687b      	ldr	r3, [r7, #4]
 810af26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810af28:	f003 0304 	and.w	r3, r3, #4
 810af2c:	2b00      	cmp	r3, #0
 810af2e:	d00a      	beq.n	810af46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810af30:	687b      	ldr	r3, [r7, #4]
 810af32:	681b      	ldr	r3, [r3, #0]
 810af34:	685b      	ldr	r3, [r3, #4]
 810af36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 810af3a:	687b      	ldr	r3, [r7, #4]
 810af3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810af3e:	687b      	ldr	r3, [r7, #4]
 810af40:	681b      	ldr	r3, [r3, #0]
 810af42:	430a      	orrs	r2, r1
 810af44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810af46:	687b      	ldr	r3, [r7, #4]
 810af48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810af4a:	f003 0308 	and.w	r3, r3, #8
 810af4e:	2b00      	cmp	r3, #0
 810af50:	d00a      	beq.n	810af68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810af52:	687b      	ldr	r3, [r7, #4]
 810af54:	681b      	ldr	r3, [r3, #0]
 810af56:	685b      	ldr	r3, [r3, #4]
 810af58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 810af5c:	687b      	ldr	r3, [r7, #4]
 810af5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810af60:	687b      	ldr	r3, [r7, #4]
 810af62:	681b      	ldr	r3, [r3, #0]
 810af64:	430a      	orrs	r2, r1
 810af66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810af68:	687b      	ldr	r3, [r7, #4]
 810af6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810af6c:	f003 0310 	and.w	r3, r3, #16
 810af70:	2b00      	cmp	r3, #0
 810af72:	d00a      	beq.n	810af8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810af74:	687b      	ldr	r3, [r7, #4]
 810af76:	681b      	ldr	r3, [r3, #0]
 810af78:	689b      	ldr	r3, [r3, #8]
 810af7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 810af7e:	687b      	ldr	r3, [r7, #4]
 810af80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810af82:	687b      	ldr	r3, [r7, #4]
 810af84:	681b      	ldr	r3, [r3, #0]
 810af86:	430a      	orrs	r2, r1
 810af88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810af8a:	687b      	ldr	r3, [r7, #4]
 810af8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810af8e:	f003 0320 	and.w	r3, r3, #32
 810af92:	2b00      	cmp	r3, #0
 810af94:	d00a      	beq.n	810afac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810af96:	687b      	ldr	r3, [r7, #4]
 810af98:	681b      	ldr	r3, [r3, #0]
 810af9a:	689b      	ldr	r3, [r3, #8]
 810af9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 810afa0:	687b      	ldr	r3, [r7, #4]
 810afa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 810afa4:	687b      	ldr	r3, [r7, #4]
 810afa6:	681b      	ldr	r3, [r3, #0]
 810afa8:	430a      	orrs	r2, r1
 810afaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810afac:	687b      	ldr	r3, [r7, #4]
 810afae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810afb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810afb4:	2b00      	cmp	r3, #0
 810afb6:	d01a      	beq.n	810afee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810afb8:	687b      	ldr	r3, [r7, #4]
 810afba:	681b      	ldr	r3, [r3, #0]
 810afbc:	685b      	ldr	r3, [r3, #4]
 810afbe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 810afc2:	687b      	ldr	r3, [r7, #4]
 810afc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810afc6:	687b      	ldr	r3, [r7, #4]
 810afc8:	681b      	ldr	r3, [r3, #0]
 810afca:	430a      	orrs	r2, r1
 810afcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810afce:	687b      	ldr	r3, [r7, #4]
 810afd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810afd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810afd6:	d10a      	bne.n	810afee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810afd8:	687b      	ldr	r3, [r7, #4]
 810afda:	681b      	ldr	r3, [r3, #0]
 810afdc:	685b      	ldr	r3, [r3, #4]
 810afde:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 810afe2:	687b      	ldr	r3, [r7, #4]
 810afe4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810afe6:	687b      	ldr	r3, [r7, #4]
 810afe8:	681b      	ldr	r3, [r3, #0]
 810afea:	430a      	orrs	r2, r1
 810afec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810afee:	687b      	ldr	r3, [r7, #4]
 810aff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810aff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810aff6:	2b00      	cmp	r3, #0
 810aff8:	d00a      	beq.n	810b010 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810affa:	687b      	ldr	r3, [r7, #4]
 810affc:	681b      	ldr	r3, [r3, #0]
 810affe:	685b      	ldr	r3, [r3, #4]
 810b000:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 810b004:	687b      	ldr	r3, [r7, #4]
 810b006:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810b008:	687b      	ldr	r3, [r7, #4]
 810b00a:	681b      	ldr	r3, [r3, #0]
 810b00c:	430a      	orrs	r2, r1
 810b00e:	605a      	str	r2, [r3, #4]
  }
}
 810b010:	bf00      	nop
 810b012:	370c      	adds	r7, #12
 810b014:	46bd      	mov	sp, r7
 810b016:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b01a:	4770      	bx	lr

0810b01c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810b01c:	b580      	push	{r7, lr}
 810b01e:	b086      	sub	sp, #24
 810b020:	af02      	add	r7, sp, #8
 810b022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810b024:	687b      	ldr	r3, [r7, #4]
 810b026:	2200      	movs	r2, #0
 810b028:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810b02c:	f7f6 fbb2 	bl	8101794 <HAL_GetTick>
 810b030:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810b032:	687b      	ldr	r3, [r7, #4]
 810b034:	681b      	ldr	r3, [r3, #0]
 810b036:	681b      	ldr	r3, [r3, #0]
 810b038:	f003 0308 	and.w	r3, r3, #8
 810b03c:	2b08      	cmp	r3, #8
 810b03e:	d10e      	bne.n	810b05e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810b040:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810b044:	9300      	str	r3, [sp, #0]
 810b046:	68fb      	ldr	r3, [r7, #12]
 810b048:	2200      	movs	r2, #0
 810b04a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810b04e:	6878      	ldr	r0, [r7, #4]
 810b050:	f000 f82f 	bl	810b0b2 <UART_WaitOnFlagUntilTimeout>
 810b054:	4603      	mov	r3, r0
 810b056:	2b00      	cmp	r3, #0
 810b058:	d001      	beq.n	810b05e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810b05a:	2303      	movs	r3, #3
 810b05c:	e025      	b.n	810b0aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810b05e:	687b      	ldr	r3, [r7, #4]
 810b060:	681b      	ldr	r3, [r3, #0]
 810b062:	681b      	ldr	r3, [r3, #0]
 810b064:	f003 0304 	and.w	r3, r3, #4
 810b068:	2b04      	cmp	r3, #4
 810b06a:	d10e      	bne.n	810b08a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810b06c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810b070:	9300      	str	r3, [sp, #0]
 810b072:	68fb      	ldr	r3, [r7, #12]
 810b074:	2200      	movs	r2, #0
 810b076:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 810b07a:	6878      	ldr	r0, [r7, #4]
 810b07c:	f000 f819 	bl	810b0b2 <UART_WaitOnFlagUntilTimeout>
 810b080:	4603      	mov	r3, r0
 810b082:	2b00      	cmp	r3, #0
 810b084:	d001      	beq.n	810b08a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810b086:	2303      	movs	r3, #3
 810b088:	e00f      	b.n	810b0aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810b08a:	687b      	ldr	r3, [r7, #4]
 810b08c:	2220      	movs	r2, #32
 810b08e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 810b092:	687b      	ldr	r3, [r7, #4]
 810b094:	2220      	movs	r2, #32
 810b096:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810b09a:	687b      	ldr	r3, [r7, #4]
 810b09c:	2200      	movs	r2, #0
 810b09e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 810b0a0:	687b      	ldr	r3, [r7, #4]
 810b0a2:	2200      	movs	r2, #0
 810b0a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810b0a8:	2300      	movs	r3, #0
}
 810b0aa:	4618      	mov	r0, r3
 810b0ac:	3710      	adds	r7, #16
 810b0ae:	46bd      	mov	sp, r7
 810b0b0:	bd80      	pop	{r7, pc}

0810b0b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810b0b2:	b580      	push	{r7, lr}
 810b0b4:	b084      	sub	sp, #16
 810b0b6:	af00      	add	r7, sp, #0
 810b0b8:	60f8      	str	r0, [r7, #12]
 810b0ba:	60b9      	str	r1, [r7, #8]
 810b0bc:	603b      	str	r3, [r7, #0]
 810b0be:	4613      	mov	r3, r2
 810b0c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810b0c2:	e062      	b.n	810b18a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810b0c4:	69bb      	ldr	r3, [r7, #24]
 810b0c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 810b0ca:	d05e      	beq.n	810b18a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810b0cc:	f7f6 fb62 	bl	8101794 <HAL_GetTick>
 810b0d0:	4602      	mov	r2, r0
 810b0d2:	683b      	ldr	r3, [r7, #0]
 810b0d4:	1ad3      	subs	r3, r2, r3
 810b0d6:	69ba      	ldr	r2, [r7, #24]
 810b0d8:	429a      	cmp	r2, r3
 810b0da:	d302      	bcc.n	810b0e2 <UART_WaitOnFlagUntilTimeout+0x30>
 810b0dc:	69bb      	ldr	r3, [r7, #24]
 810b0de:	2b00      	cmp	r3, #0
 810b0e0:	d11d      	bne.n	810b11e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 810b0e2:	68fb      	ldr	r3, [r7, #12]
 810b0e4:	681b      	ldr	r3, [r3, #0]
 810b0e6:	681a      	ldr	r2, [r3, #0]
 810b0e8:	68fb      	ldr	r3, [r7, #12]
 810b0ea:	681b      	ldr	r3, [r3, #0]
 810b0ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 810b0f0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810b0f2:	68fb      	ldr	r3, [r7, #12]
 810b0f4:	681b      	ldr	r3, [r3, #0]
 810b0f6:	689a      	ldr	r2, [r3, #8]
 810b0f8:	68fb      	ldr	r3, [r7, #12]
 810b0fa:	681b      	ldr	r3, [r3, #0]
 810b0fc:	f022 0201 	bic.w	r2, r2, #1
 810b100:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 810b102:	68fb      	ldr	r3, [r7, #12]
 810b104:	2220      	movs	r2, #32
 810b106:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 810b10a:	68fb      	ldr	r3, [r7, #12]
 810b10c:	2220      	movs	r2, #32
 810b10e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 810b112:	68fb      	ldr	r3, [r7, #12]
 810b114:	2200      	movs	r2, #0
 810b116:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 810b11a:	2303      	movs	r3, #3
 810b11c:	e045      	b.n	810b1aa <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 810b11e:	68fb      	ldr	r3, [r7, #12]
 810b120:	681b      	ldr	r3, [r3, #0]
 810b122:	681b      	ldr	r3, [r3, #0]
 810b124:	f003 0304 	and.w	r3, r3, #4
 810b128:	2b00      	cmp	r3, #0
 810b12a:	d02e      	beq.n	810b18a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810b12c:	68fb      	ldr	r3, [r7, #12]
 810b12e:	681b      	ldr	r3, [r3, #0]
 810b130:	69db      	ldr	r3, [r3, #28]
 810b132:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810b136:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810b13a:	d126      	bne.n	810b18a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810b13c:	68fb      	ldr	r3, [r7, #12]
 810b13e:	681b      	ldr	r3, [r3, #0]
 810b140:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810b144:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 810b146:	68fb      	ldr	r3, [r7, #12]
 810b148:	681b      	ldr	r3, [r3, #0]
 810b14a:	681a      	ldr	r2, [r3, #0]
 810b14c:	68fb      	ldr	r3, [r7, #12]
 810b14e:	681b      	ldr	r3, [r3, #0]
 810b150:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 810b154:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810b156:	68fb      	ldr	r3, [r7, #12]
 810b158:	681b      	ldr	r3, [r3, #0]
 810b15a:	689a      	ldr	r2, [r3, #8]
 810b15c:	68fb      	ldr	r3, [r7, #12]
 810b15e:	681b      	ldr	r3, [r3, #0]
 810b160:	f022 0201 	bic.w	r2, r2, #1
 810b164:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 810b166:	68fb      	ldr	r3, [r7, #12]
 810b168:	2220      	movs	r2, #32
 810b16a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 810b16e:	68fb      	ldr	r3, [r7, #12]
 810b170:	2220      	movs	r2, #32
 810b172:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810b176:	68fb      	ldr	r3, [r7, #12]
 810b178:	2220      	movs	r2, #32
 810b17a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810b17e:	68fb      	ldr	r3, [r7, #12]
 810b180:	2200      	movs	r2, #0
 810b182:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 810b186:	2303      	movs	r3, #3
 810b188:	e00f      	b.n	810b1aa <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810b18a:	68fb      	ldr	r3, [r7, #12]
 810b18c:	681b      	ldr	r3, [r3, #0]
 810b18e:	69da      	ldr	r2, [r3, #28]
 810b190:	68bb      	ldr	r3, [r7, #8]
 810b192:	4013      	ands	r3, r2
 810b194:	68ba      	ldr	r2, [r7, #8]
 810b196:	429a      	cmp	r2, r3
 810b198:	bf0c      	ite	eq
 810b19a:	2301      	moveq	r3, #1
 810b19c:	2300      	movne	r3, #0
 810b19e:	b2db      	uxtb	r3, r3
 810b1a0:	461a      	mov	r2, r3
 810b1a2:	79fb      	ldrb	r3, [r7, #7]
 810b1a4:	429a      	cmp	r2, r3
 810b1a6:	d08d      	beq.n	810b0c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810b1a8:	2300      	movs	r3, #0
}
 810b1aa:	4618      	mov	r0, r3
 810b1ac:	3710      	adds	r7, #16
 810b1ae:	46bd      	mov	sp, r7
 810b1b0:	bd80      	pop	{r7, pc}

0810b1b2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 810b1b2:	b480      	push	{r7}
 810b1b4:	b083      	sub	sp, #12
 810b1b6:	af00      	add	r7, sp, #0
 810b1b8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 810b1ba:	687b      	ldr	r3, [r7, #4]
 810b1bc:	681b      	ldr	r3, [r3, #0]
 810b1be:	681a      	ldr	r2, [r3, #0]
 810b1c0:	687b      	ldr	r3, [r7, #4]
 810b1c2:	681b      	ldr	r3, [r3, #0]
 810b1c4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 810b1c8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 810b1ca:	687b      	ldr	r3, [r7, #4]
 810b1cc:	681b      	ldr	r3, [r3, #0]
 810b1ce:	689a      	ldr	r2, [r3, #8]
 810b1d0:	687b      	ldr	r3, [r7, #4]
 810b1d2:	681b      	ldr	r3, [r3, #0]
 810b1d4:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 810b1d8:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810b1da:	687b      	ldr	r3, [r7, #4]
 810b1dc:	2220      	movs	r2, #32
 810b1de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 810b1e2:	bf00      	nop
 810b1e4:	370c      	adds	r7, #12
 810b1e6:	46bd      	mov	sp, r7
 810b1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b1ec:	4770      	bx	lr

0810b1ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810b1ee:	b480      	push	{r7}
 810b1f0:	b083      	sub	sp, #12
 810b1f2:	af00      	add	r7, sp, #0
 810b1f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810b1f6:	687b      	ldr	r3, [r7, #4]
 810b1f8:	681b      	ldr	r3, [r3, #0]
 810b1fa:	681a      	ldr	r2, [r3, #0]
 810b1fc:	687b      	ldr	r3, [r7, #4]
 810b1fe:	681b      	ldr	r3, [r3, #0]
 810b200:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 810b204:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810b206:	687b      	ldr	r3, [r7, #4]
 810b208:	681b      	ldr	r3, [r3, #0]
 810b20a:	689b      	ldr	r3, [r3, #8]
 810b20c:	687a      	ldr	r2, [r7, #4]
 810b20e:	6812      	ldr	r2, [r2, #0]
 810b210:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810b214:	f023 0301 	bic.w	r3, r3, #1
 810b218:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810b21a:	687b      	ldr	r3, [r7, #4]
 810b21c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810b21e:	2b01      	cmp	r3, #1
 810b220:	d107      	bne.n	810b232 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810b222:	687b      	ldr	r3, [r7, #4]
 810b224:	681b      	ldr	r3, [r3, #0]
 810b226:	681a      	ldr	r2, [r3, #0]
 810b228:	687b      	ldr	r3, [r7, #4]
 810b22a:	681b      	ldr	r3, [r3, #0]
 810b22c:	f022 0210 	bic.w	r2, r2, #16
 810b230:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810b232:	687b      	ldr	r3, [r7, #4]
 810b234:	2220      	movs	r2, #32
 810b236:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810b23a:	687b      	ldr	r3, [r7, #4]
 810b23c:	2200      	movs	r2, #0
 810b23e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810b240:	687b      	ldr	r3, [r7, #4]
 810b242:	2200      	movs	r2, #0
 810b244:	671a      	str	r2, [r3, #112]	; 0x70
}
 810b246:	bf00      	nop
 810b248:	370c      	adds	r7, #12
 810b24a:	46bd      	mov	sp, r7
 810b24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b250:	4770      	bx	lr

0810b252 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 810b252:	b580      	push	{r7, lr}
 810b254:	b084      	sub	sp, #16
 810b256:	af00      	add	r7, sp, #0
 810b258:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810b25a:	687b      	ldr	r3, [r7, #4]
 810b25c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b25e:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 810b260:	687b      	ldr	r3, [r7, #4]
 810b262:	69db      	ldr	r3, [r3, #28]
 810b264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810b268:	d014      	beq.n	810b294 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 810b26a:	68fb      	ldr	r3, [r7, #12]
 810b26c:	2200      	movs	r2, #0
 810b26e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 810b272:	68fb      	ldr	r3, [r7, #12]
 810b274:	681b      	ldr	r3, [r3, #0]
 810b276:	689a      	ldr	r2, [r3, #8]
 810b278:	68fb      	ldr	r3, [r7, #12]
 810b27a:	681b      	ldr	r3, [r3, #0]
 810b27c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810b280:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810b282:	68fb      	ldr	r3, [r7, #12]
 810b284:	681b      	ldr	r3, [r3, #0]
 810b286:	681a      	ldr	r2, [r3, #0]
 810b288:	68fb      	ldr	r3, [r7, #12]
 810b28a:	681b      	ldr	r3, [r3, #0]
 810b28c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810b290:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 810b292:	e002      	b.n	810b29a <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 810b294:	68f8      	ldr	r0, [r7, #12]
 810b296:	f7f6 f9f3 	bl	8101680 <HAL_UART_TxCpltCallback>
}
 810b29a:	bf00      	nop
 810b29c:	3710      	adds	r7, #16
 810b29e:	46bd      	mov	sp, r7
 810b2a0:	bd80      	pop	{r7, pc}

0810b2a2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 810b2a2:	b580      	push	{r7, lr}
 810b2a4:	b084      	sub	sp, #16
 810b2a6:	af00      	add	r7, sp, #0
 810b2a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810b2aa:	687b      	ldr	r3, [r7, #4]
 810b2ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b2ae:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 810b2b0:	68f8      	ldr	r0, [r7, #12]
 810b2b2:	f7ff f891 	bl	810a3d8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810b2b6:	bf00      	nop
 810b2b8:	3710      	adds	r7, #16
 810b2ba:	46bd      	mov	sp, r7
 810b2bc:	bd80      	pop	{r7, pc}

0810b2be <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 810b2be:	b580      	push	{r7, lr}
 810b2c0:	b086      	sub	sp, #24
 810b2c2:	af00      	add	r7, sp, #0
 810b2c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810b2c6:	687b      	ldr	r3, [r7, #4]
 810b2c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b2ca:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 810b2cc:	697b      	ldr	r3, [r7, #20]
 810b2ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b2d2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 810b2d4:	697b      	ldr	r3, [r7, #20]
 810b2d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810b2da:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 810b2dc:	697b      	ldr	r3, [r7, #20]
 810b2de:	681b      	ldr	r3, [r3, #0]
 810b2e0:	689b      	ldr	r3, [r3, #8]
 810b2e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810b2e6:	2b80      	cmp	r3, #128	; 0x80
 810b2e8:	d109      	bne.n	810b2fe <UART_DMAError+0x40>
 810b2ea:	693b      	ldr	r3, [r7, #16]
 810b2ec:	2b21      	cmp	r3, #33	; 0x21
 810b2ee:	d106      	bne.n	810b2fe <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 810b2f0:	697b      	ldr	r3, [r7, #20]
 810b2f2:	2200      	movs	r2, #0
 810b2f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 810b2f8:	6978      	ldr	r0, [r7, #20]
 810b2fa:	f7ff ff5a 	bl	810b1b2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 810b2fe:	697b      	ldr	r3, [r7, #20]
 810b300:	681b      	ldr	r3, [r3, #0]
 810b302:	689b      	ldr	r3, [r3, #8]
 810b304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810b308:	2b40      	cmp	r3, #64	; 0x40
 810b30a:	d109      	bne.n	810b320 <UART_DMAError+0x62>
 810b30c:	68fb      	ldr	r3, [r7, #12]
 810b30e:	2b22      	cmp	r3, #34	; 0x22
 810b310:	d106      	bne.n	810b320 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 810b312:	697b      	ldr	r3, [r7, #20]
 810b314:	2200      	movs	r2, #0
 810b316:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 810b31a:	6978      	ldr	r0, [r7, #20]
 810b31c:	f7ff ff67 	bl	810b1ee <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 810b320:	697b      	ldr	r3, [r7, #20]
 810b322:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810b326:	f043 0210 	orr.w	r2, r3, #16
 810b32a:	697b      	ldr	r3, [r7, #20]
 810b32c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810b330:	6978      	ldr	r0, [r7, #20]
 810b332:	f7ff f85b 	bl	810a3ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810b336:	bf00      	nop
 810b338:	3718      	adds	r7, #24
 810b33a:	46bd      	mov	sp, r7
 810b33c:	bd80      	pop	{r7, pc}

0810b33e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 810b33e:	b580      	push	{r7, lr}
 810b340:	b084      	sub	sp, #16
 810b342:	af00      	add	r7, sp, #0
 810b344:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810b346:	687b      	ldr	r3, [r7, #4]
 810b348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b34a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 810b34c:	68fb      	ldr	r3, [r7, #12]
 810b34e:	2200      	movs	r2, #0
 810b350:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 810b354:	68fb      	ldr	r3, [r7, #12]
 810b356:	2200      	movs	r2, #0
 810b358:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810b35c:	68f8      	ldr	r0, [r7, #12]
 810b35e:	f7ff f845 	bl	810a3ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810b362:	bf00      	nop
 810b364:	3710      	adds	r7, #16
 810b366:	46bd      	mov	sp, r7
 810b368:	bd80      	pop	{r7, pc}

0810b36a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 810b36a:	b580      	push	{r7, lr}
 810b36c:	b082      	sub	sp, #8
 810b36e:	af00      	add	r7, sp, #0
 810b370:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810b372:	687b      	ldr	r3, [r7, #4]
 810b374:	681b      	ldr	r3, [r3, #0]
 810b376:	681a      	ldr	r2, [r3, #0]
 810b378:	687b      	ldr	r3, [r7, #4]
 810b37a:	681b      	ldr	r3, [r3, #0]
 810b37c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810b380:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810b382:	687b      	ldr	r3, [r7, #4]
 810b384:	2220      	movs	r2, #32
 810b386:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 810b38a:	687b      	ldr	r3, [r7, #4]
 810b38c:	2200      	movs	r2, #0
 810b38e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 810b390:	6878      	ldr	r0, [r7, #4]
 810b392:	f7f6 f975 	bl	8101680 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810b396:	bf00      	nop
 810b398:	3708      	adds	r7, #8
 810b39a:	46bd      	mov	sp, r7
 810b39c:	bd80      	pop	{r7, pc}

0810b39e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 810b39e:	b480      	push	{r7}
 810b3a0:	b083      	sub	sp, #12
 810b3a2:	af00      	add	r7, sp, #0
 810b3a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 810b3a6:	bf00      	nop
 810b3a8:	370c      	adds	r7, #12
 810b3aa:	46bd      	mov	sp, r7
 810b3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b3b0:	4770      	bx	lr

0810b3b2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 810b3b2:	b480      	push	{r7}
 810b3b4:	b083      	sub	sp, #12
 810b3b6:	af00      	add	r7, sp, #0
 810b3b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 810b3ba:	bf00      	nop
 810b3bc:	370c      	adds	r7, #12
 810b3be:	46bd      	mov	sp, r7
 810b3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b3c4:	4770      	bx	lr

0810b3c6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 810b3c6:	b480      	push	{r7}
 810b3c8:	b083      	sub	sp, #12
 810b3ca:	af00      	add	r7, sp, #0
 810b3cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 810b3ce:	bf00      	nop
 810b3d0:	370c      	adds	r7, #12
 810b3d2:	46bd      	mov	sp, r7
 810b3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b3d8:	4770      	bx	lr

0810b3da <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810b3da:	b480      	push	{r7}
 810b3dc:	b085      	sub	sp, #20
 810b3de:	af00      	add	r7, sp, #0
 810b3e0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810b3e2:	687b      	ldr	r3, [r7, #4]
 810b3e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810b3e8:	2b01      	cmp	r3, #1
 810b3ea:	d101      	bne.n	810b3f0 <HAL_UARTEx_DisableFifoMode+0x16>
 810b3ec:	2302      	movs	r3, #2
 810b3ee:	e027      	b.n	810b440 <HAL_UARTEx_DisableFifoMode+0x66>
 810b3f0:	687b      	ldr	r3, [r7, #4]
 810b3f2:	2201      	movs	r2, #1
 810b3f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810b3f8:	687b      	ldr	r3, [r7, #4]
 810b3fa:	2224      	movs	r2, #36	; 0x24
 810b3fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810b400:	687b      	ldr	r3, [r7, #4]
 810b402:	681b      	ldr	r3, [r3, #0]
 810b404:	681b      	ldr	r3, [r3, #0]
 810b406:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810b408:	687b      	ldr	r3, [r7, #4]
 810b40a:	681b      	ldr	r3, [r3, #0]
 810b40c:	681a      	ldr	r2, [r3, #0]
 810b40e:	687b      	ldr	r3, [r7, #4]
 810b410:	681b      	ldr	r3, [r3, #0]
 810b412:	f022 0201 	bic.w	r2, r2, #1
 810b416:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810b418:	68fb      	ldr	r3, [r7, #12]
 810b41a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 810b41e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810b420:	687b      	ldr	r3, [r7, #4]
 810b422:	2200      	movs	r2, #0
 810b424:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810b426:	687b      	ldr	r3, [r7, #4]
 810b428:	681b      	ldr	r3, [r3, #0]
 810b42a:	68fa      	ldr	r2, [r7, #12]
 810b42c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810b42e:	687b      	ldr	r3, [r7, #4]
 810b430:	2220      	movs	r2, #32
 810b432:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810b436:	687b      	ldr	r3, [r7, #4]
 810b438:	2200      	movs	r2, #0
 810b43a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810b43e:	2300      	movs	r3, #0
}
 810b440:	4618      	mov	r0, r3
 810b442:	3714      	adds	r7, #20
 810b444:	46bd      	mov	sp, r7
 810b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b44a:	4770      	bx	lr

0810b44c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810b44c:	b580      	push	{r7, lr}
 810b44e:	b084      	sub	sp, #16
 810b450:	af00      	add	r7, sp, #0
 810b452:	6078      	str	r0, [r7, #4]
 810b454:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810b456:	687b      	ldr	r3, [r7, #4]
 810b458:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810b45c:	2b01      	cmp	r3, #1
 810b45e:	d101      	bne.n	810b464 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810b460:	2302      	movs	r3, #2
 810b462:	e02d      	b.n	810b4c0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810b464:	687b      	ldr	r3, [r7, #4]
 810b466:	2201      	movs	r2, #1
 810b468:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810b46c:	687b      	ldr	r3, [r7, #4]
 810b46e:	2224      	movs	r2, #36	; 0x24
 810b470:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810b474:	687b      	ldr	r3, [r7, #4]
 810b476:	681b      	ldr	r3, [r3, #0]
 810b478:	681b      	ldr	r3, [r3, #0]
 810b47a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810b47c:	687b      	ldr	r3, [r7, #4]
 810b47e:	681b      	ldr	r3, [r3, #0]
 810b480:	681a      	ldr	r2, [r3, #0]
 810b482:	687b      	ldr	r3, [r7, #4]
 810b484:	681b      	ldr	r3, [r3, #0]
 810b486:	f022 0201 	bic.w	r2, r2, #1
 810b48a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810b48c:	687b      	ldr	r3, [r7, #4]
 810b48e:	681b      	ldr	r3, [r3, #0]
 810b490:	689b      	ldr	r3, [r3, #8]
 810b492:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 810b496:	687b      	ldr	r3, [r7, #4]
 810b498:	681b      	ldr	r3, [r3, #0]
 810b49a:	683a      	ldr	r2, [r7, #0]
 810b49c:	430a      	orrs	r2, r1
 810b49e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810b4a0:	6878      	ldr	r0, [r7, #4]
 810b4a2:	f000 f84f 	bl	810b544 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810b4a6:	687b      	ldr	r3, [r7, #4]
 810b4a8:	681b      	ldr	r3, [r3, #0]
 810b4aa:	68fa      	ldr	r2, [r7, #12]
 810b4ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810b4ae:	687b      	ldr	r3, [r7, #4]
 810b4b0:	2220      	movs	r2, #32
 810b4b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810b4b6:	687b      	ldr	r3, [r7, #4]
 810b4b8:	2200      	movs	r2, #0
 810b4ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810b4be:	2300      	movs	r3, #0
}
 810b4c0:	4618      	mov	r0, r3
 810b4c2:	3710      	adds	r7, #16
 810b4c4:	46bd      	mov	sp, r7
 810b4c6:	bd80      	pop	{r7, pc}

0810b4c8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810b4c8:	b580      	push	{r7, lr}
 810b4ca:	b084      	sub	sp, #16
 810b4cc:	af00      	add	r7, sp, #0
 810b4ce:	6078      	str	r0, [r7, #4]
 810b4d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810b4d2:	687b      	ldr	r3, [r7, #4]
 810b4d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810b4d8:	2b01      	cmp	r3, #1
 810b4da:	d101      	bne.n	810b4e0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810b4dc:	2302      	movs	r3, #2
 810b4de:	e02d      	b.n	810b53c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810b4e0:	687b      	ldr	r3, [r7, #4]
 810b4e2:	2201      	movs	r2, #1
 810b4e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810b4e8:	687b      	ldr	r3, [r7, #4]
 810b4ea:	2224      	movs	r2, #36	; 0x24
 810b4ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810b4f0:	687b      	ldr	r3, [r7, #4]
 810b4f2:	681b      	ldr	r3, [r3, #0]
 810b4f4:	681b      	ldr	r3, [r3, #0]
 810b4f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810b4f8:	687b      	ldr	r3, [r7, #4]
 810b4fa:	681b      	ldr	r3, [r3, #0]
 810b4fc:	681a      	ldr	r2, [r3, #0]
 810b4fe:	687b      	ldr	r3, [r7, #4]
 810b500:	681b      	ldr	r3, [r3, #0]
 810b502:	f022 0201 	bic.w	r2, r2, #1
 810b506:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810b508:	687b      	ldr	r3, [r7, #4]
 810b50a:	681b      	ldr	r3, [r3, #0]
 810b50c:	689b      	ldr	r3, [r3, #8]
 810b50e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 810b512:	687b      	ldr	r3, [r7, #4]
 810b514:	681b      	ldr	r3, [r3, #0]
 810b516:	683a      	ldr	r2, [r7, #0]
 810b518:	430a      	orrs	r2, r1
 810b51a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810b51c:	6878      	ldr	r0, [r7, #4]
 810b51e:	f000 f811 	bl	810b544 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810b522:	687b      	ldr	r3, [r7, #4]
 810b524:	681b      	ldr	r3, [r3, #0]
 810b526:	68fa      	ldr	r2, [r7, #12]
 810b528:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810b52a:	687b      	ldr	r3, [r7, #4]
 810b52c:	2220      	movs	r2, #32
 810b52e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810b532:	687b      	ldr	r3, [r7, #4]
 810b534:	2200      	movs	r2, #0
 810b536:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810b53a:	2300      	movs	r3, #0
}
 810b53c:	4618      	mov	r0, r3
 810b53e:	3710      	adds	r7, #16
 810b540:	46bd      	mov	sp, r7
 810b542:	bd80      	pop	{r7, pc}

0810b544 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810b544:	b480      	push	{r7}
 810b546:	b085      	sub	sp, #20
 810b548:	af00      	add	r7, sp, #0
 810b54a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810b54c:	687b      	ldr	r3, [r7, #4]
 810b54e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b550:	2b00      	cmp	r3, #0
 810b552:	d108      	bne.n	810b566 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810b554:	687b      	ldr	r3, [r7, #4]
 810b556:	2201      	movs	r2, #1
 810b558:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 810b55c:	687b      	ldr	r3, [r7, #4]
 810b55e:	2201      	movs	r2, #1
 810b560:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810b564:	e031      	b.n	810b5ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810b566:	2310      	movs	r3, #16
 810b568:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810b56a:	2310      	movs	r3, #16
 810b56c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810b56e:	687b      	ldr	r3, [r7, #4]
 810b570:	681b      	ldr	r3, [r3, #0]
 810b572:	689b      	ldr	r3, [r3, #8]
 810b574:	0e5b      	lsrs	r3, r3, #25
 810b576:	b2db      	uxtb	r3, r3
 810b578:	f003 0307 	and.w	r3, r3, #7
 810b57c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810b57e:	687b      	ldr	r3, [r7, #4]
 810b580:	681b      	ldr	r3, [r3, #0]
 810b582:	689b      	ldr	r3, [r3, #8]
 810b584:	0f5b      	lsrs	r3, r3, #29
 810b586:	b2db      	uxtb	r3, r3
 810b588:	f003 0307 	and.w	r3, r3, #7
 810b58c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810b58e:	7bbb      	ldrb	r3, [r7, #14]
 810b590:	7b3a      	ldrb	r2, [r7, #12]
 810b592:	4911      	ldr	r1, [pc, #68]	; (810b5d8 <UARTEx_SetNbDataToProcess+0x94>)
 810b594:	5c8a      	ldrb	r2, [r1, r2]
 810b596:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810b59a:	7b3a      	ldrb	r2, [r7, #12]
 810b59c:	490f      	ldr	r1, [pc, #60]	; (810b5dc <UARTEx_SetNbDataToProcess+0x98>)
 810b59e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810b5a0:	fb93 f3f2 	sdiv	r3, r3, r2
 810b5a4:	b29a      	uxth	r2, r3
 810b5a6:	687b      	ldr	r3, [r7, #4]
 810b5a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810b5ac:	7bfb      	ldrb	r3, [r7, #15]
 810b5ae:	7b7a      	ldrb	r2, [r7, #13]
 810b5b0:	4909      	ldr	r1, [pc, #36]	; (810b5d8 <UARTEx_SetNbDataToProcess+0x94>)
 810b5b2:	5c8a      	ldrb	r2, [r1, r2]
 810b5b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810b5b8:	7b7a      	ldrb	r2, [r7, #13]
 810b5ba:	4908      	ldr	r1, [pc, #32]	; (810b5dc <UARTEx_SetNbDataToProcess+0x98>)
 810b5bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810b5be:	fb93 f3f2 	sdiv	r3, r3, r2
 810b5c2:	b29a      	uxth	r2, r3
 810b5c4:	687b      	ldr	r3, [r7, #4]
 810b5c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 810b5ca:	bf00      	nop
 810b5cc:	3714      	adds	r7, #20
 810b5ce:	46bd      	mov	sp, r7
 810b5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b5d4:	4770      	bx	lr
 810b5d6:	bf00      	nop
 810b5d8:	08110298 	.word	0x08110298
 810b5dc:	081102a0 	.word	0x081102a0

0810b5e0 <__NVIC_SetPriority>:
{
 810b5e0:	b480      	push	{r7}
 810b5e2:	b083      	sub	sp, #12
 810b5e4:	af00      	add	r7, sp, #0
 810b5e6:	4603      	mov	r3, r0
 810b5e8:	6039      	str	r1, [r7, #0]
 810b5ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810b5ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810b5f0:	2b00      	cmp	r3, #0
 810b5f2:	db0a      	blt.n	810b60a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810b5f4:	683b      	ldr	r3, [r7, #0]
 810b5f6:	b2da      	uxtb	r2, r3
 810b5f8:	490c      	ldr	r1, [pc, #48]	; (810b62c <__NVIC_SetPriority+0x4c>)
 810b5fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810b5fe:	0112      	lsls	r2, r2, #4
 810b600:	b2d2      	uxtb	r2, r2
 810b602:	440b      	add	r3, r1
 810b604:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 810b608:	e00a      	b.n	810b620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810b60a:	683b      	ldr	r3, [r7, #0]
 810b60c:	b2da      	uxtb	r2, r3
 810b60e:	4908      	ldr	r1, [pc, #32]	; (810b630 <__NVIC_SetPriority+0x50>)
 810b610:	88fb      	ldrh	r3, [r7, #6]
 810b612:	f003 030f 	and.w	r3, r3, #15
 810b616:	3b04      	subs	r3, #4
 810b618:	0112      	lsls	r2, r2, #4
 810b61a:	b2d2      	uxtb	r2, r2
 810b61c:	440b      	add	r3, r1
 810b61e:	761a      	strb	r2, [r3, #24]
}
 810b620:	bf00      	nop
 810b622:	370c      	adds	r7, #12
 810b624:	46bd      	mov	sp, r7
 810b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b62a:	4770      	bx	lr
 810b62c:	e000e100 	.word	0xe000e100
 810b630:	e000ed00 	.word	0xe000ed00

0810b634 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 810b634:	b580      	push	{r7, lr}
 810b636:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 810b638:	4b05      	ldr	r3, [pc, #20]	; (810b650 <SysTick_Handler+0x1c>)
 810b63a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 810b63c:	f003 f874 	bl	810e728 <xTaskGetSchedulerState>
 810b640:	4603      	mov	r3, r0
 810b642:	2b01      	cmp	r3, #1
 810b644:	d001      	beq.n	810b64a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 810b646:	f001 f9cf 	bl	810c9e8 <xPortSysTickHandler>
  }
}
 810b64a:	bf00      	nop
 810b64c:	bd80      	pop	{r7, pc}
 810b64e:	bf00      	nop
 810b650:	e000e010 	.word	0xe000e010

0810b654 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 810b654:	b580      	push	{r7, lr}
 810b656:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 810b658:	2100      	movs	r1, #0
 810b65a:	f06f 0004 	mvn.w	r0, #4
 810b65e:	f7ff ffbf 	bl	810b5e0 <__NVIC_SetPriority>
#endif
}
 810b662:	bf00      	nop
 810b664:	bd80      	pop	{r7, pc}
	...

0810b668 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 810b668:	b480      	push	{r7}
 810b66a:	b083      	sub	sp, #12
 810b66c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810b66e:	f3ef 8305 	mrs	r3, IPSR
 810b672:	603b      	str	r3, [r7, #0]
  return(result);
 810b674:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 810b676:	2b00      	cmp	r3, #0
 810b678:	d003      	beq.n	810b682 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 810b67a:	f06f 0305 	mvn.w	r3, #5
 810b67e:	607b      	str	r3, [r7, #4]
 810b680:	e00c      	b.n	810b69c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 810b682:	4b0a      	ldr	r3, [pc, #40]	; (810b6ac <osKernelInitialize+0x44>)
 810b684:	681b      	ldr	r3, [r3, #0]
 810b686:	2b00      	cmp	r3, #0
 810b688:	d105      	bne.n	810b696 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 810b68a:	4b08      	ldr	r3, [pc, #32]	; (810b6ac <osKernelInitialize+0x44>)
 810b68c:	2201      	movs	r2, #1
 810b68e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 810b690:	2300      	movs	r3, #0
 810b692:	607b      	str	r3, [r7, #4]
 810b694:	e002      	b.n	810b69c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 810b696:	f04f 33ff 	mov.w	r3, #4294967295
 810b69a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 810b69c:	687b      	ldr	r3, [r7, #4]
}
 810b69e:	4618      	mov	r0, r3
 810b6a0:	370c      	adds	r7, #12
 810b6a2:	46bd      	mov	sp, r7
 810b6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b6a8:	4770      	bx	lr
 810b6aa:	bf00      	nop
 810b6ac:	10018750 	.word	0x10018750

0810b6b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 810b6b0:	b580      	push	{r7, lr}
 810b6b2:	b082      	sub	sp, #8
 810b6b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810b6b6:	f3ef 8305 	mrs	r3, IPSR
 810b6ba:	603b      	str	r3, [r7, #0]
  return(result);
 810b6bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 810b6be:	2b00      	cmp	r3, #0
 810b6c0:	d003      	beq.n	810b6ca <osKernelStart+0x1a>
    stat = osErrorISR;
 810b6c2:	f06f 0305 	mvn.w	r3, #5
 810b6c6:	607b      	str	r3, [r7, #4]
 810b6c8:	e010      	b.n	810b6ec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 810b6ca:	4b0b      	ldr	r3, [pc, #44]	; (810b6f8 <osKernelStart+0x48>)
 810b6cc:	681b      	ldr	r3, [r3, #0]
 810b6ce:	2b01      	cmp	r3, #1
 810b6d0:	d109      	bne.n	810b6e6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 810b6d2:	f7ff ffbf 	bl	810b654 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 810b6d6:	4b08      	ldr	r3, [pc, #32]	; (810b6f8 <osKernelStart+0x48>)
 810b6d8:	2202      	movs	r2, #2
 810b6da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 810b6dc:	f002 fbc8 	bl	810de70 <vTaskStartScheduler>
      stat = osOK;
 810b6e0:	2300      	movs	r3, #0
 810b6e2:	607b      	str	r3, [r7, #4]
 810b6e4:	e002      	b.n	810b6ec <osKernelStart+0x3c>
    } else {
      stat = osError;
 810b6e6:	f04f 33ff 	mov.w	r3, #4294967295
 810b6ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 810b6ec:	687b      	ldr	r3, [r7, #4]
}
 810b6ee:	4618      	mov	r0, r3
 810b6f0:	3708      	adds	r7, #8
 810b6f2:	46bd      	mov	sp, r7
 810b6f4:	bd80      	pop	{r7, pc}
 810b6f6:	bf00      	nop
 810b6f8:	10018750 	.word	0x10018750

0810b6fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 810b6fc:	b580      	push	{r7, lr}
 810b6fe:	b08e      	sub	sp, #56	; 0x38
 810b700:	af04      	add	r7, sp, #16
 810b702:	60f8      	str	r0, [r7, #12]
 810b704:	60b9      	str	r1, [r7, #8]
 810b706:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 810b708:	2300      	movs	r3, #0
 810b70a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810b70c:	f3ef 8305 	mrs	r3, IPSR
 810b710:	617b      	str	r3, [r7, #20]
  return(result);
 810b712:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 810b714:	2b00      	cmp	r3, #0
 810b716:	d17f      	bne.n	810b818 <osThreadNew+0x11c>
 810b718:	68fb      	ldr	r3, [r7, #12]
 810b71a:	2b00      	cmp	r3, #0
 810b71c:	d07c      	beq.n	810b818 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 810b71e:	f44f 7380 	mov.w	r3, #256	; 0x100
 810b722:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 810b724:	2318      	movs	r3, #24
 810b726:	61fb      	str	r3, [r7, #28]

    name = NULL;
 810b728:	2300      	movs	r3, #0
 810b72a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 810b72c:	f04f 33ff 	mov.w	r3, #4294967295
 810b730:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 810b732:	687b      	ldr	r3, [r7, #4]
 810b734:	2b00      	cmp	r3, #0
 810b736:	d045      	beq.n	810b7c4 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 810b738:	687b      	ldr	r3, [r7, #4]
 810b73a:	681b      	ldr	r3, [r3, #0]
 810b73c:	2b00      	cmp	r3, #0
 810b73e:	d002      	beq.n	810b746 <osThreadNew+0x4a>
        name = attr->name;
 810b740:	687b      	ldr	r3, [r7, #4]
 810b742:	681b      	ldr	r3, [r3, #0]
 810b744:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 810b746:	687b      	ldr	r3, [r7, #4]
 810b748:	699b      	ldr	r3, [r3, #24]
 810b74a:	2b00      	cmp	r3, #0
 810b74c:	d002      	beq.n	810b754 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 810b74e:	687b      	ldr	r3, [r7, #4]
 810b750:	699b      	ldr	r3, [r3, #24]
 810b752:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 810b754:	69fb      	ldr	r3, [r7, #28]
 810b756:	2b00      	cmp	r3, #0
 810b758:	d008      	beq.n	810b76c <osThreadNew+0x70>
 810b75a:	69fb      	ldr	r3, [r7, #28]
 810b75c:	2b38      	cmp	r3, #56	; 0x38
 810b75e:	d805      	bhi.n	810b76c <osThreadNew+0x70>
 810b760:	687b      	ldr	r3, [r7, #4]
 810b762:	685b      	ldr	r3, [r3, #4]
 810b764:	f003 0301 	and.w	r3, r3, #1
 810b768:	2b00      	cmp	r3, #0
 810b76a:	d001      	beq.n	810b770 <osThreadNew+0x74>
        return (NULL);
 810b76c:	2300      	movs	r3, #0
 810b76e:	e054      	b.n	810b81a <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 810b770:	687b      	ldr	r3, [r7, #4]
 810b772:	695b      	ldr	r3, [r3, #20]
 810b774:	2b00      	cmp	r3, #0
 810b776:	d003      	beq.n	810b780 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 810b778:	687b      	ldr	r3, [r7, #4]
 810b77a:	695b      	ldr	r3, [r3, #20]
 810b77c:	089b      	lsrs	r3, r3, #2
 810b77e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 810b780:	687b      	ldr	r3, [r7, #4]
 810b782:	689b      	ldr	r3, [r3, #8]
 810b784:	2b00      	cmp	r3, #0
 810b786:	d00e      	beq.n	810b7a6 <osThreadNew+0xaa>
 810b788:	687b      	ldr	r3, [r7, #4]
 810b78a:	68db      	ldr	r3, [r3, #12]
 810b78c:	2bcb      	cmp	r3, #203	; 0xcb
 810b78e:	d90a      	bls.n	810b7a6 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810b790:	687b      	ldr	r3, [r7, #4]
 810b792:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 810b794:	2b00      	cmp	r3, #0
 810b796:	d006      	beq.n	810b7a6 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810b798:	687b      	ldr	r3, [r7, #4]
 810b79a:	695b      	ldr	r3, [r3, #20]
 810b79c:	2b00      	cmp	r3, #0
 810b79e:	d002      	beq.n	810b7a6 <osThreadNew+0xaa>
        mem = 1;
 810b7a0:	2301      	movs	r3, #1
 810b7a2:	61bb      	str	r3, [r7, #24]
 810b7a4:	e010      	b.n	810b7c8 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 810b7a6:	687b      	ldr	r3, [r7, #4]
 810b7a8:	689b      	ldr	r3, [r3, #8]
 810b7aa:	2b00      	cmp	r3, #0
 810b7ac:	d10c      	bne.n	810b7c8 <osThreadNew+0xcc>
 810b7ae:	687b      	ldr	r3, [r7, #4]
 810b7b0:	68db      	ldr	r3, [r3, #12]
 810b7b2:	2b00      	cmp	r3, #0
 810b7b4:	d108      	bne.n	810b7c8 <osThreadNew+0xcc>
 810b7b6:	687b      	ldr	r3, [r7, #4]
 810b7b8:	691b      	ldr	r3, [r3, #16]
 810b7ba:	2b00      	cmp	r3, #0
 810b7bc:	d104      	bne.n	810b7c8 <osThreadNew+0xcc>
          mem = 0;
 810b7be:	2300      	movs	r3, #0
 810b7c0:	61bb      	str	r3, [r7, #24]
 810b7c2:	e001      	b.n	810b7c8 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 810b7c4:	2300      	movs	r3, #0
 810b7c6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 810b7c8:	69bb      	ldr	r3, [r7, #24]
 810b7ca:	2b01      	cmp	r3, #1
 810b7cc:	d110      	bne.n	810b7f0 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 810b7ce:	687b      	ldr	r3, [r7, #4]
 810b7d0:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 810b7d2:	687a      	ldr	r2, [r7, #4]
 810b7d4:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 810b7d6:	9202      	str	r2, [sp, #8]
 810b7d8:	9301      	str	r3, [sp, #4]
 810b7da:	69fb      	ldr	r3, [r7, #28]
 810b7dc:	9300      	str	r3, [sp, #0]
 810b7de:	68bb      	ldr	r3, [r7, #8]
 810b7e0:	6a3a      	ldr	r2, [r7, #32]
 810b7e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 810b7e4:	68f8      	ldr	r0, [r7, #12]
 810b7e6:	f002 f957 	bl	810da98 <xTaskCreateStatic>
 810b7ea:	4603      	mov	r3, r0
 810b7ec:	613b      	str	r3, [r7, #16]
 810b7ee:	e013      	b.n	810b818 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 810b7f0:	69bb      	ldr	r3, [r7, #24]
 810b7f2:	2b00      	cmp	r3, #0
 810b7f4:	d110      	bne.n	810b818 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 810b7f6:	6a3b      	ldr	r3, [r7, #32]
 810b7f8:	b29a      	uxth	r2, r3
 810b7fa:	f107 0310 	add.w	r3, r7, #16
 810b7fe:	9301      	str	r3, [sp, #4]
 810b800:	69fb      	ldr	r3, [r7, #28]
 810b802:	9300      	str	r3, [sp, #0]
 810b804:	68bb      	ldr	r3, [r7, #8]
 810b806:	6a79      	ldr	r1, [r7, #36]	; 0x24
 810b808:	68f8      	ldr	r0, [r7, #12]
 810b80a:	f002 f9a2 	bl	810db52 <xTaskCreate>
 810b80e:	4603      	mov	r3, r0
 810b810:	2b01      	cmp	r3, #1
 810b812:	d001      	beq.n	810b818 <osThreadNew+0x11c>
            hTask = NULL;
 810b814:	2300      	movs	r3, #0
 810b816:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 810b818:	693b      	ldr	r3, [r7, #16]
}
 810b81a:	4618      	mov	r0, r3
 810b81c:	3728      	adds	r7, #40	; 0x28
 810b81e:	46bd      	mov	sp, r7
 810b820:	bd80      	pop	{r7, pc}
	...

0810b824 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 810b824:	b580      	push	{r7, lr}
 810b826:	b088      	sub	sp, #32
 810b828:	af02      	add	r7, sp, #8
 810b82a:	6078      	str	r0, [r7, #4]
 810b82c:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 810b82e:	687b      	ldr	r3, [r7, #4]
 810b830:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 810b832:	697b      	ldr	r3, [r7, #20]
 810b834:	2b00      	cmp	r3, #0
 810b836:	d002      	beq.n	810b83e <osThreadFlagsSet+0x1a>
 810b838:	683b      	ldr	r3, [r7, #0]
 810b83a:	2b00      	cmp	r3, #0
 810b83c:	da03      	bge.n	810b846 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 810b83e:	f06f 0303 	mvn.w	r3, #3
 810b842:	60fb      	str	r3, [r7, #12]
 810b844:	e035      	b.n	810b8b2 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 810b846:	f04f 33ff 	mov.w	r3, #4294967295
 810b84a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810b84c:	f3ef 8305 	mrs	r3, IPSR
 810b850:	613b      	str	r3, [r7, #16]
  return(result);
 810b852:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 810b854:	2b00      	cmp	r3, #0
 810b856:	d01f      	beq.n	810b898 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 810b858:	2300      	movs	r3, #0
 810b85a:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 810b85c:	f107 0308 	add.w	r3, r7, #8
 810b860:	9300      	str	r3, [sp, #0]
 810b862:	2300      	movs	r3, #0
 810b864:	2201      	movs	r2, #1
 810b866:	6839      	ldr	r1, [r7, #0]
 810b868:	6978      	ldr	r0, [r7, #20]
 810b86a:	f003 fa05 	bl	810ec78 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 810b86e:	f107 030c 	add.w	r3, r7, #12
 810b872:	2200      	movs	r2, #0
 810b874:	9200      	str	r2, [sp, #0]
 810b876:	2200      	movs	r2, #0
 810b878:	2100      	movs	r1, #0
 810b87a:	6978      	ldr	r0, [r7, #20]
 810b87c:	f003 f9fc 	bl	810ec78 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 810b880:	68bb      	ldr	r3, [r7, #8]
 810b882:	2b00      	cmp	r3, #0
 810b884:	d015      	beq.n	810b8b2 <osThreadFlagsSet+0x8e>
 810b886:	4b0d      	ldr	r3, [pc, #52]	; (810b8bc <osThreadFlagsSet+0x98>)
 810b888:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810b88c:	601a      	str	r2, [r3, #0]
 810b88e:	f3bf 8f4f 	dsb	sy
 810b892:	f3bf 8f6f 	isb	sy
 810b896:	e00c      	b.n	810b8b2 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 810b898:	2300      	movs	r3, #0
 810b89a:	2201      	movs	r2, #1
 810b89c:	6839      	ldr	r1, [r7, #0]
 810b89e:	6978      	ldr	r0, [r7, #20]
 810b8a0:	f003 f92c 	bl	810eafc <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 810b8a4:	f107 030c 	add.w	r3, r7, #12
 810b8a8:	2200      	movs	r2, #0
 810b8aa:	2100      	movs	r1, #0
 810b8ac:	6978      	ldr	r0, [r7, #20]
 810b8ae:	f003 f925 	bl	810eafc <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 810b8b2:	68fb      	ldr	r3, [r7, #12]
}
 810b8b4:	4618      	mov	r0, r3
 810b8b6:	3718      	adds	r7, #24
 810b8b8:	46bd      	mov	sp, r7
 810b8ba:	bd80      	pop	{r7, pc}
 810b8bc:	e000ed04 	.word	0xe000ed04

0810b8c0 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 810b8c0:	b580      	push	{r7, lr}
 810b8c2:	b08c      	sub	sp, #48	; 0x30
 810b8c4:	af00      	add	r7, sp, #0
 810b8c6:	60f8      	str	r0, [r7, #12]
 810b8c8:	60b9      	str	r1, [r7, #8]
 810b8ca:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810b8cc:	f3ef 8305 	mrs	r3, IPSR
 810b8d0:	617b      	str	r3, [r7, #20]
  return(result);
 810b8d2:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 810b8d4:	2b00      	cmp	r3, #0
 810b8d6:	d003      	beq.n	810b8e0 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 810b8d8:	f06f 0305 	mvn.w	r3, #5
 810b8dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 810b8de:	e06b      	b.n	810b9b8 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 810b8e0:	68fb      	ldr	r3, [r7, #12]
 810b8e2:	2b00      	cmp	r3, #0
 810b8e4:	da03      	bge.n	810b8ee <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 810b8e6:	f06f 0303 	mvn.w	r3, #3
 810b8ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 810b8ec:	e064      	b.n	810b9b8 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 810b8ee:	68bb      	ldr	r3, [r7, #8]
 810b8f0:	f003 0302 	and.w	r3, r3, #2
 810b8f4:	2b00      	cmp	r3, #0
 810b8f6:	d002      	beq.n	810b8fe <osThreadFlagsWait+0x3e>
      clear = 0U;
 810b8f8:	2300      	movs	r3, #0
 810b8fa:	62bb      	str	r3, [r7, #40]	; 0x28
 810b8fc:	e001      	b.n	810b902 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 810b8fe:	68fb      	ldr	r3, [r7, #12]
 810b900:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 810b902:	2300      	movs	r3, #0
 810b904:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 810b906:	687b      	ldr	r3, [r7, #4]
 810b908:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 810b90a:	f002 fbcd 	bl	810e0a8 <xTaskGetTickCount>
 810b90e:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 810b910:	f107 0210 	add.w	r2, r7, #16
 810b914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810b916:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810b918:	2000      	movs	r0, #0
 810b91a:	f003 f88f 	bl	810ea3c <xTaskNotifyWait>
 810b91e:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 810b920:	69fb      	ldr	r3, [r7, #28]
 810b922:	2b01      	cmp	r3, #1
 810b924:	d137      	bne.n	810b996 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 810b926:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810b928:	68fb      	ldr	r3, [r7, #12]
 810b92a:	4013      	ands	r3, r2
 810b92c:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 810b92e:	693b      	ldr	r3, [r7, #16]
 810b930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810b932:	4313      	orrs	r3, r2
 810b934:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 810b936:	68bb      	ldr	r3, [r7, #8]
 810b938:	f003 0301 	and.w	r3, r3, #1
 810b93c:	2b00      	cmp	r3, #0
 810b93e:	d00c      	beq.n	810b95a <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 810b940:	68fa      	ldr	r2, [r7, #12]
 810b942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810b944:	4013      	ands	r3, r2
 810b946:	68fa      	ldr	r2, [r7, #12]
 810b948:	429a      	cmp	r2, r3
 810b94a:	d032      	beq.n	810b9b2 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 810b94c:	687b      	ldr	r3, [r7, #4]
 810b94e:	2b00      	cmp	r3, #0
 810b950:	d10f      	bne.n	810b972 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 810b952:	f06f 0302 	mvn.w	r3, #2
 810b956:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 810b958:	e02e      	b.n	810b9b8 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 810b95a:	68fa      	ldr	r2, [r7, #12]
 810b95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810b95e:	4013      	ands	r3, r2
 810b960:	2b00      	cmp	r3, #0
 810b962:	d128      	bne.n	810b9b6 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 810b964:	687b      	ldr	r3, [r7, #4]
 810b966:	2b00      	cmp	r3, #0
 810b968:	d103      	bne.n	810b972 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 810b96a:	f06f 0302 	mvn.w	r3, #2
 810b96e:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 810b970:	e022      	b.n	810b9b8 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 810b972:	f002 fb99 	bl	810e0a8 <xTaskGetTickCount>
 810b976:	4602      	mov	r2, r0
 810b978:	6a3b      	ldr	r3, [r7, #32]
 810b97a:	1ad3      	subs	r3, r2, r3
 810b97c:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 810b97e:	69ba      	ldr	r2, [r7, #24]
 810b980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810b982:	429a      	cmp	r2, r3
 810b984:	d902      	bls.n	810b98c <osThreadFlagsWait+0xcc>
          tout  = 0;
 810b986:	2300      	movs	r3, #0
 810b988:	627b      	str	r3, [r7, #36]	; 0x24
 810b98a:	e00e      	b.n	810b9aa <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 810b98c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810b98e:	69bb      	ldr	r3, [r7, #24]
 810b990:	1ad3      	subs	r3, r2, r3
 810b992:	627b      	str	r3, [r7, #36]	; 0x24
 810b994:	e009      	b.n	810b9aa <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 810b996:	687b      	ldr	r3, [r7, #4]
 810b998:	2b00      	cmp	r3, #0
 810b99a:	d103      	bne.n	810b9a4 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 810b99c:	f06f 0302 	mvn.w	r3, #2
 810b9a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 810b9a2:	e002      	b.n	810b9aa <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 810b9a4:	f06f 0301 	mvn.w	r3, #1
 810b9a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 810b9aa:	69fb      	ldr	r3, [r7, #28]
 810b9ac:	2b00      	cmp	r3, #0
 810b9ae:	d1af      	bne.n	810b910 <osThreadFlagsWait+0x50>
 810b9b0:	e002      	b.n	810b9b8 <osThreadFlagsWait+0xf8>
            break;
 810b9b2:	bf00      	nop
 810b9b4:	e000      	b.n	810b9b8 <osThreadFlagsWait+0xf8>
            break;
 810b9b6:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 810b9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 810b9ba:	4618      	mov	r0, r3
 810b9bc:	3730      	adds	r7, #48	; 0x30
 810b9be:	46bd      	mov	sp, r7
 810b9c0:	bd80      	pop	{r7, pc}

0810b9c2 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 810b9c2:	b580      	push	{r7, lr}
 810b9c4:	b084      	sub	sp, #16
 810b9c6:	af00      	add	r7, sp, #0
 810b9c8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810b9ca:	f3ef 8305 	mrs	r3, IPSR
 810b9ce:	60bb      	str	r3, [r7, #8]
  return(result);
 810b9d0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 810b9d2:	2b00      	cmp	r3, #0
 810b9d4:	d003      	beq.n	810b9de <osDelay+0x1c>
    stat = osErrorISR;
 810b9d6:	f06f 0305 	mvn.w	r3, #5
 810b9da:	60fb      	str	r3, [r7, #12]
 810b9dc:	e007      	b.n	810b9ee <osDelay+0x2c>
  }
  else {
    stat = osOK;
 810b9de:	2300      	movs	r3, #0
 810b9e0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 810b9e2:	687b      	ldr	r3, [r7, #4]
 810b9e4:	2b00      	cmp	r3, #0
 810b9e6:	d002      	beq.n	810b9ee <osDelay+0x2c>
      vTaskDelay(ticks);
 810b9e8:	6878      	ldr	r0, [r7, #4]
 810b9ea:	f002 fa0d 	bl	810de08 <vTaskDelay>
    }
  }

  return (stat);
 810b9ee:	68fb      	ldr	r3, [r7, #12]
}
 810b9f0:	4618      	mov	r0, r3
 810b9f2:	3710      	adds	r7, #16
 810b9f4:	46bd      	mov	sp, r7
 810b9f6:	bd80      	pop	{r7, pc}

0810b9f8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 810b9f8:	b580      	push	{r7, lr}
 810b9fa:	b08a      	sub	sp, #40	; 0x28
 810b9fc:	af02      	add	r7, sp, #8
 810b9fe:	60f8      	str	r0, [r7, #12]
 810ba00:	60b9      	str	r1, [r7, #8]
 810ba02:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 810ba04:	2300      	movs	r3, #0
 810ba06:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810ba08:	f3ef 8305 	mrs	r3, IPSR
 810ba0c:	613b      	str	r3, [r7, #16]
  return(result);
 810ba0e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 810ba10:	2b00      	cmp	r3, #0
 810ba12:	d15f      	bne.n	810bad4 <osMessageQueueNew+0xdc>
 810ba14:	68fb      	ldr	r3, [r7, #12]
 810ba16:	2b00      	cmp	r3, #0
 810ba18:	d05c      	beq.n	810bad4 <osMessageQueueNew+0xdc>
 810ba1a:	68bb      	ldr	r3, [r7, #8]
 810ba1c:	2b00      	cmp	r3, #0
 810ba1e:	d059      	beq.n	810bad4 <osMessageQueueNew+0xdc>
    mem = -1;
 810ba20:	f04f 33ff 	mov.w	r3, #4294967295
 810ba24:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 810ba26:	687b      	ldr	r3, [r7, #4]
 810ba28:	2b00      	cmp	r3, #0
 810ba2a:	d029      	beq.n	810ba80 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 810ba2c:	687b      	ldr	r3, [r7, #4]
 810ba2e:	689b      	ldr	r3, [r3, #8]
 810ba30:	2b00      	cmp	r3, #0
 810ba32:	d012      	beq.n	810ba5a <osMessageQueueNew+0x62>
 810ba34:	687b      	ldr	r3, [r7, #4]
 810ba36:	68db      	ldr	r3, [r3, #12]
 810ba38:	2b4f      	cmp	r3, #79	; 0x4f
 810ba3a:	d90e      	bls.n	810ba5a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 810ba3c:	687b      	ldr	r3, [r7, #4]
 810ba3e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 810ba40:	2b00      	cmp	r3, #0
 810ba42:	d00a      	beq.n	810ba5a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 810ba44:	687b      	ldr	r3, [r7, #4]
 810ba46:	695a      	ldr	r2, [r3, #20]
 810ba48:	68fb      	ldr	r3, [r7, #12]
 810ba4a:	68b9      	ldr	r1, [r7, #8]
 810ba4c:	fb01 f303 	mul.w	r3, r1, r3
 810ba50:	429a      	cmp	r2, r3
 810ba52:	d302      	bcc.n	810ba5a <osMessageQueueNew+0x62>
        mem = 1;
 810ba54:	2301      	movs	r3, #1
 810ba56:	61bb      	str	r3, [r7, #24]
 810ba58:	e014      	b.n	810ba84 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 810ba5a:	687b      	ldr	r3, [r7, #4]
 810ba5c:	689b      	ldr	r3, [r3, #8]
 810ba5e:	2b00      	cmp	r3, #0
 810ba60:	d110      	bne.n	810ba84 <osMessageQueueNew+0x8c>
 810ba62:	687b      	ldr	r3, [r7, #4]
 810ba64:	68db      	ldr	r3, [r3, #12]
 810ba66:	2b00      	cmp	r3, #0
 810ba68:	d10c      	bne.n	810ba84 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 810ba6a:	687b      	ldr	r3, [r7, #4]
 810ba6c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 810ba6e:	2b00      	cmp	r3, #0
 810ba70:	d108      	bne.n	810ba84 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 810ba72:	687b      	ldr	r3, [r7, #4]
 810ba74:	695b      	ldr	r3, [r3, #20]
 810ba76:	2b00      	cmp	r3, #0
 810ba78:	d104      	bne.n	810ba84 <osMessageQueueNew+0x8c>
          mem = 0;
 810ba7a:	2300      	movs	r3, #0
 810ba7c:	61bb      	str	r3, [r7, #24]
 810ba7e:	e001      	b.n	810ba84 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 810ba80:	2300      	movs	r3, #0
 810ba82:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 810ba84:	69bb      	ldr	r3, [r7, #24]
 810ba86:	2b01      	cmp	r3, #1
 810ba88:	d10b      	bne.n	810baa2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 810ba8a:	687b      	ldr	r3, [r7, #4]
 810ba8c:	691a      	ldr	r2, [r3, #16]
 810ba8e:	687b      	ldr	r3, [r7, #4]
 810ba90:	689b      	ldr	r3, [r3, #8]
 810ba92:	2100      	movs	r1, #0
 810ba94:	9100      	str	r1, [sp, #0]
 810ba96:	68b9      	ldr	r1, [r7, #8]
 810ba98:	68f8      	ldr	r0, [r7, #12]
 810ba9a:	f001 f89d 	bl	810cbd8 <xQueueGenericCreateStatic>
 810ba9e:	61f8      	str	r0, [r7, #28]
 810baa0:	e008      	b.n	810bab4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 810baa2:	69bb      	ldr	r3, [r7, #24]
 810baa4:	2b00      	cmp	r3, #0
 810baa6:	d105      	bne.n	810bab4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 810baa8:	2200      	movs	r2, #0
 810baaa:	68b9      	ldr	r1, [r7, #8]
 810baac:	68f8      	ldr	r0, [r7, #12]
 810baae:	f001 f90b 	bl	810ccc8 <xQueueGenericCreate>
 810bab2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 810bab4:	69fb      	ldr	r3, [r7, #28]
 810bab6:	2b00      	cmp	r3, #0
 810bab8:	d00c      	beq.n	810bad4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 810baba:	687b      	ldr	r3, [r7, #4]
 810babc:	2b00      	cmp	r3, #0
 810babe:	d003      	beq.n	810bac8 <osMessageQueueNew+0xd0>
        name = attr->name;
 810bac0:	687b      	ldr	r3, [r7, #4]
 810bac2:	681b      	ldr	r3, [r3, #0]
 810bac4:	617b      	str	r3, [r7, #20]
 810bac6:	e001      	b.n	810bacc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 810bac8:	2300      	movs	r3, #0
 810baca:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 810bacc:	6979      	ldr	r1, [r7, #20]
 810bace:	69f8      	ldr	r0, [r7, #28]
 810bad0:	f001 ff84 	bl	810d9dc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 810bad4:	69fb      	ldr	r3, [r7, #28]
}
 810bad6:	4618      	mov	r0, r3
 810bad8:	3720      	adds	r7, #32
 810bada:	46bd      	mov	sp, r7
 810badc:	bd80      	pop	{r7, pc}
	...

0810bae0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 810bae0:	b580      	push	{r7, lr}
 810bae2:	b088      	sub	sp, #32
 810bae4:	af00      	add	r7, sp, #0
 810bae6:	60f8      	str	r0, [r7, #12]
 810bae8:	60b9      	str	r1, [r7, #8]
 810baea:	603b      	str	r3, [r7, #0]
 810baec:	4613      	mov	r3, r2
 810baee:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 810baf0:	68fb      	ldr	r3, [r7, #12]
 810baf2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 810baf4:	2300      	movs	r3, #0
 810baf6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810baf8:	f3ef 8305 	mrs	r3, IPSR
 810bafc:	617b      	str	r3, [r7, #20]
  return(result);
 810bafe:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 810bb00:	2b00      	cmp	r3, #0
 810bb02:	d028      	beq.n	810bb56 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 810bb04:	69bb      	ldr	r3, [r7, #24]
 810bb06:	2b00      	cmp	r3, #0
 810bb08:	d005      	beq.n	810bb16 <osMessageQueuePut+0x36>
 810bb0a:	68bb      	ldr	r3, [r7, #8]
 810bb0c:	2b00      	cmp	r3, #0
 810bb0e:	d002      	beq.n	810bb16 <osMessageQueuePut+0x36>
 810bb10:	683b      	ldr	r3, [r7, #0]
 810bb12:	2b00      	cmp	r3, #0
 810bb14:	d003      	beq.n	810bb1e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 810bb16:	f06f 0303 	mvn.w	r3, #3
 810bb1a:	61fb      	str	r3, [r7, #28]
 810bb1c:	e038      	b.n	810bb90 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 810bb1e:	2300      	movs	r3, #0
 810bb20:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 810bb22:	f107 0210 	add.w	r2, r7, #16
 810bb26:	2300      	movs	r3, #0
 810bb28:	68b9      	ldr	r1, [r7, #8]
 810bb2a:	69b8      	ldr	r0, [r7, #24]
 810bb2c:	f001 fa5e 	bl	810cfec <xQueueGenericSendFromISR>
 810bb30:	4603      	mov	r3, r0
 810bb32:	2b01      	cmp	r3, #1
 810bb34:	d003      	beq.n	810bb3e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 810bb36:	f06f 0302 	mvn.w	r3, #2
 810bb3a:	61fb      	str	r3, [r7, #28]
 810bb3c:	e028      	b.n	810bb90 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 810bb3e:	693b      	ldr	r3, [r7, #16]
 810bb40:	2b00      	cmp	r3, #0
 810bb42:	d025      	beq.n	810bb90 <osMessageQueuePut+0xb0>
 810bb44:	4b15      	ldr	r3, [pc, #84]	; (810bb9c <osMessageQueuePut+0xbc>)
 810bb46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810bb4a:	601a      	str	r2, [r3, #0]
 810bb4c:	f3bf 8f4f 	dsb	sy
 810bb50:	f3bf 8f6f 	isb	sy
 810bb54:	e01c      	b.n	810bb90 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 810bb56:	69bb      	ldr	r3, [r7, #24]
 810bb58:	2b00      	cmp	r3, #0
 810bb5a:	d002      	beq.n	810bb62 <osMessageQueuePut+0x82>
 810bb5c:	68bb      	ldr	r3, [r7, #8]
 810bb5e:	2b00      	cmp	r3, #0
 810bb60:	d103      	bne.n	810bb6a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 810bb62:	f06f 0303 	mvn.w	r3, #3
 810bb66:	61fb      	str	r3, [r7, #28]
 810bb68:	e012      	b.n	810bb90 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 810bb6a:	2300      	movs	r3, #0
 810bb6c:	683a      	ldr	r2, [r7, #0]
 810bb6e:	68b9      	ldr	r1, [r7, #8]
 810bb70:	69b8      	ldr	r0, [r7, #24]
 810bb72:	f001 f93d 	bl	810cdf0 <xQueueGenericSend>
 810bb76:	4603      	mov	r3, r0
 810bb78:	2b01      	cmp	r3, #1
 810bb7a:	d009      	beq.n	810bb90 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 810bb7c:	683b      	ldr	r3, [r7, #0]
 810bb7e:	2b00      	cmp	r3, #0
 810bb80:	d003      	beq.n	810bb8a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 810bb82:	f06f 0301 	mvn.w	r3, #1
 810bb86:	61fb      	str	r3, [r7, #28]
 810bb88:	e002      	b.n	810bb90 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 810bb8a:	f06f 0302 	mvn.w	r3, #2
 810bb8e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 810bb90:	69fb      	ldr	r3, [r7, #28]
}
 810bb92:	4618      	mov	r0, r3
 810bb94:	3720      	adds	r7, #32
 810bb96:	46bd      	mov	sp, r7
 810bb98:	bd80      	pop	{r7, pc}
 810bb9a:	bf00      	nop
 810bb9c:	e000ed04 	.word	0xe000ed04

0810bba0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 810bba0:	b580      	push	{r7, lr}
 810bba2:	b088      	sub	sp, #32
 810bba4:	af00      	add	r7, sp, #0
 810bba6:	60f8      	str	r0, [r7, #12]
 810bba8:	60b9      	str	r1, [r7, #8]
 810bbaa:	607a      	str	r2, [r7, #4]
 810bbac:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 810bbae:	68fb      	ldr	r3, [r7, #12]
 810bbb0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 810bbb2:	2300      	movs	r3, #0
 810bbb4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810bbb6:	f3ef 8305 	mrs	r3, IPSR
 810bbba:	617b      	str	r3, [r7, #20]
  return(result);
 810bbbc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 810bbbe:	2b00      	cmp	r3, #0
 810bbc0:	d028      	beq.n	810bc14 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 810bbc2:	69bb      	ldr	r3, [r7, #24]
 810bbc4:	2b00      	cmp	r3, #0
 810bbc6:	d005      	beq.n	810bbd4 <osMessageQueueGet+0x34>
 810bbc8:	68bb      	ldr	r3, [r7, #8]
 810bbca:	2b00      	cmp	r3, #0
 810bbcc:	d002      	beq.n	810bbd4 <osMessageQueueGet+0x34>
 810bbce:	683b      	ldr	r3, [r7, #0]
 810bbd0:	2b00      	cmp	r3, #0
 810bbd2:	d003      	beq.n	810bbdc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 810bbd4:	f06f 0303 	mvn.w	r3, #3
 810bbd8:	61fb      	str	r3, [r7, #28]
 810bbda:	e037      	b.n	810bc4c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 810bbdc:	2300      	movs	r3, #0
 810bbde:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 810bbe0:	f107 0310 	add.w	r3, r7, #16
 810bbe4:	461a      	mov	r2, r3
 810bbe6:	68b9      	ldr	r1, [r7, #8]
 810bbe8:	69b8      	ldr	r0, [r7, #24]
 810bbea:	f001 fd13 	bl	810d614 <xQueueReceiveFromISR>
 810bbee:	4603      	mov	r3, r0
 810bbf0:	2b01      	cmp	r3, #1
 810bbf2:	d003      	beq.n	810bbfc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 810bbf4:	f06f 0302 	mvn.w	r3, #2
 810bbf8:	61fb      	str	r3, [r7, #28]
 810bbfa:	e027      	b.n	810bc4c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 810bbfc:	693b      	ldr	r3, [r7, #16]
 810bbfe:	2b00      	cmp	r3, #0
 810bc00:	d024      	beq.n	810bc4c <osMessageQueueGet+0xac>
 810bc02:	4b15      	ldr	r3, [pc, #84]	; (810bc58 <osMessageQueueGet+0xb8>)
 810bc04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810bc08:	601a      	str	r2, [r3, #0]
 810bc0a:	f3bf 8f4f 	dsb	sy
 810bc0e:	f3bf 8f6f 	isb	sy
 810bc12:	e01b      	b.n	810bc4c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 810bc14:	69bb      	ldr	r3, [r7, #24]
 810bc16:	2b00      	cmp	r3, #0
 810bc18:	d002      	beq.n	810bc20 <osMessageQueueGet+0x80>
 810bc1a:	68bb      	ldr	r3, [r7, #8]
 810bc1c:	2b00      	cmp	r3, #0
 810bc1e:	d103      	bne.n	810bc28 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 810bc20:	f06f 0303 	mvn.w	r3, #3
 810bc24:	61fb      	str	r3, [r7, #28]
 810bc26:	e011      	b.n	810bc4c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 810bc28:	683a      	ldr	r2, [r7, #0]
 810bc2a:	68b9      	ldr	r1, [r7, #8]
 810bc2c:	69b8      	ldr	r0, [r7, #24]
 810bc2e:	f001 fb05 	bl	810d23c <xQueueReceive>
 810bc32:	4603      	mov	r3, r0
 810bc34:	2b01      	cmp	r3, #1
 810bc36:	d009      	beq.n	810bc4c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 810bc38:	683b      	ldr	r3, [r7, #0]
 810bc3a:	2b00      	cmp	r3, #0
 810bc3c:	d003      	beq.n	810bc46 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 810bc3e:	f06f 0301 	mvn.w	r3, #1
 810bc42:	61fb      	str	r3, [r7, #28]
 810bc44:	e002      	b.n	810bc4c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 810bc46:	f06f 0302 	mvn.w	r3, #2
 810bc4a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 810bc4c:	69fb      	ldr	r3, [r7, #28]
}
 810bc4e:	4618      	mov	r0, r3
 810bc50:	3720      	adds	r7, #32
 810bc52:	46bd      	mov	sp, r7
 810bc54:	bd80      	pop	{r7, pc}
 810bc56:	bf00      	nop
 810bc58:	e000ed04 	.word	0xe000ed04

0810bc5c <osMemoryPoolNew>:
/* Static memory pool functions */
static void  FreeBlock   (MemPool_t *mp, void *block);
static void *AllocBlock  (MemPool_t *mp);
static void *CreateBlock (MemPool_t *mp);

osMemoryPoolId_t osMemoryPoolNew (uint32_t block_count, uint32_t block_size, const osMemoryPoolAttr_t *attr) {
 810bc5c:	b580      	push	{r7, lr}
 810bc5e:	b08a      	sub	sp, #40	; 0x28
 810bc60:	af00      	add	r7, sp, #0
 810bc62:	60f8      	str	r0, [r7, #12]
 810bc64:	60b9      	str	r1, [r7, #8]
 810bc66:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810bc68:	f3ef 8305 	mrs	r3, IPSR
 810bc6c:	613b      	str	r3, [r7, #16]
  return(result);
 810bc6e:	693b      	ldr	r3, [r7, #16]
  MemPool_t *mp;
  const char *name;
  int32_t mem_cb, mem_mp;
  uint32_t sz;

  if (IS_IRQ()) {
 810bc70:	2b00      	cmp	r3, #0
 810bc72:	d002      	beq.n	810bc7a <osMemoryPoolNew+0x1e>
    mp = NULL;
 810bc74:	2300      	movs	r3, #0
 810bc76:	627b      	str	r3, [r7, #36]	; 0x24
 810bc78:	e0be      	b.n	810bdf8 <osMemoryPoolNew+0x19c>
  }
  else if ((block_count == 0U) || (block_size == 0U)) {
 810bc7a:	68fb      	ldr	r3, [r7, #12]
 810bc7c:	2b00      	cmp	r3, #0
 810bc7e:	d002      	beq.n	810bc86 <osMemoryPoolNew+0x2a>
 810bc80:	68bb      	ldr	r3, [r7, #8]
 810bc82:	2b00      	cmp	r3, #0
 810bc84:	d102      	bne.n	810bc8c <osMemoryPoolNew+0x30>
    mp = NULL;
 810bc86:	2300      	movs	r3, #0
 810bc88:	627b      	str	r3, [r7, #36]	; 0x24
 810bc8a:	e0b5      	b.n	810bdf8 <osMemoryPoolNew+0x19c>
  }
  else {
    mp = NULL;
 810bc8c:	2300      	movs	r3, #0
 810bc8e:	627b      	str	r3, [r7, #36]	; 0x24
    sz = MEMPOOL_ARR_SIZE (block_count, block_size);
 810bc90:	68bb      	ldr	r3, [r7, #8]
 810bc92:	3303      	adds	r3, #3
 810bc94:	f023 0203 	bic.w	r2, r3, #3
 810bc98:	68fb      	ldr	r3, [r7, #12]
 810bc9a:	fb02 f303 	mul.w	r3, r2, r3
 810bc9e:	617b      	str	r3, [r7, #20]

    name = NULL;
 810bca0:	2300      	movs	r3, #0
 810bca2:	623b      	str	r3, [r7, #32]
    mem_cb = -1;
 810bca4:	f04f 33ff 	mov.w	r3, #4294967295
 810bca8:	61fb      	str	r3, [r7, #28]
    mem_mp = -1;
 810bcaa:	f04f 33ff 	mov.w	r3, #4294967295
 810bcae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 810bcb0:	687b      	ldr	r3, [r7, #4]
 810bcb2:	2b00      	cmp	r3, #0
 810bcb4:	d038      	beq.n	810bd28 <osMemoryPoolNew+0xcc>
      if (attr->name != NULL) {
 810bcb6:	687b      	ldr	r3, [r7, #4]
 810bcb8:	681b      	ldr	r3, [r3, #0]
 810bcba:	2b00      	cmp	r3, #0
 810bcbc:	d002      	beq.n	810bcc4 <osMemoryPoolNew+0x68>
        name = attr->name;
 810bcbe:	687b      	ldr	r3, [r7, #4]
 810bcc0:	681b      	ldr	r3, [r3, #0]
 810bcc2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(MemPool_t))) {
 810bcc4:	687b      	ldr	r3, [r7, #4]
 810bcc6:	689b      	ldr	r3, [r3, #8]
 810bcc8:	2b00      	cmp	r3, #0
 810bcca:	d006      	beq.n	810bcda <osMemoryPoolNew+0x7e>
 810bccc:	687b      	ldr	r3, [r7, #4]
 810bcce:	68db      	ldr	r3, [r3, #12]
 810bcd0:	2b73      	cmp	r3, #115	; 0x73
 810bcd2:	d902      	bls.n	810bcda <osMemoryPoolNew+0x7e>
        /* Static control block is provided */
        mem_cb = 1;
 810bcd4:	2301      	movs	r3, #1
 810bcd6:	61fb      	str	r3, [r7, #28]
 810bcd8:	e009      	b.n	810bcee <osMemoryPoolNew+0x92>
      }
      else if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 810bcda:	687b      	ldr	r3, [r7, #4]
 810bcdc:	689b      	ldr	r3, [r3, #8]
 810bcde:	2b00      	cmp	r3, #0
 810bce0:	d105      	bne.n	810bcee <osMemoryPoolNew+0x92>
 810bce2:	687b      	ldr	r3, [r7, #4]
 810bce4:	68db      	ldr	r3, [r3, #12]
 810bce6:	2b00      	cmp	r3, #0
 810bce8:	d101      	bne.n	810bcee <osMemoryPoolNew+0x92>
        /* Allocate control block memory on heap */
        mem_cb = 0;
 810bcea:	2300      	movs	r3, #0
 810bcec:	61fb      	str	r3, [r7, #28]
      }

      if ((attr->mp_mem == NULL) && (attr->mp_size == 0U)) {
 810bcee:	687b      	ldr	r3, [r7, #4]
 810bcf0:	691b      	ldr	r3, [r3, #16]
 810bcf2:	2b00      	cmp	r3, #0
 810bcf4:	d106      	bne.n	810bd04 <osMemoryPoolNew+0xa8>
 810bcf6:	687b      	ldr	r3, [r7, #4]
 810bcf8:	695b      	ldr	r3, [r3, #20]
 810bcfa:	2b00      	cmp	r3, #0
 810bcfc:	d102      	bne.n	810bd04 <osMemoryPoolNew+0xa8>
        /* Allocate memory array on heap */
          mem_mp = 0;
 810bcfe:	2300      	movs	r3, #0
 810bd00:	61bb      	str	r3, [r7, #24]
 810bd02:	e015      	b.n	810bd30 <osMemoryPoolNew+0xd4>
      }
      else {
        if (attr->mp_mem != NULL) {
 810bd04:	687b      	ldr	r3, [r7, #4]
 810bd06:	691b      	ldr	r3, [r3, #16]
 810bd08:	2b00      	cmp	r3, #0
 810bd0a:	d011      	beq.n	810bd30 <osMemoryPoolNew+0xd4>
          /* Check if array is 4-byte aligned */
          if (((uint32_t)attr->mp_mem & 3U) == 0U) {
 810bd0c:	687b      	ldr	r3, [r7, #4]
 810bd0e:	691b      	ldr	r3, [r3, #16]
 810bd10:	f003 0303 	and.w	r3, r3, #3
 810bd14:	2b00      	cmp	r3, #0
 810bd16:	d10b      	bne.n	810bd30 <osMemoryPoolNew+0xd4>
            /* Check if array big enough */
            if (attr->mp_size >= sz) {
 810bd18:	687b      	ldr	r3, [r7, #4]
 810bd1a:	695b      	ldr	r3, [r3, #20]
 810bd1c:	697a      	ldr	r2, [r7, #20]
 810bd1e:	429a      	cmp	r2, r3
 810bd20:	d806      	bhi.n	810bd30 <osMemoryPoolNew+0xd4>
              /* Static memory pool array is provided */
              mem_mp = 1;
 810bd22:	2301      	movs	r3, #1
 810bd24:	61bb      	str	r3, [r7, #24]
 810bd26:	e003      	b.n	810bd30 <osMemoryPoolNew+0xd4>
        }
      }
    }
    else {
      /* Attributes not provided, allocate memory on heap */
      mem_cb = 0;
 810bd28:	2300      	movs	r3, #0
 810bd2a:	61fb      	str	r3, [r7, #28]
      mem_mp = 0;
 810bd2c:	2300      	movs	r3, #0
 810bd2e:	61bb      	str	r3, [r7, #24]
    }

    if (mem_cb == 0) {
 810bd30:	69fb      	ldr	r3, [r7, #28]
 810bd32:	2b00      	cmp	r3, #0
 810bd34:	d104      	bne.n	810bd40 <osMemoryPoolNew+0xe4>
      mp = pvPortMalloc (sizeof(MemPool_t));
 810bd36:	2074      	movs	r0, #116	; 0x74
 810bd38:	f000 f9f6 	bl	810c128 <pvPortMalloc>
 810bd3c:	6278      	str	r0, [r7, #36]	; 0x24
 810bd3e:	e002      	b.n	810bd46 <osMemoryPoolNew+0xea>
    } else {
      mp = attr->cb_mem;
 810bd40:	687b      	ldr	r3, [r7, #4]
 810bd42:	689b      	ldr	r3, [r3, #8]
 810bd44:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (mp != NULL) {
 810bd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810bd48:	2b00      	cmp	r3, #0
 810bd4a:	d01b      	beq.n	810bd84 <osMemoryPoolNew+0x128>
      /* Create a semaphore (max count == initial count == block_count) */
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        mp->sem = xSemaphoreCreateCountingStatic (block_count, block_count, &mp->mem_sem);
 810bd4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810bd4e:	3324      	adds	r3, #36	; 0x24
 810bd50:	461a      	mov	r2, r3
 810bd52:	68f9      	ldr	r1, [r7, #12]
 810bd54:	68f8      	ldr	r0, [r7, #12]
 810bd56:	f001 f814 	bl	810cd82 <xQueueCreateCountingSemaphoreStatic>
 810bd5a:	4602      	mov	r2, r0
 810bd5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810bd5e:	605a      	str	r2, [r3, #4]
        mp->sem = xSemaphoreCreateCounting (block_count, block_count);
      #else
        mp->sem == NULL;
      #endif

      if (mp->sem != NULL) {
 810bd60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810bd62:	685b      	ldr	r3, [r3, #4]
 810bd64:	2b00      	cmp	r3, #0
 810bd66:	d00d      	beq.n	810bd84 <osMemoryPoolNew+0x128>
        /* Setup memory array */
        if (mem_mp == 0) {
 810bd68:	69bb      	ldr	r3, [r7, #24]
 810bd6a:	2b00      	cmp	r3, #0
 810bd6c:	d106      	bne.n	810bd7c <osMemoryPoolNew+0x120>
          mp->mem_arr = pvPortMalloc (sz);
 810bd6e:	6978      	ldr	r0, [r7, #20]
 810bd70:	f000 f9da 	bl	810c128 <pvPortMalloc>
 810bd74:	4602      	mov	r2, r0
 810bd76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810bd78:	609a      	str	r2, [r3, #8]
 810bd7a:	e003      	b.n	810bd84 <osMemoryPoolNew+0x128>
        } else {
          mp->mem_arr = attr->mp_mem;
 810bd7c:	687b      	ldr	r3, [r7, #4]
 810bd7e:	691a      	ldr	r2, [r3, #16]
 810bd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810bd82:	609a      	str	r2, [r3, #8]
        }
      }
    }

    if ((mp != NULL) && (mp->mem_arr != NULL)) {
 810bd84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810bd86:	2b00      	cmp	r3, #0
 810bd88:	d02b      	beq.n	810bde2 <osMemoryPoolNew+0x186>
 810bd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810bd8c:	689b      	ldr	r3, [r3, #8]
 810bd8e:	2b00      	cmp	r3, #0
 810bd90:	d027      	beq.n	810bde2 <osMemoryPoolNew+0x186>
      /* Memory pool can be created */
      mp->head    = NULL;
 810bd92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810bd94:	2200      	movs	r2, #0
 810bd96:	601a      	str	r2, [r3, #0]
      mp->mem_sz  = sz;
 810bd98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810bd9a:	697a      	ldr	r2, [r7, #20]
 810bd9c:	60da      	str	r2, [r3, #12]
      mp->name    = name;
 810bd9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810bda0:	6a3a      	ldr	r2, [r7, #32]
 810bda2:	611a      	str	r2, [r3, #16]
      mp->bl_sz   = block_size;
 810bda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810bda6:	68ba      	ldr	r2, [r7, #8]
 810bda8:	615a      	str	r2, [r3, #20]
      mp->bl_cnt  = block_count;
 810bdaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810bdac:	68fa      	ldr	r2, [r7, #12]
 810bdae:	619a      	str	r2, [r3, #24]
      mp->n       = 0U;
 810bdb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810bdb2:	2200      	movs	r2, #0
 810bdb4:	61da      	str	r2, [r3, #28]

      /* Set heap allocated memory flags */
      mp->status = MPOOL_STATUS;
 810bdb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810bdb8:	4a12      	ldr	r2, [pc, #72]	; (810be04 <osMemoryPoolNew+0x1a8>)
 810bdba:	621a      	str	r2, [r3, #32]

      if (mem_cb == 0) {
 810bdbc:	69fb      	ldr	r3, [r7, #28]
 810bdbe:	2b00      	cmp	r3, #0
 810bdc0:	d105      	bne.n	810bdce <osMemoryPoolNew+0x172>
        /* Control block on heap */
        mp->status |= 1U;
 810bdc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810bdc4:	6a1b      	ldr	r3, [r3, #32]
 810bdc6:	f043 0201 	orr.w	r2, r3, #1
 810bdca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810bdcc:	621a      	str	r2, [r3, #32]
      }
      if (mem_mp == 0) {
 810bdce:	69bb      	ldr	r3, [r7, #24]
 810bdd0:	2b00      	cmp	r3, #0
 810bdd2:	d111      	bne.n	810bdf8 <osMemoryPoolNew+0x19c>
        /* Memory array on heap */
        mp->status |= 2U;
 810bdd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810bdd6:	6a1b      	ldr	r3, [r3, #32]
 810bdd8:	f043 0202 	orr.w	r2, r3, #2
 810bddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810bdde:	621a      	str	r2, [r3, #32]
      if (mem_mp == 0) {
 810bde0:	e00a      	b.n	810bdf8 <osMemoryPoolNew+0x19c>
      }
    }
    else {
      /* Memory pool cannot be created, release allocated resources */
      if ((mem_cb == 0) && (mp != NULL)) {
 810bde2:	69fb      	ldr	r3, [r7, #28]
 810bde4:	2b00      	cmp	r3, #0
 810bde6:	d105      	bne.n	810bdf4 <osMemoryPoolNew+0x198>
 810bde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810bdea:	2b00      	cmp	r3, #0
 810bdec:	d002      	beq.n	810bdf4 <osMemoryPoolNew+0x198>
        /* Free control block memory */
        vPortFree (mp);
 810bdee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 810bdf0:	f000 fa66 	bl	810c2c0 <vPortFree>
      }
      mp = NULL;
 810bdf4:	2300      	movs	r3, #0
 810bdf6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return (mp);
 810bdf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 810bdfa:	4618      	mov	r0, r3
 810bdfc:	3728      	adds	r7, #40	; 0x28
 810bdfe:	46bd      	mov	sp, r7
 810be00:	bd80      	pop	{r7, pc}
 810be02:	bf00      	nop
 810be04:	5eed0000 	.word	0x5eed0000

0810be08 <osMemoryPoolAlloc>:
  }

  return (p);
}

void *osMemoryPoolAlloc (osMemoryPoolId_t mp_id, uint32_t timeout) {
 810be08:	b580      	push	{r7, lr}
 810be0a:	b08a      	sub	sp, #40	; 0x28
 810be0c:	af00      	add	r7, sp, #0
 810be0e:	6078      	str	r0, [r7, #4]
 810be10:	6039      	str	r1, [r7, #0]
  MemPool_t *mp;
  void *block;
  uint32_t isrm;

  if (mp_id == NULL) {
 810be12:	687b      	ldr	r3, [r7, #4]
 810be14:	2b00      	cmp	r3, #0
 810be16:	d102      	bne.n	810be1e <osMemoryPoolAlloc+0x16>
    /* Invalid input parameters */
    block = NULL;
 810be18:	2300      	movs	r3, #0
 810be1a:	627b      	str	r3, [r7, #36]	; 0x24
 810be1c:	e062      	b.n	810bee4 <osMemoryPoolAlloc+0xdc>
  }
  else {
    block = NULL;
 810be1e:	2300      	movs	r3, #0
 810be20:	627b      	str	r3, [r7, #36]	; 0x24

    mp = (MemPool_t *)mp_id;
 810be22:	687b      	ldr	r3, [r7, #4]
 810be24:	623b      	str	r3, [r7, #32]

    if ((mp->status & MPOOL_STATUS) == MPOOL_STATUS) {
 810be26:	6a3b      	ldr	r3, [r7, #32]
 810be28:	6a1a      	ldr	r2, [r3, #32]
 810be2a:	4b31      	ldr	r3, [pc, #196]	; (810bef0 <osMemoryPoolAlloc+0xe8>)
 810be2c:	4013      	ands	r3, r2
 810be2e:	4a30      	ldr	r2, [pc, #192]	; (810bef0 <osMemoryPoolAlloc+0xe8>)
 810be30:	4293      	cmp	r3, r2
 810be32:	d157      	bne.n	810bee4 <osMemoryPoolAlloc+0xdc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810be34:	f3ef 8305 	mrs	r3, IPSR
 810be38:	61bb      	str	r3, [r7, #24]
  return(result);
 810be3a:	69bb      	ldr	r3, [r7, #24]
      if (IS_IRQ()) {
 810be3c:	2b00      	cmp	r3, #0
 810be3e:	d032      	beq.n	810bea6 <osMemoryPoolAlloc+0x9e>
        if (timeout == 0U) {
 810be40:	683b      	ldr	r3, [r7, #0]
 810be42:	2b00      	cmp	r3, #0
 810be44:	d14e      	bne.n	810bee4 <osMemoryPoolAlloc+0xdc>
          if (xSemaphoreTakeFromISR (mp->sem, NULL) == pdTRUE) {
 810be46:	6a3b      	ldr	r3, [r7, #32]
 810be48:	685b      	ldr	r3, [r3, #4]
 810be4a:	2200      	movs	r2, #0
 810be4c:	2100      	movs	r1, #0
 810be4e:	4618      	mov	r0, r3
 810be50:	f001 fbe0 	bl	810d614 <xQueueReceiveFromISR>
 810be54:	4603      	mov	r3, r0
 810be56:	2b01      	cmp	r3, #1
 810be58:	d144      	bne.n	810bee4 <osMemoryPoolAlloc+0xdc>
            if ((mp->status & MPOOL_STATUS) == MPOOL_STATUS) {
 810be5a:	6a3b      	ldr	r3, [r7, #32]
 810be5c:	6a1a      	ldr	r2, [r3, #32]
 810be5e:	4b24      	ldr	r3, [pc, #144]	; (810bef0 <osMemoryPoolAlloc+0xe8>)
 810be60:	4013      	ands	r3, r2
 810be62:	4a23      	ldr	r2, [pc, #140]	; (810bef0 <osMemoryPoolAlloc+0xe8>)
 810be64:	4293      	cmp	r3, r2
 810be66:	d13d      	bne.n	810bee4 <osMemoryPoolAlloc+0xdc>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 810be68:	f3ef 8211 	mrs	r2, BASEPRI
 810be6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810be70:	f383 8811 	msr	BASEPRI, r3
 810be74:	f3bf 8f6f 	isb	sy
 810be78:	f3bf 8f4f 	dsb	sy
 810be7c:	617a      	str	r2, [r7, #20]
 810be7e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 810be80:	697b      	ldr	r3, [r7, #20]
              isrm  = taskENTER_CRITICAL_FROM_ISR();
 810be82:	61fb      	str	r3, [r7, #28]

              /* Get a block from the free-list */
              block = AllocBlock(mp);
 810be84:	6a38      	ldr	r0, [r7, #32]
 810be86:	f000 f8ef 	bl	810c068 <AllocBlock>
 810be8a:	6278      	str	r0, [r7, #36]	; 0x24

              if (block == NULL) {
 810be8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810be8e:	2b00      	cmp	r3, #0
 810be90:	d103      	bne.n	810be9a <osMemoryPoolAlloc+0x92>
                /* List of free blocks is empty, 'create' new block */
                block = CreateBlock(mp);
 810be92:	6a38      	ldr	r0, [r7, #32]
 810be94:	f000 f8c6 	bl	810c024 <CreateBlock>
 810be98:	6278      	str	r0, [r7, #36]	; 0x24
 810be9a:	69fb      	ldr	r3, [r7, #28]
 810be9c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 810be9e:	68fb      	ldr	r3, [r7, #12]
 810bea0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 810bea4:	e01e      	b.n	810bee4 <osMemoryPoolAlloc+0xdc>
            }
          }
        }
      }
      else {
        if (xSemaphoreTake (mp->sem, (TickType_t)timeout) == pdTRUE) {
 810bea6:	6a3b      	ldr	r3, [r7, #32]
 810bea8:	685b      	ldr	r3, [r3, #4]
 810beaa:	6839      	ldr	r1, [r7, #0]
 810beac:	4618      	mov	r0, r3
 810beae:	f001 faa5 	bl	810d3fc <xQueueSemaphoreTake>
 810beb2:	4603      	mov	r3, r0
 810beb4:	2b01      	cmp	r3, #1
 810beb6:	d115      	bne.n	810bee4 <osMemoryPoolAlloc+0xdc>
          if ((mp->status & MPOOL_STATUS) == MPOOL_STATUS) {
 810beb8:	6a3b      	ldr	r3, [r7, #32]
 810beba:	6a1a      	ldr	r2, [r3, #32]
 810bebc:	4b0c      	ldr	r3, [pc, #48]	; (810bef0 <osMemoryPoolAlloc+0xe8>)
 810bebe:	4013      	ands	r3, r2
 810bec0:	4a0b      	ldr	r2, [pc, #44]	; (810bef0 <osMemoryPoolAlloc+0xe8>)
 810bec2:	4293      	cmp	r3, r2
 810bec4:	d10e      	bne.n	810bee4 <osMemoryPoolAlloc+0xdc>
            taskENTER_CRITICAL();
 810bec6:	f000 fcfd 	bl	810c8c4 <vPortEnterCritical>

            /* Get a block from the free-list */
            block = AllocBlock(mp);
 810beca:	6a38      	ldr	r0, [r7, #32]
 810becc:	f000 f8cc 	bl	810c068 <AllocBlock>
 810bed0:	6278      	str	r0, [r7, #36]	; 0x24

            if (block == NULL) {
 810bed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810bed4:	2b00      	cmp	r3, #0
 810bed6:	d103      	bne.n	810bee0 <osMemoryPoolAlloc+0xd8>
              /* List of free blocks is empty, 'create' new block */
              block = CreateBlock(mp);
 810bed8:	6a38      	ldr	r0, [r7, #32]
 810beda:	f000 f8a3 	bl	810c024 <CreateBlock>
 810bede:	6278      	str	r0, [r7, #36]	; 0x24
            }

            taskEXIT_CRITICAL();
 810bee0:	f000 fd20 	bl	810c924 <vPortExitCritical>
        }
      }
    }
  }

  return (block);
 810bee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 810bee6:	4618      	mov	r0, r3
 810bee8:	3728      	adds	r7, #40	; 0x28
 810beea:	46bd      	mov	sp, r7
 810beec:	bd80      	pop	{r7, pc}
 810beee:	bf00      	nop
 810bef0:	5eed0000 	.word	0x5eed0000

0810bef4 <osMemoryPoolFree>:

osStatus_t osMemoryPoolFree (osMemoryPoolId_t mp_id, void *block) {
 810bef4:	b580      	push	{r7, lr}
 810bef6:	b08a      	sub	sp, #40	; 0x28
 810bef8:	af00      	add	r7, sp, #0
 810befa:	6078      	str	r0, [r7, #4]
 810befc:	6039      	str	r1, [r7, #0]
  MemPool_t *mp;
  osStatus_t stat;
  uint32_t isrm;
  BaseType_t yield;

  if ((mp_id == NULL) || (block == NULL)) {
 810befe:	687b      	ldr	r3, [r7, #4]
 810bf00:	2b00      	cmp	r3, #0
 810bf02:	d002      	beq.n	810bf0a <osMemoryPoolFree+0x16>
 810bf04:	683b      	ldr	r3, [r7, #0]
 810bf06:	2b00      	cmp	r3, #0
 810bf08:	d103      	bne.n	810bf12 <osMemoryPoolFree+0x1e>
    /* Invalid input parameters */
    stat = osErrorParameter;
 810bf0a:	f06f 0303 	mvn.w	r3, #3
 810bf0e:	627b      	str	r3, [r7, #36]	; 0x24
 810bf10:	e07f      	b.n	810c012 <osMemoryPoolFree+0x11e>
  }
  else {
    mp = (MemPool_t *)mp_id;
 810bf12:	687b      	ldr	r3, [r7, #4]
 810bf14:	623b      	str	r3, [r7, #32]

    if ((mp->status & MPOOL_STATUS) != MPOOL_STATUS) {
 810bf16:	6a3b      	ldr	r3, [r7, #32]
 810bf18:	6a1a      	ldr	r2, [r3, #32]
 810bf1a:	4b40      	ldr	r3, [pc, #256]	; (810c01c <osMemoryPoolFree+0x128>)
 810bf1c:	4013      	ands	r3, r2
 810bf1e:	4a3f      	ldr	r2, [pc, #252]	; (810c01c <osMemoryPoolFree+0x128>)
 810bf20:	4293      	cmp	r3, r2
 810bf22:	d003      	beq.n	810bf2c <osMemoryPoolFree+0x38>
      /* Invalid object status */
      stat = osErrorResource;
 810bf24:	f06f 0302 	mvn.w	r3, #2
 810bf28:	627b      	str	r3, [r7, #36]	; 0x24
 810bf2a:	e072      	b.n	810c012 <osMemoryPoolFree+0x11e>
    }
    else if ((block < (void *)&mp->mem_arr[0]) || (block > (void*)&mp->mem_arr[mp->mem_sz-1])) {
 810bf2c:	6a3b      	ldr	r3, [r7, #32]
 810bf2e:	689b      	ldr	r3, [r3, #8]
 810bf30:	683a      	ldr	r2, [r7, #0]
 810bf32:	429a      	cmp	r2, r3
 810bf34:	d308      	bcc.n	810bf48 <osMemoryPoolFree+0x54>
 810bf36:	6a3b      	ldr	r3, [r7, #32]
 810bf38:	689a      	ldr	r2, [r3, #8]
 810bf3a:	6a3b      	ldr	r3, [r7, #32]
 810bf3c:	68db      	ldr	r3, [r3, #12]
 810bf3e:	3b01      	subs	r3, #1
 810bf40:	4413      	add	r3, r2
 810bf42:	683a      	ldr	r2, [r7, #0]
 810bf44:	429a      	cmp	r2, r3
 810bf46:	d903      	bls.n	810bf50 <osMemoryPoolFree+0x5c>
      /* Block pointer outside of memory array area */
      stat = osErrorParameter;
 810bf48:	f06f 0303 	mvn.w	r3, #3
 810bf4c:	627b      	str	r3, [r7, #36]	; 0x24
 810bf4e:	e060      	b.n	810c012 <osMemoryPoolFree+0x11e>
    }
    else {
      stat = osOK;
 810bf50:	2300      	movs	r3, #0
 810bf52:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810bf54:	f3ef 8305 	mrs	r3, IPSR
 810bf58:	61bb      	str	r3, [r7, #24]
  return(result);
 810bf5a:	69bb      	ldr	r3, [r7, #24]

      if (IS_IRQ()) {
 810bf5c:	2b00      	cmp	r3, #0
 810bf5e:	d03b      	beq.n	810bfd8 <osMemoryPoolFree+0xe4>
        if (uxSemaphoreGetCountFromISR (mp->sem) == mp->bl_cnt) {
 810bf60:	6a3b      	ldr	r3, [r7, #32]
 810bf62:	685b      	ldr	r3, [r3, #4]
 810bf64:	4618      	mov	r0, r3
 810bf66:	f001 fbf3 	bl	810d750 <uxQueueMessagesWaitingFromISR>
 810bf6a:	4602      	mov	r2, r0
 810bf6c:	6a3b      	ldr	r3, [r7, #32]
 810bf6e:	699b      	ldr	r3, [r3, #24]
 810bf70:	429a      	cmp	r2, r3
 810bf72:	d103      	bne.n	810bf7c <osMemoryPoolFree+0x88>
          stat = osErrorResource;
 810bf74:	f06f 0302 	mvn.w	r3, #2
 810bf78:	627b      	str	r3, [r7, #36]	; 0x24
 810bf7a:	e04a      	b.n	810c012 <osMemoryPoolFree+0x11e>
	__asm volatile
 810bf7c:	f3ef 8211 	mrs	r2, BASEPRI
 810bf80:	f04f 0350 	mov.w	r3, #80	; 0x50
 810bf84:	f383 8811 	msr	BASEPRI, r3
 810bf88:	f3bf 8f6f 	isb	sy
 810bf8c:	f3bf 8f4f 	dsb	sy
 810bf90:	613a      	str	r2, [r7, #16]
 810bf92:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 810bf94:	693b      	ldr	r3, [r7, #16]
        }
        else {
          isrm = taskENTER_CRITICAL_FROM_ISR();
 810bf96:	61fb      	str	r3, [r7, #28]

          /* Add block to the list of free blocks */
          FreeBlock(mp, block);
 810bf98:	6839      	ldr	r1, [r7, #0]
 810bf9a:	6a38      	ldr	r0, [r7, #32]
 810bf9c:	f000 f87c 	bl	810c098 <FreeBlock>
 810bfa0:	69fb      	ldr	r3, [r7, #28]
 810bfa2:	617b      	str	r3, [r7, #20]
	__asm volatile
 810bfa4:	697b      	ldr	r3, [r7, #20]
 810bfa6:	f383 8811 	msr	BASEPRI, r3
}
 810bfaa:	bf00      	nop

          taskEXIT_CRITICAL_FROM_ISR(isrm);

          yield = pdFALSE;
 810bfac:	2300      	movs	r3, #0
 810bfae:	60bb      	str	r3, [r7, #8]
          xSemaphoreGiveFromISR (mp->sem, &yield);
 810bfb0:	6a3b      	ldr	r3, [r7, #32]
 810bfb2:	685b      	ldr	r3, [r3, #4]
 810bfb4:	f107 0208 	add.w	r2, r7, #8
 810bfb8:	4611      	mov	r1, r2
 810bfba:	4618      	mov	r0, r3
 810bfbc:	f001 f8b1 	bl	810d122 <xQueueGiveFromISR>
          portYIELD_FROM_ISR (yield);
 810bfc0:	68bb      	ldr	r3, [r7, #8]
 810bfc2:	2b00      	cmp	r3, #0
 810bfc4:	d025      	beq.n	810c012 <osMemoryPoolFree+0x11e>
 810bfc6:	4b16      	ldr	r3, [pc, #88]	; (810c020 <osMemoryPoolFree+0x12c>)
 810bfc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810bfcc:	601a      	str	r2, [r3, #0]
 810bfce:	f3bf 8f4f 	dsb	sy
 810bfd2:	f3bf 8f6f 	isb	sy
 810bfd6:	e01c      	b.n	810c012 <osMemoryPoolFree+0x11e>
        }
      }
      else {
        if (uxSemaphoreGetCount (mp->sem) == mp->bl_cnt) {
 810bfd8:	6a3b      	ldr	r3, [r7, #32]
 810bfda:	685b      	ldr	r3, [r3, #4]
 810bfdc:	4618      	mov	r0, r3
 810bfde:	f001 fb99 	bl	810d714 <uxQueueMessagesWaiting>
 810bfe2:	4602      	mov	r2, r0
 810bfe4:	6a3b      	ldr	r3, [r7, #32]
 810bfe6:	699b      	ldr	r3, [r3, #24]
 810bfe8:	429a      	cmp	r2, r3
 810bfea:	d103      	bne.n	810bff4 <osMemoryPoolFree+0x100>
          stat = osErrorResource;
 810bfec:	f06f 0302 	mvn.w	r3, #2
 810bff0:	627b      	str	r3, [r7, #36]	; 0x24
 810bff2:	e00e      	b.n	810c012 <osMemoryPoolFree+0x11e>
        }
        else {
          taskENTER_CRITICAL();
 810bff4:	f000 fc66 	bl	810c8c4 <vPortEnterCritical>

          /* Add block to the list of free blocks */
          FreeBlock(mp, block);
 810bff8:	6839      	ldr	r1, [r7, #0]
 810bffa:	6a38      	ldr	r0, [r7, #32]
 810bffc:	f000 f84c 	bl	810c098 <FreeBlock>

          taskEXIT_CRITICAL();
 810c000:	f000 fc90 	bl	810c924 <vPortExitCritical>

          xSemaphoreGive (mp->sem);
 810c004:	6a3b      	ldr	r3, [r7, #32]
 810c006:	6858      	ldr	r0, [r3, #4]
 810c008:	2300      	movs	r3, #0
 810c00a:	2200      	movs	r2, #0
 810c00c:	2100      	movs	r1, #0
 810c00e:	f000 feef 	bl	810cdf0 <xQueueGenericSend>
        }
      }
    }
  }

  return (stat);
 810c012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 810c014:	4618      	mov	r0, r3
 810c016:	3728      	adds	r7, #40	; 0x28
 810c018:	46bd      	mov	sp, r7
 810c01a:	bd80      	pop	{r7, pc}
 810c01c:	5eed0000 	.word	0x5eed0000
 810c020:	e000ed04 	.word	0xe000ed04

0810c024 <CreateBlock>:
}

/*
  Create new block given according to the current block index.
*/
static void *CreateBlock (MemPool_t *mp) {
 810c024:	b480      	push	{r7}
 810c026:	b085      	sub	sp, #20
 810c028:	af00      	add	r7, sp, #0
 810c02a:	6078      	str	r0, [r7, #4]
  MemPoolBlock_t *p = NULL;
 810c02c:	2300      	movs	r3, #0
 810c02e:	60fb      	str	r3, [r7, #12]

  if (mp->n < mp->bl_cnt) {
 810c030:	687b      	ldr	r3, [r7, #4]
 810c032:	69da      	ldr	r2, [r3, #28]
 810c034:	687b      	ldr	r3, [r7, #4]
 810c036:	699b      	ldr	r3, [r3, #24]
 810c038:	429a      	cmp	r2, r3
 810c03a:	d20e      	bcs.n	810c05a <CreateBlock+0x36>
    /* Unallocated blocks exist, set pointer to new block */
    p = (void *)(mp->mem_arr + (mp->bl_sz * mp->n));
 810c03c:	687b      	ldr	r3, [r7, #4]
 810c03e:	689a      	ldr	r2, [r3, #8]
 810c040:	687b      	ldr	r3, [r7, #4]
 810c042:	695b      	ldr	r3, [r3, #20]
 810c044:	6879      	ldr	r1, [r7, #4]
 810c046:	69c9      	ldr	r1, [r1, #28]
 810c048:	fb01 f303 	mul.w	r3, r1, r3
 810c04c:	4413      	add	r3, r2
 810c04e:	60fb      	str	r3, [r7, #12]

    /* Increment block index */
    mp->n += 1U;
 810c050:	687b      	ldr	r3, [r7, #4]
 810c052:	69db      	ldr	r3, [r3, #28]
 810c054:	1c5a      	adds	r2, r3, #1
 810c056:	687b      	ldr	r3, [r7, #4]
 810c058:	61da      	str	r2, [r3, #28]
  }

  return (p);
 810c05a:	68fb      	ldr	r3, [r7, #12]
}
 810c05c:	4618      	mov	r0, r3
 810c05e:	3714      	adds	r7, #20
 810c060:	46bd      	mov	sp, r7
 810c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c066:	4770      	bx	lr

0810c068 <AllocBlock>:

/*
  Allocate a block by reading the list of free blocks.
*/
static void *AllocBlock (MemPool_t *mp) {
 810c068:	b480      	push	{r7}
 810c06a:	b085      	sub	sp, #20
 810c06c:	af00      	add	r7, sp, #0
 810c06e:	6078      	str	r0, [r7, #4]
  MemPoolBlock_t *p = NULL;
 810c070:	2300      	movs	r3, #0
 810c072:	60fb      	str	r3, [r7, #12]

  if (mp->head != NULL) {
 810c074:	687b      	ldr	r3, [r7, #4]
 810c076:	681b      	ldr	r3, [r3, #0]
 810c078:	2b00      	cmp	r3, #0
 810c07a:	d006      	beq.n	810c08a <AllocBlock+0x22>
    /* List of free block exists, get head block */
    p = mp->head;
 810c07c:	687b      	ldr	r3, [r7, #4]
 810c07e:	681b      	ldr	r3, [r3, #0]
 810c080:	60fb      	str	r3, [r7, #12]

    /* Head block is now next on the list */
    mp->head = p->next;
 810c082:	68fb      	ldr	r3, [r7, #12]
 810c084:	681a      	ldr	r2, [r3, #0]
 810c086:	687b      	ldr	r3, [r7, #4]
 810c088:	601a      	str	r2, [r3, #0]
  }

  return (p);
 810c08a:	68fb      	ldr	r3, [r7, #12]
}
 810c08c:	4618      	mov	r0, r3
 810c08e:	3714      	adds	r7, #20
 810c090:	46bd      	mov	sp, r7
 810c092:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c096:	4770      	bx	lr

0810c098 <FreeBlock>:

/*
  Free block by putting it to the list of free blocks.
*/
static void FreeBlock (MemPool_t *mp, void *block) {
 810c098:	b480      	push	{r7}
 810c09a:	b085      	sub	sp, #20
 810c09c:	af00      	add	r7, sp, #0
 810c09e:	6078      	str	r0, [r7, #4]
 810c0a0:	6039      	str	r1, [r7, #0]
  MemPoolBlock_t *p = block;
 810c0a2:	683b      	ldr	r3, [r7, #0]
 810c0a4:	60fb      	str	r3, [r7, #12]

  /* Store current head into block memory space */
  p->next = mp->head;
 810c0a6:	687b      	ldr	r3, [r7, #4]
 810c0a8:	681a      	ldr	r2, [r3, #0]
 810c0aa:	68fb      	ldr	r3, [r7, #12]
 810c0ac:	601a      	str	r2, [r3, #0]

  /* Store current block as new head */
  mp->head = p;
 810c0ae:	687b      	ldr	r3, [r7, #4]
 810c0b0:	68fa      	ldr	r2, [r7, #12]
 810c0b2:	601a      	str	r2, [r3, #0]
}
 810c0b4:	bf00      	nop
 810c0b6:	3714      	adds	r7, #20
 810c0b8:	46bd      	mov	sp, r7
 810c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c0be:	4770      	bx	lr

0810c0c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 810c0c0:	b480      	push	{r7}
 810c0c2:	b085      	sub	sp, #20
 810c0c4:	af00      	add	r7, sp, #0
 810c0c6:	60f8      	str	r0, [r7, #12]
 810c0c8:	60b9      	str	r1, [r7, #8]
 810c0ca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 810c0cc:	68fb      	ldr	r3, [r7, #12]
 810c0ce:	4a07      	ldr	r2, [pc, #28]	; (810c0ec <vApplicationGetIdleTaskMemory+0x2c>)
 810c0d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 810c0d2:	68bb      	ldr	r3, [r7, #8]
 810c0d4:	4a06      	ldr	r2, [pc, #24]	; (810c0f0 <vApplicationGetIdleTaskMemory+0x30>)
 810c0d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 810c0d8:	687b      	ldr	r3, [r7, #4]
 810c0da:	f44f 7280 	mov.w	r2, #256	; 0x100
 810c0de:	601a      	str	r2, [r3, #0]
}
 810c0e0:	bf00      	nop
 810c0e2:	3714      	adds	r7, #20
 810c0e4:	46bd      	mov	sp, r7
 810c0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c0ea:	4770      	bx	lr
 810c0ec:	10018754 	.word	0x10018754
 810c0f0:	10018820 	.word	0x10018820

0810c0f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 810c0f4:	b480      	push	{r7}
 810c0f6:	b085      	sub	sp, #20
 810c0f8:	af00      	add	r7, sp, #0
 810c0fa:	60f8      	str	r0, [r7, #12]
 810c0fc:	60b9      	str	r1, [r7, #8]
 810c0fe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 810c100:	68fb      	ldr	r3, [r7, #12]
 810c102:	4a07      	ldr	r2, [pc, #28]	; (810c120 <vApplicationGetTimerTaskMemory+0x2c>)
 810c104:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 810c106:	68bb      	ldr	r3, [r7, #8]
 810c108:	4a06      	ldr	r2, [pc, #24]	; (810c124 <vApplicationGetTimerTaskMemory+0x30>)
 810c10a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 810c10c:	687b      	ldr	r3, [r7, #4]
 810c10e:	f44f 7200 	mov.w	r2, #512	; 0x200
 810c112:	601a      	str	r2, [r3, #0]
}
 810c114:	bf00      	nop
 810c116:	3714      	adds	r7, #20
 810c118:	46bd      	mov	sp, r7
 810c11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c11e:	4770      	bx	lr
 810c120:	10018c20 	.word	0x10018c20
 810c124:	10018cec 	.word	0x10018cec

0810c128 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 810c128:	b580      	push	{r7, lr}
 810c12a:	b08a      	sub	sp, #40	; 0x28
 810c12c:	af00      	add	r7, sp, #0
 810c12e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 810c130:	2300      	movs	r3, #0
 810c132:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 810c134:	f001 ff0c 	bl	810df50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 810c138:	4b5b      	ldr	r3, [pc, #364]	; (810c2a8 <pvPortMalloc+0x180>)
 810c13a:	681b      	ldr	r3, [r3, #0]
 810c13c:	2b00      	cmp	r3, #0
 810c13e:	d101      	bne.n	810c144 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 810c140:	f000 f920 	bl	810c384 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 810c144:	4b59      	ldr	r3, [pc, #356]	; (810c2ac <pvPortMalloc+0x184>)
 810c146:	681a      	ldr	r2, [r3, #0]
 810c148:	687b      	ldr	r3, [r7, #4]
 810c14a:	4013      	ands	r3, r2
 810c14c:	2b00      	cmp	r3, #0
 810c14e:	f040 8093 	bne.w	810c278 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 810c152:	687b      	ldr	r3, [r7, #4]
 810c154:	2b00      	cmp	r3, #0
 810c156:	d01d      	beq.n	810c194 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 810c158:	2208      	movs	r2, #8
 810c15a:	687b      	ldr	r3, [r7, #4]
 810c15c:	4413      	add	r3, r2
 810c15e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 810c160:	687b      	ldr	r3, [r7, #4]
 810c162:	f003 0307 	and.w	r3, r3, #7
 810c166:	2b00      	cmp	r3, #0
 810c168:	d014      	beq.n	810c194 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 810c16a:	687b      	ldr	r3, [r7, #4]
 810c16c:	f023 0307 	bic.w	r3, r3, #7
 810c170:	3308      	adds	r3, #8
 810c172:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 810c174:	687b      	ldr	r3, [r7, #4]
 810c176:	f003 0307 	and.w	r3, r3, #7
 810c17a:	2b00      	cmp	r3, #0
 810c17c:	d00a      	beq.n	810c194 <pvPortMalloc+0x6c>
	__asm volatile
 810c17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810c182:	f383 8811 	msr	BASEPRI, r3
 810c186:	f3bf 8f6f 	isb	sy
 810c18a:	f3bf 8f4f 	dsb	sy
 810c18e:	617b      	str	r3, [r7, #20]
}
 810c190:	bf00      	nop
 810c192:	e7fe      	b.n	810c192 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 810c194:	687b      	ldr	r3, [r7, #4]
 810c196:	2b00      	cmp	r3, #0
 810c198:	d06e      	beq.n	810c278 <pvPortMalloc+0x150>
 810c19a:	4b45      	ldr	r3, [pc, #276]	; (810c2b0 <pvPortMalloc+0x188>)
 810c19c:	681b      	ldr	r3, [r3, #0]
 810c19e:	687a      	ldr	r2, [r7, #4]
 810c1a0:	429a      	cmp	r2, r3
 810c1a2:	d869      	bhi.n	810c278 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 810c1a4:	4b43      	ldr	r3, [pc, #268]	; (810c2b4 <pvPortMalloc+0x18c>)
 810c1a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 810c1a8:	4b42      	ldr	r3, [pc, #264]	; (810c2b4 <pvPortMalloc+0x18c>)
 810c1aa:	681b      	ldr	r3, [r3, #0]
 810c1ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810c1ae:	e004      	b.n	810c1ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 810c1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c1b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 810c1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c1b6:	681b      	ldr	r3, [r3, #0]
 810c1b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810c1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c1bc:	685b      	ldr	r3, [r3, #4]
 810c1be:	687a      	ldr	r2, [r7, #4]
 810c1c0:	429a      	cmp	r2, r3
 810c1c2:	d903      	bls.n	810c1cc <pvPortMalloc+0xa4>
 810c1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c1c6:	681b      	ldr	r3, [r3, #0]
 810c1c8:	2b00      	cmp	r3, #0
 810c1ca:	d1f1      	bne.n	810c1b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 810c1cc:	4b36      	ldr	r3, [pc, #216]	; (810c2a8 <pvPortMalloc+0x180>)
 810c1ce:	681b      	ldr	r3, [r3, #0]
 810c1d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810c1d2:	429a      	cmp	r2, r3
 810c1d4:	d050      	beq.n	810c278 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 810c1d6:	6a3b      	ldr	r3, [r7, #32]
 810c1d8:	681b      	ldr	r3, [r3, #0]
 810c1da:	2208      	movs	r2, #8
 810c1dc:	4413      	add	r3, r2
 810c1de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 810c1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c1e2:	681a      	ldr	r2, [r3, #0]
 810c1e4:	6a3b      	ldr	r3, [r7, #32]
 810c1e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 810c1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c1ea:	685a      	ldr	r2, [r3, #4]
 810c1ec:	687b      	ldr	r3, [r7, #4]
 810c1ee:	1ad2      	subs	r2, r2, r3
 810c1f0:	2308      	movs	r3, #8
 810c1f2:	005b      	lsls	r3, r3, #1
 810c1f4:	429a      	cmp	r2, r3
 810c1f6:	d91f      	bls.n	810c238 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 810c1f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810c1fa:	687b      	ldr	r3, [r7, #4]
 810c1fc:	4413      	add	r3, r2
 810c1fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 810c200:	69bb      	ldr	r3, [r7, #24]
 810c202:	f003 0307 	and.w	r3, r3, #7
 810c206:	2b00      	cmp	r3, #0
 810c208:	d00a      	beq.n	810c220 <pvPortMalloc+0xf8>
	__asm volatile
 810c20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810c20e:	f383 8811 	msr	BASEPRI, r3
 810c212:	f3bf 8f6f 	isb	sy
 810c216:	f3bf 8f4f 	dsb	sy
 810c21a:	613b      	str	r3, [r7, #16]
}
 810c21c:	bf00      	nop
 810c21e:	e7fe      	b.n	810c21e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 810c220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c222:	685a      	ldr	r2, [r3, #4]
 810c224:	687b      	ldr	r3, [r7, #4]
 810c226:	1ad2      	subs	r2, r2, r3
 810c228:	69bb      	ldr	r3, [r7, #24]
 810c22a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 810c22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c22e:	687a      	ldr	r2, [r7, #4]
 810c230:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 810c232:	69b8      	ldr	r0, [r7, #24]
 810c234:	f000 f908 	bl	810c448 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 810c238:	4b1d      	ldr	r3, [pc, #116]	; (810c2b0 <pvPortMalloc+0x188>)
 810c23a:	681a      	ldr	r2, [r3, #0]
 810c23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c23e:	685b      	ldr	r3, [r3, #4]
 810c240:	1ad3      	subs	r3, r2, r3
 810c242:	4a1b      	ldr	r2, [pc, #108]	; (810c2b0 <pvPortMalloc+0x188>)
 810c244:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 810c246:	4b1a      	ldr	r3, [pc, #104]	; (810c2b0 <pvPortMalloc+0x188>)
 810c248:	681a      	ldr	r2, [r3, #0]
 810c24a:	4b1b      	ldr	r3, [pc, #108]	; (810c2b8 <pvPortMalloc+0x190>)
 810c24c:	681b      	ldr	r3, [r3, #0]
 810c24e:	429a      	cmp	r2, r3
 810c250:	d203      	bcs.n	810c25a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 810c252:	4b17      	ldr	r3, [pc, #92]	; (810c2b0 <pvPortMalloc+0x188>)
 810c254:	681b      	ldr	r3, [r3, #0]
 810c256:	4a18      	ldr	r2, [pc, #96]	; (810c2b8 <pvPortMalloc+0x190>)
 810c258:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 810c25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c25c:	685a      	ldr	r2, [r3, #4]
 810c25e:	4b13      	ldr	r3, [pc, #76]	; (810c2ac <pvPortMalloc+0x184>)
 810c260:	681b      	ldr	r3, [r3, #0]
 810c262:	431a      	orrs	r2, r3
 810c264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c266:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 810c268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c26a:	2200      	movs	r2, #0
 810c26c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 810c26e:	4b13      	ldr	r3, [pc, #76]	; (810c2bc <pvPortMalloc+0x194>)
 810c270:	681b      	ldr	r3, [r3, #0]
 810c272:	3301      	adds	r3, #1
 810c274:	4a11      	ldr	r2, [pc, #68]	; (810c2bc <pvPortMalloc+0x194>)
 810c276:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 810c278:	f001 fe78 	bl	810df6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 810c27c:	69fb      	ldr	r3, [r7, #28]
 810c27e:	f003 0307 	and.w	r3, r3, #7
 810c282:	2b00      	cmp	r3, #0
 810c284:	d00a      	beq.n	810c29c <pvPortMalloc+0x174>
	__asm volatile
 810c286:	f04f 0350 	mov.w	r3, #80	; 0x50
 810c28a:	f383 8811 	msr	BASEPRI, r3
 810c28e:	f3bf 8f6f 	isb	sy
 810c292:	f3bf 8f4f 	dsb	sy
 810c296:	60fb      	str	r3, [r7, #12]
}
 810c298:	bf00      	nop
 810c29a:	e7fe      	b.n	810c29a <pvPortMalloc+0x172>
	return pvReturn;
 810c29c:	69fb      	ldr	r3, [r7, #28]
}
 810c29e:	4618      	mov	r0, r3
 810c2a0:	3728      	adds	r7, #40	; 0x28
 810c2a2:	46bd      	mov	sp, r7
 810c2a4:	bd80      	pop	{r7, pc}
 810c2a6:	bf00      	nop
 810c2a8:	10022194 	.word	0x10022194
 810c2ac:	100221a8 	.word	0x100221a8
 810c2b0:	10022198 	.word	0x10022198
 810c2b4:	1002218c 	.word	0x1002218c
 810c2b8:	1002219c 	.word	0x1002219c
 810c2bc:	100221a0 	.word	0x100221a0

0810c2c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 810c2c0:	b580      	push	{r7, lr}
 810c2c2:	b086      	sub	sp, #24
 810c2c4:	af00      	add	r7, sp, #0
 810c2c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 810c2c8:	687b      	ldr	r3, [r7, #4]
 810c2ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 810c2cc:	687b      	ldr	r3, [r7, #4]
 810c2ce:	2b00      	cmp	r3, #0
 810c2d0:	d04d      	beq.n	810c36e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 810c2d2:	2308      	movs	r3, #8
 810c2d4:	425b      	negs	r3, r3
 810c2d6:	697a      	ldr	r2, [r7, #20]
 810c2d8:	4413      	add	r3, r2
 810c2da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 810c2dc:	697b      	ldr	r3, [r7, #20]
 810c2de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 810c2e0:	693b      	ldr	r3, [r7, #16]
 810c2e2:	685a      	ldr	r2, [r3, #4]
 810c2e4:	4b24      	ldr	r3, [pc, #144]	; (810c378 <vPortFree+0xb8>)
 810c2e6:	681b      	ldr	r3, [r3, #0]
 810c2e8:	4013      	ands	r3, r2
 810c2ea:	2b00      	cmp	r3, #0
 810c2ec:	d10a      	bne.n	810c304 <vPortFree+0x44>
	__asm volatile
 810c2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 810c2f2:	f383 8811 	msr	BASEPRI, r3
 810c2f6:	f3bf 8f6f 	isb	sy
 810c2fa:	f3bf 8f4f 	dsb	sy
 810c2fe:	60fb      	str	r3, [r7, #12]
}
 810c300:	bf00      	nop
 810c302:	e7fe      	b.n	810c302 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 810c304:	693b      	ldr	r3, [r7, #16]
 810c306:	681b      	ldr	r3, [r3, #0]
 810c308:	2b00      	cmp	r3, #0
 810c30a:	d00a      	beq.n	810c322 <vPortFree+0x62>
	__asm volatile
 810c30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810c310:	f383 8811 	msr	BASEPRI, r3
 810c314:	f3bf 8f6f 	isb	sy
 810c318:	f3bf 8f4f 	dsb	sy
 810c31c:	60bb      	str	r3, [r7, #8]
}
 810c31e:	bf00      	nop
 810c320:	e7fe      	b.n	810c320 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 810c322:	693b      	ldr	r3, [r7, #16]
 810c324:	685a      	ldr	r2, [r3, #4]
 810c326:	4b14      	ldr	r3, [pc, #80]	; (810c378 <vPortFree+0xb8>)
 810c328:	681b      	ldr	r3, [r3, #0]
 810c32a:	4013      	ands	r3, r2
 810c32c:	2b00      	cmp	r3, #0
 810c32e:	d01e      	beq.n	810c36e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 810c330:	693b      	ldr	r3, [r7, #16]
 810c332:	681b      	ldr	r3, [r3, #0]
 810c334:	2b00      	cmp	r3, #0
 810c336:	d11a      	bne.n	810c36e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 810c338:	693b      	ldr	r3, [r7, #16]
 810c33a:	685a      	ldr	r2, [r3, #4]
 810c33c:	4b0e      	ldr	r3, [pc, #56]	; (810c378 <vPortFree+0xb8>)
 810c33e:	681b      	ldr	r3, [r3, #0]
 810c340:	43db      	mvns	r3, r3
 810c342:	401a      	ands	r2, r3
 810c344:	693b      	ldr	r3, [r7, #16]
 810c346:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 810c348:	f001 fe02 	bl	810df50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 810c34c:	693b      	ldr	r3, [r7, #16]
 810c34e:	685a      	ldr	r2, [r3, #4]
 810c350:	4b0a      	ldr	r3, [pc, #40]	; (810c37c <vPortFree+0xbc>)
 810c352:	681b      	ldr	r3, [r3, #0]
 810c354:	4413      	add	r3, r2
 810c356:	4a09      	ldr	r2, [pc, #36]	; (810c37c <vPortFree+0xbc>)
 810c358:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 810c35a:	6938      	ldr	r0, [r7, #16]
 810c35c:	f000 f874 	bl	810c448 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 810c360:	4b07      	ldr	r3, [pc, #28]	; (810c380 <vPortFree+0xc0>)
 810c362:	681b      	ldr	r3, [r3, #0]
 810c364:	3301      	adds	r3, #1
 810c366:	4a06      	ldr	r2, [pc, #24]	; (810c380 <vPortFree+0xc0>)
 810c368:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 810c36a:	f001 fdff 	bl	810df6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 810c36e:	bf00      	nop
 810c370:	3718      	adds	r7, #24
 810c372:	46bd      	mov	sp, r7
 810c374:	bd80      	pop	{r7, pc}
 810c376:	bf00      	nop
 810c378:	100221a8 	.word	0x100221a8
 810c37c:	10022198 	.word	0x10022198
 810c380:	100221a4 	.word	0x100221a4

0810c384 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 810c384:	b480      	push	{r7}
 810c386:	b085      	sub	sp, #20
 810c388:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 810c38a:	f648 43a0 	movw	r3, #36000	; 0x8ca0
 810c38e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 810c390:	4b27      	ldr	r3, [pc, #156]	; (810c430 <prvHeapInit+0xac>)
 810c392:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 810c394:	68fb      	ldr	r3, [r7, #12]
 810c396:	f003 0307 	and.w	r3, r3, #7
 810c39a:	2b00      	cmp	r3, #0
 810c39c:	d00c      	beq.n	810c3b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 810c39e:	68fb      	ldr	r3, [r7, #12]
 810c3a0:	3307      	adds	r3, #7
 810c3a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 810c3a4:	68fb      	ldr	r3, [r7, #12]
 810c3a6:	f023 0307 	bic.w	r3, r3, #7
 810c3aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 810c3ac:	68ba      	ldr	r2, [r7, #8]
 810c3ae:	68fb      	ldr	r3, [r7, #12]
 810c3b0:	1ad3      	subs	r3, r2, r3
 810c3b2:	4a1f      	ldr	r2, [pc, #124]	; (810c430 <prvHeapInit+0xac>)
 810c3b4:	4413      	add	r3, r2
 810c3b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 810c3b8:	68fb      	ldr	r3, [r7, #12]
 810c3ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 810c3bc:	4a1d      	ldr	r2, [pc, #116]	; (810c434 <prvHeapInit+0xb0>)
 810c3be:	687b      	ldr	r3, [r7, #4]
 810c3c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 810c3c2:	4b1c      	ldr	r3, [pc, #112]	; (810c434 <prvHeapInit+0xb0>)
 810c3c4:	2200      	movs	r2, #0
 810c3c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 810c3c8:	687b      	ldr	r3, [r7, #4]
 810c3ca:	68ba      	ldr	r2, [r7, #8]
 810c3cc:	4413      	add	r3, r2
 810c3ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 810c3d0:	2208      	movs	r2, #8
 810c3d2:	68fb      	ldr	r3, [r7, #12]
 810c3d4:	1a9b      	subs	r3, r3, r2
 810c3d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 810c3d8:	68fb      	ldr	r3, [r7, #12]
 810c3da:	f023 0307 	bic.w	r3, r3, #7
 810c3de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 810c3e0:	68fb      	ldr	r3, [r7, #12]
 810c3e2:	4a15      	ldr	r2, [pc, #84]	; (810c438 <prvHeapInit+0xb4>)
 810c3e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 810c3e6:	4b14      	ldr	r3, [pc, #80]	; (810c438 <prvHeapInit+0xb4>)
 810c3e8:	681b      	ldr	r3, [r3, #0]
 810c3ea:	2200      	movs	r2, #0
 810c3ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 810c3ee:	4b12      	ldr	r3, [pc, #72]	; (810c438 <prvHeapInit+0xb4>)
 810c3f0:	681b      	ldr	r3, [r3, #0]
 810c3f2:	2200      	movs	r2, #0
 810c3f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 810c3f6:	687b      	ldr	r3, [r7, #4]
 810c3f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 810c3fa:	683b      	ldr	r3, [r7, #0]
 810c3fc:	68fa      	ldr	r2, [r7, #12]
 810c3fe:	1ad2      	subs	r2, r2, r3
 810c400:	683b      	ldr	r3, [r7, #0]
 810c402:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 810c404:	4b0c      	ldr	r3, [pc, #48]	; (810c438 <prvHeapInit+0xb4>)
 810c406:	681a      	ldr	r2, [r3, #0]
 810c408:	683b      	ldr	r3, [r7, #0]
 810c40a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810c40c:	683b      	ldr	r3, [r7, #0]
 810c40e:	685b      	ldr	r3, [r3, #4]
 810c410:	4a0a      	ldr	r2, [pc, #40]	; (810c43c <prvHeapInit+0xb8>)
 810c412:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810c414:	683b      	ldr	r3, [r7, #0]
 810c416:	685b      	ldr	r3, [r3, #4]
 810c418:	4a09      	ldr	r2, [pc, #36]	; (810c440 <prvHeapInit+0xbc>)
 810c41a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 810c41c:	4b09      	ldr	r3, [pc, #36]	; (810c444 <prvHeapInit+0xc0>)
 810c41e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 810c422:	601a      	str	r2, [r3, #0]
}
 810c424:	bf00      	nop
 810c426:	3714      	adds	r7, #20
 810c428:	46bd      	mov	sp, r7
 810c42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c42e:	4770      	bx	lr
 810c430:	100194ec 	.word	0x100194ec
 810c434:	1002218c 	.word	0x1002218c
 810c438:	10022194 	.word	0x10022194
 810c43c:	1002219c 	.word	0x1002219c
 810c440:	10022198 	.word	0x10022198
 810c444:	100221a8 	.word	0x100221a8

0810c448 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 810c448:	b480      	push	{r7}
 810c44a:	b085      	sub	sp, #20
 810c44c:	af00      	add	r7, sp, #0
 810c44e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 810c450:	4b28      	ldr	r3, [pc, #160]	; (810c4f4 <prvInsertBlockIntoFreeList+0xac>)
 810c452:	60fb      	str	r3, [r7, #12]
 810c454:	e002      	b.n	810c45c <prvInsertBlockIntoFreeList+0x14>
 810c456:	68fb      	ldr	r3, [r7, #12]
 810c458:	681b      	ldr	r3, [r3, #0]
 810c45a:	60fb      	str	r3, [r7, #12]
 810c45c:	68fb      	ldr	r3, [r7, #12]
 810c45e:	681b      	ldr	r3, [r3, #0]
 810c460:	687a      	ldr	r2, [r7, #4]
 810c462:	429a      	cmp	r2, r3
 810c464:	d8f7      	bhi.n	810c456 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 810c466:	68fb      	ldr	r3, [r7, #12]
 810c468:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 810c46a:	68fb      	ldr	r3, [r7, #12]
 810c46c:	685b      	ldr	r3, [r3, #4]
 810c46e:	68ba      	ldr	r2, [r7, #8]
 810c470:	4413      	add	r3, r2
 810c472:	687a      	ldr	r2, [r7, #4]
 810c474:	429a      	cmp	r2, r3
 810c476:	d108      	bne.n	810c48a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 810c478:	68fb      	ldr	r3, [r7, #12]
 810c47a:	685a      	ldr	r2, [r3, #4]
 810c47c:	687b      	ldr	r3, [r7, #4]
 810c47e:	685b      	ldr	r3, [r3, #4]
 810c480:	441a      	add	r2, r3
 810c482:	68fb      	ldr	r3, [r7, #12]
 810c484:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 810c486:	68fb      	ldr	r3, [r7, #12]
 810c488:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 810c48a:	687b      	ldr	r3, [r7, #4]
 810c48c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 810c48e:	687b      	ldr	r3, [r7, #4]
 810c490:	685b      	ldr	r3, [r3, #4]
 810c492:	68ba      	ldr	r2, [r7, #8]
 810c494:	441a      	add	r2, r3
 810c496:	68fb      	ldr	r3, [r7, #12]
 810c498:	681b      	ldr	r3, [r3, #0]
 810c49a:	429a      	cmp	r2, r3
 810c49c:	d118      	bne.n	810c4d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 810c49e:	68fb      	ldr	r3, [r7, #12]
 810c4a0:	681a      	ldr	r2, [r3, #0]
 810c4a2:	4b15      	ldr	r3, [pc, #84]	; (810c4f8 <prvInsertBlockIntoFreeList+0xb0>)
 810c4a4:	681b      	ldr	r3, [r3, #0]
 810c4a6:	429a      	cmp	r2, r3
 810c4a8:	d00d      	beq.n	810c4c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 810c4aa:	687b      	ldr	r3, [r7, #4]
 810c4ac:	685a      	ldr	r2, [r3, #4]
 810c4ae:	68fb      	ldr	r3, [r7, #12]
 810c4b0:	681b      	ldr	r3, [r3, #0]
 810c4b2:	685b      	ldr	r3, [r3, #4]
 810c4b4:	441a      	add	r2, r3
 810c4b6:	687b      	ldr	r3, [r7, #4]
 810c4b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 810c4ba:	68fb      	ldr	r3, [r7, #12]
 810c4bc:	681b      	ldr	r3, [r3, #0]
 810c4be:	681a      	ldr	r2, [r3, #0]
 810c4c0:	687b      	ldr	r3, [r7, #4]
 810c4c2:	601a      	str	r2, [r3, #0]
 810c4c4:	e008      	b.n	810c4d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 810c4c6:	4b0c      	ldr	r3, [pc, #48]	; (810c4f8 <prvInsertBlockIntoFreeList+0xb0>)
 810c4c8:	681a      	ldr	r2, [r3, #0]
 810c4ca:	687b      	ldr	r3, [r7, #4]
 810c4cc:	601a      	str	r2, [r3, #0]
 810c4ce:	e003      	b.n	810c4d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 810c4d0:	68fb      	ldr	r3, [r7, #12]
 810c4d2:	681a      	ldr	r2, [r3, #0]
 810c4d4:	687b      	ldr	r3, [r7, #4]
 810c4d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 810c4d8:	68fa      	ldr	r2, [r7, #12]
 810c4da:	687b      	ldr	r3, [r7, #4]
 810c4dc:	429a      	cmp	r2, r3
 810c4de:	d002      	beq.n	810c4e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 810c4e0:	68fb      	ldr	r3, [r7, #12]
 810c4e2:	687a      	ldr	r2, [r7, #4]
 810c4e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810c4e6:	bf00      	nop
 810c4e8:	3714      	adds	r7, #20
 810c4ea:	46bd      	mov	sp, r7
 810c4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c4f0:	4770      	bx	lr
 810c4f2:	bf00      	nop
 810c4f4:	1002218c 	.word	0x1002218c
 810c4f8:	10022194 	.word	0x10022194

0810c4fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 810c4fc:	b480      	push	{r7}
 810c4fe:	b083      	sub	sp, #12
 810c500:	af00      	add	r7, sp, #0
 810c502:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810c504:	687b      	ldr	r3, [r7, #4]
 810c506:	f103 0208 	add.w	r2, r3, #8
 810c50a:	687b      	ldr	r3, [r7, #4]
 810c50c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 810c50e:	687b      	ldr	r3, [r7, #4]
 810c510:	f04f 32ff 	mov.w	r2, #4294967295
 810c514:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810c516:	687b      	ldr	r3, [r7, #4]
 810c518:	f103 0208 	add.w	r2, r3, #8
 810c51c:	687b      	ldr	r3, [r7, #4]
 810c51e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810c520:	687b      	ldr	r3, [r7, #4]
 810c522:	f103 0208 	add.w	r2, r3, #8
 810c526:	687b      	ldr	r3, [r7, #4]
 810c528:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 810c52a:	687b      	ldr	r3, [r7, #4]
 810c52c:	2200      	movs	r2, #0
 810c52e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 810c530:	bf00      	nop
 810c532:	370c      	adds	r7, #12
 810c534:	46bd      	mov	sp, r7
 810c536:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c53a:	4770      	bx	lr

0810c53c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 810c53c:	b480      	push	{r7}
 810c53e:	b083      	sub	sp, #12
 810c540:	af00      	add	r7, sp, #0
 810c542:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 810c544:	687b      	ldr	r3, [r7, #4]
 810c546:	2200      	movs	r2, #0
 810c548:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 810c54a:	bf00      	nop
 810c54c:	370c      	adds	r7, #12
 810c54e:	46bd      	mov	sp, r7
 810c550:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c554:	4770      	bx	lr

0810c556 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810c556:	b480      	push	{r7}
 810c558:	b085      	sub	sp, #20
 810c55a:	af00      	add	r7, sp, #0
 810c55c:	6078      	str	r0, [r7, #4]
 810c55e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 810c560:	687b      	ldr	r3, [r7, #4]
 810c562:	685b      	ldr	r3, [r3, #4]
 810c564:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 810c566:	683b      	ldr	r3, [r7, #0]
 810c568:	68fa      	ldr	r2, [r7, #12]
 810c56a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 810c56c:	68fb      	ldr	r3, [r7, #12]
 810c56e:	689a      	ldr	r2, [r3, #8]
 810c570:	683b      	ldr	r3, [r7, #0]
 810c572:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 810c574:	68fb      	ldr	r3, [r7, #12]
 810c576:	689b      	ldr	r3, [r3, #8]
 810c578:	683a      	ldr	r2, [r7, #0]
 810c57a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 810c57c:	68fb      	ldr	r3, [r7, #12]
 810c57e:	683a      	ldr	r2, [r7, #0]
 810c580:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 810c582:	683b      	ldr	r3, [r7, #0]
 810c584:	687a      	ldr	r2, [r7, #4]
 810c586:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 810c588:	687b      	ldr	r3, [r7, #4]
 810c58a:	681b      	ldr	r3, [r3, #0]
 810c58c:	1c5a      	adds	r2, r3, #1
 810c58e:	687b      	ldr	r3, [r7, #4]
 810c590:	601a      	str	r2, [r3, #0]
}
 810c592:	bf00      	nop
 810c594:	3714      	adds	r7, #20
 810c596:	46bd      	mov	sp, r7
 810c598:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c59c:	4770      	bx	lr

0810c59e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810c59e:	b480      	push	{r7}
 810c5a0:	b085      	sub	sp, #20
 810c5a2:	af00      	add	r7, sp, #0
 810c5a4:	6078      	str	r0, [r7, #4]
 810c5a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 810c5a8:	683b      	ldr	r3, [r7, #0]
 810c5aa:	681b      	ldr	r3, [r3, #0]
 810c5ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 810c5ae:	68bb      	ldr	r3, [r7, #8]
 810c5b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 810c5b4:	d103      	bne.n	810c5be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 810c5b6:	687b      	ldr	r3, [r7, #4]
 810c5b8:	691b      	ldr	r3, [r3, #16]
 810c5ba:	60fb      	str	r3, [r7, #12]
 810c5bc:	e00c      	b.n	810c5d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 810c5be:	687b      	ldr	r3, [r7, #4]
 810c5c0:	3308      	adds	r3, #8
 810c5c2:	60fb      	str	r3, [r7, #12]
 810c5c4:	e002      	b.n	810c5cc <vListInsert+0x2e>
 810c5c6:	68fb      	ldr	r3, [r7, #12]
 810c5c8:	685b      	ldr	r3, [r3, #4]
 810c5ca:	60fb      	str	r3, [r7, #12]
 810c5cc:	68fb      	ldr	r3, [r7, #12]
 810c5ce:	685b      	ldr	r3, [r3, #4]
 810c5d0:	681b      	ldr	r3, [r3, #0]
 810c5d2:	68ba      	ldr	r2, [r7, #8]
 810c5d4:	429a      	cmp	r2, r3
 810c5d6:	d2f6      	bcs.n	810c5c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 810c5d8:	68fb      	ldr	r3, [r7, #12]
 810c5da:	685a      	ldr	r2, [r3, #4]
 810c5dc:	683b      	ldr	r3, [r7, #0]
 810c5de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 810c5e0:	683b      	ldr	r3, [r7, #0]
 810c5e2:	685b      	ldr	r3, [r3, #4]
 810c5e4:	683a      	ldr	r2, [r7, #0]
 810c5e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 810c5e8:	683b      	ldr	r3, [r7, #0]
 810c5ea:	68fa      	ldr	r2, [r7, #12]
 810c5ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 810c5ee:	68fb      	ldr	r3, [r7, #12]
 810c5f0:	683a      	ldr	r2, [r7, #0]
 810c5f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 810c5f4:	683b      	ldr	r3, [r7, #0]
 810c5f6:	687a      	ldr	r2, [r7, #4]
 810c5f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 810c5fa:	687b      	ldr	r3, [r7, #4]
 810c5fc:	681b      	ldr	r3, [r3, #0]
 810c5fe:	1c5a      	adds	r2, r3, #1
 810c600:	687b      	ldr	r3, [r7, #4]
 810c602:	601a      	str	r2, [r3, #0]
}
 810c604:	bf00      	nop
 810c606:	3714      	adds	r7, #20
 810c608:	46bd      	mov	sp, r7
 810c60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c60e:	4770      	bx	lr

0810c610 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 810c610:	b480      	push	{r7}
 810c612:	b085      	sub	sp, #20
 810c614:	af00      	add	r7, sp, #0
 810c616:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 810c618:	687b      	ldr	r3, [r7, #4]
 810c61a:	691b      	ldr	r3, [r3, #16]
 810c61c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 810c61e:	687b      	ldr	r3, [r7, #4]
 810c620:	685b      	ldr	r3, [r3, #4]
 810c622:	687a      	ldr	r2, [r7, #4]
 810c624:	6892      	ldr	r2, [r2, #8]
 810c626:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 810c628:	687b      	ldr	r3, [r7, #4]
 810c62a:	689b      	ldr	r3, [r3, #8]
 810c62c:	687a      	ldr	r2, [r7, #4]
 810c62e:	6852      	ldr	r2, [r2, #4]
 810c630:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 810c632:	68fb      	ldr	r3, [r7, #12]
 810c634:	685b      	ldr	r3, [r3, #4]
 810c636:	687a      	ldr	r2, [r7, #4]
 810c638:	429a      	cmp	r2, r3
 810c63a:	d103      	bne.n	810c644 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 810c63c:	687b      	ldr	r3, [r7, #4]
 810c63e:	689a      	ldr	r2, [r3, #8]
 810c640:	68fb      	ldr	r3, [r7, #12]
 810c642:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 810c644:	687b      	ldr	r3, [r7, #4]
 810c646:	2200      	movs	r2, #0
 810c648:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 810c64a:	68fb      	ldr	r3, [r7, #12]
 810c64c:	681b      	ldr	r3, [r3, #0]
 810c64e:	1e5a      	subs	r2, r3, #1
 810c650:	68fb      	ldr	r3, [r7, #12]
 810c652:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 810c654:	68fb      	ldr	r3, [r7, #12]
 810c656:	681b      	ldr	r3, [r3, #0]
}
 810c658:	4618      	mov	r0, r3
 810c65a:	3714      	adds	r7, #20
 810c65c:	46bd      	mov	sp, r7
 810c65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c662:	4770      	bx	lr

0810c664 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 810c664:	b480      	push	{r7}
 810c666:	b085      	sub	sp, #20
 810c668:	af00      	add	r7, sp, #0
 810c66a:	60f8      	str	r0, [r7, #12]
 810c66c:	60b9      	str	r1, [r7, #8]
 810c66e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 810c670:	68fb      	ldr	r3, [r7, #12]
 810c672:	3b04      	subs	r3, #4
 810c674:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 810c676:	68fb      	ldr	r3, [r7, #12]
 810c678:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 810c67c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810c67e:	68fb      	ldr	r3, [r7, #12]
 810c680:	3b04      	subs	r3, #4
 810c682:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 810c684:	68bb      	ldr	r3, [r7, #8]
 810c686:	f023 0201 	bic.w	r2, r3, #1
 810c68a:	68fb      	ldr	r3, [r7, #12]
 810c68c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810c68e:	68fb      	ldr	r3, [r7, #12]
 810c690:	3b04      	subs	r3, #4
 810c692:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 810c694:	4a0c      	ldr	r2, [pc, #48]	; (810c6c8 <pxPortInitialiseStack+0x64>)
 810c696:	68fb      	ldr	r3, [r7, #12]
 810c698:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 810c69a:	68fb      	ldr	r3, [r7, #12]
 810c69c:	3b14      	subs	r3, #20
 810c69e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 810c6a0:	687a      	ldr	r2, [r7, #4]
 810c6a2:	68fb      	ldr	r3, [r7, #12]
 810c6a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 810c6a6:	68fb      	ldr	r3, [r7, #12]
 810c6a8:	3b04      	subs	r3, #4
 810c6aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 810c6ac:	68fb      	ldr	r3, [r7, #12]
 810c6ae:	f06f 0202 	mvn.w	r2, #2
 810c6b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 810c6b4:	68fb      	ldr	r3, [r7, #12]
 810c6b6:	3b20      	subs	r3, #32
 810c6b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 810c6ba:	68fb      	ldr	r3, [r7, #12]
}
 810c6bc:	4618      	mov	r0, r3
 810c6be:	3714      	adds	r7, #20
 810c6c0:	46bd      	mov	sp, r7
 810c6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c6c6:	4770      	bx	lr
 810c6c8:	0810c6cd 	.word	0x0810c6cd

0810c6cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 810c6cc:	b480      	push	{r7}
 810c6ce:	b085      	sub	sp, #20
 810c6d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 810c6d2:	2300      	movs	r3, #0
 810c6d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 810c6d6:	4b12      	ldr	r3, [pc, #72]	; (810c720 <prvTaskExitError+0x54>)
 810c6d8:	681b      	ldr	r3, [r3, #0]
 810c6da:	f1b3 3fff 	cmp.w	r3, #4294967295
 810c6de:	d00a      	beq.n	810c6f6 <prvTaskExitError+0x2a>
	__asm volatile
 810c6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 810c6e4:	f383 8811 	msr	BASEPRI, r3
 810c6e8:	f3bf 8f6f 	isb	sy
 810c6ec:	f3bf 8f4f 	dsb	sy
 810c6f0:	60fb      	str	r3, [r7, #12]
}
 810c6f2:	bf00      	nop
 810c6f4:	e7fe      	b.n	810c6f4 <prvTaskExitError+0x28>
	__asm volatile
 810c6f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 810c6fa:	f383 8811 	msr	BASEPRI, r3
 810c6fe:	f3bf 8f6f 	isb	sy
 810c702:	f3bf 8f4f 	dsb	sy
 810c706:	60bb      	str	r3, [r7, #8]
}
 810c708:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 810c70a:	bf00      	nop
 810c70c:	687b      	ldr	r3, [r7, #4]
 810c70e:	2b00      	cmp	r3, #0
 810c710:	d0fc      	beq.n	810c70c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 810c712:	bf00      	nop
 810c714:	bf00      	nop
 810c716:	3714      	adds	r7, #20
 810c718:	46bd      	mov	sp, r7
 810c71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c71e:	4770      	bx	lr
 810c720:	10000018 	.word	0x10000018
	...

0810c730 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 810c730:	4b07      	ldr	r3, [pc, #28]	; (810c750 <pxCurrentTCBConst2>)
 810c732:	6819      	ldr	r1, [r3, #0]
 810c734:	6808      	ldr	r0, [r1, #0]
 810c736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c73a:	f380 8809 	msr	PSP, r0
 810c73e:	f3bf 8f6f 	isb	sy
 810c742:	f04f 0000 	mov.w	r0, #0
 810c746:	f380 8811 	msr	BASEPRI, r0
 810c74a:	4770      	bx	lr
 810c74c:	f3af 8000 	nop.w

0810c750 <pxCurrentTCBConst2>:
 810c750:	100221b4 	.word	0x100221b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 810c754:	bf00      	nop
 810c756:	bf00      	nop

0810c758 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 810c758:	4808      	ldr	r0, [pc, #32]	; (810c77c <prvPortStartFirstTask+0x24>)
 810c75a:	6800      	ldr	r0, [r0, #0]
 810c75c:	6800      	ldr	r0, [r0, #0]
 810c75e:	f380 8808 	msr	MSP, r0
 810c762:	f04f 0000 	mov.w	r0, #0
 810c766:	f380 8814 	msr	CONTROL, r0
 810c76a:	b662      	cpsie	i
 810c76c:	b661      	cpsie	f
 810c76e:	f3bf 8f4f 	dsb	sy
 810c772:	f3bf 8f6f 	isb	sy
 810c776:	df00      	svc	0
 810c778:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 810c77a:	bf00      	nop
 810c77c:	e000ed08 	.word	0xe000ed08

0810c780 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 810c780:	b580      	push	{r7, lr}
 810c782:	b086      	sub	sp, #24
 810c784:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 810c786:	4b46      	ldr	r3, [pc, #280]	; (810c8a0 <xPortStartScheduler+0x120>)
 810c788:	681b      	ldr	r3, [r3, #0]
 810c78a:	4a46      	ldr	r2, [pc, #280]	; (810c8a4 <xPortStartScheduler+0x124>)
 810c78c:	4293      	cmp	r3, r2
 810c78e:	d10a      	bne.n	810c7a6 <xPortStartScheduler+0x26>
	__asm volatile
 810c790:	f04f 0350 	mov.w	r3, #80	; 0x50
 810c794:	f383 8811 	msr	BASEPRI, r3
 810c798:	f3bf 8f6f 	isb	sy
 810c79c:	f3bf 8f4f 	dsb	sy
 810c7a0:	613b      	str	r3, [r7, #16]
}
 810c7a2:	bf00      	nop
 810c7a4:	e7fe      	b.n	810c7a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 810c7a6:	4b3e      	ldr	r3, [pc, #248]	; (810c8a0 <xPortStartScheduler+0x120>)
 810c7a8:	681b      	ldr	r3, [r3, #0]
 810c7aa:	4a3f      	ldr	r2, [pc, #252]	; (810c8a8 <xPortStartScheduler+0x128>)
 810c7ac:	4293      	cmp	r3, r2
 810c7ae:	d10a      	bne.n	810c7c6 <xPortStartScheduler+0x46>
	__asm volatile
 810c7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 810c7b4:	f383 8811 	msr	BASEPRI, r3
 810c7b8:	f3bf 8f6f 	isb	sy
 810c7bc:	f3bf 8f4f 	dsb	sy
 810c7c0:	60fb      	str	r3, [r7, #12]
}
 810c7c2:	bf00      	nop
 810c7c4:	e7fe      	b.n	810c7c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 810c7c6:	4b39      	ldr	r3, [pc, #228]	; (810c8ac <xPortStartScheduler+0x12c>)
 810c7c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 810c7ca:	697b      	ldr	r3, [r7, #20]
 810c7cc:	781b      	ldrb	r3, [r3, #0]
 810c7ce:	b2db      	uxtb	r3, r3
 810c7d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 810c7d2:	697b      	ldr	r3, [r7, #20]
 810c7d4:	22ff      	movs	r2, #255	; 0xff
 810c7d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 810c7d8:	697b      	ldr	r3, [r7, #20]
 810c7da:	781b      	ldrb	r3, [r3, #0]
 810c7dc:	b2db      	uxtb	r3, r3
 810c7de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 810c7e0:	78fb      	ldrb	r3, [r7, #3]
 810c7e2:	b2db      	uxtb	r3, r3
 810c7e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 810c7e8:	b2da      	uxtb	r2, r3
 810c7ea:	4b31      	ldr	r3, [pc, #196]	; (810c8b0 <xPortStartScheduler+0x130>)
 810c7ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 810c7ee:	4b31      	ldr	r3, [pc, #196]	; (810c8b4 <xPortStartScheduler+0x134>)
 810c7f0:	2207      	movs	r2, #7
 810c7f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810c7f4:	e009      	b.n	810c80a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 810c7f6:	4b2f      	ldr	r3, [pc, #188]	; (810c8b4 <xPortStartScheduler+0x134>)
 810c7f8:	681b      	ldr	r3, [r3, #0]
 810c7fa:	3b01      	subs	r3, #1
 810c7fc:	4a2d      	ldr	r2, [pc, #180]	; (810c8b4 <xPortStartScheduler+0x134>)
 810c7fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 810c800:	78fb      	ldrb	r3, [r7, #3]
 810c802:	b2db      	uxtb	r3, r3
 810c804:	005b      	lsls	r3, r3, #1
 810c806:	b2db      	uxtb	r3, r3
 810c808:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810c80a:	78fb      	ldrb	r3, [r7, #3]
 810c80c:	b2db      	uxtb	r3, r3
 810c80e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810c812:	2b80      	cmp	r3, #128	; 0x80
 810c814:	d0ef      	beq.n	810c7f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 810c816:	4b27      	ldr	r3, [pc, #156]	; (810c8b4 <xPortStartScheduler+0x134>)
 810c818:	681b      	ldr	r3, [r3, #0]
 810c81a:	f1c3 0307 	rsb	r3, r3, #7
 810c81e:	2b04      	cmp	r3, #4
 810c820:	d00a      	beq.n	810c838 <xPortStartScheduler+0xb8>
	__asm volatile
 810c822:	f04f 0350 	mov.w	r3, #80	; 0x50
 810c826:	f383 8811 	msr	BASEPRI, r3
 810c82a:	f3bf 8f6f 	isb	sy
 810c82e:	f3bf 8f4f 	dsb	sy
 810c832:	60bb      	str	r3, [r7, #8]
}
 810c834:	bf00      	nop
 810c836:	e7fe      	b.n	810c836 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 810c838:	4b1e      	ldr	r3, [pc, #120]	; (810c8b4 <xPortStartScheduler+0x134>)
 810c83a:	681b      	ldr	r3, [r3, #0]
 810c83c:	021b      	lsls	r3, r3, #8
 810c83e:	4a1d      	ldr	r2, [pc, #116]	; (810c8b4 <xPortStartScheduler+0x134>)
 810c840:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 810c842:	4b1c      	ldr	r3, [pc, #112]	; (810c8b4 <xPortStartScheduler+0x134>)
 810c844:	681b      	ldr	r3, [r3, #0]
 810c846:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 810c84a:	4a1a      	ldr	r2, [pc, #104]	; (810c8b4 <xPortStartScheduler+0x134>)
 810c84c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 810c84e:	687b      	ldr	r3, [r7, #4]
 810c850:	b2da      	uxtb	r2, r3
 810c852:	697b      	ldr	r3, [r7, #20]
 810c854:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 810c856:	4b18      	ldr	r3, [pc, #96]	; (810c8b8 <xPortStartScheduler+0x138>)
 810c858:	681b      	ldr	r3, [r3, #0]
 810c85a:	4a17      	ldr	r2, [pc, #92]	; (810c8b8 <xPortStartScheduler+0x138>)
 810c85c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 810c860:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 810c862:	4b15      	ldr	r3, [pc, #84]	; (810c8b8 <xPortStartScheduler+0x138>)
 810c864:	681b      	ldr	r3, [r3, #0]
 810c866:	4a14      	ldr	r2, [pc, #80]	; (810c8b8 <xPortStartScheduler+0x138>)
 810c868:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 810c86c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 810c86e:	f000 f8dd 	bl	810ca2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 810c872:	4b12      	ldr	r3, [pc, #72]	; (810c8bc <xPortStartScheduler+0x13c>)
 810c874:	2200      	movs	r2, #0
 810c876:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 810c878:	f000 f8fc 	bl	810ca74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 810c87c:	4b10      	ldr	r3, [pc, #64]	; (810c8c0 <xPortStartScheduler+0x140>)
 810c87e:	681b      	ldr	r3, [r3, #0]
 810c880:	4a0f      	ldr	r2, [pc, #60]	; (810c8c0 <xPortStartScheduler+0x140>)
 810c882:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 810c886:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 810c888:	f7ff ff66 	bl	810c758 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 810c88c:	f001 fcd6 	bl	810e23c <vTaskSwitchContext>
	prvTaskExitError();
 810c890:	f7ff ff1c 	bl	810c6cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 810c894:	2300      	movs	r3, #0
}
 810c896:	4618      	mov	r0, r3
 810c898:	3718      	adds	r7, #24
 810c89a:	46bd      	mov	sp, r7
 810c89c:	bd80      	pop	{r7, pc}
 810c89e:	bf00      	nop
 810c8a0:	e000ed00 	.word	0xe000ed00
 810c8a4:	410fc271 	.word	0x410fc271
 810c8a8:	410fc270 	.word	0x410fc270
 810c8ac:	e000e400 	.word	0xe000e400
 810c8b0:	100221ac 	.word	0x100221ac
 810c8b4:	100221b0 	.word	0x100221b0
 810c8b8:	e000ed20 	.word	0xe000ed20
 810c8bc:	10000018 	.word	0x10000018
 810c8c0:	e000ef34 	.word	0xe000ef34

0810c8c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 810c8c4:	b480      	push	{r7}
 810c8c6:	b083      	sub	sp, #12
 810c8c8:	af00      	add	r7, sp, #0
	__asm volatile
 810c8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 810c8ce:	f383 8811 	msr	BASEPRI, r3
 810c8d2:	f3bf 8f6f 	isb	sy
 810c8d6:	f3bf 8f4f 	dsb	sy
 810c8da:	607b      	str	r3, [r7, #4]
}
 810c8dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 810c8de:	4b0f      	ldr	r3, [pc, #60]	; (810c91c <vPortEnterCritical+0x58>)
 810c8e0:	681b      	ldr	r3, [r3, #0]
 810c8e2:	3301      	adds	r3, #1
 810c8e4:	4a0d      	ldr	r2, [pc, #52]	; (810c91c <vPortEnterCritical+0x58>)
 810c8e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 810c8e8:	4b0c      	ldr	r3, [pc, #48]	; (810c91c <vPortEnterCritical+0x58>)
 810c8ea:	681b      	ldr	r3, [r3, #0]
 810c8ec:	2b01      	cmp	r3, #1
 810c8ee:	d10f      	bne.n	810c910 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 810c8f0:	4b0b      	ldr	r3, [pc, #44]	; (810c920 <vPortEnterCritical+0x5c>)
 810c8f2:	681b      	ldr	r3, [r3, #0]
 810c8f4:	b2db      	uxtb	r3, r3
 810c8f6:	2b00      	cmp	r3, #0
 810c8f8:	d00a      	beq.n	810c910 <vPortEnterCritical+0x4c>
	__asm volatile
 810c8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 810c8fe:	f383 8811 	msr	BASEPRI, r3
 810c902:	f3bf 8f6f 	isb	sy
 810c906:	f3bf 8f4f 	dsb	sy
 810c90a:	603b      	str	r3, [r7, #0]
}
 810c90c:	bf00      	nop
 810c90e:	e7fe      	b.n	810c90e <vPortEnterCritical+0x4a>
	}
}
 810c910:	bf00      	nop
 810c912:	370c      	adds	r7, #12
 810c914:	46bd      	mov	sp, r7
 810c916:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c91a:	4770      	bx	lr
 810c91c:	10000018 	.word	0x10000018
 810c920:	e000ed04 	.word	0xe000ed04

0810c924 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 810c924:	b480      	push	{r7}
 810c926:	b083      	sub	sp, #12
 810c928:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 810c92a:	4b12      	ldr	r3, [pc, #72]	; (810c974 <vPortExitCritical+0x50>)
 810c92c:	681b      	ldr	r3, [r3, #0]
 810c92e:	2b00      	cmp	r3, #0
 810c930:	d10a      	bne.n	810c948 <vPortExitCritical+0x24>
	__asm volatile
 810c932:	f04f 0350 	mov.w	r3, #80	; 0x50
 810c936:	f383 8811 	msr	BASEPRI, r3
 810c93a:	f3bf 8f6f 	isb	sy
 810c93e:	f3bf 8f4f 	dsb	sy
 810c942:	607b      	str	r3, [r7, #4]
}
 810c944:	bf00      	nop
 810c946:	e7fe      	b.n	810c946 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 810c948:	4b0a      	ldr	r3, [pc, #40]	; (810c974 <vPortExitCritical+0x50>)
 810c94a:	681b      	ldr	r3, [r3, #0]
 810c94c:	3b01      	subs	r3, #1
 810c94e:	4a09      	ldr	r2, [pc, #36]	; (810c974 <vPortExitCritical+0x50>)
 810c950:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 810c952:	4b08      	ldr	r3, [pc, #32]	; (810c974 <vPortExitCritical+0x50>)
 810c954:	681b      	ldr	r3, [r3, #0]
 810c956:	2b00      	cmp	r3, #0
 810c958:	d105      	bne.n	810c966 <vPortExitCritical+0x42>
 810c95a:	2300      	movs	r3, #0
 810c95c:	603b      	str	r3, [r7, #0]
	__asm volatile
 810c95e:	683b      	ldr	r3, [r7, #0]
 810c960:	f383 8811 	msr	BASEPRI, r3
}
 810c964:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 810c966:	bf00      	nop
 810c968:	370c      	adds	r7, #12
 810c96a:	46bd      	mov	sp, r7
 810c96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c970:	4770      	bx	lr
 810c972:	bf00      	nop
 810c974:	10000018 	.word	0x10000018
	...

0810c980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 810c980:	f3ef 8009 	mrs	r0, PSP
 810c984:	f3bf 8f6f 	isb	sy
 810c988:	4b15      	ldr	r3, [pc, #84]	; (810c9e0 <pxCurrentTCBConst>)
 810c98a:	681a      	ldr	r2, [r3, #0]
 810c98c:	f01e 0f10 	tst.w	lr, #16
 810c990:	bf08      	it	eq
 810c992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 810c996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c99a:	6010      	str	r0, [r2, #0]
 810c99c:	e92d 0009 	stmdb	sp!, {r0, r3}
 810c9a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 810c9a4:	f380 8811 	msr	BASEPRI, r0
 810c9a8:	f3bf 8f4f 	dsb	sy
 810c9ac:	f3bf 8f6f 	isb	sy
 810c9b0:	f001 fc44 	bl	810e23c <vTaskSwitchContext>
 810c9b4:	f04f 0000 	mov.w	r0, #0
 810c9b8:	f380 8811 	msr	BASEPRI, r0
 810c9bc:	bc09      	pop	{r0, r3}
 810c9be:	6819      	ldr	r1, [r3, #0]
 810c9c0:	6808      	ldr	r0, [r1, #0]
 810c9c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c9c6:	f01e 0f10 	tst.w	lr, #16
 810c9ca:	bf08      	it	eq
 810c9cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 810c9d0:	f380 8809 	msr	PSP, r0
 810c9d4:	f3bf 8f6f 	isb	sy
 810c9d8:	4770      	bx	lr
 810c9da:	bf00      	nop
 810c9dc:	f3af 8000 	nop.w

0810c9e0 <pxCurrentTCBConst>:
 810c9e0:	100221b4 	.word	0x100221b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 810c9e4:	bf00      	nop
 810c9e6:	bf00      	nop

0810c9e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 810c9e8:	b580      	push	{r7, lr}
 810c9ea:	b082      	sub	sp, #8
 810c9ec:	af00      	add	r7, sp, #0
	__asm volatile
 810c9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 810c9f2:	f383 8811 	msr	BASEPRI, r3
 810c9f6:	f3bf 8f6f 	isb	sy
 810c9fa:	f3bf 8f4f 	dsb	sy
 810c9fe:	607b      	str	r3, [r7, #4]
}
 810ca00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 810ca02:	f001 fb61 	bl	810e0c8 <xTaskIncrementTick>
 810ca06:	4603      	mov	r3, r0
 810ca08:	2b00      	cmp	r3, #0
 810ca0a:	d003      	beq.n	810ca14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 810ca0c:	4b06      	ldr	r3, [pc, #24]	; (810ca28 <xPortSysTickHandler+0x40>)
 810ca0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810ca12:	601a      	str	r2, [r3, #0]
 810ca14:	2300      	movs	r3, #0
 810ca16:	603b      	str	r3, [r7, #0]
	__asm volatile
 810ca18:	683b      	ldr	r3, [r7, #0]
 810ca1a:	f383 8811 	msr	BASEPRI, r3
}
 810ca1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 810ca20:	bf00      	nop
 810ca22:	3708      	adds	r7, #8
 810ca24:	46bd      	mov	sp, r7
 810ca26:	bd80      	pop	{r7, pc}
 810ca28:	e000ed04 	.word	0xe000ed04

0810ca2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 810ca2c:	b480      	push	{r7}
 810ca2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 810ca30:	4b0b      	ldr	r3, [pc, #44]	; (810ca60 <vPortSetupTimerInterrupt+0x34>)
 810ca32:	2200      	movs	r2, #0
 810ca34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 810ca36:	4b0b      	ldr	r3, [pc, #44]	; (810ca64 <vPortSetupTimerInterrupt+0x38>)
 810ca38:	2200      	movs	r2, #0
 810ca3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 810ca3c:	4b0a      	ldr	r3, [pc, #40]	; (810ca68 <vPortSetupTimerInterrupt+0x3c>)
 810ca3e:	681b      	ldr	r3, [r3, #0]
 810ca40:	4a0a      	ldr	r2, [pc, #40]	; (810ca6c <vPortSetupTimerInterrupt+0x40>)
 810ca42:	fba2 2303 	umull	r2, r3, r2, r3
 810ca46:	099b      	lsrs	r3, r3, #6
 810ca48:	4a09      	ldr	r2, [pc, #36]	; (810ca70 <vPortSetupTimerInterrupt+0x44>)
 810ca4a:	3b01      	subs	r3, #1
 810ca4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 810ca4e:	4b04      	ldr	r3, [pc, #16]	; (810ca60 <vPortSetupTimerInterrupt+0x34>)
 810ca50:	2207      	movs	r2, #7
 810ca52:	601a      	str	r2, [r3, #0]
}
 810ca54:	bf00      	nop
 810ca56:	46bd      	mov	sp, r7
 810ca58:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ca5c:	4770      	bx	lr
 810ca5e:	bf00      	nop
 810ca60:	e000e010 	.word	0xe000e010
 810ca64:	e000e018 	.word	0xe000e018
 810ca68:	10000004 	.word	0x10000004
 810ca6c:	10624dd3 	.word	0x10624dd3
 810ca70:	e000e014 	.word	0xe000e014

0810ca74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 810ca74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 810ca84 <vPortEnableVFP+0x10>
 810ca78:	6801      	ldr	r1, [r0, #0]
 810ca7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810ca7e:	6001      	str	r1, [r0, #0]
 810ca80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 810ca82:	bf00      	nop
 810ca84:	e000ed88 	.word	0xe000ed88

0810ca88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 810ca88:	b480      	push	{r7}
 810ca8a:	b085      	sub	sp, #20
 810ca8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 810ca8e:	f3ef 8305 	mrs	r3, IPSR
 810ca92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 810ca94:	68fb      	ldr	r3, [r7, #12]
 810ca96:	2b0f      	cmp	r3, #15
 810ca98:	d914      	bls.n	810cac4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 810ca9a:	4a17      	ldr	r2, [pc, #92]	; (810caf8 <vPortValidateInterruptPriority+0x70>)
 810ca9c:	68fb      	ldr	r3, [r7, #12]
 810ca9e:	4413      	add	r3, r2
 810caa0:	781b      	ldrb	r3, [r3, #0]
 810caa2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 810caa4:	4b15      	ldr	r3, [pc, #84]	; (810cafc <vPortValidateInterruptPriority+0x74>)
 810caa6:	781b      	ldrb	r3, [r3, #0]
 810caa8:	7afa      	ldrb	r2, [r7, #11]
 810caaa:	429a      	cmp	r2, r3
 810caac:	d20a      	bcs.n	810cac4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 810caae:	f04f 0350 	mov.w	r3, #80	; 0x50
 810cab2:	f383 8811 	msr	BASEPRI, r3
 810cab6:	f3bf 8f6f 	isb	sy
 810caba:	f3bf 8f4f 	dsb	sy
 810cabe:	607b      	str	r3, [r7, #4]
}
 810cac0:	bf00      	nop
 810cac2:	e7fe      	b.n	810cac2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 810cac4:	4b0e      	ldr	r3, [pc, #56]	; (810cb00 <vPortValidateInterruptPriority+0x78>)
 810cac6:	681b      	ldr	r3, [r3, #0]
 810cac8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 810cacc:	4b0d      	ldr	r3, [pc, #52]	; (810cb04 <vPortValidateInterruptPriority+0x7c>)
 810cace:	681b      	ldr	r3, [r3, #0]
 810cad0:	429a      	cmp	r2, r3
 810cad2:	d90a      	bls.n	810caea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 810cad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 810cad8:	f383 8811 	msr	BASEPRI, r3
 810cadc:	f3bf 8f6f 	isb	sy
 810cae0:	f3bf 8f4f 	dsb	sy
 810cae4:	603b      	str	r3, [r7, #0]
}
 810cae6:	bf00      	nop
 810cae8:	e7fe      	b.n	810cae8 <vPortValidateInterruptPriority+0x60>
	}
 810caea:	bf00      	nop
 810caec:	3714      	adds	r7, #20
 810caee:	46bd      	mov	sp, r7
 810caf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810caf4:	4770      	bx	lr
 810caf6:	bf00      	nop
 810caf8:	e000e3f0 	.word	0xe000e3f0
 810cafc:	100221ac 	.word	0x100221ac
 810cb00:	e000ed0c 	.word	0xe000ed0c
 810cb04:	100221b0 	.word	0x100221b0

0810cb08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 810cb08:	b580      	push	{r7, lr}
 810cb0a:	b084      	sub	sp, #16
 810cb0c:	af00      	add	r7, sp, #0
 810cb0e:	6078      	str	r0, [r7, #4]
 810cb10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 810cb12:	687b      	ldr	r3, [r7, #4]
 810cb14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 810cb16:	68fb      	ldr	r3, [r7, #12]
 810cb18:	2b00      	cmp	r3, #0
 810cb1a:	d10a      	bne.n	810cb32 <xQueueGenericReset+0x2a>
	__asm volatile
 810cb1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810cb20:	f383 8811 	msr	BASEPRI, r3
 810cb24:	f3bf 8f6f 	isb	sy
 810cb28:	f3bf 8f4f 	dsb	sy
 810cb2c:	60bb      	str	r3, [r7, #8]
}
 810cb2e:	bf00      	nop
 810cb30:	e7fe      	b.n	810cb30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 810cb32:	f7ff fec7 	bl	810c8c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810cb36:	68fb      	ldr	r3, [r7, #12]
 810cb38:	681a      	ldr	r2, [r3, #0]
 810cb3a:	68fb      	ldr	r3, [r7, #12]
 810cb3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810cb3e:	68f9      	ldr	r1, [r7, #12]
 810cb40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 810cb42:	fb01 f303 	mul.w	r3, r1, r3
 810cb46:	441a      	add	r2, r3
 810cb48:	68fb      	ldr	r3, [r7, #12]
 810cb4a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 810cb4c:	68fb      	ldr	r3, [r7, #12]
 810cb4e:	2200      	movs	r2, #0
 810cb50:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 810cb52:	68fb      	ldr	r3, [r7, #12]
 810cb54:	681a      	ldr	r2, [r3, #0]
 810cb56:	68fb      	ldr	r3, [r7, #12]
 810cb58:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810cb5a:	68fb      	ldr	r3, [r7, #12]
 810cb5c:	681a      	ldr	r2, [r3, #0]
 810cb5e:	68fb      	ldr	r3, [r7, #12]
 810cb60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810cb62:	3b01      	subs	r3, #1
 810cb64:	68f9      	ldr	r1, [r7, #12]
 810cb66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 810cb68:	fb01 f303 	mul.w	r3, r1, r3
 810cb6c:	441a      	add	r2, r3
 810cb6e:	68fb      	ldr	r3, [r7, #12]
 810cb70:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 810cb72:	68fb      	ldr	r3, [r7, #12]
 810cb74:	22ff      	movs	r2, #255	; 0xff
 810cb76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 810cb7a:	68fb      	ldr	r3, [r7, #12]
 810cb7c:	22ff      	movs	r2, #255	; 0xff
 810cb7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 810cb82:	683b      	ldr	r3, [r7, #0]
 810cb84:	2b00      	cmp	r3, #0
 810cb86:	d114      	bne.n	810cbb2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810cb88:	68fb      	ldr	r3, [r7, #12]
 810cb8a:	691b      	ldr	r3, [r3, #16]
 810cb8c:	2b00      	cmp	r3, #0
 810cb8e:	d01a      	beq.n	810cbc6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810cb90:	68fb      	ldr	r3, [r7, #12]
 810cb92:	3310      	adds	r3, #16
 810cb94:	4618      	mov	r0, r3
 810cb96:	f001 fc05 	bl	810e3a4 <xTaskRemoveFromEventList>
 810cb9a:	4603      	mov	r3, r0
 810cb9c:	2b00      	cmp	r3, #0
 810cb9e:	d012      	beq.n	810cbc6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 810cba0:	4b0c      	ldr	r3, [pc, #48]	; (810cbd4 <xQueueGenericReset+0xcc>)
 810cba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810cba6:	601a      	str	r2, [r3, #0]
 810cba8:	f3bf 8f4f 	dsb	sy
 810cbac:	f3bf 8f6f 	isb	sy
 810cbb0:	e009      	b.n	810cbc6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 810cbb2:	68fb      	ldr	r3, [r7, #12]
 810cbb4:	3310      	adds	r3, #16
 810cbb6:	4618      	mov	r0, r3
 810cbb8:	f7ff fca0 	bl	810c4fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 810cbbc:	68fb      	ldr	r3, [r7, #12]
 810cbbe:	3324      	adds	r3, #36	; 0x24
 810cbc0:	4618      	mov	r0, r3
 810cbc2:	f7ff fc9b 	bl	810c4fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 810cbc6:	f7ff fead 	bl	810c924 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 810cbca:	2301      	movs	r3, #1
}
 810cbcc:	4618      	mov	r0, r3
 810cbce:	3710      	adds	r7, #16
 810cbd0:	46bd      	mov	sp, r7
 810cbd2:	bd80      	pop	{r7, pc}
 810cbd4:	e000ed04 	.word	0xe000ed04

0810cbd8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 810cbd8:	b580      	push	{r7, lr}
 810cbda:	b08e      	sub	sp, #56	; 0x38
 810cbdc:	af02      	add	r7, sp, #8
 810cbde:	60f8      	str	r0, [r7, #12]
 810cbe0:	60b9      	str	r1, [r7, #8]
 810cbe2:	607a      	str	r2, [r7, #4]
 810cbe4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 810cbe6:	68fb      	ldr	r3, [r7, #12]
 810cbe8:	2b00      	cmp	r3, #0
 810cbea:	d10a      	bne.n	810cc02 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 810cbec:	f04f 0350 	mov.w	r3, #80	; 0x50
 810cbf0:	f383 8811 	msr	BASEPRI, r3
 810cbf4:	f3bf 8f6f 	isb	sy
 810cbf8:	f3bf 8f4f 	dsb	sy
 810cbfc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 810cbfe:	bf00      	nop
 810cc00:	e7fe      	b.n	810cc00 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 810cc02:	683b      	ldr	r3, [r7, #0]
 810cc04:	2b00      	cmp	r3, #0
 810cc06:	d10a      	bne.n	810cc1e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 810cc08:	f04f 0350 	mov.w	r3, #80	; 0x50
 810cc0c:	f383 8811 	msr	BASEPRI, r3
 810cc10:	f3bf 8f6f 	isb	sy
 810cc14:	f3bf 8f4f 	dsb	sy
 810cc18:	627b      	str	r3, [r7, #36]	; 0x24
}
 810cc1a:	bf00      	nop
 810cc1c:	e7fe      	b.n	810cc1c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 810cc1e:	687b      	ldr	r3, [r7, #4]
 810cc20:	2b00      	cmp	r3, #0
 810cc22:	d002      	beq.n	810cc2a <xQueueGenericCreateStatic+0x52>
 810cc24:	68bb      	ldr	r3, [r7, #8]
 810cc26:	2b00      	cmp	r3, #0
 810cc28:	d001      	beq.n	810cc2e <xQueueGenericCreateStatic+0x56>
 810cc2a:	2301      	movs	r3, #1
 810cc2c:	e000      	b.n	810cc30 <xQueueGenericCreateStatic+0x58>
 810cc2e:	2300      	movs	r3, #0
 810cc30:	2b00      	cmp	r3, #0
 810cc32:	d10a      	bne.n	810cc4a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 810cc34:	f04f 0350 	mov.w	r3, #80	; 0x50
 810cc38:	f383 8811 	msr	BASEPRI, r3
 810cc3c:	f3bf 8f6f 	isb	sy
 810cc40:	f3bf 8f4f 	dsb	sy
 810cc44:	623b      	str	r3, [r7, #32]
}
 810cc46:	bf00      	nop
 810cc48:	e7fe      	b.n	810cc48 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 810cc4a:	687b      	ldr	r3, [r7, #4]
 810cc4c:	2b00      	cmp	r3, #0
 810cc4e:	d102      	bne.n	810cc56 <xQueueGenericCreateStatic+0x7e>
 810cc50:	68bb      	ldr	r3, [r7, #8]
 810cc52:	2b00      	cmp	r3, #0
 810cc54:	d101      	bne.n	810cc5a <xQueueGenericCreateStatic+0x82>
 810cc56:	2301      	movs	r3, #1
 810cc58:	e000      	b.n	810cc5c <xQueueGenericCreateStatic+0x84>
 810cc5a:	2300      	movs	r3, #0
 810cc5c:	2b00      	cmp	r3, #0
 810cc5e:	d10a      	bne.n	810cc76 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 810cc60:	f04f 0350 	mov.w	r3, #80	; 0x50
 810cc64:	f383 8811 	msr	BASEPRI, r3
 810cc68:	f3bf 8f6f 	isb	sy
 810cc6c:	f3bf 8f4f 	dsb	sy
 810cc70:	61fb      	str	r3, [r7, #28]
}
 810cc72:	bf00      	nop
 810cc74:	e7fe      	b.n	810cc74 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 810cc76:	2350      	movs	r3, #80	; 0x50
 810cc78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 810cc7a:	697b      	ldr	r3, [r7, #20]
 810cc7c:	2b50      	cmp	r3, #80	; 0x50
 810cc7e:	d00a      	beq.n	810cc96 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 810cc80:	f04f 0350 	mov.w	r3, #80	; 0x50
 810cc84:	f383 8811 	msr	BASEPRI, r3
 810cc88:	f3bf 8f6f 	isb	sy
 810cc8c:	f3bf 8f4f 	dsb	sy
 810cc90:	61bb      	str	r3, [r7, #24]
}
 810cc92:	bf00      	nop
 810cc94:	e7fe      	b.n	810cc94 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 810cc96:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810cc98:	683b      	ldr	r3, [r7, #0]
 810cc9a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 810cc9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810cc9e:	2b00      	cmp	r3, #0
 810cca0:	d00d      	beq.n	810ccbe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 810cca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810cca4:	2201      	movs	r2, #1
 810cca6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 810ccaa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 810ccae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810ccb0:	9300      	str	r3, [sp, #0]
 810ccb2:	4613      	mov	r3, r2
 810ccb4:	687a      	ldr	r2, [r7, #4]
 810ccb6:	68b9      	ldr	r1, [r7, #8]
 810ccb8:	68f8      	ldr	r0, [r7, #12]
 810ccba:	f000 f83f 	bl	810cd3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 810ccbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 810ccc0:	4618      	mov	r0, r3
 810ccc2:	3730      	adds	r7, #48	; 0x30
 810ccc4:	46bd      	mov	sp, r7
 810ccc6:	bd80      	pop	{r7, pc}

0810ccc8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 810ccc8:	b580      	push	{r7, lr}
 810ccca:	b08a      	sub	sp, #40	; 0x28
 810cccc:	af02      	add	r7, sp, #8
 810ccce:	60f8      	str	r0, [r7, #12]
 810ccd0:	60b9      	str	r1, [r7, #8]
 810ccd2:	4613      	mov	r3, r2
 810ccd4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 810ccd6:	68fb      	ldr	r3, [r7, #12]
 810ccd8:	2b00      	cmp	r3, #0
 810ccda:	d10a      	bne.n	810ccf2 <xQueueGenericCreate+0x2a>
	__asm volatile
 810ccdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 810cce0:	f383 8811 	msr	BASEPRI, r3
 810cce4:	f3bf 8f6f 	isb	sy
 810cce8:	f3bf 8f4f 	dsb	sy
 810ccec:	613b      	str	r3, [r7, #16]
}
 810ccee:	bf00      	nop
 810ccf0:	e7fe      	b.n	810ccf0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810ccf2:	68fb      	ldr	r3, [r7, #12]
 810ccf4:	68ba      	ldr	r2, [r7, #8]
 810ccf6:	fb02 f303 	mul.w	r3, r2, r3
 810ccfa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 810ccfc:	69fb      	ldr	r3, [r7, #28]
 810ccfe:	3350      	adds	r3, #80	; 0x50
 810cd00:	4618      	mov	r0, r3
 810cd02:	f7ff fa11 	bl	810c128 <pvPortMalloc>
 810cd06:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 810cd08:	69bb      	ldr	r3, [r7, #24]
 810cd0a:	2b00      	cmp	r3, #0
 810cd0c:	d011      	beq.n	810cd32 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 810cd0e:	69bb      	ldr	r3, [r7, #24]
 810cd10:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810cd12:	697b      	ldr	r3, [r7, #20]
 810cd14:	3350      	adds	r3, #80	; 0x50
 810cd16:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 810cd18:	69bb      	ldr	r3, [r7, #24]
 810cd1a:	2200      	movs	r2, #0
 810cd1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 810cd20:	79fa      	ldrb	r2, [r7, #7]
 810cd22:	69bb      	ldr	r3, [r7, #24]
 810cd24:	9300      	str	r3, [sp, #0]
 810cd26:	4613      	mov	r3, r2
 810cd28:	697a      	ldr	r2, [r7, #20]
 810cd2a:	68b9      	ldr	r1, [r7, #8]
 810cd2c:	68f8      	ldr	r0, [r7, #12]
 810cd2e:	f000 f805 	bl	810cd3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 810cd32:	69bb      	ldr	r3, [r7, #24]
	}
 810cd34:	4618      	mov	r0, r3
 810cd36:	3720      	adds	r7, #32
 810cd38:	46bd      	mov	sp, r7
 810cd3a:	bd80      	pop	{r7, pc}

0810cd3c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 810cd3c:	b580      	push	{r7, lr}
 810cd3e:	b084      	sub	sp, #16
 810cd40:	af00      	add	r7, sp, #0
 810cd42:	60f8      	str	r0, [r7, #12]
 810cd44:	60b9      	str	r1, [r7, #8]
 810cd46:	607a      	str	r2, [r7, #4]
 810cd48:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 810cd4a:	68bb      	ldr	r3, [r7, #8]
 810cd4c:	2b00      	cmp	r3, #0
 810cd4e:	d103      	bne.n	810cd58 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 810cd50:	69bb      	ldr	r3, [r7, #24]
 810cd52:	69ba      	ldr	r2, [r7, #24]
 810cd54:	601a      	str	r2, [r3, #0]
 810cd56:	e002      	b.n	810cd5e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 810cd58:	69bb      	ldr	r3, [r7, #24]
 810cd5a:	687a      	ldr	r2, [r7, #4]
 810cd5c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 810cd5e:	69bb      	ldr	r3, [r7, #24]
 810cd60:	68fa      	ldr	r2, [r7, #12]
 810cd62:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 810cd64:	69bb      	ldr	r3, [r7, #24]
 810cd66:	68ba      	ldr	r2, [r7, #8]
 810cd68:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 810cd6a:	2101      	movs	r1, #1
 810cd6c:	69b8      	ldr	r0, [r7, #24]
 810cd6e:	f7ff fecb 	bl	810cb08 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 810cd72:	69bb      	ldr	r3, [r7, #24]
 810cd74:	78fa      	ldrb	r2, [r7, #3]
 810cd76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 810cd7a:	bf00      	nop
 810cd7c:	3710      	adds	r7, #16
 810cd7e:	46bd      	mov	sp, r7
 810cd80:	bd80      	pop	{r7, pc}

0810cd82 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 810cd82:	b580      	push	{r7, lr}
 810cd84:	b08a      	sub	sp, #40	; 0x28
 810cd86:	af02      	add	r7, sp, #8
 810cd88:	60f8      	str	r0, [r7, #12]
 810cd8a:	60b9      	str	r1, [r7, #8]
 810cd8c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 810cd8e:	68fb      	ldr	r3, [r7, #12]
 810cd90:	2b00      	cmp	r3, #0
 810cd92:	d10a      	bne.n	810cdaa <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 810cd94:	f04f 0350 	mov.w	r3, #80	; 0x50
 810cd98:	f383 8811 	msr	BASEPRI, r3
 810cd9c:	f3bf 8f6f 	isb	sy
 810cda0:	f3bf 8f4f 	dsb	sy
 810cda4:	61bb      	str	r3, [r7, #24]
}
 810cda6:	bf00      	nop
 810cda8:	e7fe      	b.n	810cda8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 810cdaa:	68ba      	ldr	r2, [r7, #8]
 810cdac:	68fb      	ldr	r3, [r7, #12]
 810cdae:	429a      	cmp	r2, r3
 810cdb0:	d90a      	bls.n	810cdc8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 810cdb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 810cdb6:	f383 8811 	msr	BASEPRI, r3
 810cdba:	f3bf 8f6f 	isb	sy
 810cdbe:	f3bf 8f4f 	dsb	sy
 810cdc2:	617b      	str	r3, [r7, #20]
}
 810cdc4:	bf00      	nop
 810cdc6:	e7fe      	b.n	810cdc6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 810cdc8:	2302      	movs	r3, #2
 810cdca:	9300      	str	r3, [sp, #0]
 810cdcc:	687b      	ldr	r3, [r7, #4]
 810cdce:	2200      	movs	r2, #0
 810cdd0:	2100      	movs	r1, #0
 810cdd2:	68f8      	ldr	r0, [r7, #12]
 810cdd4:	f7ff ff00 	bl	810cbd8 <xQueueGenericCreateStatic>
 810cdd8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 810cdda:	69fb      	ldr	r3, [r7, #28]
 810cddc:	2b00      	cmp	r3, #0
 810cdde:	d002      	beq.n	810cde6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 810cde0:	69fb      	ldr	r3, [r7, #28]
 810cde2:	68ba      	ldr	r2, [r7, #8]
 810cde4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 810cde6:	69fb      	ldr	r3, [r7, #28]
	}
 810cde8:	4618      	mov	r0, r3
 810cdea:	3720      	adds	r7, #32
 810cdec:	46bd      	mov	sp, r7
 810cdee:	bd80      	pop	{r7, pc}

0810cdf0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 810cdf0:	b580      	push	{r7, lr}
 810cdf2:	b08e      	sub	sp, #56	; 0x38
 810cdf4:	af00      	add	r7, sp, #0
 810cdf6:	60f8      	str	r0, [r7, #12]
 810cdf8:	60b9      	str	r1, [r7, #8]
 810cdfa:	607a      	str	r2, [r7, #4]
 810cdfc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 810cdfe:	2300      	movs	r3, #0
 810ce00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810ce02:	68fb      	ldr	r3, [r7, #12]
 810ce04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 810ce06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ce08:	2b00      	cmp	r3, #0
 810ce0a:	d10a      	bne.n	810ce22 <xQueueGenericSend+0x32>
	__asm volatile
 810ce0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ce10:	f383 8811 	msr	BASEPRI, r3
 810ce14:	f3bf 8f6f 	isb	sy
 810ce18:	f3bf 8f4f 	dsb	sy
 810ce1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 810ce1e:	bf00      	nop
 810ce20:	e7fe      	b.n	810ce20 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810ce22:	68bb      	ldr	r3, [r7, #8]
 810ce24:	2b00      	cmp	r3, #0
 810ce26:	d103      	bne.n	810ce30 <xQueueGenericSend+0x40>
 810ce28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ce2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810ce2c:	2b00      	cmp	r3, #0
 810ce2e:	d101      	bne.n	810ce34 <xQueueGenericSend+0x44>
 810ce30:	2301      	movs	r3, #1
 810ce32:	e000      	b.n	810ce36 <xQueueGenericSend+0x46>
 810ce34:	2300      	movs	r3, #0
 810ce36:	2b00      	cmp	r3, #0
 810ce38:	d10a      	bne.n	810ce50 <xQueueGenericSend+0x60>
	__asm volatile
 810ce3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ce3e:	f383 8811 	msr	BASEPRI, r3
 810ce42:	f3bf 8f6f 	isb	sy
 810ce46:	f3bf 8f4f 	dsb	sy
 810ce4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 810ce4c:	bf00      	nop
 810ce4e:	e7fe      	b.n	810ce4e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 810ce50:	683b      	ldr	r3, [r7, #0]
 810ce52:	2b02      	cmp	r3, #2
 810ce54:	d103      	bne.n	810ce5e <xQueueGenericSend+0x6e>
 810ce56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ce58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810ce5a:	2b01      	cmp	r3, #1
 810ce5c:	d101      	bne.n	810ce62 <xQueueGenericSend+0x72>
 810ce5e:	2301      	movs	r3, #1
 810ce60:	e000      	b.n	810ce64 <xQueueGenericSend+0x74>
 810ce62:	2300      	movs	r3, #0
 810ce64:	2b00      	cmp	r3, #0
 810ce66:	d10a      	bne.n	810ce7e <xQueueGenericSend+0x8e>
	__asm volatile
 810ce68:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ce6c:	f383 8811 	msr	BASEPRI, r3
 810ce70:	f3bf 8f6f 	isb	sy
 810ce74:	f3bf 8f4f 	dsb	sy
 810ce78:	623b      	str	r3, [r7, #32]
}
 810ce7a:	bf00      	nop
 810ce7c:	e7fe      	b.n	810ce7c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810ce7e:	f001 fc53 	bl	810e728 <xTaskGetSchedulerState>
 810ce82:	4603      	mov	r3, r0
 810ce84:	2b00      	cmp	r3, #0
 810ce86:	d102      	bne.n	810ce8e <xQueueGenericSend+0x9e>
 810ce88:	687b      	ldr	r3, [r7, #4]
 810ce8a:	2b00      	cmp	r3, #0
 810ce8c:	d101      	bne.n	810ce92 <xQueueGenericSend+0xa2>
 810ce8e:	2301      	movs	r3, #1
 810ce90:	e000      	b.n	810ce94 <xQueueGenericSend+0xa4>
 810ce92:	2300      	movs	r3, #0
 810ce94:	2b00      	cmp	r3, #0
 810ce96:	d10a      	bne.n	810ceae <xQueueGenericSend+0xbe>
	__asm volatile
 810ce98:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ce9c:	f383 8811 	msr	BASEPRI, r3
 810cea0:	f3bf 8f6f 	isb	sy
 810cea4:	f3bf 8f4f 	dsb	sy
 810cea8:	61fb      	str	r3, [r7, #28]
}
 810ceaa:	bf00      	nop
 810ceac:	e7fe      	b.n	810ceac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810ceae:	f7ff fd09 	bl	810c8c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810ceb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ceb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810ceb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ceb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810ceba:	429a      	cmp	r2, r3
 810cebc:	d302      	bcc.n	810cec4 <xQueueGenericSend+0xd4>
 810cebe:	683b      	ldr	r3, [r7, #0]
 810cec0:	2b02      	cmp	r3, #2
 810cec2:	d129      	bne.n	810cf18 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810cec4:	683a      	ldr	r2, [r7, #0]
 810cec6:	68b9      	ldr	r1, [r7, #8]
 810cec8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810ceca:	f000 fc77 	bl	810d7bc <prvCopyDataToQueue>
 810cece:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810ced0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ced2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810ced4:	2b00      	cmp	r3, #0
 810ced6:	d010      	beq.n	810cefa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810ced8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ceda:	3324      	adds	r3, #36	; 0x24
 810cedc:	4618      	mov	r0, r3
 810cede:	f001 fa61 	bl	810e3a4 <xTaskRemoveFromEventList>
 810cee2:	4603      	mov	r3, r0
 810cee4:	2b00      	cmp	r3, #0
 810cee6:	d013      	beq.n	810cf10 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 810cee8:	4b3f      	ldr	r3, [pc, #252]	; (810cfe8 <xQueueGenericSend+0x1f8>)
 810ceea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810ceee:	601a      	str	r2, [r3, #0]
 810cef0:	f3bf 8f4f 	dsb	sy
 810cef4:	f3bf 8f6f 	isb	sy
 810cef8:	e00a      	b.n	810cf10 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 810cefa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810cefc:	2b00      	cmp	r3, #0
 810cefe:	d007      	beq.n	810cf10 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 810cf00:	4b39      	ldr	r3, [pc, #228]	; (810cfe8 <xQueueGenericSend+0x1f8>)
 810cf02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810cf06:	601a      	str	r2, [r3, #0]
 810cf08:	f3bf 8f4f 	dsb	sy
 810cf0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 810cf10:	f7ff fd08 	bl	810c924 <vPortExitCritical>
				return pdPASS;
 810cf14:	2301      	movs	r3, #1
 810cf16:	e063      	b.n	810cfe0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810cf18:	687b      	ldr	r3, [r7, #4]
 810cf1a:	2b00      	cmp	r3, #0
 810cf1c:	d103      	bne.n	810cf26 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810cf1e:	f7ff fd01 	bl	810c924 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 810cf22:	2300      	movs	r3, #0
 810cf24:	e05c      	b.n	810cfe0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 810cf26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810cf28:	2b00      	cmp	r3, #0
 810cf2a:	d106      	bne.n	810cf3a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810cf2c:	f107 0314 	add.w	r3, r7, #20
 810cf30:	4618      	mov	r0, r3
 810cf32:	f001 fa9b 	bl	810e46c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810cf36:	2301      	movs	r3, #1
 810cf38:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810cf3a:	f7ff fcf3 	bl	810c924 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810cf3e:	f001 f807 	bl	810df50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810cf42:	f7ff fcbf 	bl	810c8c4 <vPortEnterCritical>
 810cf46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810cf48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810cf4c:	b25b      	sxtb	r3, r3
 810cf4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 810cf52:	d103      	bne.n	810cf5c <xQueueGenericSend+0x16c>
 810cf54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810cf56:	2200      	movs	r2, #0
 810cf58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810cf5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810cf5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810cf62:	b25b      	sxtb	r3, r3
 810cf64:	f1b3 3fff 	cmp.w	r3, #4294967295
 810cf68:	d103      	bne.n	810cf72 <xQueueGenericSend+0x182>
 810cf6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810cf6c:	2200      	movs	r2, #0
 810cf6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810cf72:	f7ff fcd7 	bl	810c924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810cf76:	1d3a      	adds	r2, r7, #4
 810cf78:	f107 0314 	add.w	r3, r7, #20
 810cf7c:	4611      	mov	r1, r2
 810cf7e:	4618      	mov	r0, r3
 810cf80:	f001 fa8a 	bl	810e498 <xTaskCheckForTimeOut>
 810cf84:	4603      	mov	r3, r0
 810cf86:	2b00      	cmp	r3, #0
 810cf88:	d124      	bne.n	810cfd4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 810cf8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810cf8c:	f000 fd0e 	bl	810d9ac <prvIsQueueFull>
 810cf90:	4603      	mov	r3, r0
 810cf92:	2b00      	cmp	r3, #0
 810cf94:	d018      	beq.n	810cfc8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 810cf96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810cf98:	3310      	adds	r3, #16
 810cf9a:	687a      	ldr	r2, [r7, #4]
 810cf9c:	4611      	mov	r1, r2
 810cf9e:	4618      	mov	r0, r3
 810cfa0:	f001 f9b0 	bl	810e304 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 810cfa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810cfa6:	f000 fc99 	bl	810d8dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 810cfaa:	f000 ffdf 	bl	810df6c <xTaskResumeAll>
 810cfae:	4603      	mov	r3, r0
 810cfb0:	2b00      	cmp	r3, #0
 810cfb2:	f47f af7c 	bne.w	810ceae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 810cfb6:	4b0c      	ldr	r3, [pc, #48]	; (810cfe8 <xQueueGenericSend+0x1f8>)
 810cfb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810cfbc:	601a      	str	r2, [r3, #0]
 810cfbe:	f3bf 8f4f 	dsb	sy
 810cfc2:	f3bf 8f6f 	isb	sy
 810cfc6:	e772      	b.n	810ceae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 810cfc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810cfca:	f000 fc87 	bl	810d8dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810cfce:	f000 ffcd 	bl	810df6c <xTaskResumeAll>
 810cfd2:	e76c      	b.n	810ceae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 810cfd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810cfd6:	f000 fc81 	bl	810d8dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810cfda:	f000 ffc7 	bl	810df6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 810cfde:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 810cfe0:	4618      	mov	r0, r3
 810cfe2:	3738      	adds	r7, #56	; 0x38
 810cfe4:	46bd      	mov	sp, r7
 810cfe6:	bd80      	pop	{r7, pc}
 810cfe8:	e000ed04 	.word	0xe000ed04

0810cfec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 810cfec:	b580      	push	{r7, lr}
 810cfee:	b090      	sub	sp, #64	; 0x40
 810cff0:	af00      	add	r7, sp, #0
 810cff2:	60f8      	str	r0, [r7, #12]
 810cff4:	60b9      	str	r1, [r7, #8]
 810cff6:	607a      	str	r2, [r7, #4]
 810cff8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810cffa:	68fb      	ldr	r3, [r7, #12]
 810cffc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 810cffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810d000:	2b00      	cmp	r3, #0
 810d002:	d10a      	bne.n	810d01a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 810d004:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d008:	f383 8811 	msr	BASEPRI, r3
 810d00c:	f3bf 8f6f 	isb	sy
 810d010:	f3bf 8f4f 	dsb	sy
 810d014:	62bb      	str	r3, [r7, #40]	; 0x28
}
 810d016:	bf00      	nop
 810d018:	e7fe      	b.n	810d018 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810d01a:	68bb      	ldr	r3, [r7, #8]
 810d01c:	2b00      	cmp	r3, #0
 810d01e:	d103      	bne.n	810d028 <xQueueGenericSendFromISR+0x3c>
 810d020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810d022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810d024:	2b00      	cmp	r3, #0
 810d026:	d101      	bne.n	810d02c <xQueueGenericSendFromISR+0x40>
 810d028:	2301      	movs	r3, #1
 810d02a:	e000      	b.n	810d02e <xQueueGenericSendFromISR+0x42>
 810d02c:	2300      	movs	r3, #0
 810d02e:	2b00      	cmp	r3, #0
 810d030:	d10a      	bne.n	810d048 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 810d032:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d036:	f383 8811 	msr	BASEPRI, r3
 810d03a:	f3bf 8f6f 	isb	sy
 810d03e:	f3bf 8f4f 	dsb	sy
 810d042:	627b      	str	r3, [r7, #36]	; 0x24
}
 810d044:	bf00      	nop
 810d046:	e7fe      	b.n	810d046 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 810d048:	683b      	ldr	r3, [r7, #0]
 810d04a:	2b02      	cmp	r3, #2
 810d04c:	d103      	bne.n	810d056 <xQueueGenericSendFromISR+0x6a>
 810d04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810d050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810d052:	2b01      	cmp	r3, #1
 810d054:	d101      	bne.n	810d05a <xQueueGenericSendFromISR+0x6e>
 810d056:	2301      	movs	r3, #1
 810d058:	e000      	b.n	810d05c <xQueueGenericSendFromISR+0x70>
 810d05a:	2300      	movs	r3, #0
 810d05c:	2b00      	cmp	r3, #0
 810d05e:	d10a      	bne.n	810d076 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 810d060:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d064:	f383 8811 	msr	BASEPRI, r3
 810d068:	f3bf 8f6f 	isb	sy
 810d06c:	f3bf 8f4f 	dsb	sy
 810d070:	623b      	str	r3, [r7, #32]
}
 810d072:	bf00      	nop
 810d074:	e7fe      	b.n	810d074 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810d076:	f7ff fd07 	bl	810ca88 <vPortValidateInterruptPriority>
	__asm volatile
 810d07a:	f3ef 8211 	mrs	r2, BASEPRI
 810d07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d082:	f383 8811 	msr	BASEPRI, r3
 810d086:	f3bf 8f6f 	isb	sy
 810d08a:	f3bf 8f4f 	dsb	sy
 810d08e:	61fa      	str	r2, [r7, #28]
 810d090:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 810d092:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 810d094:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810d096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810d098:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810d09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810d09c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810d09e:	429a      	cmp	r2, r3
 810d0a0:	d302      	bcc.n	810d0a8 <xQueueGenericSendFromISR+0xbc>
 810d0a2:	683b      	ldr	r3, [r7, #0]
 810d0a4:	2b02      	cmp	r3, #2
 810d0a6:	d12f      	bne.n	810d108 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 810d0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810d0aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810d0ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 810d0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810d0b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810d0b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810d0b8:	683a      	ldr	r2, [r7, #0]
 810d0ba:	68b9      	ldr	r1, [r7, #8]
 810d0bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 810d0be:	f000 fb7d 	bl	810d7bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 810d0c2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 810d0c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d0ca:	d112      	bne.n	810d0f2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810d0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810d0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810d0d0:	2b00      	cmp	r3, #0
 810d0d2:	d016      	beq.n	810d102 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810d0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810d0d6:	3324      	adds	r3, #36	; 0x24
 810d0d8:	4618      	mov	r0, r3
 810d0da:	f001 f963 	bl	810e3a4 <xTaskRemoveFromEventList>
 810d0de:	4603      	mov	r3, r0
 810d0e0:	2b00      	cmp	r3, #0
 810d0e2:	d00e      	beq.n	810d102 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 810d0e4:	687b      	ldr	r3, [r7, #4]
 810d0e6:	2b00      	cmp	r3, #0
 810d0e8:	d00b      	beq.n	810d102 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 810d0ea:	687b      	ldr	r3, [r7, #4]
 810d0ec:	2201      	movs	r2, #1
 810d0ee:	601a      	str	r2, [r3, #0]
 810d0f0:	e007      	b.n	810d102 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 810d0f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810d0f6:	3301      	adds	r3, #1
 810d0f8:	b2db      	uxtb	r3, r3
 810d0fa:	b25a      	sxtb	r2, r3
 810d0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810d0fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 810d102:	2301      	movs	r3, #1
 810d104:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 810d106:	e001      	b.n	810d10c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 810d108:	2300      	movs	r3, #0
 810d10a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810d10c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810d10e:	617b      	str	r3, [r7, #20]
	__asm volatile
 810d110:	697b      	ldr	r3, [r7, #20]
 810d112:	f383 8811 	msr	BASEPRI, r3
}
 810d116:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810d118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 810d11a:	4618      	mov	r0, r3
 810d11c:	3740      	adds	r7, #64	; 0x40
 810d11e:	46bd      	mov	sp, r7
 810d120:	bd80      	pop	{r7, pc}

0810d122 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 810d122:	b580      	push	{r7, lr}
 810d124:	b08e      	sub	sp, #56	; 0x38
 810d126:	af00      	add	r7, sp, #0
 810d128:	6078      	str	r0, [r7, #4]
 810d12a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810d12c:	687b      	ldr	r3, [r7, #4]
 810d12e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 810d130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d132:	2b00      	cmp	r3, #0
 810d134:	d10a      	bne.n	810d14c <xQueueGiveFromISR+0x2a>
	__asm volatile
 810d136:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d13a:	f383 8811 	msr	BASEPRI, r3
 810d13e:	f3bf 8f6f 	isb	sy
 810d142:	f3bf 8f4f 	dsb	sy
 810d146:	623b      	str	r3, [r7, #32]
}
 810d148:	bf00      	nop
 810d14a:	e7fe      	b.n	810d14a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 810d14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d14e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810d150:	2b00      	cmp	r3, #0
 810d152:	d00a      	beq.n	810d16a <xQueueGiveFromISR+0x48>
	__asm volatile
 810d154:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d158:	f383 8811 	msr	BASEPRI, r3
 810d15c:	f3bf 8f6f 	isb	sy
 810d160:	f3bf 8f4f 	dsb	sy
 810d164:	61fb      	str	r3, [r7, #28]
}
 810d166:	bf00      	nop
 810d168:	e7fe      	b.n	810d168 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 810d16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d16c:	681b      	ldr	r3, [r3, #0]
 810d16e:	2b00      	cmp	r3, #0
 810d170:	d103      	bne.n	810d17a <xQueueGiveFromISR+0x58>
 810d172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d174:	689b      	ldr	r3, [r3, #8]
 810d176:	2b00      	cmp	r3, #0
 810d178:	d101      	bne.n	810d17e <xQueueGiveFromISR+0x5c>
 810d17a:	2301      	movs	r3, #1
 810d17c:	e000      	b.n	810d180 <xQueueGiveFromISR+0x5e>
 810d17e:	2300      	movs	r3, #0
 810d180:	2b00      	cmp	r3, #0
 810d182:	d10a      	bne.n	810d19a <xQueueGiveFromISR+0x78>
	__asm volatile
 810d184:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d188:	f383 8811 	msr	BASEPRI, r3
 810d18c:	f3bf 8f6f 	isb	sy
 810d190:	f3bf 8f4f 	dsb	sy
 810d194:	61bb      	str	r3, [r7, #24]
}
 810d196:	bf00      	nop
 810d198:	e7fe      	b.n	810d198 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810d19a:	f7ff fc75 	bl	810ca88 <vPortValidateInterruptPriority>
	__asm volatile
 810d19e:	f3ef 8211 	mrs	r2, BASEPRI
 810d1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d1a6:	f383 8811 	msr	BASEPRI, r3
 810d1aa:	f3bf 8f6f 	isb	sy
 810d1ae:	f3bf 8f4f 	dsb	sy
 810d1b2:	617a      	str	r2, [r7, #20]
 810d1b4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 810d1b6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 810d1b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810d1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d1bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810d1be:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 810d1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d1c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810d1c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810d1c6:	429a      	cmp	r2, r3
 810d1c8:	d22b      	bcs.n	810d222 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 810d1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d1cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810d1d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 810d1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d1d6:	1c5a      	adds	r2, r3, #1
 810d1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d1da:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 810d1dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 810d1e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d1e4:	d112      	bne.n	810d20c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810d1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d1e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810d1ea:	2b00      	cmp	r3, #0
 810d1ec:	d016      	beq.n	810d21c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810d1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d1f0:	3324      	adds	r3, #36	; 0x24
 810d1f2:	4618      	mov	r0, r3
 810d1f4:	f001 f8d6 	bl	810e3a4 <xTaskRemoveFromEventList>
 810d1f8:	4603      	mov	r3, r0
 810d1fa:	2b00      	cmp	r3, #0
 810d1fc:	d00e      	beq.n	810d21c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 810d1fe:	683b      	ldr	r3, [r7, #0]
 810d200:	2b00      	cmp	r3, #0
 810d202:	d00b      	beq.n	810d21c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 810d204:	683b      	ldr	r3, [r7, #0]
 810d206:	2201      	movs	r2, #1
 810d208:	601a      	str	r2, [r3, #0]
 810d20a:	e007      	b.n	810d21c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 810d20c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810d210:	3301      	adds	r3, #1
 810d212:	b2db      	uxtb	r3, r3
 810d214:	b25a      	sxtb	r2, r3
 810d216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 810d21c:	2301      	movs	r3, #1
 810d21e:	637b      	str	r3, [r7, #52]	; 0x34
 810d220:	e001      	b.n	810d226 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 810d222:	2300      	movs	r3, #0
 810d224:	637b      	str	r3, [r7, #52]	; 0x34
 810d226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810d228:	60fb      	str	r3, [r7, #12]
	__asm volatile
 810d22a:	68fb      	ldr	r3, [r7, #12]
 810d22c:	f383 8811 	msr	BASEPRI, r3
}
 810d230:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810d232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 810d234:	4618      	mov	r0, r3
 810d236:	3738      	adds	r7, #56	; 0x38
 810d238:	46bd      	mov	sp, r7
 810d23a:	bd80      	pop	{r7, pc}

0810d23c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 810d23c:	b580      	push	{r7, lr}
 810d23e:	b08c      	sub	sp, #48	; 0x30
 810d240:	af00      	add	r7, sp, #0
 810d242:	60f8      	str	r0, [r7, #12]
 810d244:	60b9      	str	r1, [r7, #8]
 810d246:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 810d248:	2300      	movs	r3, #0
 810d24a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810d24c:	68fb      	ldr	r3, [r7, #12]
 810d24e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 810d250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d252:	2b00      	cmp	r3, #0
 810d254:	d10a      	bne.n	810d26c <xQueueReceive+0x30>
	__asm volatile
 810d256:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d25a:	f383 8811 	msr	BASEPRI, r3
 810d25e:	f3bf 8f6f 	isb	sy
 810d262:	f3bf 8f4f 	dsb	sy
 810d266:	623b      	str	r3, [r7, #32]
}
 810d268:	bf00      	nop
 810d26a:	e7fe      	b.n	810d26a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810d26c:	68bb      	ldr	r3, [r7, #8]
 810d26e:	2b00      	cmp	r3, #0
 810d270:	d103      	bne.n	810d27a <xQueueReceive+0x3e>
 810d272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810d276:	2b00      	cmp	r3, #0
 810d278:	d101      	bne.n	810d27e <xQueueReceive+0x42>
 810d27a:	2301      	movs	r3, #1
 810d27c:	e000      	b.n	810d280 <xQueueReceive+0x44>
 810d27e:	2300      	movs	r3, #0
 810d280:	2b00      	cmp	r3, #0
 810d282:	d10a      	bne.n	810d29a <xQueueReceive+0x5e>
	__asm volatile
 810d284:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d288:	f383 8811 	msr	BASEPRI, r3
 810d28c:	f3bf 8f6f 	isb	sy
 810d290:	f3bf 8f4f 	dsb	sy
 810d294:	61fb      	str	r3, [r7, #28]
}
 810d296:	bf00      	nop
 810d298:	e7fe      	b.n	810d298 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810d29a:	f001 fa45 	bl	810e728 <xTaskGetSchedulerState>
 810d29e:	4603      	mov	r3, r0
 810d2a0:	2b00      	cmp	r3, #0
 810d2a2:	d102      	bne.n	810d2aa <xQueueReceive+0x6e>
 810d2a4:	687b      	ldr	r3, [r7, #4]
 810d2a6:	2b00      	cmp	r3, #0
 810d2a8:	d101      	bne.n	810d2ae <xQueueReceive+0x72>
 810d2aa:	2301      	movs	r3, #1
 810d2ac:	e000      	b.n	810d2b0 <xQueueReceive+0x74>
 810d2ae:	2300      	movs	r3, #0
 810d2b0:	2b00      	cmp	r3, #0
 810d2b2:	d10a      	bne.n	810d2ca <xQueueReceive+0x8e>
	__asm volatile
 810d2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d2b8:	f383 8811 	msr	BASEPRI, r3
 810d2bc:	f3bf 8f6f 	isb	sy
 810d2c0:	f3bf 8f4f 	dsb	sy
 810d2c4:	61bb      	str	r3, [r7, #24]
}
 810d2c6:	bf00      	nop
 810d2c8:	e7fe      	b.n	810d2c8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810d2ca:	f7ff fafb 	bl	810c8c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810d2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d2d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810d2d2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810d2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810d2d6:	2b00      	cmp	r3, #0
 810d2d8:	d01f      	beq.n	810d31a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 810d2da:	68b9      	ldr	r1, [r7, #8]
 810d2dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810d2de:	f000 fad7 	bl	810d890 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 810d2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810d2e4:	1e5a      	subs	r2, r3, #1
 810d2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d2e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810d2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d2ec:	691b      	ldr	r3, [r3, #16]
 810d2ee:	2b00      	cmp	r3, #0
 810d2f0:	d00f      	beq.n	810d312 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810d2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d2f4:	3310      	adds	r3, #16
 810d2f6:	4618      	mov	r0, r3
 810d2f8:	f001 f854 	bl	810e3a4 <xTaskRemoveFromEventList>
 810d2fc:	4603      	mov	r3, r0
 810d2fe:	2b00      	cmp	r3, #0
 810d300:	d007      	beq.n	810d312 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 810d302:	4b3d      	ldr	r3, [pc, #244]	; (810d3f8 <xQueueReceive+0x1bc>)
 810d304:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810d308:	601a      	str	r2, [r3, #0]
 810d30a:	f3bf 8f4f 	dsb	sy
 810d30e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 810d312:	f7ff fb07 	bl	810c924 <vPortExitCritical>
				return pdPASS;
 810d316:	2301      	movs	r3, #1
 810d318:	e069      	b.n	810d3ee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810d31a:	687b      	ldr	r3, [r7, #4]
 810d31c:	2b00      	cmp	r3, #0
 810d31e:	d103      	bne.n	810d328 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810d320:	f7ff fb00 	bl	810c924 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 810d324:	2300      	movs	r3, #0
 810d326:	e062      	b.n	810d3ee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 810d328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810d32a:	2b00      	cmp	r3, #0
 810d32c:	d106      	bne.n	810d33c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810d32e:	f107 0310 	add.w	r3, r7, #16
 810d332:	4618      	mov	r0, r3
 810d334:	f001 f89a 	bl	810e46c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810d338:	2301      	movs	r3, #1
 810d33a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810d33c:	f7ff faf2 	bl	810c924 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810d340:	f000 fe06 	bl	810df50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810d344:	f7ff fabe 	bl	810c8c4 <vPortEnterCritical>
 810d348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d34a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810d34e:	b25b      	sxtb	r3, r3
 810d350:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d354:	d103      	bne.n	810d35e <xQueueReceive+0x122>
 810d356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d358:	2200      	movs	r2, #0
 810d35a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810d35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d360:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810d364:	b25b      	sxtb	r3, r3
 810d366:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d36a:	d103      	bne.n	810d374 <xQueueReceive+0x138>
 810d36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d36e:	2200      	movs	r2, #0
 810d370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810d374:	f7ff fad6 	bl	810c924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810d378:	1d3a      	adds	r2, r7, #4
 810d37a:	f107 0310 	add.w	r3, r7, #16
 810d37e:	4611      	mov	r1, r2
 810d380:	4618      	mov	r0, r3
 810d382:	f001 f889 	bl	810e498 <xTaskCheckForTimeOut>
 810d386:	4603      	mov	r3, r0
 810d388:	2b00      	cmp	r3, #0
 810d38a:	d123      	bne.n	810d3d4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810d38c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810d38e:	f000 faf7 	bl	810d980 <prvIsQueueEmpty>
 810d392:	4603      	mov	r3, r0
 810d394:	2b00      	cmp	r3, #0
 810d396:	d017      	beq.n	810d3c8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 810d398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d39a:	3324      	adds	r3, #36	; 0x24
 810d39c:	687a      	ldr	r2, [r7, #4]
 810d39e:	4611      	mov	r1, r2
 810d3a0:	4618      	mov	r0, r3
 810d3a2:	f000 ffaf 	bl	810e304 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 810d3a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810d3a8:	f000 fa98 	bl	810d8dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 810d3ac:	f000 fdde 	bl	810df6c <xTaskResumeAll>
 810d3b0:	4603      	mov	r3, r0
 810d3b2:	2b00      	cmp	r3, #0
 810d3b4:	d189      	bne.n	810d2ca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 810d3b6:	4b10      	ldr	r3, [pc, #64]	; (810d3f8 <xQueueReceive+0x1bc>)
 810d3b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810d3bc:	601a      	str	r2, [r3, #0]
 810d3be:	f3bf 8f4f 	dsb	sy
 810d3c2:	f3bf 8f6f 	isb	sy
 810d3c6:	e780      	b.n	810d2ca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 810d3c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810d3ca:	f000 fa87 	bl	810d8dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810d3ce:	f000 fdcd 	bl	810df6c <xTaskResumeAll>
 810d3d2:	e77a      	b.n	810d2ca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 810d3d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810d3d6:	f000 fa81 	bl	810d8dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810d3da:	f000 fdc7 	bl	810df6c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810d3de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810d3e0:	f000 face 	bl	810d980 <prvIsQueueEmpty>
 810d3e4:	4603      	mov	r3, r0
 810d3e6:	2b00      	cmp	r3, #0
 810d3e8:	f43f af6f 	beq.w	810d2ca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 810d3ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 810d3ee:	4618      	mov	r0, r3
 810d3f0:	3730      	adds	r7, #48	; 0x30
 810d3f2:	46bd      	mov	sp, r7
 810d3f4:	bd80      	pop	{r7, pc}
 810d3f6:	bf00      	nop
 810d3f8:	e000ed04 	.word	0xe000ed04

0810d3fc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 810d3fc:	b580      	push	{r7, lr}
 810d3fe:	b08e      	sub	sp, #56	; 0x38
 810d400:	af00      	add	r7, sp, #0
 810d402:	6078      	str	r0, [r7, #4]
 810d404:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 810d406:	2300      	movs	r3, #0
 810d408:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810d40a:	687b      	ldr	r3, [r7, #4]
 810d40c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 810d40e:	2300      	movs	r3, #0
 810d410:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 810d412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810d414:	2b00      	cmp	r3, #0
 810d416:	d10a      	bne.n	810d42e <xQueueSemaphoreTake+0x32>
	__asm volatile
 810d418:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d41c:	f383 8811 	msr	BASEPRI, r3
 810d420:	f3bf 8f6f 	isb	sy
 810d424:	f3bf 8f4f 	dsb	sy
 810d428:	623b      	str	r3, [r7, #32]
}
 810d42a:	bf00      	nop
 810d42c:	e7fe      	b.n	810d42c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 810d42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810d430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810d432:	2b00      	cmp	r3, #0
 810d434:	d00a      	beq.n	810d44c <xQueueSemaphoreTake+0x50>
	__asm volatile
 810d436:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d43a:	f383 8811 	msr	BASEPRI, r3
 810d43e:	f3bf 8f6f 	isb	sy
 810d442:	f3bf 8f4f 	dsb	sy
 810d446:	61fb      	str	r3, [r7, #28]
}
 810d448:	bf00      	nop
 810d44a:	e7fe      	b.n	810d44a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810d44c:	f001 f96c 	bl	810e728 <xTaskGetSchedulerState>
 810d450:	4603      	mov	r3, r0
 810d452:	2b00      	cmp	r3, #0
 810d454:	d102      	bne.n	810d45c <xQueueSemaphoreTake+0x60>
 810d456:	683b      	ldr	r3, [r7, #0]
 810d458:	2b00      	cmp	r3, #0
 810d45a:	d101      	bne.n	810d460 <xQueueSemaphoreTake+0x64>
 810d45c:	2301      	movs	r3, #1
 810d45e:	e000      	b.n	810d462 <xQueueSemaphoreTake+0x66>
 810d460:	2300      	movs	r3, #0
 810d462:	2b00      	cmp	r3, #0
 810d464:	d10a      	bne.n	810d47c <xQueueSemaphoreTake+0x80>
	__asm volatile
 810d466:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d46a:	f383 8811 	msr	BASEPRI, r3
 810d46e:	f3bf 8f6f 	isb	sy
 810d472:	f3bf 8f4f 	dsb	sy
 810d476:	61bb      	str	r3, [r7, #24]
}
 810d478:	bf00      	nop
 810d47a:	e7fe      	b.n	810d47a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810d47c:	f7ff fa22 	bl	810c8c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 810d480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810d482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810d484:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 810d486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d488:	2b00      	cmp	r3, #0
 810d48a:	d024      	beq.n	810d4d6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 810d48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d48e:	1e5a      	subs	r2, r3, #1
 810d490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810d492:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810d494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810d496:	681b      	ldr	r3, [r3, #0]
 810d498:	2b00      	cmp	r3, #0
 810d49a:	d104      	bne.n	810d4a6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 810d49c:	f001 faba 	bl	810ea14 <pvTaskIncrementMutexHeldCount>
 810d4a0:	4602      	mov	r2, r0
 810d4a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810d4a4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810d4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810d4a8:	691b      	ldr	r3, [r3, #16]
 810d4aa:	2b00      	cmp	r3, #0
 810d4ac:	d00f      	beq.n	810d4ce <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810d4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810d4b0:	3310      	adds	r3, #16
 810d4b2:	4618      	mov	r0, r3
 810d4b4:	f000 ff76 	bl	810e3a4 <xTaskRemoveFromEventList>
 810d4b8:	4603      	mov	r3, r0
 810d4ba:	2b00      	cmp	r3, #0
 810d4bc:	d007      	beq.n	810d4ce <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 810d4be:	4b54      	ldr	r3, [pc, #336]	; (810d610 <xQueueSemaphoreTake+0x214>)
 810d4c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810d4c4:	601a      	str	r2, [r3, #0]
 810d4c6:	f3bf 8f4f 	dsb	sy
 810d4ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 810d4ce:	f7ff fa29 	bl	810c924 <vPortExitCritical>
				return pdPASS;
 810d4d2:	2301      	movs	r3, #1
 810d4d4:	e097      	b.n	810d606 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810d4d6:	683b      	ldr	r3, [r7, #0]
 810d4d8:	2b00      	cmp	r3, #0
 810d4da:	d111      	bne.n	810d500 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 810d4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d4de:	2b00      	cmp	r3, #0
 810d4e0:	d00a      	beq.n	810d4f8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 810d4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d4e6:	f383 8811 	msr	BASEPRI, r3
 810d4ea:	f3bf 8f6f 	isb	sy
 810d4ee:	f3bf 8f4f 	dsb	sy
 810d4f2:	617b      	str	r3, [r7, #20]
}
 810d4f4:	bf00      	nop
 810d4f6:	e7fe      	b.n	810d4f6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 810d4f8:	f7ff fa14 	bl	810c924 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 810d4fc:	2300      	movs	r3, #0
 810d4fe:	e082      	b.n	810d606 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 810d500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810d502:	2b00      	cmp	r3, #0
 810d504:	d106      	bne.n	810d514 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810d506:	f107 030c 	add.w	r3, r7, #12
 810d50a:	4618      	mov	r0, r3
 810d50c:	f000 ffae 	bl	810e46c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810d510:	2301      	movs	r3, #1
 810d512:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810d514:	f7ff fa06 	bl	810c924 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 810d518:	f000 fd1a 	bl	810df50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810d51c:	f7ff f9d2 	bl	810c8c4 <vPortEnterCritical>
 810d520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810d522:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810d526:	b25b      	sxtb	r3, r3
 810d528:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d52c:	d103      	bne.n	810d536 <xQueueSemaphoreTake+0x13a>
 810d52e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810d530:	2200      	movs	r2, #0
 810d532:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810d536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810d538:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810d53c:	b25b      	sxtb	r3, r3
 810d53e:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d542:	d103      	bne.n	810d54c <xQueueSemaphoreTake+0x150>
 810d544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810d546:	2200      	movs	r2, #0
 810d548:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810d54c:	f7ff f9ea 	bl	810c924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810d550:	463a      	mov	r2, r7
 810d552:	f107 030c 	add.w	r3, r7, #12
 810d556:	4611      	mov	r1, r2
 810d558:	4618      	mov	r0, r3
 810d55a:	f000 ff9d 	bl	810e498 <xTaskCheckForTimeOut>
 810d55e:	4603      	mov	r3, r0
 810d560:	2b00      	cmp	r3, #0
 810d562:	d132      	bne.n	810d5ca <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810d564:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810d566:	f000 fa0b 	bl	810d980 <prvIsQueueEmpty>
 810d56a:	4603      	mov	r3, r0
 810d56c:	2b00      	cmp	r3, #0
 810d56e:	d026      	beq.n	810d5be <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810d570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810d572:	681b      	ldr	r3, [r3, #0]
 810d574:	2b00      	cmp	r3, #0
 810d576:	d109      	bne.n	810d58c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 810d578:	f7ff f9a4 	bl	810c8c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 810d57c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810d57e:	689b      	ldr	r3, [r3, #8]
 810d580:	4618      	mov	r0, r3
 810d582:	f001 f8ef 	bl	810e764 <xTaskPriorityInherit>
 810d586:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 810d588:	f7ff f9cc 	bl	810c924 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 810d58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810d58e:	3324      	adds	r3, #36	; 0x24
 810d590:	683a      	ldr	r2, [r7, #0]
 810d592:	4611      	mov	r1, r2
 810d594:	4618      	mov	r0, r3
 810d596:	f000 feb5 	bl	810e304 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 810d59a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810d59c:	f000 f99e 	bl	810d8dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 810d5a0:	f000 fce4 	bl	810df6c <xTaskResumeAll>
 810d5a4:	4603      	mov	r3, r0
 810d5a6:	2b00      	cmp	r3, #0
 810d5a8:	f47f af68 	bne.w	810d47c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 810d5ac:	4b18      	ldr	r3, [pc, #96]	; (810d610 <xQueueSemaphoreTake+0x214>)
 810d5ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810d5b2:	601a      	str	r2, [r3, #0]
 810d5b4:	f3bf 8f4f 	dsb	sy
 810d5b8:	f3bf 8f6f 	isb	sy
 810d5bc:	e75e      	b.n	810d47c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 810d5be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810d5c0:	f000 f98c 	bl	810d8dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810d5c4:	f000 fcd2 	bl	810df6c <xTaskResumeAll>
 810d5c8:	e758      	b.n	810d47c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 810d5ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810d5cc:	f000 f986 	bl	810d8dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810d5d0:	f000 fccc 	bl	810df6c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810d5d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810d5d6:	f000 f9d3 	bl	810d980 <prvIsQueueEmpty>
 810d5da:	4603      	mov	r3, r0
 810d5dc:	2b00      	cmp	r3, #0
 810d5de:	f43f af4d 	beq.w	810d47c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 810d5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d5e4:	2b00      	cmp	r3, #0
 810d5e6:	d00d      	beq.n	810d604 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 810d5e8:	f7ff f96c 	bl	810c8c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 810d5ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 810d5ee:	f000 f8cd 	bl	810d78c <prvGetDisinheritPriorityAfterTimeout>
 810d5f2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 810d5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810d5f6:	689b      	ldr	r3, [r3, #8]
 810d5f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 810d5fa:	4618      	mov	r0, r3
 810d5fc:	f001 f988 	bl	810e910 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 810d600:	f7ff f990 	bl	810c924 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 810d604:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 810d606:	4618      	mov	r0, r3
 810d608:	3738      	adds	r7, #56	; 0x38
 810d60a:	46bd      	mov	sp, r7
 810d60c:	bd80      	pop	{r7, pc}
 810d60e:	bf00      	nop
 810d610:	e000ed04 	.word	0xe000ed04

0810d614 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 810d614:	b580      	push	{r7, lr}
 810d616:	b08e      	sub	sp, #56	; 0x38
 810d618:	af00      	add	r7, sp, #0
 810d61a:	60f8      	str	r0, [r7, #12]
 810d61c:	60b9      	str	r1, [r7, #8]
 810d61e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810d620:	68fb      	ldr	r3, [r7, #12]
 810d622:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 810d624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d626:	2b00      	cmp	r3, #0
 810d628:	d10a      	bne.n	810d640 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 810d62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d62e:	f383 8811 	msr	BASEPRI, r3
 810d632:	f3bf 8f6f 	isb	sy
 810d636:	f3bf 8f4f 	dsb	sy
 810d63a:	623b      	str	r3, [r7, #32]
}
 810d63c:	bf00      	nop
 810d63e:	e7fe      	b.n	810d63e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810d640:	68bb      	ldr	r3, [r7, #8]
 810d642:	2b00      	cmp	r3, #0
 810d644:	d103      	bne.n	810d64e <xQueueReceiveFromISR+0x3a>
 810d646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810d64a:	2b00      	cmp	r3, #0
 810d64c:	d101      	bne.n	810d652 <xQueueReceiveFromISR+0x3e>
 810d64e:	2301      	movs	r3, #1
 810d650:	e000      	b.n	810d654 <xQueueReceiveFromISR+0x40>
 810d652:	2300      	movs	r3, #0
 810d654:	2b00      	cmp	r3, #0
 810d656:	d10a      	bne.n	810d66e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 810d658:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d65c:	f383 8811 	msr	BASEPRI, r3
 810d660:	f3bf 8f6f 	isb	sy
 810d664:	f3bf 8f4f 	dsb	sy
 810d668:	61fb      	str	r3, [r7, #28]
}
 810d66a:	bf00      	nop
 810d66c:	e7fe      	b.n	810d66c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810d66e:	f7ff fa0b 	bl	810ca88 <vPortValidateInterruptPriority>
	__asm volatile
 810d672:	f3ef 8211 	mrs	r2, BASEPRI
 810d676:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d67a:	f383 8811 	msr	BASEPRI, r3
 810d67e:	f3bf 8f6f 	isb	sy
 810d682:	f3bf 8f4f 	dsb	sy
 810d686:	61ba      	str	r2, [r7, #24]
 810d688:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 810d68a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 810d68c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810d68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810d692:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810d694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d696:	2b00      	cmp	r3, #0
 810d698:	d02f      	beq.n	810d6fa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 810d69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d69c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810d6a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 810d6a4:	68b9      	ldr	r1, [r7, #8]
 810d6a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810d6a8:	f000 f8f2 	bl	810d890 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 810d6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d6ae:	1e5a      	subs	r2, r3, #1
 810d6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d6b2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 810d6b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 810d6b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d6bc:	d112      	bne.n	810d6e4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810d6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d6c0:	691b      	ldr	r3, [r3, #16]
 810d6c2:	2b00      	cmp	r3, #0
 810d6c4:	d016      	beq.n	810d6f4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810d6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d6c8:	3310      	adds	r3, #16
 810d6ca:	4618      	mov	r0, r3
 810d6cc:	f000 fe6a 	bl	810e3a4 <xTaskRemoveFromEventList>
 810d6d0:	4603      	mov	r3, r0
 810d6d2:	2b00      	cmp	r3, #0
 810d6d4:	d00e      	beq.n	810d6f4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 810d6d6:	687b      	ldr	r3, [r7, #4]
 810d6d8:	2b00      	cmp	r3, #0
 810d6da:	d00b      	beq.n	810d6f4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 810d6dc:	687b      	ldr	r3, [r7, #4]
 810d6de:	2201      	movs	r2, #1
 810d6e0:	601a      	str	r2, [r3, #0]
 810d6e2:	e007      	b.n	810d6f4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 810d6e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810d6e8:	3301      	adds	r3, #1
 810d6ea:	b2db      	uxtb	r3, r3
 810d6ec:	b25a      	sxtb	r2, r3
 810d6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810d6f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 810d6f4:	2301      	movs	r3, #1
 810d6f6:	637b      	str	r3, [r7, #52]	; 0x34
 810d6f8:	e001      	b.n	810d6fe <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 810d6fa:	2300      	movs	r3, #0
 810d6fc:	637b      	str	r3, [r7, #52]	; 0x34
 810d6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810d700:	613b      	str	r3, [r7, #16]
	__asm volatile
 810d702:	693b      	ldr	r3, [r7, #16]
 810d704:	f383 8811 	msr	BASEPRI, r3
}
 810d708:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810d70a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 810d70c:	4618      	mov	r0, r3
 810d70e:	3738      	adds	r7, #56	; 0x38
 810d710:	46bd      	mov	sp, r7
 810d712:	bd80      	pop	{r7, pc}

0810d714 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 810d714:	b580      	push	{r7, lr}
 810d716:	b084      	sub	sp, #16
 810d718:	af00      	add	r7, sp, #0
 810d71a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 810d71c:	687b      	ldr	r3, [r7, #4]
 810d71e:	2b00      	cmp	r3, #0
 810d720:	d10a      	bne.n	810d738 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 810d722:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d726:	f383 8811 	msr	BASEPRI, r3
 810d72a:	f3bf 8f6f 	isb	sy
 810d72e:	f3bf 8f4f 	dsb	sy
 810d732:	60bb      	str	r3, [r7, #8]
}
 810d734:	bf00      	nop
 810d736:	e7fe      	b.n	810d736 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 810d738:	f7ff f8c4 	bl	810c8c4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 810d73c:	687b      	ldr	r3, [r7, #4]
 810d73e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810d740:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 810d742:	f7ff f8ef 	bl	810c924 <vPortExitCritical>

	return uxReturn;
 810d746:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 810d748:	4618      	mov	r0, r3
 810d74a:	3710      	adds	r7, #16
 810d74c:	46bd      	mov	sp, r7
 810d74e:	bd80      	pop	{r7, pc}

0810d750 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 810d750:	b480      	push	{r7}
 810d752:	b087      	sub	sp, #28
 810d754:	af00      	add	r7, sp, #0
 810d756:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 810d758:	687b      	ldr	r3, [r7, #4]
 810d75a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 810d75c:	697b      	ldr	r3, [r7, #20]
 810d75e:	2b00      	cmp	r3, #0
 810d760:	d10a      	bne.n	810d778 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 810d762:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d766:	f383 8811 	msr	BASEPRI, r3
 810d76a:	f3bf 8f6f 	isb	sy
 810d76e:	f3bf 8f4f 	dsb	sy
 810d772:	60fb      	str	r3, [r7, #12]
}
 810d774:	bf00      	nop
 810d776:	e7fe      	b.n	810d776 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 810d778:	697b      	ldr	r3, [r7, #20]
 810d77a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810d77c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 810d77e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 810d780:	4618      	mov	r0, r3
 810d782:	371c      	adds	r7, #28
 810d784:	46bd      	mov	sp, r7
 810d786:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d78a:	4770      	bx	lr

0810d78c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 810d78c:	b480      	push	{r7}
 810d78e:	b085      	sub	sp, #20
 810d790:	af00      	add	r7, sp, #0
 810d792:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 810d794:	687b      	ldr	r3, [r7, #4]
 810d796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810d798:	2b00      	cmp	r3, #0
 810d79a:	d006      	beq.n	810d7aa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 810d79c:	687b      	ldr	r3, [r7, #4]
 810d79e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810d7a0:	681b      	ldr	r3, [r3, #0]
 810d7a2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 810d7a6:	60fb      	str	r3, [r7, #12]
 810d7a8:	e001      	b.n	810d7ae <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 810d7aa:	2300      	movs	r3, #0
 810d7ac:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 810d7ae:	68fb      	ldr	r3, [r7, #12]
	}
 810d7b0:	4618      	mov	r0, r3
 810d7b2:	3714      	adds	r7, #20
 810d7b4:	46bd      	mov	sp, r7
 810d7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d7ba:	4770      	bx	lr

0810d7bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 810d7bc:	b580      	push	{r7, lr}
 810d7be:	b086      	sub	sp, #24
 810d7c0:	af00      	add	r7, sp, #0
 810d7c2:	60f8      	str	r0, [r7, #12]
 810d7c4:	60b9      	str	r1, [r7, #8]
 810d7c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 810d7c8:	2300      	movs	r3, #0
 810d7ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810d7cc:	68fb      	ldr	r3, [r7, #12]
 810d7ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810d7d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 810d7d2:	68fb      	ldr	r3, [r7, #12]
 810d7d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810d7d6:	2b00      	cmp	r3, #0
 810d7d8:	d10d      	bne.n	810d7f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810d7da:	68fb      	ldr	r3, [r7, #12]
 810d7dc:	681b      	ldr	r3, [r3, #0]
 810d7de:	2b00      	cmp	r3, #0
 810d7e0:	d14d      	bne.n	810d87e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 810d7e2:	68fb      	ldr	r3, [r7, #12]
 810d7e4:	689b      	ldr	r3, [r3, #8]
 810d7e6:	4618      	mov	r0, r3
 810d7e8:	f001 f824 	bl	810e834 <xTaskPriorityDisinherit>
 810d7ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 810d7ee:	68fb      	ldr	r3, [r7, #12]
 810d7f0:	2200      	movs	r2, #0
 810d7f2:	609a      	str	r2, [r3, #8]
 810d7f4:	e043      	b.n	810d87e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 810d7f6:	687b      	ldr	r3, [r7, #4]
 810d7f8:	2b00      	cmp	r3, #0
 810d7fa:	d119      	bne.n	810d830 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810d7fc:	68fb      	ldr	r3, [r7, #12]
 810d7fe:	6858      	ldr	r0, [r3, #4]
 810d800:	68fb      	ldr	r3, [r7, #12]
 810d802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810d804:	461a      	mov	r2, r3
 810d806:	68b9      	ldr	r1, [r7, #8]
 810d808:	f001 fee8 	bl	810f5dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810d80c:	68fb      	ldr	r3, [r7, #12]
 810d80e:	685a      	ldr	r2, [r3, #4]
 810d810:	68fb      	ldr	r3, [r7, #12]
 810d812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810d814:	441a      	add	r2, r3
 810d816:	68fb      	ldr	r3, [r7, #12]
 810d818:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810d81a:	68fb      	ldr	r3, [r7, #12]
 810d81c:	685a      	ldr	r2, [r3, #4]
 810d81e:	68fb      	ldr	r3, [r7, #12]
 810d820:	689b      	ldr	r3, [r3, #8]
 810d822:	429a      	cmp	r2, r3
 810d824:	d32b      	bcc.n	810d87e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 810d826:	68fb      	ldr	r3, [r7, #12]
 810d828:	681a      	ldr	r2, [r3, #0]
 810d82a:	68fb      	ldr	r3, [r7, #12]
 810d82c:	605a      	str	r2, [r3, #4]
 810d82e:	e026      	b.n	810d87e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 810d830:	68fb      	ldr	r3, [r7, #12]
 810d832:	68d8      	ldr	r0, [r3, #12]
 810d834:	68fb      	ldr	r3, [r7, #12]
 810d836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810d838:	461a      	mov	r2, r3
 810d83a:	68b9      	ldr	r1, [r7, #8]
 810d83c:	f001 fece 	bl	810f5dc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 810d840:	68fb      	ldr	r3, [r7, #12]
 810d842:	68da      	ldr	r2, [r3, #12]
 810d844:	68fb      	ldr	r3, [r7, #12]
 810d846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810d848:	425b      	negs	r3, r3
 810d84a:	441a      	add	r2, r3
 810d84c:	68fb      	ldr	r3, [r7, #12]
 810d84e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810d850:	68fb      	ldr	r3, [r7, #12]
 810d852:	68da      	ldr	r2, [r3, #12]
 810d854:	68fb      	ldr	r3, [r7, #12]
 810d856:	681b      	ldr	r3, [r3, #0]
 810d858:	429a      	cmp	r2, r3
 810d85a:	d207      	bcs.n	810d86c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 810d85c:	68fb      	ldr	r3, [r7, #12]
 810d85e:	689a      	ldr	r2, [r3, #8]
 810d860:	68fb      	ldr	r3, [r7, #12]
 810d862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810d864:	425b      	negs	r3, r3
 810d866:	441a      	add	r2, r3
 810d868:	68fb      	ldr	r3, [r7, #12]
 810d86a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 810d86c:	687b      	ldr	r3, [r7, #4]
 810d86e:	2b02      	cmp	r3, #2
 810d870:	d105      	bne.n	810d87e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810d872:	693b      	ldr	r3, [r7, #16]
 810d874:	2b00      	cmp	r3, #0
 810d876:	d002      	beq.n	810d87e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 810d878:	693b      	ldr	r3, [r7, #16]
 810d87a:	3b01      	subs	r3, #1
 810d87c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 810d87e:	693b      	ldr	r3, [r7, #16]
 810d880:	1c5a      	adds	r2, r3, #1
 810d882:	68fb      	ldr	r3, [r7, #12]
 810d884:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 810d886:	697b      	ldr	r3, [r7, #20]
}
 810d888:	4618      	mov	r0, r3
 810d88a:	3718      	adds	r7, #24
 810d88c:	46bd      	mov	sp, r7
 810d88e:	bd80      	pop	{r7, pc}

0810d890 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 810d890:	b580      	push	{r7, lr}
 810d892:	b082      	sub	sp, #8
 810d894:	af00      	add	r7, sp, #0
 810d896:	6078      	str	r0, [r7, #4]
 810d898:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 810d89a:	687b      	ldr	r3, [r7, #4]
 810d89c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810d89e:	2b00      	cmp	r3, #0
 810d8a0:	d018      	beq.n	810d8d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810d8a2:	687b      	ldr	r3, [r7, #4]
 810d8a4:	68da      	ldr	r2, [r3, #12]
 810d8a6:	687b      	ldr	r3, [r7, #4]
 810d8a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810d8aa:	441a      	add	r2, r3
 810d8ac:	687b      	ldr	r3, [r7, #4]
 810d8ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 810d8b0:	687b      	ldr	r3, [r7, #4]
 810d8b2:	68da      	ldr	r2, [r3, #12]
 810d8b4:	687b      	ldr	r3, [r7, #4]
 810d8b6:	689b      	ldr	r3, [r3, #8]
 810d8b8:	429a      	cmp	r2, r3
 810d8ba:	d303      	bcc.n	810d8c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 810d8bc:	687b      	ldr	r3, [r7, #4]
 810d8be:	681a      	ldr	r2, [r3, #0]
 810d8c0:	687b      	ldr	r3, [r7, #4]
 810d8c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810d8c4:	687b      	ldr	r3, [r7, #4]
 810d8c6:	68d9      	ldr	r1, [r3, #12]
 810d8c8:	687b      	ldr	r3, [r7, #4]
 810d8ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810d8cc:	461a      	mov	r2, r3
 810d8ce:	6838      	ldr	r0, [r7, #0]
 810d8d0:	f001 fe84 	bl	810f5dc <memcpy>
	}
}
 810d8d4:	bf00      	nop
 810d8d6:	3708      	adds	r7, #8
 810d8d8:	46bd      	mov	sp, r7
 810d8da:	bd80      	pop	{r7, pc}

0810d8dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 810d8dc:	b580      	push	{r7, lr}
 810d8de:	b084      	sub	sp, #16
 810d8e0:	af00      	add	r7, sp, #0
 810d8e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 810d8e4:	f7fe ffee 	bl	810c8c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 810d8e8:	687b      	ldr	r3, [r7, #4]
 810d8ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810d8ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810d8f0:	e011      	b.n	810d916 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810d8f2:	687b      	ldr	r3, [r7, #4]
 810d8f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810d8f6:	2b00      	cmp	r3, #0
 810d8f8:	d012      	beq.n	810d920 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810d8fa:	687b      	ldr	r3, [r7, #4]
 810d8fc:	3324      	adds	r3, #36	; 0x24
 810d8fe:	4618      	mov	r0, r3
 810d900:	f000 fd50 	bl	810e3a4 <xTaskRemoveFromEventList>
 810d904:	4603      	mov	r3, r0
 810d906:	2b00      	cmp	r3, #0
 810d908:	d001      	beq.n	810d90e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 810d90a:	f000 fe27 	bl	810e55c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 810d90e:	7bfb      	ldrb	r3, [r7, #15]
 810d910:	3b01      	subs	r3, #1
 810d912:	b2db      	uxtb	r3, r3
 810d914:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810d916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810d91a:	2b00      	cmp	r3, #0
 810d91c:	dce9      	bgt.n	810d8f2 <prvUnlockQueue+0x16>
 810d91e:	e000      	b.n	810d922 <prvUnlockQueue+0x46>
					break;
 810d920:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 810d922:	687b      	ldr	r3, [r7, #4]
 810d924:	22ff      	movs	r2, #255	; 0xff
 810d926:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 810d92a:	f7fe fffb 	bl	810c924 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 810d92e:	f7fe ffc9 	bl	810c8c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 810d932:	687b      	ldr	r3, [r7, #4]
 810d934:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810d938:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 810d93a:	e011      	b.n	810d960 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810d93c:	687b      	ldr	r3, [r7, #4]
 810d93e:	691b      	ldr	r3, [r3, #16]
 810d940:	2b00      	cmp	r3, #0
 810d942:	d012      	beq.n	810d96a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810d944:	687b      	ldr	r3, [r7, #4]
 810d946:	3310      	adds	r3, #16
 810d948:	4618      	mov	r0, r3
 810d94a:	f000 fd2b 	bl	810e3a4 <xTaskRemoveFromEventList>
 810d94e:	4603      	mov	r3, r0
 810d950:	2b00      	cmp	r3, #0
 810d952:	d001      	beq.n	810d958 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 810d954:	f000 fe02 	bl	810e55c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 810d958:	7bbb      	ldrb	r3, [r7, #14]
 810d95a:	3b01      	subs	r3, #1
 810d95c:	b2db      	uxtb	r3, r3
 810d95e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 810d960:	f997 300e 	ldrsb.w	r3, [r7, #14]
 810d964:	2b00      	cmp	r3, #0
 810d966:	dce9      	bgt.n	810d93c <prvUnlockQueue+0x60>
 810d968:	e000      	b.n	810d96c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 810d96a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 810d96c:	687b      	ldr	r3, [r7, #4]
 810d96e:	22ff      	movs	r2, #255	; 0xff
 810d970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 810d974:	f7fe ffd6 	bl	810c924 <vPortExitCritical>
}
 810d978:	bf00      	nop
 810d97a:	3710      	adds	r7, #16
 810d97c:	46bd      	mov	sp, r7
 810d97e:	bd80      	pop	{r7, pc}

0810d980 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 810d980:	b580      	push	{r7, lr}
 810d982:	b084      	sub	sp, #16
 810d984:	af00      	add	r7, sp, #0
 810d986:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810d988:	f7fe ff9c 	bl	810c8c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 810d98c:	687b      	ldr	r3, [r7, #4]
 810d98e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810d990:	2b00      	cmp	r3, #0
 810d992:	d102      	bne.n	810d99a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 810d994:	2301      	movs	r3, #1
 810d996:	60fb      	str	r3, [r7, #12]
 810d998:	e001      	b.n	810d99e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 810d99a:	2300      	movs	r3, #0
 810d99c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810d99e:	f7fe ffc1 	bl	810c924 <vPortExitCritical>

	return xReturn;
 810d9a2:	68fb      	ldr	r3, [r7, #12]
}
 810d9a4:	4618      	mov	r0, r3
 810d9a6:	3710      	adds	r7, #16
 810d9a8:	46bd      	mov	sp, r7
 810d9aa:	bd80      	pop	{r7, pc}

0810d9ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 810d9ac:	b580      	push	{r7, lr}
 810d9ae:	b084      	sub	sp, #16
 810d9b0:	af00      	add	r7, sp, #0
 810d9b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810d9b4:	f7fe ff86 	bl	810c8c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 810d9b8:	687b      	ldr	r3, [r7, #4]
 810d9ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810d9bc:	687b      	ldr	r3, [r7, #4]
 810d9be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810d9c0:	429a      	cmp	r2, r3
 810d9c2:	d102      	bne.n	810d9ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 810d9c4:	2301      	movs	r3, #1
 810d9c6:	60fb      	str	r3, [r7, #12]
 810d9c8:	e001      	b.n	810d9ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 810d9ca:	2300      	movs	r3, #0
 810d9cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810d9ce:	f7fe ffa9 	bl	810c924 <vPortExitCritical>

	return xReturn;
 810d9d2:	68fb      	ldr	r3, [r7, #12]
}
 810d9d4:	4618      	mov	r0, r3
 810d9d6:	3710      	adds	r7, #16
 810d9d8:	46bd      	mov	sp, r7
 810d9da:	bd80      	pop	{r7, pc}

0810d9dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 810d9dc:	b480      	push	{r7}
 810d9de:	b085      	sub	sp, #20
 810d9e0:	af00      	add	r7, sp, #0
 810d9e2:	6078      	str	r0, [r7, #4]
 810d9e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810d9e6:	2300      	movs	r3, #0
 810d9e8:	60fb      	str	r3, [r7, #12]
 810d9ea:	e014      	b.n	810da16 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 810d9ec:	4a0f      	ldr	r2, [pc, #60]	; (810da2c <vQueueAddToRegistry+0x50>)
 810d9ee:	68fb      	ldr	r3, [r7, #12]
 810d9f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 810d9f4:	2b00      	cmp	r3, #0
 810d9f6:	d10b      	bne.n	810da10 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 810d9f8:	490c      	ldr	r1, [pc, #48]	; (810da2c <vQueueAddToRegistry+0x50>)
 810d9fa:	68fb      	ldr	r3, [r7, #12]
 810d9fc:	683a      	ldr	r2, [r7, #0]
 810d9fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 810da02:	4a0a      	ldr	r2, [pc, #40]	; (810da2c <vQueueAddToRegistry+0x50>)
 810da04:	68fb      	ldr	r3, [r7, #12]
 810da06:	00db      	lsls	r3, r3, #3
 810da08:	4413      	add	r3, r2
 810da0a:	687a      	ldr	r2, [r7, #4]
 810da0c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 810da0e:	e006      	b.n	810da1e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810da10:	68fb      	ldr	r3, [r7, #12]
 810da12:	3301      	adds	r3, #1
 810da14:	60fb      	str	r3, [r7, #12]
 810da16:	68fb      	ldr	r3, [r7, #12]
 810da18:	2b07      	cmp	r3, #7
 810da1a:	d9e7      	bls.n	810d9ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 810da1c:	bf00      	nop
 810da1e:	bf00      	nop
 810da20:	3714      	adds	r7, #20
 810da22:	46bd      	mov	sp, r7
 810da24:	f85d 7b04 	ldr.w	r7, [sp], #4
 810da28:	4770      	bx	lr
 810da2a:	bf00      	nop
 810da2c:	10022a74 	.word	0x10022a74

0810da30 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 810da30:	b580      	push	{r7, lr}
 810da32:	b086      	sub	sp, #24
 810da34:	af00      	add	r7, sp, #0
 810da36:	60f8      	str	r0, [r7, #12]
 810da38:	60b9      	str	r1, [r7, #8]
 810da3a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 810da3c:	68fb      	ldr	r3, [r7, #12]
 810da3e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 810da40:	f7fe ff40 	bl	810c8c4 <vPortEnterCritical>
 810da44:	697b      	ldr	r3, [r7, #20]
 810da46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810da4a:	b25b      	sxtb	r3, r3
 810da4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 810da50:	d103      	bne.n	810da5a <vQueueWaitForMessageRestricted+0x2a>
 810da52:	697b      	ldr	r3, [r7, #20]
 810da54:	2200      	movs	r2, #0
 810da56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810da5a:	697b      	ldr	r3, [r7, #20]
 810da5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810da60:	b25b      	sxtb	r3, r3
 810da62:	f1b3 3fff 	cmp.w	r3, #4294967295
 810da66:	d103      	bne.n	810da70 <vQueueWaitForMessageRestricted+0x40>
 810da68:	697b      	ldr	r3, [r7, #20]
 810da6a:	2200      	movs	r2, #0
 810da6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810da70:	f7fe ff58 	bl	810c924 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 810da74:	697b      	ldr	r3, [r7, #20]
 810da76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810da78:	2b00      	cmp	r3, #0
 810da7a:	d106      	bne.n	810da8a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 810da7c:	697b      	ldr	r3, [r7, #20]
 810da7e:	3324      	adds	r3, #36	; 0x24
 810da80:	687a      	ldr	r2, [r7, #4]
 810da82:	68b9      	ldr	r1, [r7, #8]
 810da84:	4618      	mov	r0, r3
 810da86:	f000 fc61 	bl	810e34c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 810da8a:	6978      	ldr	r0, [r7, #20]
 810da8c:	f7ff ff26 	bl	810d8dc <prvUnlockQueue>
	}
 810da90:	bf00      	nop
 810da92:	3718      	adds	r7, #24
 810da94:	46bd      	mov	sp, r7
 810da96:	bd80      	pop	{r7, pc}

0810da98 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 810da98:	b580      	push	{r7, lr}
 810da9a:	b08e      	sub	sp, #56	; 0x38
 810da9c:	af04      	add	r7, sp, #16
 810da9e:	60f8      	str	r0, [r7, #12]
 810daa0:	60b9      	str	r1, [r7, #8]
 810daa2:	607a      	str	r2, [r7, #4]
 810daa4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 810daa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810daa8:	2b00      	cmp	r3, #0
 810daaa:	d10a      	bne.n	810dac2 <xTaskCreateStatic+0x2a>
	__asm volatile
 810daac:	f04f 0350 	mov.w	r3, #80	; 0x50
 810dab0:	f383 8811 	msr	BASEPRI, r3
 810dab4:	f3bf 8f6f 	isb	sy
 810dab8:	f3bf 8f4f 	dsb	sy
 810dabc:	623b      	str	r3, [r7, #32]
}
 810dabe:	bf00      	nop
 810dac0:	e7fe      	b.n	810dac0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 810dac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810dac4:	2b00      	cmp	r3, #0
 810dac6:	d10a      	bne.n	810dade <xTaskCreateStatic+0x46>
	__asm volatile
 810dac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 810dacc:	f383 8811 	msr	BASEPRI, r3
 810dad0:	f3bf 8f6f 	isb	sy
 810dad4:	f3bf 8f4f 	dsb	sy
 810dad8:	61fb      	str	r3, [r7, #28]
}
 810dada:	bf00      	nop
 810dadc:	e7fe      	b.n	810dadc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 810dade:	23cc      	movs	r3, #204	; 0xcc
 810dae0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 810dae2:	693b      	ldr	r3, [r7, #16]
 810dae4:	2bcc      	cmp	r3, #204	; 0xcc
 810dae6:	d00a      	beq.n	810dafe <xTaskCreateStatic+0x66>
	__asm volatile
 810dae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 810daec:	f383 8811 	msr	BASEPRI, r3
 810daf0:	f3bf 8f6f 	isb	sy
 810daf4:	f3bf 8f4f 	dsb	sy
 810daf8:	61bb      	str	r3, [r7, #24]
}
 810dafa:	bf00      	nop
 810dafc:	e7fe      	b.n	810dafc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 810dafe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 810db00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810db02:	2b00      	cmp	r3, #0
 810db04:	d01e      	beq.n	810db44 <xTaskCreateStatic+0xac>
 810db06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810db08:	2b00      	cmp	r3, #0
 810db0a:	d01b      	beq.n	810db44 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810db0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810db0e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 810db10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810db12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810db14:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 810db16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810db18:	2202      	movs	r2, #2
 810db1a:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 810db1e:	2300      	movs	r3, #0
 810db20:	9303      	str	r3, [sp, #12]
 810db22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810db24:	9302      	str	r3, [sp, #8]
 810db26:	f107 0314 	add.w	r3, r7, #20
 810db2a:	9301      	str	r3, [sp, #4]
 810db2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810db2e:	9300      	str	r3, [sp, #0]
 810db30:	683b      	ldr	r3, [r7, #0]
 810db32:	687a      	ldr	r2, [r7, #4]
 810db34:	68b9      	ldr	r1, [r7, #8]
 810db36:	68f8      	ldr	r0, [r7, #12]
 810db38:	f000 f850 	bl	810dbdc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810db3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 810db3e:	f000 f8f3 	bl	810dd28 <prvAddNewTaskToReadyList>
 810db42:	e001      	b.n	810db48 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 810db44:	2300      	movs	r3, #0
 810db46:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 810db48:	697b      	ldr	r3, [r7, #20]
	}
 810db4a:	4618      	mov	r0, r3
 810db4c:	3728      	adds	r7, #40	; 0x28
 810db4e:	46bd      	mov	sp, r7
 810db50:	bd80      	pop	{r7, pc}

0810db52 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 810db52:	b580      	push	{r7, lr}
 810db54:	b08c      	sub	sp, #48	; 0x30
 810db56:	af04      	add	r7, sp, #16
 810db58:	60f8      	str	r0, [r7, #12]
 810db5a:	60b9      	str	r1, [r7, #8]
 810db5c:	603b      	str	r3, [r7, #0]
 810db5e:	4613      	mov	r3, r2
 810db60:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 810db62:	88fb      	ldrh	r3, [r7, #6]
 810db64:	009b      	lsls	r3, r3, #2
 810db66:	4618      	mov	r0, r3
 810db68:	f7fe fade 	bl	810c128 <pvPortMalloc>
 810db6c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 810db6e:	697b      	ldr	r3, [r7, #20]
 810db70:	2b00      	cmp	r3, #0
 810db72:	d00e      	beq.n	810db92 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 810db74:	20cc      	movs	r0, #204	; 0xcc
 810db76:	f7fe fad7 	bl	810c128 <pvPortMalloc>
 810db7a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 810db7c:	69fb      	ldr	r3, [r7, #28]
 810db7e:	2b00      	cmp	r3, #0
 810db80:	d003      	beq.n	810db8a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 810db82:	69fb      	ldr	r3, [r7, #28]
 810db84:	697a      	ldr	r2, [r7, #20]
 810db86:	631a      	str	r2, [r3, #48]	; 0x30
 810db88:	e005      	b.n	810db96 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 810db8a:	6978      	ldr	r0, [r7, #20]
 810db8c:	f7fe fb98 	bl	810c2c0 <vPortFree>
 810db90:	e001      	b.n	810db96 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 810db92:	2300      	movs	r3, #0
 810db94:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 810db96:	69fb      	ldr	r3, [r7, #28]
 810db98:	2b00      	cmp	r3, #0
 810db9a:	d017      	beq.n	810dbcc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 810db9c:	69fb      	ldr	r3, [r7, #28]
 810db9e:	2200      	movs	r2, #0
 810dba0:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 810dba4:	88fa      	ldrh	r2, [r7, #6]
 810dba6:	2300      	movs	r3, #0
 810dba8:	9303      	str	r3, [sp, #12]
 810dbaa:	69fb      	ldr	r3, [r7, #28]
 810dbac:	9302      	str	r3, [sp, #8]
 810dbae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810dbb0:	9301      	str	r3, [sp, #4]
 810dbb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810dbb4:	9300      	str	r3, [sp, #0]
 810dbb6:	683b      	ldr	r3, [r7, #0]
 810dbb8:	68b9      	ldr	r1, [r7, #8]
 810dbba:	68f8      	ldr	r0, [r7, #12]
 810dbbc:	f000 f80e 	bl	810dbdc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810dbc0:	69f8      	ldr	r0, [r7, #28]
 810dbc2:	f000 f8b1 	bl	810dd28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 810dbc6:	2301      	movs	r3, #1
 810dbc8:	61bb      	str	r3, [r7, #24]
 810dbca:	e002      	b.n	810dbd2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 810dbcc:	f04f 33ff 	mov.w	r3, #4294967295
 810dbd0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 810dbd2:	69bb      	ldr	r3, [r7, #24]
	}
 810dbd4:	4618      	mov	r0, r3
 810dbd6:	3720      	adds	r7, #32
 810dbd8:	46bd      	mov	sp, r7
 810dbda:	bd80      	pop	{r7, pc}

0810dbdc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 810dbdc:	b580      	push	{r7, lr}
 810dbde:	b088      	sub	sp, #32
 810dbe0:	af00      	add	r7, sp, #0
 810dbe2:	60f8      	str	r0, [r7, #12]
 810dbe4:	60b9      	str	r1, [r7, #8]
 810dbe6:	607a      	str	r2, [r7, #4]
 810dbe8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 810dbea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810dbec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 810dbee:	687b      	ldr	r3, [r7, #4]
 810dbf0:	009b      	lsls	r3, r3, #2
 810dbf2:	461a      	mov	r2, r3
 810dbf4:	21a5      	movs	r1, #165	; 0xa5
 810dbf6:	f001 fcff 	bl	810f5f8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 810dbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810dbfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810dbfe:	687b      	ldr	r3, [r7, #4]
 810dc00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 810dc04:	3b01      	subs	r3, #1
 810dc06:	009b      	lsls	r3, r3, #2
 810dc08:	4413      	add	r3, r2
 810dc0a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 810dc0c:	69bb      	ldr	r3, [r7, #24]
 810dc0e:	f023 0307 	bic.w	r3, r3, #7
 810dc12:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 810dc14:	69bb      	ldr	r3, [r7, #24]
 810dc16:	f003 0307 	and.w	r3, r3, #7
 810dc1a:	2b00      	cmp	r3, #0
 810dc1c:	d00a      	beq.n	810dc34 <prvInitialiseNewTask+0x58>
	__asm volatile
 810dc1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810dc22:	f383 8811 	msr	BASEPRI, r3
 810dc26:	f3bf 8f6f 	isb	sy
 810dc2a:	f3bf 8f4f 	dsb	sy
 810dc2e:	617b      	str	r3, [r7, #20]
}
 810dc30:	bf00      	nop
 810dc32:	e7fe      	b.n	810dc32 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 810dc34:	68bb      	ldr	r3, [r7, #8]
 810dc36:	2b00      	cmp	r3, #0
 810dc38:	d01f      	beq.n	810dc7a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810dc3a:	2300      	movs	r3, #0
 810dc3c:	61fb      	str	r3, [r7, #28]
 810dc3e:	e012      	b.n	810dc66 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 810dc40:	68ba      	ldr	r2, [r7, #8]
 810dc42:	69fb      	ldr	r3, [r7, #28]
 810dc44:	4413      	add	r3, r2
 810dc46:	7819      	ldrb	r1, [r3, #0]
 810dc48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810dc4a:	69fb      	ldr	r3, [r7, #28]
 810dc4c:	4413      	add	r3, r2
 810dc4e:	3334      	adds	r3, #52	; 0x34
 810dc50:	460a      	mov	r2, r1
 810dc52:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 810dc54:	68ba      	ldr	r2, [r7, #8]
 810dc56:	69fb      	ldr	r3, [r7, #28]
 810dc58:	4413      	add	r3, r2
 810dc5a:	781b      	ldrb	r3, [r3, #0]
 810dc5c:	2b00      	cmp	r3, #0
 810dc5e:	d006      	beq.n	810dc6e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810dc60:	69fb      	ldr	r3, [r7, #28]
 810dc62:	3301      	adds	r3, #1
 810dc64:	61fb      	str	r3, [r7, #28]
 810dc66:	69fb      	ldr	r3, [r7, #28]
 810dc68:	2b1f      	cmp	r3, #31
 810dc6a:	d9e9      	bls.n	810dc40 <prvInitialiseNewTask+0x64>
 810dc6c:	e000      	b.n	810dc70 <prvInitialiseNewTask+0x94>
			{
				break;
 810dc6e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 810dc70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810dc72:	2200      	movs	r2, #0
 810dc74:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 810dc78:	e003      	b.n	810dc82 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 810dc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810dc7c:	2200      	movs	r2, #0
 810dc7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 810dc82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810dc84:	2b37      	cmp	r3, #55	; 0x37
 810dc86:	d901      	bls.n	810dc8c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 810dc88:	2337      	movs	r3, #55	; 0x37
 810dc8a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 810dc8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810dc8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810dc90:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 810dc92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810dc94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810dc96:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 810dc98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810dc9a:	2200      	movs	r2, #0
 810dc9c:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 810dc9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810dca0:	3304      	adds	r3, #4
 810dca2:	4618      	mov	r0, r3
 810dca4:	f7fe fc4a 	bl	810c53c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 810dca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810dcaa:	3318      	adds	r3, #24
 810dcac:	4618      	mov	r0, r3
 810dcae:	f7fe fc45 	bl	810c53c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 810dcb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810dcb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810dcb6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810dcb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810dcba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 810dcbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810dcc0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 810dcc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810dcc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810dcc6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 810dcc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810dcca:	2200      	movs	r2, #0
 810dccc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 810dcd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810dcd2:	2200      	movs	r2, #0
 810dcd4:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 810dcd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810dcda:	3364      	adds	r3, #100	; 0x64
 810dcdc:	2260      	movs	r2, #96	; 0x60
 810dcde:	2100      	movs	r1, #0
 810dce0:	4618      	mov	r0, r3
 810dce2:	f001 fc89 	bl	810f5f8 <memset>
 810dce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810dce8:	4a0c      	ldr	r2, [pc, #48]	; (810dd1c <prvInitialiseNewTask+0x140>)
 810dcea:	669a      	str	r2, [r3, #104]	; 0x68
 810dcec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810dcee:	4a0c      	ldr	r2, [pc, #48]	; (810dd20 <prvInitialiseNewTask+0x144>)
 810dcf0:	66da      	str	r2, [r3, #108]	; 0x6c
 810dcf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810dcf4:	4a0b      	ldr	r2, [pc, #44]	; (810dd24 <prvInitialiseNewTask+0x148>)
 810dcf6:	671a      	str	r2, [r3, #112]	; 0x70
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 810dcf8:	683a      	ldr	r2, [r7, #0]
 810dcfa:	68f9      	ldr	r1, [r7, #12]
 810dcfc:	69b8      	ldr	r0, [r7, #24]
 810dcfe:	f7fe fcb1 	bl	810c664 <pxPortInitialiseStack>
 810dd02:	4602      	mov	r2, r0
 810dd04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810dd06:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 810dd08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810dd0a:	2b00      	cmp	r3, #0
 810dd0c:	d002      	beq.n	810dd14 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 810dd0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810dd10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810dd12:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810dd14:	bf00      	nop
 810dd16:	3720      	adds	r7, #32
 810dd18:	46bd      	mov	sp, r7
 810dd1a:	bd80      	pop	{r7, pc}
 810dd1c:	081102c8 	.word	0x081102c8
 810dd20:	081102e8 	.word	0x081102e8
 810dd24:	081102a8 	.word	0x081102a8

0810dd28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 810dd28:	b580      	push	{r7, lr}
 810dd2a:	b082      	sub	sp, #8
 810dd2c:	af00      	add	r7, sp, #0
 810dd2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 810dd30:	f7fe fdc8 	bl	810c8c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 810dd34:	4b2d      	ldr	r3, [pc, #180]	; (810ddec <prvAddNewTaskToReadyList+0xc4>)
 810dd36:	681b      	ldr	r3, [r3, #0]
 810dd38:	3301      	adds	r3, #1
 810dd3a:	4a2c      	ldr	r2, [pc, #176]	; (810ddec <prvAddNewTaskToReadyList+0xc4>)
 810dd3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 810dd3e:	4b2c      	ldr	r3, [pc, #176]	; (810ddf0 <prvAddNewTaskToReadyList+0xc8>)
 810dd40:	681b      	ldr	r3, [r3, #0]
 810dd42:	2b00      	cmp	r3, #0
 810dd44:	d109      	bne.n	810dd5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 810dd46:	4a2a      	ldr	r2, [pc, #168]	; (810ddf0 <prvAddNewTaskToReadyList+0xc8>)
 810dd48:	687b      	ldr	r3, [r7, #4]
 810dd4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 810dd4c:	4b27      	ldr	r3, [pc, #156]	; (810ddec <prvAddNewTaskToReadyList+0xc4>)
 810dd4e:	681b      	ldr	r3, [r3, #0]
 810dd50:	2b01      	cmp	r3, #1
 810dd52:	d110      	bne.n	810dd76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 810dd54:	f000 fc26 	bl	810e5a4 <prvInitialiseTaskLists>
 810dd58:	e00d      	b.n	810dd76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 810dd5a:	4b26      	ldr	r3, [pc, #152]	; (810ddf4 <prvAddNewTaskToReadyList+0xcc>)
 810dd5c:	681b      	ldr	r3, [r3, #0]
 810dd5e:	2b00      	cmp	r3, #0
 810dd60:	d109      	bne.n	810dd76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 810dd62:	4b23      	ldr	r3, [pc, #140]	; (810ddf0 <prvAddNewTaskToReadyList+0xc8>)
 810dd64:	681b      	ldr	r3, [r3, #0]
 810dd66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810dd68:	687b      	ldr	r3, [r7, #4]
 810dd6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810dd6c:	429a      	cmp	r2, r3
 810dd6e:	d802      	bhi.n	810dd76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 810dd70:	4a1f      	ldr	r2, [pc, #124]	; (810ddf0 <prvAddNewTaskToReadyList+0xc8>)
 810dd72:	687b      	ldr	r3, [r7, #4]
 810dd74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 810dd76:	4b20      	ldr	r3, [pc, #128]	; (810ddf8 <prvAddNewTaskToReadyList+0xd0>)
 810dd78:	681b      	ldr	r3, [r3, #0]
 810dd7a:	3301      	adds	r3, #1
 810dd7c:	4a1e      	ldr	r2, [pc, #120]	; (810ddf8 <prvAddNewTaskToReadyList+0xd0>)
 810dd7e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 810dd80:	4b1d      	ldr	r3, [pc, #116]	; (810ddf8 <prvAddNewTaskToReadyList+0xd0>)
 810dd82:	681a      	ldr	r2, [r3, #0]
 810dd84:	687b      	ldr	r3, [r7, #4]
 810dd86:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 810dd88:	687b      	ldr	r3, [r7, #4]
 810dd8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810dd8c:	4b1b      	ldr	r3, [pc, #108]	; (810ddfc <prvAddNewTaskToReadyList+0xd4>)
 810dd8e:	681b      	ldr	r3, [r3, #0]
 810dd90:	429a      	cmp	r2, r3
 810dd92:	d903      	bls.n	810dd9c <prvAddNewTaskToReadyList+0x74>
 810dd94:	687b      	ldr	r3, [r7, #4]
 810dd96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810dd98:	4a18      	ldr	r2, [pc, #96]	; (810ddfc <prvAddNewTaskToReadyList+0xd4>)
 810dd9a:	6013      	str	r3, [r2, #0]
 810dd9c:	687b      	ldr	r3, [r7, #4]
 810dd9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810dda0:	4613      	mov	r3, r2
 810dda2:	009b      	lsls	r3, r3, #2
 810dda4:	4413      	add	r3, r2
 810dda6:	009b      	lsls	r3, r3, #2
 810dda8:	4a15      	ldr	r2, [pc, #84]	; (810de00 <prvAddNewTaskToReadyList+0xd8>)
 810ddaa:	441a      	add	r2, r3
 810ddac:	687b      	ldr	r3, [r7, #4]
 810ddae:	3304      	adds	r3, #4
 810ddb0:	4619      	mov	r1, r3
 810ddb2:	4610      	mov	r0, r2
 810ddb4:	f7fe fbcf 	bl	810c556 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 810ddb8:	f7fe fdb4 	bl	810c924 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 810ddbc:	4b0d      	ldr	r3, [pc, #52]	; (810ddf4 <prvAddNewTaskToReadyList+0xcc>)
 810ddbe:	681b      	ldr	r3, [r3, #0]
 810ddc0:	2b00      	cmp	r3, #0
 810ddc2:	d00e      	beq.n	810dde2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 810ddc4:	4b0a      	ldr	r3, [pc, #40]	; (810ddf0 <prvAddNewTaskToReadyList+0xc8>)
 810ddc6:	681b      	ldr	r3, [r3, #0]
 810ddc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810ddca:	687b      	ldr	r3, [r7, #4]
 810ddcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ddce:	429a      	cmp	r2, r3
 810ddd0:	d207      	bcs.n	810dde2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 810ddd2:	4b0c      	ldr	r3, [pc, #48]	; (810de04 <prvAddNewTaskToReadyList+0xdc>)
 810ddd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810ddd8:	601a      	str	r2, [r3, #0]
 810ddda:	f3bf 8f4f 	dsb	sy
 810ddde:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810dde2:	bf00      	nop
 810dde4:	3708      	adds	r7, #8
 810dde6:	46bd      	mov	sp, r7
 810dde8:	bd80      	pop	{r7, pc}
 810ddea:	bf00      	nop
 810ddec:	10022688 	.word	0x10022688
 810ddf0:	100221b4 	.word	0x100221b4
 810ddf4:	10022694 	.word	0x10022694
 810ddf8:	100226a4 	.word	0x100226a4
 810ddfc:	10022690 	.word	0x10022690
 810de00:	100221b8 	.word	0x100221b8
 810de04:	e000ed04 	.word	0xe000ed04

0810de08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 810de08:	b580      	push	{r7, lr}
 810de0a:	b084      	sub	sp, #16
 810de0c:	af00      	add	r7, sp, #0
 810de0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 810de10:	2300      	movs	r3, #0
 810de12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 810de14:	687b      	ldr	r3, [r7, #4]
 810de16:	2b00      	cmp	r3, #0
 810de18:	d017      	beq.n	810de4a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 810de1a:	4b13      	ldr	r3, [pc, #76]	; (810de68 <vTaskDelay+0x60>)
 810de1c:	681b      	ldr	r3, [r3, #0]
 810de1e:	2b00      	cmp	r3, #0
 810de20:	d00a      	beq.n	810de38 <vTaskDelay+0x30>
	__asm volatile
 810de22:	f04f 0350 	mov.w	r3, #80	; 0x50
 810de26:	f383 8811 	msr	BASEPRI, r3
 810de2a:	f3bf 8f6f 	isb	sy
 810de2e:	f3bf 8f4f 	dsb	sy
 810de32:	60bb      	str	r3, [r7, #8]
}
 810de34:	bf00      	nop
 810de36:	e7fe      	b.n	810de36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 810de38:	f000 f88a 	bl	810df50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 810de3c:	2100      	movs	r1, #0
 810de3e:	6878      	ldr	r0, [r7, #4]
 810de40:	f000 fffe 	bl	810ee40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 810de44:	f000 f892 	bl	810df6c <xTaskResumeAll>
 810de48:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 810de4a:	68fb      	ldr	r3, [r7, #12]
 810de4c:	2b00      	cmp	r3, #0
 810de4e:	d107      	bne.n	810de60 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 810de50:	4b06      	ldr	r3, [pc, #24]	; (810de6c <vTaskDelay+0x64>)
 810de52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810de56:	601a      	str	r2, [r3, #0]
 810de58:	f3bf 8f4f 	dsb	sy
 810de5c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810de60:	bf00      	nop
 810de62:	3710      	adds	r7, #16
 810de64:	46bd      	mov	sp, r7
 810de66:	bd80      	pop	{r7, pc}
 810de68:	100226b0 	.word	0x100226b0
 810de6c:	e000ed04 	.word	0xe000ed04

0810de70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 810de70:	b580      	push	{r7, lr}
 810de72:	b08a      	sub	sp, #40	; 0x28
 810de74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 810de76:	2300      	movs	r3, #0
 810de78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 810de7a:	2300      	movs	r3, #0
 810de7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 810de7e:	463a      	mov	r2, r7
 810de80:	1d39      	adds	r1, r7, #4
 810de82:	f107 0308 	add.w	r3, r7, #8
 810de86:	4618      	mov	r0, r3
 810de88:	f7fe f91a 	bl	810c0c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 810de8c:	6839      	ldr	r1, [r7, #0]
 810de8e:	687b      	ldr	r3, [r7, #4]
 810de90:	68ba      	ldr	r2, [r7, #8]
 810de92:	9202      	str	r2, [sp, #8]
 810de94:	9301      	str	r3, [sp, #4]
 810de96:	2300      	movs	r3, #0
 810de98:	9300      	str	r3, [sp, #0]
 810de9a:	2300      	movs	r3, #0
 810de9c:	460a      	mov	r2, r1
 810de9e:	4924      	ldr	r1, [pc, #144]	; (810df30 <vTaskStartScheduler+0xc0>)
 810dea0:	4824      	ldr	r0, [pc, #144]	; (810df34 <vTaskStartScheduler+0xc4>)
 810dea2:	f7ff fdf9 	bl	810da98 <xTaskCreateStatic>
 810dea6:	4603      	mov	r3, r0
 810dea8:	4a23      	ldr	r2, [pc, #140]	; (810df38 <vTaskStartScheduler+0xc8>)
 810deaa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 810deac:	4b22      	ldr	r3, [pc, #136]	; (810df38 <vTaskStartScheduler+0xc8>)
 810deae:	681b      	ldr	r3, [r3, #0]
 810deb0:	2b00      	cmp	r3, #0
 810deb2:	d002      	beq.n	810deba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 810deb4:	2301      	movs	r3, #1
 810deb6:	617b      	str	r3, [r7, #20]
 810deb8:	e001      	b.n	810debe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 810deba:	2300      	movs	r3, #0
 810debc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 810debe:	697b      	ldr	r3, [r7, #20]
 810dec0:	2b01      	cmp	r3, #1
 810dec2:	d102      	bne.n	810deca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 810dec4:	f001 f810 	bl	810eee8 <xTimerCreateTimerTask>
 810dec8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 810deca:	697b      	ldr	r3, [r7, #20]
 810decc:	2b01      	cmp	r3, #1
 810dece:	d11b      	bne.n	810df08 <vTaskStartScheduler+0x98>
	__asm volatile
 810ded0:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ded4:	f383 8811 	msr	BASEPRI, r3
 810ded8:	f3bf 8f6f 	isb	sy
 810dedc:	f3bf 8f4f 	dsb	sy
 810dee0:	613b      	str	r3, [r7, #16]
}
 810dee2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 810dee4:	4b15      	ldr	r3, [pc, #84]	; (810df3c <vTaskStartScheduler+0xcc>)
 810dee6:	681b      	ldr	r3, [r3, #0]
 810dee8:	3364      	adds	r3, #100	; 0x64
 810deea:	4a15      	ldr	r2, [pc, #84]	; (810df40 <vTaskStartScheduler+0xd0>)
 810deec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 810deee:	4b15      	ldr	r3, [pc, #84]	; (810df44 <vTaskStartScheduler+0xd4>)
 810def0:	f04f 32ff 	mov.w	r2, #4294967295
 810def4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 810def6:	4b14      	ldr	r3, [pc, #80]	; (810df48 <vTaskStartScheduler+0xd8>)
 810def8:	2201      	movs	r2, #1
 810defa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 810defc:	4b13      	ldr	r3, [pc, #76]	; (810df4c <vTaskStartScheduler+0xdc>)
 810defe:	2200      	movs	r2, #0
 810df00:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 810df02:	f7fe fc3d 	bl	810c780 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 810df06:	e00e      	b.n	810df26 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 810df08:	697b      	ldr	r3, [r7, #20]
 810df0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810df0e:	d10a      	bne.n	810df26 <vTaskStartScheduler+0xb6>
	__asm volatile
 810df10:	f04f 0350 	mov.w	r3, #80	; 0x50
 810df14:	f383 8811 	msr	BASEPRI, r3
 810df18:	f3bf 8f6f 	isb	sy
 810df1c:	f3bf 8f4f 	dsb	sy
 810df20:	60fb      	str	r3, [r7, #12]
}
 810df22:	bf00      	nop
 810df24:	e7fe      	b.n	810df24 <vTaskStartScheduler+0xb4>
}
 810df26:	bf00      	nop
 810df28:	3718      	adds	r7, #24
 810df2a:	46bd      	mov	sp, r7
 810df2c:	bd80      	pop	{r7, pc}
 810df2e:	bf00      	nop
 810df30:	0811022c 	.word	0x0811022c
 810df34:	0810e575 	.word	0x0810e575
 810df38:	100226ac 	.word	0x100226ac
 810df3c:	100221b4 	.word	0x100221b4
 810df40:	1000001c 	.word	0x1000001c
 810df44:	100226a8 	.word	0x100226a8
 810df48:	10022694 	.word	0x10022694
 810df4c:	1002268c 	.word	0x1002268c

0810df50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 810df50:	b480      	push	{r7}
 810df52:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 810df54:	4b04      	ldr	r3, [pc, #16]	; (810df68 <vTaskSuspendAll+0x18>)
 810df56:	681b      	ldr	r3, [r3, #0]
 810df58:	3301      	adds	r3, #1
 810df5a:	4a03      	ldr	r2, [pc, #12]	; (810df68 <vTaskSuspendAll+0x18>)
 810df5c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 810df5e:	bf00      	nop
 810df60:	46bd      	mov	sp, r7
 810df62:	f85d 7b04 	ldr.w	r7, [sp], #4
 810df66:	4770      	bx	lr
 810df68:	100226b0 	.word	0x100226b0

0810df6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 810df6c:	b580      	push	{r7, lr}
 810df6e:	b084      	sub	sp, #16
 810df70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 810df72:	2300      	movs	r3, #0
 810df74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 810df76:	2300      	movs	r3, #0
 810df78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 810df7a:	4b42      	ldr	r3, [pc, #264]	; (810e084 <xTaskResumeAll+0x118>)
 810df7c:	681b      	ldr	r3, [r3, #0]
 810df7e:	2b00      	cmp	r3, #0
 810df80:	d10a      	bne.n	810df98 <xTaskResumeAll+0x2c>
	__asm volatile
 810df82:	f04f 0350 	mov.w	r3, #80	; 0x50
 810df86:	f383 8811 	msr	BASEPRI, r3
 810df8a:	f3bf 8f6f 	isb	sy
 810df8e:	f3bf 8f4f 	dsb	sy
 810df92:	603b      	str	r3, [r7, #0]
}
 810df94:	bf00      	nop
 810df96:	e7fe      	b.n	810df96 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 810df98:	f7fe fc94 	bl	810c8c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 810df9c:	4b39      	ldr	r3, [pc, #228]	; (810e084 <xTaskResumeAll+0x118>)
 810df9e:	681b      	ldr	r3, [r3, #0]
 810dfa0:	3b01      	subs	r3, #1
 810dfa2:	4a38      	ldr	r2, [pc, #224]	; (810e084 <xTaskResumeAll+0x118>)
 810dfa4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810dfa6:	4b37      	ldr	r3, [pc, #220]	; (810e084 <xTaskResumeAll+0x118>)
 810dfa8:	681b      	ldr	r3, [r3, #0]
 810dfaa:	2b00      	cmp	r3, #0
 810dfac:	d162      	bne.n	810e074 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 810dfae:	4b36      	ldr	r3, [pc, #216]	; (810e088 <xTaskResumeAll+0x11c>)
 810dfb0:	681b      	ldr	r3, [r3, #0]
 810dfb2:	2b00      	cmp	r3, #0
 810dfb4:	d05e      	beq.n	810e074 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810dfb6:	e02f      	b.n	810e018 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810dfb8:	4b34      	ldr	r3, [pc, #208]	; (810e08c <xTaskResumeAll+0x120>)
 810dfba:	68db      	ldr	r3, [r3, #12]
 810dfbc:	68db      	ldr	r3, [r3, #12]
 810dfbe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810dfc0:	68fb      	ldr	r3, [r7, #12]
 810dfc2:	3318      	adds	r3, #24
 810dfc4:	4618      	mov	r0, r3
 810dfc6:	f7fe fb23 	bl	810c610 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810dfca:	68fb      	ldr	r3, [r7, #12]
 810dfcc:	3304      	adds	r3, #4
 810dfce:	4618      	mov	r0, r3
 810dfd0:	f7fe fb1e 	bl	810c610 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 810dfd4:	68fb      	ldr	r3, [r7, #12]
 810dfd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810dfd8:	4b2d      	ldr	r3, [pc, #180]	; (810e090 <xTaskResumeAll+0x124>)
 810dfda:	681b      	ldr	r3, [r3, #0]
 810dfdc:	429a      	cmp	r2, r3
 810dfde:	d903      	bls.n	810dfe8 <xTaskResumeAll+0x7c>
 810dfe0:	68fb      	ldr	r3, [r7, #12]
 810dfe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810dfe4:	4a2a      	ldr	r2, [pc, #168]	; (810e090 <xTaskResumeAll+0x124>)
 810dfe6:	6013      	str	r3, [r2, #0]
 810dfe8:	68fb      	ldr	r3, [r7, #12]
 810dfea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810dfec:	4613      	mov	r3, r2
 810dfee:	009b      	lsls	r3, r3, #2
 810dff0:	4413      	add	r3, r2
 810dff2:	009b      	lsls	r3, r3, #2
 810dff4:	4a27      	ldr	r2, [pc, #156]	; (810e094 <xTaskResumeAll+0x128>)
 810dff6:	441a      	add	r2, r3
 810dff8:	68fb      	ldr	r3, [r7, #12]
 810dffa:	3304      	adds	r3, #4
 810dffc:	4619      	mov	r1, r3
 810dffe:	4610      	mov	r0, r2
 810e000:	f7fe faa9 	bl	810c556 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810e004:	68fb      	ldr	r3, [r7, #12]
 810e006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810e008:	4b23      	ldr	r3, [pc, #140]	; (810e098 <xTaskResumeAll+0x12c>)
 810e00a:	681b      	ldr	r3, [r3, #0]
 810e00c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810e00e:	429a      	cmp	r2, r3
 810e010:	d302      	bcc.n	810e018 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 810e012:	4b22      	ldr	r3, [pc, #136]	; (810e09c <xTaskResumeAll+0x130>)
 810e014:	2201      	movs	r2, #1
 810e016:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810e018:	4b1c      	ldr	r3, [pc, #112]	; (810e08c <xTaskResumeAll+0x120>)
 810e01a:	681b      	ldr	r3, [r3, #0]
 810e01c:	2b00      	cmp	r3, #0
 810e01e:	d1cb      	bne.n	810dfb8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 810e020:	68fb      	ldr	r3, [r7, #12]
 810e022:	2b00      	cmp	r3, #0
 810e024:	d001      	beq.n	810e02a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 810e026:	f000 fb5f 	bl	810e6e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 810e02a:	4b1d      	ldr	r3, [pc, #116]	; (810e0a0 <xTaskResumeAll+0x134>)
 810e02c:	681b      	ldr	r3, [r3, #0]
 810e02e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 810e030:	687b      	ldr	r3, [r7, #4]
 810e032:	2b00      	cmp	r3, #0
 810e034:	d010      	beq.n	810e058 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 810e036:	f000 f847 	bl	810e0c8 <xTaskIncrementTick>
 810e03a:	4603      	mov	r3, r0
 810e03c:	2b00      	cmp	r3, #0
 810e03e:	d002      	beq.n	810e046 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 810e040:	4b16      	ldr	r3, [pc, #88]	; (810e09c <xTaskResumeAll+0x130>)
 810e042:	2201      	movs	r2, #1
 810e044:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 810e046:	687b      	ldr	r3, [r7, #4]
 810e048:	3b01      	subs	r3, #1
 810e04a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 810e04c:	687b      	ldr	r3, [r7, #4]
 810e04e:	2b00      	cmp	r3, #0
 810e050:	d1f1      	bne.n	810e036 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 810e052:	4b13      	ldr	r3, [pc, #76]	; (810e0a0 <xTaskResumeAll+0x134>)
 810e054:	2200      	movs	r2, #0
 810e056:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 810e058:	4b10      	ldr	r3, [pc, #64]	; (810e09c <xTaskResumeAll+0x130>)
 810e05a:	681b      	ldr	r3, [r3, #0]
 810e05c:	2b00      	cmp	r3, #0
 810e05e:	d009      	beq.n	810e074 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 810e060:	2301      	movs	r3, #1
 810e062:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 810e064:	4b0f      	ldr	r3, [pc, #60]	; (810e0a4 <xTaskResumeAll+0x138>)
 810e066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810e06a:	601a      	str	r2, [r3, #0]
 810e06c:	f3bf 8f4f 	dsb	sy
 810e070:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810e074:	f7fe fc56 	bl	810c924 <vPortExitCritical>

	return xAlreadyYielded;
 810e078:	68bb      	ldr	r3, [r7, #8]
}
 810e07a:	4618      	mov	r0, r3
 810e07c:	3710      	adds	r7, #16
 810e07e:	46bd      	mov	sp, r7
 810e080:	bd80      	pop	{r7, pc}
 810e082:	bf00      	nop
 810e084:	100226b0 	.word	0x100226b0
 810e088:	10022688 	.word	0x10022688
 810e08c:	10022648 	.word	0x10022648
 810e090:	10022690 	.word	0x10022690
 810e094:	100221b8 	.word	0x100221b8
 810e098:	100221b4 	.word	0x100221b4
 810e09c:	1002269c 	.word	0x1002269c
 810e0a0:	10022698 	.word	0x10022698
 810e0a4:	e000ed04 	.word	0xe000ed04

0810e0a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 810e0a8:	b480      	push	{r7}
 810e0aa:	b083      	sub	sp, #12
 810e0ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 810e0ae:	4b05      	ldr	r3, [pc, #20]	; (810e0c4 <xTaskGetTickCount+0x1c>)
 810e0b0:	681b      	ldr	r3, [r3, #0]
 810e0b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 810e0b4:	687b      	ldr	r3, [r7, #4]
}
 810e0b6:	4618      	mov	r0, r3
 810e0b8:	370c      	adds	r7, #12
 810e0ba:	46bd      	mov	sp, r7
 810e0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e0c0:	4770      	bx	lr
 810e0c2:	bf00      	nop
 810e0c4:	1002268c 	.word	0x1002268c

0810e0c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 810e0c8:	b580      	push	{r7, lr}
 810e0ca:	b086      	sub	sp, #24
 810e0cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 810e0ce:	2300      	movs	r3, #0
 810e0d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810e0d2:	4b4f      	ldr	r3, [pc, #316]	; (810e210 <xTaskIncrementTick+0x148>)
 810e0d4:	681b      	ldr	r3, [r3, #0]
 810e0d6:	2b00      	cmp	r3, #0
 810e0d8:	f040 808f 	bne.w	810e1fa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 810e0dc:	4b4d      	ldr	r3, [pc, #308]	; (810e214 <xTaskIncrementTick+0x14c>)
 810e0de:	681b      	ldr	r3, [r3, #0]
 810e0e0:	3301      	adds	r3, #1
 810e0e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 810e0e4:	4a4b      	ldr	r2, [pc, #300]	; (810e214 <xTaskIncrementTick+0x14c>)
 810e0e6:	693b      	ldr	r3, [r7, #16]
 810e0e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 810e0ea:	693b      	ldr	r3, [r7, #16]
 810e0ec:	2b00      	cmp	r3, #0
 810e0ee:	d120      	bne.n	810e132 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 810e0f0:	4b49      	ldr	r3, [pc, #292]	; (810e218 <xTaskIncrementTick+0x150>)
 810e0f2:	681b      	ldr	r3, [r3, #0]
 810e0f4:	681b      	ldr	r3, [r3, #0]
 810e0f6:	2b00      	cmp	r3, #0
 810e0f8:	d00a      	beq.n	810e110 <xTaskIncrementTick+0x48>
	__asm volatile
 810e0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 810e0fe:	f383 8811 	msr	BASEPRI, r3
 810e102:	f3bf 8f6f 	isb	sy
 810e106:	f3bf 8f4f 	dsb	sy
 810e10a:	603b      	str	r3, [r7, #0]
}
 810e10c:	bf00      	nop
 810e10e:	e7fe      	b.n	810e10e <xTaskIncrementTick+0x46>
 810e110:	4b41      	ldr	r3, [pc, #260]	; (810e218 <xTaskIncrementTick+0x150>)
 810e112:	681b      	ldr	r3, [r3, #0]
 810e114:	60fb      	str	r3, [r7, #12]
 810e116:	4b41      	ldr	r3, [pc, #260]	; (810e21c <xTaskIncrementTick+0x154>)
 810e118:	681b      	ldr	r3, [r3, #0]
 810e11a:	4a3f      	ldr	r2, [pc, #252]	; (810e218 <xTaskIncrementTick+0x150>)
 810e11c:	6013      	str	r3, [r2, #0]
 810e11e:	4a3f      	ldr	r2, [pc, #252]	; (810e21c <xTaskIncrementTick+0x154>)
 810e120:	68fb      	ldr	r3, [r7, #12]
 810e122:	6013      	str	r3, [r2, #0]
 810e124:	4b3e      	ldr	r3, [pc, #248]	; (810e220 <xTaskIncrementTick+0x158>)
 810e126:	681b      	ldr	r3, [r3, #0]
 810e128:	3301      	adds	r3, #1
 810e12a:	4a3d      	ldr	r2, [pc, #244]	; (810e220 <xTaskIncrementTick+0x158>)
 810e12c:	6013      	str	r3, [r2, #0]
 810e12e:	f000 fadb 	bl	810e6e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 810e132:	4b3c      	ldr	r3, [pc, #240]	; (810e224 <xTaskIncrementTick+0x15c>)
 810e134:	681b      	ldr	r3, [r3, #0]
 810e136:	693a      	ldr	r2, [r7, #16]
 810e138:	429a      	cmp	r2, r3
 810e13a:	d349      	bcc.n	810e1d0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810e13c:	4b36      	ldr	r3, [pc, #216]	; (810e218 <xTaskIncrementTick+0x150>)
 810e13e:	681b      	ldr	r3, [r3, #0]
 810e140:	681b      	ldr	r3, [r3, #0]
 810e142:	2b00      	cmp	r3, #0
 810e144:	d104      	bne.n	810e150 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810e146:	4b37      	ldr	r3, [pc, #220]	; (810e224 <xTaskIncrementTick+0x15c>)
 810e148:	f04f 32ff 	mov.w	r2, #4294967295
 810e14c:	601a      	str	r2, [r3, #0]
					break;
 810e14e:	e03f      	b.n	810e1d0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810e150:	4b31      	ldr	r3, [pc, #196]	; (810e218 <xTaskIncrementTick+0x150>)
 810e152:	681b      	ldr	r3, [r3, #0]
 810e154:	68db      	ldr	r3, [r3, #12]
 810e156:	68db      	ldr	r3, [r3, #12]
 810e158:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 810e15a:	68bb      	ldr	r3, [r7, #8]
 810e15c:	685b      	ldr	r3, [r3, #4]
 810e15e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 810e160:	693a      	ldr	r2, [r7, #16]
 810e162:	687b      	ldr	r3, [r7, #4]
 810e164:	429a      	cmp	r2, r3
 810e166:	d203      	bcs.n	810e170 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 810e168:	4a2e      	ldr	r2, [pc, #184]	; (810e224 <xTaskIncrementTick+0x15c>)
 810e16a:	687b      	ldr	r3, [r7, #4]
 810e16c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 810e16e:	e02f      	b.n	810e1d0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810e170:	68bb      	ldr	r3, [r7, #8]
 810e172:	3304      	adds	r3, #4
 810e174:	4618      	mov	r0, r3
 810e176:	f7fe fa4b 	bl	810c610 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 810e17a:	68bb      	ldr	r3, [r7, #8]
 810e17c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810e17e:	2b00      	cmp	r3, #0
 810e180:	d004      	beq.n	810e18c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810e182:	68bb      	ldr	r3, [r7, #8]
 810e184:	3318      	adds	r3, #24
 810e186:	4618      	mov	r0, r3
 810e188:	f7fe fa42 	bl	810c610 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 810e18c:	68bb      	ldr	r3, [r7, #8]
 810e18e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810e190:	4b25      	ldr	r3, [pc, #148]	; (810e228 <xTaskIncrementTick+0x160>)
 810e192:	681b      	ldr	r3, [r3, #0]
 810e194:	429a      	cmp	r2, r3
 810e196:	d903      	bls.n	810e1a0 <xTaskIncrementTick+0xd8>
 810e198:	68bb      	ldr	r3, [r7, #8]
 810e19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810e19c:	4a22      	ldr	r2, [pc, #136]	; (810e228 <xTaskIncrementTick+0x160>)
 810e19e:	6013      	str	r3, [r2, #0]
 810e1a0:	68bb      	ldr	r3, [r7, #8]
 810e1a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810e1a4:	4613      	mov	r3, r2
 810e1a6:	009b      	lsls	r3, r3, #2
 810e1a8:	4413      	add	r3, r2
 810e1aa:	009b      	lsls	r3, r3, #2
 810e1ac:	4a1f      	ldr	r2, [pc, #124]	; (810e22c <xTaskIncrementTick+0x164>)
 810e1ae:	441a      	add	r2, r3
 810e1b0:	68bb      	ldr	r3, [r7, #8]
 810e1b2:	3304      	adds	r3, #4
 810e1b4:	4619      	mov	r1, r3
 810e1b6:	4610      	mov	r0, r2
 810e1b8:	f7fe f9cd 	bl	810c556 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810e1bc:	68bb      	ldr	r3, [r7, #8]
 810e1be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810e1c0:	4b1b      	ldr	r3, [pc, #108]	; (810e230 <xTaskIncrementTick+0x168>)
 810e1c2:	681b      	ldr	r3, [r3, #0]
 810e1c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810e1c6:	429a      	cmp	r2, r3
 810e1c8:	d3b8      	bcc.n	810e13c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 810e1ca:	2301      	movs	r3, #1
 810e1cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810e1ce:	e7b5      	b.n	810e13c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 810e1d0:	4b17      	ldr	r3, [pc, #92]	; (810e230 <xTaskIncrementTick+0x168>)
 810e1d2:	681b      	ldr	r3, [r3, #0]
 810e1d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810e1d6:	4915      	ldr	r1, [pc, #84]	; (810e22c <xTaskIncrementTick+0x164>)
 810e1d8:	4613      	mov	r3, r2
 810e1da:	009b      	lsls	r3, r3, #2
 810e1dc:	4413      	add	r3, r2
 810e1de:	009b      	lsls	r3, r3, #2
 810e1e0:	440b      	add	r3, r1
 810e1e2:	681b      	ldr	r3, [r3, #0]
 810e1e4:	2b01      	cmp	r3, #1
 810e1e6:	d901      	bls.n	810e1ec <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 810e1e8:	2301      	movs	r3, #1
 810e1ea:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 810e1ec:	4b11      	ldr	r3, [pc, #68]	; (810e234 <xTaskIncrementTick+0x16c>)
 810e1ee:	681b      	ldr	r3, [r3, #0]
 810e1f0:	2b00      	cmp	r3, #0
 810e1f2:	d007      	beq.n	810e204 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 810e1f4:	2301      	movs	r3, #1
 810e1f6:	617b      	str	r3, [r7, #20]
 810e1f8:	e004      	b.n	810e204 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 810e1fa:	4b0f      	ldr	r3, [pc, #60]	; (810e238 <xTaskIncrementTick+0x170>)
 810e1fc:	681b      	ldr	r3, [r3, #0]
 810e1fe:	3301      	adds	r3, #1
 810e200:	4a0d      	ldr	r2, [pc, #52]	; (810e238 <xTaskIncrementTick+0x170>)
 810e202:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 810e204:	697b      	ldr	r3, [r7, #20]
}
 810e206:	4618      	mov	r0, r3
 810e208:	3718      	adds	r7, #24
 810e20a:	46bd      	mov	sp, r7
 810e20c:	bd80      	pop	{r7, pc}
 810e20e:	bf00      	nop
 810e210:	100226b0 	.word	0x100226b0
 810e214:	1002268c 	.word	0x1002268c
 810e218:	10022640 	.word	0x10022640
 810e21c:	10022644 	.word	0x10022644
 810e220:	100226a0 	.word	0x100226a0
 810e224:	100226a8 	.word	0x100226a8
 810e228:	10022690 	.word	0x10022690
 810e22c:	100221b8 	.word	0x100221b8
 810e230:	100221b4 	.word	0x100221b4
 810e234:	1002269c 	.word	0x1002269c
 810e238:	10022698 	.word	0x10022698

0810e23c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 810e23c:	b480      	push	{r7}
 810e23e:	b085      	sub	sp, #20
 810e240:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 810e242:	4b2a      	ldr	r3, [pc, #168]	; (810e2ec <vTaskSwitchContext+0xb0>)
 810e244:	681b      	ldr	r3, [r3, #0]
 810e246:	2b00      	cmp	r3, #0
 810e248:	d003      	beq.n	810e252 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 810e24a:	4b29      	ldr	r3, [pc, #164]	; (810e2f0 <vTaskSwitchContext+0xb4>)
 810e24c:	2201      	movs	r2, #1
 810e24e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 810e250:	e046      	b.n	810e2e0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 810e252:	4b27      	ldr	r3, [pc, #156]	; (810e2f0 <vTaskSwitchContext+0xb4>)
 810e254:	2200      	movs	r2, #0
 810e256:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810e258:	4b26      	ldr	r3, [pc, #152]	; (810e2f4 <vTaskSwitchContext+0xb8>)
 810e25a:	681b      	ldr	r3, [r3, #0]
 810e25c:	60fb      	str	r3, [r7, #12]
 810e25e:	e010      	b.n	810e282 <vTaskSwitchContext+0x46>
 810e260:	68fb      	ldr	r3, [r7, #12]
 810e262:	2b00      	cmp	r3, #0
 810e264:	d10a      	bne.n	810e27c <vTaskSwitchContext+0x40>
	__asm volatile
 810e266:	f04f 0350 	mov.w	r3, #80	; 0x50
 810e26a:	f383 8811 	msr	BASEPRI, r3
 810e26e:	f3bf 8f6f 	isb	sy
 810e272:	f3bf 8f4f 	dsb	sy
 810e276:	607b      	str	r3, [r7, #4]
}
 810e278:	bf00      	nop
 810e27a:	e7fe      	b.n	810e27a <vTaskSwitchContext+0x3e>
 810e27c:	68fb      	ldr	r3, [r7, #12]
 810e27e:	3b01      	subs	r3, #1
 810e280:	60fb      	str	r3, [r7, #12]
 810e282:	491d      	ldr	r1, [pc, #116]	; (810e2f8 <vTaskSwitchContext+0xbc>)
 810e284:	68fa      	ldr	r2, [r7, #12]
 810e286:	4613      	mov	r3, r2
 810e288:	009b      	lsls	r3, r3, #2
 810e28a:	4413      	add	r3, r2
 810e28c:	009b      	lsls	r3, r3, #2
 810e28e:	440b      	add	r3, r1
 810e290:	681b      	ldr	r3, [r3, #0]
 810e292:	2b00      	cmp	r3, #0
 810e294:	d0e4      	beq.n	810e260 <vTaskSwitchContext+0x24>
 810e296:	68fa      	ldr	r2, [r7, #12]
 810e298:	4613      	mov	r3, r2
 810e29a:	009b      	lsls	r3, r3, #2
 810e29c:	4413      	add	r3, r2
 810e29e:	009b      	lsls	r3, r3, #2
 810e2a0:	4a15      	ldr	r2, [pc, #84]	; (810e2f8 <vTaskSwitchContext+0xbc>)
 810e2a2:	4413      	add	r3, r2
 810e2a4:	60bb      	str	r3, [r7, #8]
 810e2a6:	68bb      	ldr	r3, [r7, #8]
 810e2a8:	685b      	ldr	r3, [r3, #4]
 810e2aa:	685a      	ldr	r2, [r3, #4]
 810e2ac:	68bb      	ldr	r3, [r7, #8]
 810e2ae:	605a      	str	r2, [r3, #4]
 810e2b0:	68bb      	ldr	r3, [r7, #8]
 810e2b2:	685a      	ldr	r2, [r3, #4]
 810e2b4:	68bb      	ldr	r3, [r7, #8]
 810e2b6:	3308      	adds	r3, #8
 810e2b8:	429a      	cmp	r2, r3
 810e2ba:	d104      	bne.n	810e2c6 <vTaskSwitchContext+0x8a>
 810e2bc:	68bb      	ldr	r3, [r7, #8]
 810e2be:	685b      	ldr	r3, [r3, #4]
 810e2c0:	685a      	ldr	r2, [r3, #4]
 810e2c2:	68bb      	ldr	r3, [r7, #8]
 810e2c4:	605a      	str	r2, [r3, #4]
 810e2c6:	68bb      	ldr	r3, [r7, #8]
 810e2c8:	685b      	ldr	r3, [r3, #4]
 810e2ca:	68db      	ldr	r3, [r3, #12]
 810e2cc:	4a0b      	ldr	r2, [pc, #44]	; (810e2fc <vTaskSwitchContext+0xc0>)
 810e2ce:	6013      	str	r3, [r2, #0]
 810e2d0:	4a08      	ldr	r2, [pc, #32]	; (810e2f4 <vTaskSwitchContext+0xb8>)
 810e2d2:	68fb      	ldr	r3, [r7, #12]
 810e2d4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 810e2d6:	4b09      	ldr	r3, [pc, #36]	; (810e2fc <vTaskSwitchContext+0xc0>)
 810e2d8:	681b      	ldr	r3, [r3, #0]
 810e2da:	3364      	adds	r3, #100	; 0x64
 810e2dc:	4a08      	ldr	r2, [pc, #32]	; (810e300 <vTaskSwitchContext+0xc4>)
 810e2de:	6013      	str	r3, [r2, #0]
}
 810e2e0:	bf00      	nop
 810e2e2:	3714      	adds	r7, #20
 810e2e4:	46bd      	mov	sp, r7
 810e2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e2ea:	4770      	bx	lr
 810e2ec:	100226b0 	.word	0x100226b0
 810e2f0:	1002269c 	.word	0x1002269c
 810e2f4:	10022690 	.word	0x10022690
 810e2f8:	100221b8 	.word	0x100221b8
 810e2fc:	100221b4 	.word	0x100221b4
 810e300:	1000001c 	.word	0x1000001c

0810e304 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 810e304:	b580      	push	{r7, lr}
 810e306:	b084      	sub	sp, #16
 810e308:	af00      	add	r7, sp, #0
 810e30a:	6078      	str	r0, [r7, #4]
 810e30c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 810e30e:	687b      	ldr	r3, [r7, #4]
 810e310:	2b00      	cmp	r3, #0
 810e312:	d10a      	bne.n	810e32a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 810e314:	f04f 0350 	mov.w	r3, #80	; 0x50
 810e318:	f383 8811 	msr	BASEPRI, r3
 810e31c:	f3bf 8f6f 	isb	sy
 810e320:	f3bf 8f4f 	dsb	sy
 810e324:	60fb      	str	r3, [r7, #12]
}
 810e326:	bf00      	nop
 810e328:	e7fe      	b.n	810e328 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810e32a:	4b07      	ldr	r3, [pc, #28]	; (810e348 <vTaskPlaceOnEventList+0x44>)
 810e32c:	681b      	ldr	r3, [r3, #0]
 810e32e:	3318      	adds	r3, #24
 810e330:	4619      	mov	r1, r3
 810e332:	6878      	ldr	r0, [r7, #4]
 810e334:	f7fe f933 	bl	810c59e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 810e338:	2101      	movs	r1, #1
 810e33a:	6838      	ldr	r0, [r7, #0]
 810e33c:	f000 fd80 	bl	810ee40 <prvAddCurrentTaskToDelayedList>
}
 810e340:	bf00      	nop
 810e342:	3710      	adds	r7, #16
 810e344:	46bd      	mov	sp, r7
 810e346:	bd80      	pop	{r7, pc}
 810e348:	100221b4 	.word	0x100221b4

0810e34c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 810e34c:	b580      	push	{r7, lr}
 810e34e:	b086      	sub	sp, #24
 810e350:	af00      	add	r7, sp, #0
 810e352:	60f8      	str	r0, [r7, #12]
 810e354:	60b9      	str	r1, [r7, #8]
 810e356:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 810e358:	68fb      	ldr	r3, [r7, #12]
 810e35a:	2b00      	cmp	r3, #0
 810e35c:	d10a      	bne.n	810e374 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 810e35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810e362:	f383 8811 	msr	BASEPRI, r3
 810e366:	f3bf 8f6f 	isb	sy
 810e36a:	f3bf 8f4f 	dsb	sy
 810e36e:	617b      	str	r3, [r7, #20]
}
 810e370:	bf00      	nop
 810e372:	e7fe      	b.n	810e372 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810e374:	4b0a      	ldr	r3, [pc, #40]	; (810e3a0 <vTaskPlaceOnEventListRestricted+0x54>)
 810e376:	681b      	ldr	r3, [r3, #0]
 810e378:	3318      	adds	r3, #24
 810e37a:	4619      	mov	r1, r3
 810e37c:	68f8      	ldr	r0, [r7, #12]
 810e37e:	f7fe f8ea 	bl	810c556 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 810e382:	687b      	ldr	r3, [r7, #4]
 810e384:	2b00      	cmp	r3, #0
 810e386:	d002      	beq.n	810e38e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 810e388:	f04f 33ff 	mov.w	r3, #4294967295
 810e38c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 810e38e:	6879      	ldr	r1, [r7, #4]
 810e390:	68b8      	ldr	r0, [r7, #8]
 810e392:	f000 fd55 	bl	810ee40 <prvAddCurrentTaskToDelayedList>
	}
 810e396:	bf00      	nop
 810e398:	3718      	adds	r7, #24
 810e39a:	46bd      	mov	sp, r7
 810e39c:	bd80      	pop	{r7, pc}
 810e39e:	bf00      	nop
 810e3a0:	100221b4 	.word	0x100221b4

0810e3a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 810e3a4:	b580      	push	{r7, lr}
 810e3a6:	b086      	sub	sp, #24
 810e3a8:	af00      	add	r7, sp, #0
 810e3aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810e3ac:	687b      	ldr	r3, [r7, #4]
 810e3ae:	68db      	ldr	r3, [r3, #12]
 810e3b0:	68db      	ldr	r3, [r3, #12]
 810e3b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 810e3b4:	693b      	ldr	r3, [r7, #16]
 810e3b6:	2b00      	cmp	r3, #0
 810e3b8:	d10a      	bne.n	810e3d0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 810e3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 810e3be:	f383 8811 	msr	BASEPRI, r3
 810e3c2:	f3bf 8f6f 	isb	sy
 810e3c6:	f3bf 8f4f 	dsb	sy
 810e3ca:	60fb      	str	r3, [r7, #12]
}
 810e3cc:	bf00      	nop
 810e3ce:	e7fe      	b.n	810e3ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 810e3d0:	693b      	ldr	r3, [r7, #16]
 810e3d2:	3318      	adds	r3, #24
 810e3d4:	4618      	mov	r0, r3
 810e3d6:	f7fe f91b 	bl	810c610 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810e3da:	4b1e      	ldr	r3, [pc, #120]	; (810e454 <xTaskRemoveFromEventList+0xb0>)
 810e3dc:	681b      	ldr	r3, [r3, #0]
 810e3de:	2b00      	cmp	r3, #0
 810e3e0:	d11d      	bne.n	810e41e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 810e3e2:	693b      	ldr	r3, [r7, #16]
 810e3e4:	3304      	adds	r3, #4
 810e3e6:	4618      	mov	r0, r3
 810e3e8:	f7fe f912 	bl	810c610 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 810e3ec:	693b      	ldr	r3, [r7, #16]
 810e3ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810e3f0:	4b19      	ldr	r3, [pc, #100]	; (810e458 <xTaskRemoveFromEventList+0xb4>)
 810e3f2:	681b      	ldr	r3, [r3, #0]
 810e3f4:	429a      	cmp	r2, r3
 810e3f6:	d903      	bls.n	810e400 <xTaskRemoveFromEventList+0x5c>
 810e3f8:	693b      	ldr	r3, [r7, #16]
 810e3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810e3fc:	4a16      	ldr	r2, [pc, #88]	; (810e458 <xTaskRemoveFromEventList+0xb4>)
 810e3fe:	6013      	str	r3, [r2, #0]
 810e400:	693b      	ldr	r3, [r7, #16]
 810e402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810e404:	4613      	mov	r3, r2
 810e406:	009b      	lsls	r3, r3, #2
 810e408:	4413      	add	r3, r2
 810e40a:	009b      	lsls	r3, r3, #2
 810e40c:	4a13      	ldr	r2, [pc, #76]	; (810e45c <xTaskRemoveFromEventList+0xb8>)
 810e40e:	441a      	add	r2, r3
 810e410:	693b      	ldr	r3, [r7, #16]
 810e412:	3304      	adds	r3, #4
 810e414:	4619      	mov	r1, r3
 810e416:	4610      	mov	r0, r2
 810e418:	f7fe f89d 	bl	810c556 <vListInsertEnd>
 810e41c:	e005      	b.n	810e42a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 810e41e:	693b      	ldr	r3, [r7, #16]
 810e420:	3318      	adds	r3, #24
 810e422:	4619      	mov	r1, r3
 810e424:	480e      	ldr	r0, [pc, #56]	; (810e460 <xTaskRemoveFromEventList+0xbc>)
 810e426:	f7fe f896 	bl	810c556 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 810e42a:	693b      	ldr	r3, [r7, #16]
 810e42c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810e42e:	4b0d      	ldr	r3, [pc, #52]	; (810e464 <xTaskRemoveFromEventList+0xc0>)
 810e430:	681b      	ldr	r3, [r3, #0]
 810e432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810e434:	429a      	cmp	r2, r3
 810e436:	d905      	bls.n	810e444 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 810e438:	2301      	movs	r3, #1
 810e43a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 810e43c:	4b0a      	ldr	r3, [pc, #40]	; (810e468 <xTaskRemoveFromEventList+0xc4>)
 810e43e:	2201      	movs	r2, #1
 810e440:	601a      	str	r2, [r3, #0]
 810e442:	e001      	b.n	810e448 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 810e444:	2300      	movs	r3, #0
 810e446:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 810e448:	697b      	ldr	r3, [r7, #20]
}
 810e44a:	4618      	mov	r0, r3
 810e44c:	3718      	adds	r7, #24
 810e44e:	46bd      	mov	sp, r7
 810e450:	bd80      	pop	{r7, pc}
 810e452:	bf00      	nop
 810e454:	100226b0 	.word	0x100226b0
 810e458:	10022690 	.word	0x10022690
 810e45c:	100221b8 	.word	0x100221b8
 810e460:	10022648 	.word	0x10022648
 810e464:	100221b4 	.word	0x100221b4
 810e468:	1002269c 	.word	0x1002269c

0810e46c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 810e46c:	b480      	push	{r7}
 810e46e:	b083      	sub	sp, #12
 810e470:	af00      	add	r7, sp, #0
 810e472:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 810e474:	4b06      	ldr	r3, [pc, #24]	; (810e490 <vTaskInternalSetTimeOutState+0x24>)
 810e476:	681a      	ldr	r2, [r3, #0]
 810e478:	687b      	ldr	r3, [r7, #4]
 810e47a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 810e47c:	4b05      	ldr	r3, [pc, #20]	; (810e494 <vTaskInternalSetTimeOutState+0x28>)
 810e47e:	681a      	ldr	r2, [r3, #0]
 810e480:	687b      	ldr	r3, [r7, #4]
 810e482:	605a      	str	r2, [r3, #4]
}
 810e484:	bf00      	nop
 810e486:	370c      	adds	r7, #12
 810e488:	46bd      	mov	sp, r7
 810e48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e48e:	4770      	bx	lr
 810e490:	100226a0 	.word	0x100226a0
 810e494:	1002268c 	.word	0x1002268c

0810e498 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 810e498:	b580      	push	{r7, lr}
 810e49a:	b088      	sub	sp, #32
 810e49c:	af00      	add	r7, sp, #0
 810e49e:	6078      	str	r0, [r7, #4]
 810e4a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 810e4a2:	687b      	ldr	r3, [r7, #4]
 810e4a4:	2b00      	cmp	r3, #0
 810e4a6:	d10a      	bne.n	810e4be <xTaskCheckForTimeOut+0x26>
	__asm volatile
 810e4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 810e4ac:	f383 8811 	msr	BASEPRI, r3
 810e4b0:	f3bf 8f6f 	isb	sy
 810e4b4:	f3bf 8f4f 	dsb	sy
 810e4b8:	613b      	str	r3, [r7, #16]
}
 810e4ba:	bf00      	nop
 810e4bc:	e7fe      	b.n	810e4bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 810e4be:	683b      	ldr	r3, [r7, #0]
 810e4c0:	2b00      	cmp	r3, #0
 810e4c2:	d10a      	bne.n	810e4da <xTaskCheckForTimeOut+0x42>
	__asm volatile
 810e4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 810e4c8:	f383 8811 	msr	BASEPRI, r3
 810e4cc:	f3bf 8f6f 	isb	sy
 810e4d0:	f3bf 8f4f 	dsb	sy
 810e4d4:	60fb      	str	r3, [r7, #12]
}
 810e4d6:	bf00      	nop
 810e4d8:	e7fe      	b.n	810e4d8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 810e4da:	f7fe f9f3 	bl	810c8c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 810e4de:	4b1d      	ldr	r3, [pc, #116]	; (810e554 <xTaskCheckForTimeOut+0xbc>)
 810e4e0:	681b      	ldr	r3, [r3, #0]
 810e4e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 810e4e4:	687b      	ldr	r3, [r7, #4]
 810e4e6:	685b      	ldr	r3, [r3, #4]
 810e4e8:	69ba      	ldr	r2, [r7, #24]
 810e4ea:	1ad3      	subs	r3, r2, r3
 810e4ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 810e4ee:	683b      	ldr	r3, [r7, #0]
 810e4f0:	681b      	ldr	r3, [r3, #0]
 810e4f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 810e4f6:	d102      	bne.n	810e4fe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 810e4f8:	2300      	movs	r3, #0
 810e4fa:	61fb      	str	r3, [r7, #28]
 810e4fc:	e023      	b.n	810e546 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 810e4fe:	687b      	ldr	r3, [r7, #4]
 810e500:	681a      	ldr	r2, [r3, #0]
 810e502:	4b15      	ldr	r3, [pc, #84]	; (810e558 <xTaskCheckForTimeOut+0xc0>)
 810e504:	681b      	ldr	r3, [r3, #0]
 810e506:	429a      	cmp	r2, r3
 810e508:	d007      	beq.n	810e51a <xTaskCheckForTimeOut+0x82>
 810e50a:	687b      	ldr	r3, [r7, #4]
 810e50c:	685b      	ldr	r3, [r3, #4]
 810e50e:	69ba      	ldr	r2, [r7, #24]
 810e510:	429a      	cmp	r2, r3
 810e512:	d302      	bcc.n	810e51a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 810e514:	2301      	movs	r3, #1
 810e516:	61fb      	str	r3, [r7, #28]
 810e518:	e015      	b.n	810e546 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 810e51a:	683b      	ldr	r3, [r7, #0]
 810e51c:	681b      	ldr	r3, [r3, #0]
 810e51e:	697a      	ldr	r2, [r7, #20]
 810e520:	429a      	cmp	r2, r3
 810e522:	d20b      	bcs.n	810e53c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 810e524:	683b      	ldr	r3, [r7, #0]
 810e526:	681a      	ldr	r2, [r3, #0]
 810e528:	697b      	ldr	r3, [r7, #20]
 810e52a:	1ad2      	subs	r2, r2, r3
 810e52c:	683b      	ldr	r3, [r7, #0]
 810e52e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 810e530:	6878      	ldr	r0, [r7, #4]
 810e532:	f7ff ff9b 	bl	810e46c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 810e536:	2300      	movs	r3, #0
 810e538:	61fb      	str	r3, [r7, #28]
 810e53a:	e004      	b.n	810e546 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 810e53c:	683b      	ldr	r3, [r7, #0]
 810e53e:	2200      	movs	r2, #0
 810e540:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 810e542:	2301      	movs	r3, #1
 810e544:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 810e546:	f7fe f9ed 	bl	810c924 <vPortExitCritical>

	return xReturn;
 810e54a:	69fb      	ldr	r3, [r7, #28]
}
 810e54c:	4618      	mov	r0, r3
 810e54e:	3720      	adds	r7, #32
 810e550:	46bd      	mov	sp, r7
 810e552:	bd80      	pop	{r7, pc}
 810e554:	1002268c 	.word	0x1002268c
 810e558:	100226a0 	.word	0x100226a0

0810e55c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 810e55c:	b480      	push	{r7}
 810e55e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 810e560:	4b03      	ldr	r3, [pc, #12]	; (810e570 <vTaskMissedYield+0x14>)
 810e562:	2201      	movs	r2, #1
 810e564:	601a      	str	r2, [r3, #0]
}
 810e566:	bf00      	nop
 810e568:	46bd      	mov	sp, r7
 810e56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e56e:	4770      	bx	lr
 810e570:	1002269c 	.word	0x1002269c

0810e574 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 810e574:	b580      	push	{r7, lr}
 810e576:	b082      	sub	sp, #8
 810e578:	af00      	add	r7, sp, #0
 810e57a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 810e57c:	f000 f852 	bl	810e624 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 810e580:	4b06      	ldr	r3, [pc, #24]	; (810e59c <prvIdleTask+0x28>)
 810e582:	681b      	ldr	r3, [r3, #0]
 810e584:	2b01      	cmp	r3, #1
 810e586:	d9f9      	bls.n	810e57c <prvIdleTask+0x8>
			{
				taskYIELD();
 810e588:	4b05      	ldr	r3, [pc, #20]	; (810e5a0 <prvIdleTask+0x2c>)
 810e58a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810e58e:	601a      	str	r2, [r3, #0]
 810e590:	f3bf 8f4f 	dsb	sy
 810e594:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 810e598:	e7f0      	b.n	810e57c <prvIdleTask+0x8>
 810e59a:	bf00      	nop
 810e59c:	100221b8 	.word	0x100221b8
 810e5a0:	e000ed04 	.word	0xe000ed04

0810e5a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 810e5a4:	b580      	push	{r7, lr}
 810e5a6:	b082      	sub	sp, #8
 810e5a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810e5aa:	2300      	movs	r3, #0
 810e5ac:	607b      	str	r3, [r7, #4]
 810e5ae:	e00c      	b.n	810e5ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 810e5b0:	687a      	ldr	r2, [r7, #4]
 810e5b2:	4613      	mov	r3, r2
 810e5b4:	009b      	lsls	r3, r3, #2
 810e5b6:	4413      	add	r3, r2
 810e5b8:	009b      	lsls	r3, r3, #2
 810e5ba:	4a12      	ldr	r2, [pc, #72]	; (810e604 <prvInitialiseTaskLists+0x60>)
 810e5bc:	4413      	add	r3, r2
 810e5be:	4618      	mov	r0, r3
 810e5c0:	f7fd ff9c 	bl	810c4fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810e5c4:	687b      	ldr	r3, [r7, #4]
 810e5c6:	3301      	adds	r3, #1
 810e5c8:	607b      	str	r3, [r7, #4]
 810e5ca:	687b      	ldr	r3, [r7, #4]
 810e5cc:	2b37      	cmp	r3, #55	; 0x37
 810e5ce:	d9ef      	bls.n	810e5b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 810e5d0:	480d      	ldr	r0, [pc, #52]	; (810e608 <prvInitialiseTaskLists+0x64>)
 810e5d2:	f7fd ff93 	bl	810c4fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 810e5d6:	480d      	ldr	r0, [pc, #52]	; (810e60c <prvInitialiseTaskLists+0x68>)
 810e5d8:	f7fd ff90 	bl	810c4fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 810e5dc:	480c      	ldr	r0, [pc, #48]	; (810e610 <prvInitialiseTaskLists+0x6c>)
 810e5de:	f7fd ff8d 	bl	810c4fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 810e5e2:	480c      	ldr	r0, [pc, #48]	; (810e614 <prvInitialiseTaskLists+0x70>)
 810e5e4:	f7fd ff8a 	bl	810c4fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 810e5e8:	480b      	ldr	r0, [pc, #44]	; (810e618 <prvInitialiseTaskLists+0x74>)
 810e5ea:	f7fd ff87 	bl	810c4fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 810e5ee:	4b0b      	ldr	r3, [pc, #44]	; (810e61c <prvInitialiseTaskLists+0x78>)
 810e5f0:	4a05      	ldr	r2, [pc, #20]	; (810e608 <prvInitialiseTaskLists+0x64>)
 810e5f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 810e5f4:	4b0a      	ldr	r3, [pc, #40]	; (810e620 <prvInitialiseTaskLists+0x7c>)
 810e5f6:	4a05      	ldr	r2, [pc, #20]	; (810e60c <prvInitialiseTaskLists+0x68>)
 810e5f8:	601a      	str	r2, [r3, #0]
}
 810e5fa:	bf00      	nop
 810e5fc:	3708      	adds	r7, #8
 810e5fe:	46bd      	mov	sp, r7
 810e600:	bd80      	pop	{r7, pc}
 810e602:	bf00      	nop
 810e604:	100221b8 	.word	0x100221b8
 810e608:	10022618 	.word	0x10022618
 810e60c:	1002262c 	.word	0x1002262c
 810e610:	10022648 	.word	0x10022648
 810e614:	1002265c 	.word	0x1002265c
 810e618:	10022674 	.word	0x10022674
 810e61c:	10022640 	.word	0x10022640
 810e620:	10022644 	.word	0x10022644

0810e624 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 810e624:	b580      	push	{r7, lr}
 810e626:	b082      	sub	sp, #8
 810e628:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810e62a:	e019      	b.n	810e660 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 810e62c:	f7fe f94a 	bl	810c8c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810e630:	4b10      	ldr	r3, [pc, #64]	; (810e674 <prvCheckTasksWaitingTermination+0x50>)
 810e632:	68db      	ldr	r3, [r3, #12]
 810e634:	68db      	ldr	r3, [r3, #12]
 810e636:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810e638:	687b      	ldr	r3, [r7, #4]
 810e63a:	3304      	adds	r3, #4
 810e63c:	4618      	mov	r0, r3
 810e63e:	f7fd ffe7 	bl	810c610 <uxListRemove>
				--uxCurrentNumberOfTasks;
 810e642:	4b0d      	ldr	r3, [pc, #52]	; (810e678 <prvCheckTasksWaitingTermination+0x54>)
 810e644:	681b      	ldr	r3, [r3, #0]
 810e646:	3b01      	subs	r3, #1
 810e648:	4a0b      	ldr	r2, [pc, #44]	; (810e678 <prvCheckTasksWaitingTermination+0x54>)
 810e64a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 810e64c:	4b0b      	ldr	r3, [pc, #44]	; (810e67c <prvCheckTasksWaitingTermination+0x58>)
 810e64e:	681b      	ldr	r3, [r3, #0]
 810e650:	3b01      	subs	r3, #1
 810e652:	4a0a      	ldr	r2, [pc, #40]	; (810e67c <prvCheckTasksWaitingTermination+0x58>)
 810e654:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 810e656:	f7fe f965 	bl	810c924 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 810e65a:	6878      	ldr	r0, [r7, #4]
 810e65c:	f000 f810 	bl	810e680 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810e660:	4b06      	ldr	r3, [pc, #24]	; (810e67c <prvCheckTasksWaitingTermination+0x58>)
 810e662:	681b      	ldr	r3, [r3, #0]
 810e664:	2b00      	cmp	r3, #0
 810e666:	d1e1      	bne.n	810e62c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 810e668:	bf00      	nop
 810e66a:	bf00      	nop
 810e66c:	3708      	adds	r7, #8
 810e66e:	46bd      	mov	sp, r7
 810e670:	bd80      	pop	{r7, pc}
 810e672:	bf00      	nop
 810e674:	1002265c 	.word	0x1002265c
 810e678:	10022688 	.word	0x10022688
 810e67c:	10022670 	.word	0x10022670

0810e680 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 810e680:	b580      	push	{r7, lr}
 810e682:	b084      	sub	sp, #16
 810e684:	af00      	add	r7, sp, #0
 810e686:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 810e688:	687b      	ldr	r3, [r7, #4]
 810e68a:	3364      	adds	r3, #100	; 0x64
 810e68c:	4618      	mov	r0, r3
 810e68e:	f001 f823 	bl	810f6d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 810e692:	687b      	ldr	r3, [r7, #4]
 810e694:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 810e698:	2b00      	cmp	r3, #0
 810e69a:	d108      	bne.n	810e6ae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 810e69c:	687b      	ldr	r3, [r7, #4]
 810e69e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810e6a0:	4618      	mov	r0, r3
 810e6a2:	f7fd fe0d 	bl	810c2c0 <vPortFree>
				vPortFree( pxTCB );
 810e6a6:	6878      	ldr	r0, [r7, #4]
 810e6a8:	f7fd fe0a 	bl	810c2c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 810e6ac:	e018      	b.n	810e6e0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 810e6ae:	687b      	ldr	r3, [r7, #4]
 810e6b0:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 810e6b4:	2b01      	cmp	r3, #1
 810e6b6:	d103      	bne.n	810e6c0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 810e6b8:	6878      	ldr	r0, [r7, #4]
 810e6ba:	f7fd fe01 	bl	810c2c0 <vPortFree>
	}
 810e6be:	e00f      	b.n	810e6e0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 810e6c0:	687b      	ldr	r3, [r7, #4]
 810e6c2:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 810e6c6:	2b02      	cmp	r3, #2
 810e6c8:	d00a      	beq.n	810e6e0 <prvDeleteTCB+0x60>
	__asm volatile
 810e6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 810e6ce:	f383 8811 	msr	BASEPRI, r3
 810e6d2:	f3bf 8f6f 	isb	sy
 810e6d6:	f3bf 8f4f 	dsb	sy
 810e6da:	60fb      	str	r3, [r7, #12]
}
 810e6dc:	bf00      	nop
 810e6de:	e7fe      	b.n	810e6de <prvDeleteTCB+0x5e>
	}
 810e6e0:	bf00      	nop
 810e6e2:	3710      	adds	r7, #16
 810e6e4:	46bd      	mov	sp, r7
 810e6e6:	bd80      	pop	{r7, pc}

0810e6e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 810e6e8:	b480      	push	{r7}
 810e6ea:	b083      	sub	sp, #12
 810e6ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810e6ee:	4b0c      	ldr	r3, [pc, #48]	; (810e720 <prvResetNextTaskUnblockTime+0x38>)
 810e6f0:	681b      	ldr	r3, [r3, #0]
 810e6f2:	681b      	ldr	r3, [r3, #0]
 810e6f4:	2b00      	cmp	r3, #0
 810e6f6:	d104      	bne.n	810e702 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 810e6f8:	4b0a      	ldr	r3, [pc, #40]	; (810e724 <prvResetNextTaskUnblockTime+0x3c>)
 810e6fa:	f04f 32ff 	mov.w	r2, #4294967295
 810e6fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 810e700:	e008      	b.n	810e714 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810e702:	4b07      	ldr	r3, [pc, #28]	; (810e720 <prvResetNextTaskUnblockTime+0x38>)
 810e704:	681b      	ldr	r3, [r3, #0]
 810e706:	68db      	ldr	r3, [r3, #12]
 810e708:	68db      	ldr	r3, [r3, #12]
 810e70a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 810e70c:	687b      	ldr	r3, [r7, #4]
 810e70e:	685b      	ldr	r3, [r3, #4]
 810e710:	4a04      	ldr	r2, [pc, #16]	; (810e724 <prvResetNextTaskUnblockTime+0x3c>)
 810e712:	6013      	str	r3, [r2, #0]
}
 810e714:	bf00      	nop
 810e716:	370c      	adds	r7, #12
 810e718:	46bd      	mov	sp, r7
 810e71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e71e:	4770      	bx	lr
 810e720:	10022640 	.word	0x10022640
 810e724:	100226a8 	.word	0x100226a8

0810e728 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 810e728:	b480      	push	{r7}
 810e72a:	b083      	sub	sp, #12
 810e72c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 810e72e:	4b0b      	ldr	r3, [pc, #44]	; (810e75c <xTaskGetSchedulerState+0x34>)
 810e730:	681b      	ldr	r3, [r3, #0]
 810e732:	2b00      	cmp	r3, #0
 810e734:	d102      	bne.n	810e73c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 810e736:	2301      	movs	r3, #1
 810e738:	607b      	str	r3, [r7, #4]
 810e73a:	e008      	b.n	810e74e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810e73c:	4b08      	ldr	r3, [pc, #32]	; (810e760 <xTaskGetSchedulerState+0x38>)
 810e73e:	681b      	ldr	r3, [r3, #0]
 810e740:	2b00      	cmp	r3, #0
 810e742:	d102      	bne.n	810e74a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 810e744:	2302      	movs	r3, #2
 810e746:	607b      	str	r3, [r7, #4]
 810e748:	e001      	b.n	810e74e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 810e74a:	2300      	movs	r3, #0
 810e74c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 810e74e:	687b      	ldr	r3, [r7, #4]
	}
 810e750:	4618      	mov	r0, r3
 810e752:	370c      	adds	r7, #12
 810e754:	46bd      	mov	sp, r7
 810e756:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e75a:	4770      	bx	lr
 810e75c:	10022694 	.word	0x10022694
 810e760:	100226b0 	.word	0x100226b0

0810e764 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 810e764:	b580      	push	{r7, lr}
 810e766:	b084      	sub	sp, #16
 810e768:	af00      	add	r7, sp, #0
 810e76a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 810e76c:	687b      	ldr	r3, [r7, #4]
 810e76e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 810e770:	2300      	movs	r3, #0
 810e772:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 810e774:	687b      	ldr	r3, [r7, #4]
 810e776:	2b00      	cmp	r3, #0
 810e778:	d051      	beq.n	810e81e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 810e77a:	68bb      	ldr	r3, [r7, #8]
 810e77c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810e77e:	4b2a      	ldr	r3, [pc, #168]	; (810e828 <xTaskPriorityInherit+0xc4>)
 810e780:	681b      	ldr	r3, [r3, #0]
 810e782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810e784:	429a      	cmp	r2, r3
 810e786:	d241      	bcs.n	810e80c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 810e788:	68bb      	ldr	r3, [r7, #8]
 810e78a:	699b      	ldr	r3, [r3, #24]
 810e78c:	2b00      	cmp	r3, #0
 810e78e:	db06      	blt.n	810e79e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810e790:	4b25      	ldr	r3, [pc, #148]	; (810e828 <xTaskPriorityInherit+0xc4>)
 810e792:	681b      	ldr	r3, [r3, #0]
 810e794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810e796:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 810e79a:	68bb      	ldr	r3, [r7, #8]
 810e79c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 810e79e:	68bb      	ldr	r3, [r7, #8]
 810e7a0:	6959      	ldr	r1, [r3, #20]
 810e7a2:	68bb      	ldr	r3, [r7, #8]
 810e7a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810e7a6:	4613      	mov	r3, r2
 810e7a8:	009b      	lsls	r3, r3, #2
 810e7aa:	4413      	add	r3, r2
 810e7ac:	009b      	lsls	r3, r3, #2
 810e7ae:	4a1f      	ldr	r2, [pc, #124]	; (810e82c <xTaskPriorityInherit+0xc8>)
 810e7b0:	4413      	add	r3, r2
 810e7b2:	4299      	cmp	r1, r3
 810e7b4:	d122      	bne.n	810e7fc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810e7b6:	68bb      	ldr	r3, [r7, #8]
 810e7b8:	3304      	adds	r3, #4
 810e7ba:	4618      	mov	r0, r3
 810e7bc:	f7fd ff28 	bl	810c610 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 810e7c0:	4b19      	ldr	r3, [pc, #100]	; (810e828 <xTaskPriorityInherit+0xc4>)
 810e7c2:	681b      	ldr	r3, [r3, #0]
 810e7c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810e7c6:	68bb      	ldr	r3, [r7, #8]
 810e7c8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 810e7ca:	68bb      	ldr	r3, [r7, #8]
 810e7cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810e7ce:	4b18      	ldr	r3, [pc, #96]	; (810e830 <xTaskPriorityInherit+0xcc>)
 810e7d0:	681b      	ldr	r3, [r3, #0]
 810e7d2:	429a      	cmp	r2, r3
 810e7d4:	d903      	bls.n	810e7de <xTaskPriorityInherit+0x7a>
 810e7d6:	68bb      	ldr	r3, [r7, #8]
 810e7d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810e7da:	4a15      	ldr	r2, [pc, #84]	; (810e830 <xTaskPriorityInherit+0xcc>)
 810e7dc:	6013      	str	r3, [r2, #0]
 810e7de:	68bb      	ldr	r3, [r7, #8]
 810e7e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810e7e2:	4613      	mov	r3, r2
 810e7e4:	009b      	lsls	r3, r3, #2
 810e7e6:	4413      	add	r3, r2
 810e7e8:	009b      	lsls	r3, r3, #2
 810e7ea:	4a10      	ldr	r2, [pc, #64]	; (810e82c <xTaskPriorityInherit+0xc8>)
 810e7ec:	441a      	add	r2, r3
 810e7ee:	68bb      	ldr	r3, [r7, #8]
 810e7f0:	3304      	adds	r3, #4
 810e7f2:	4619      	mov	r1, r3
 810e7f4:	4610      	mov	r0, r2
 810e7f6:	f7fd feae 	bl	810c556 <vListInsertEnd>
 810e7fa:	e004      	b.n	810e806 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 810e7fc:	4b0a      	ldr	r3, [pc, #40]	; (810e828 <xTaskPriorityInherit+0xc4>)
 810e7fe:	681b      	ldr	r3, [r3, #0]
 810e800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810e802:	68bb      	ldr	r3, [r7, #8]
 810e804:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 810e806:	2301      	movs	r3, #1
 810e808:	60fb      	str	r3, [r7, #12]
 810e80a:	e008      	b.n	810e81e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 810e80c:	68bb      	ldr	r3, [r7, #8]
 810e80e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810e810:	4b05      	ldr	r3, [pc, #20]	; (810e828 <xTaskPriorityInherit+0xc4>)
 810e812:	681b      	ldr	r3, [r3, #0]
 810e814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810e816:	429a      	cmp	r2, r3
 810e818:	d201      	bcs.n	810e81e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 810e81a:	2301      	movs	r3, #1
 810e81c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 810e81e:	68fb      	ldr	r3, [r7, #12]
	}
 810e820:	4618      	mov	r0, r3
 810e822:	3710      	adds	r7, #16
 810e824:	46bd      	mov	sp, r7
 810e826:	bd80      	pop	{r7, pc}
 810e828:	100221b4 	.word	0x100221b4
 810e82c:	100221b8 	.word	0x100221b8
 810e830:	10022690 	.word	0x10022690

0810e834 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 810e834:	b580      	push	{r7, lr}
 810e836:	b086      	sub	sp, #24
 810e838:	af00      	add	r7, sp, #0
 810e83a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 810e83c:	687b      	ldr	r3, [r7, #4]
 810e83e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 810e840:	2300      	movs	r3, #0
 810e842:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 810e844:	687b      	ldr	r3, [r7, #4]
 810e846:	2b00      	cmp	r3, #0
 810e848:	d056      	beq.n	810e8f8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 810e84a:	4b2e      	ldr	r3, [pc, #184]	; (810e904 <xTaskPriorityDisinherit+0xd0>)
 810e84c:	681b      	ldr	r3, [r3, #0]
 810e84e:	693a      	ldr	r2, [r7, #16]
 810e850:	429a      	cmp	r2, r3
 810e852:	d00a      	beq.n	810e86a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 810e854:	f04f 0350 	mov.w	r3, #80	; 0x50
 810e858:	f383 8811 	msr	BASEPRI, r3
 810e85c:	f3bf 8f6f 	isb	sy
 810e860:	f3bf 8f4f 	dsb	sy
 810e864:	60fb      	str	r3, [r7, #12]
}
 810e866:	bf00      	nop
 810e868:	e7fe      	b.n	810e868 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 810e86a:	693b      	ldr	r3, [r7, #16]
 810e86c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810e86e:	2b00      	cmp	r3, #0
 810e870:	d10a      	bne.n	810e888 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 810e872:	f04f 0350 	mov.w	r3, #80	; 0x50
 810e876:	f383 8811 	msr	BASEPRI, r3
 810e87a:	f3bf 8f6f 	isb	sy
 810e87e:	f3bf 8f4f 	dsb	sy
 810e882:	60bb      	str	r3, [r7, #8]
}
 810e884:	bf00      	nop
 810e886:	e7fe      	b.n	810e886 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 810e888:	693b      	ldr	r3, [r7, #16]
 810e88a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810e88c:	1e5a      	subs	r2, r3, #1
 810e88e:	693b      	ldr	r3, [r7, #16]
 810e890:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 810e892:	693b      	ldr	r3, [r7, #16]
 810e894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810e896:	693b      	ldr	r3, [r7, #16]
 810e898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810e89a:	429a      	cmp	r2, r3
 810e89c:	d02c      	beq.n	810e8f8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 810e89e:	693b      	ldr	r3, [r7, #16]
 810e8a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810e8a2:	2b00      	cmp	r3, #0
 810e8a4:	d128      	bne.n	810e8f8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810e8a6:	693b      	ldr	r3, [r7, #16]
 810e8a8:	3304      	adds	r3, #4
 810e8aa:	4618      	mov	r0, r3
 810e8ac:	f7fd feb0 	bl	810c610 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 810e8b0:	693b      	ldr	r3, [r7, #16]
 810e8b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810e8b4:	693b      	ldr	r3, [r7, #16]
 810e8b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810e8b8:	693b      	ldr	r3, [r7, #16]
 810e8ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810e8bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 810e8c0:	693b      	ldr	r3, [r7, #16]
 810e8c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 810e8c4:	693b      	ldr	r3, [r7, #16]
 810e8c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810e8c8:	4b0f      	ldr	r3, [pc, #60]	; (810e908 <xTaskPriorityDisinherit+0xd4>)
 810e8ca:	681b      	ldr	r3, [r3, #0]
 810e8cc:	429a      	cmp	r2, r3
 810e8ce:	d903      	bls.n	810e8d8 <xTaskPriorityDisinherit+0xa4>
 810e8d0:	693b      	ldr	r3, [r7, #16]
 810e8d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810e8d4:	4a0c      	ldr	r2, [pc, #48]	; (810e908 <xTaskPriorityDisinherit+0xd4>)
 810e8d6:	6013      	str	r3, [r2, #0]
 810e8d8:	693b      	ldr	r3, [r7, #16]
 810e8da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810e8dc:	4613      	mov	r3, r2
 810e8de:	009b      	lsls	r3, r3, #2
 810e8e0:	4413      	add	r3, r2
 810e8e2:	009b      	lsls	r3, r3, #2
 810e8e4:	4a09      	ldr	r2, [pc, #36]	; (810e90c <xTaskPriorityDisinherit+0xd8>)
 810e8e6:	441a      	add	r2, r3
 810e8e8:	693b      	ldr	r3, [r7, #16]
 810e8ea:	3304      	adds	r3, #4
 810e8ec:	4619      	mov	r1, r3
 810e8ee:	4610      	mov	r0, r2
 810e8f0:	f7fd fe31 	bl	810c556 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 810e8f4:	2301      	movs	r3, #1
 810e8f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 810e8f8:	697b      	ldr	r3, [r7, #20]
	}
 810e8fa:	4618      	mov	r0, r3
 810e8fc:	3718      	adds	r7, #24
 810e8fe:	46bd      	mov	sp, r7
 810e900:	bd80      	pop	{r7, pc}
 810e902:	bf00      	nop
 810e904:	100221b4 	.word	0x100221b4
 810e908:	10022690 	.word	0x10022690
 810e90c:	100221b8 	.word	0x100221b8

0810e910 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 810e910:	b580      	push	{r7, lr}
 810e912:	b088      	sub	sp, #32
 810e914:	af00      	add	r7, sp, #0
 810e916:	6078      	str	r0, [r7, #4]
 810e918:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 810e91a:	687b      	ldr	r3, [r7, #4]
 810e91c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 810e91e:	2301      	movs	r3, #1
 810e920:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 810e922:	687b      	ldr	r3, [r7, #4]
 810e924:	2b00      	cmp	r3, #0
 810e926:	d06a      	beq.n	810e9fe <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 810e928:	69bb      	ldr	r3, [r7, #24]
 810e92a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810e92c:	2b00      	cmp	r3, #0
 810e92e:	d10a      	bne.n	810e946 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 810e930:	f04f 0350 	mov.w	r3, #80	; 0x50
 810e934:	f383 8811 	msr	BASEPRI, r3
 810e938:	f3bf 8f6f 	isb	sy
 810e93c:	f3bf 8f4f 	dsb	sy
 810e940:	60fb      	str	r3, [r7, #12]
}
 810e942:	bf00      	nop
 810e944:	e7fe      	b.n	810e944 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 810e946:	69bb      	ldr	r3, [r7, #24]
 810e948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810e94a:	683a      	ldr	r2, [r7, #0]
 810e94c:	429a      	cmp	r2, r3
 810e94e:	d902      	bls.n	810e956 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 810e950:	683b      	ldr	r3, [r7, #0]
 810e952:	61fb      	str	r3, [r7, #28]
 810e954:	e002      	b.n	810e95c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 810e956:	69bb      	ldr	r3, [r7, #24]
 810e958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810e95a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 810e95c:	69bb      	ldr	r3, [r7, #24]
 810e95e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810e960:	69fa      	ldr	r2, [r7, #28]
 810e962:	429a      	cmp	r2, r3
 810e964:	d04b      	beq.n	810e9fe <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 810e966:	69bb      	ldr	r3, [r7, #24]
 810e968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810e96a:	697a      	ldr	r2, [r7, #20]
 810e96c:	429a      	cmp	r2, r3
 810e96e:	d146      	bne.n	810e9fe <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 810e970:	4b25      	ldr	r3, [pc, #148]	; (810ea08 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 810e972:	681b      	ldr	r3, [r3, #0]
 810e974:	69ba      	ldr	r2, [r7, #24]
 810e976:	429a      	cmp	r2, r3
 810e978:	d10a      	bne.n	810e990 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 810e97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810e97e:	f383 8811 	msr	BASEPRI, r3
 810e982:	f3bf 8f6f 	isb	sy
 810e986:	f3bf 8f4f 	dsb	sy
 810e98a:	60bb      	str	r3, [r7, #8]
}
 810e98c:	bf00      	nop
 810e98e:	e7fe      	b.n	810e98e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 810e990:	69bb      	ldr	r3, [r7, #24]
 810e992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810e994:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 810e996:	69bb      	ldr	r3, [r7, #24]
 810e998:	69fa      	ldr	r2, [r7, #28]
 810e99a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 810e99c:	69bb      	ldr	r3, [r7, #24]
 810e99e:	699b      	ldr	r3, [r3, #24]
 810e9a0:	2b00      	cmp	r3, #0
 810e9a2:	db04      	blt.n	810e9ae <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810e9a4:	69fb      	ldr	r3, [r7, #28]
 810e9a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 810e9aa:	69bb      	ldr	r3, [r7, #24]
 810e9ac:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 810e9ae:	69bb      	ldr	r3, [r7, #24]
 810e9b0:	6959      	ldr	r1, [r3, #20]
 810e9b2:	693a      	ldr	r2, [r7, #16]
 810e9b4:	4613      	mov	r3, r2
 810e9b6:	009b      	lsls	r3, r3, #2
 810e9b8:	4413      	add	r3, r2
 810e9ba:	009b      	lsls	r3, r3, #2
 810e9bc:	4a13      	ldr	r2, [pc, #76]	; (810ea0c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 810e9be:	4413      	add	r3, r2
 810e9c0:	4299      	cmp	r1, r3
 810e9c2:	d11c      	bne.n	810e9fe <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810e9c4:	69bb      	ldr	r3, [r7, #24]
 810e9c6:	3304      	adds	r3, #4
 810e9c8:	4618      	mov	r0, r3
 810e9ca:	f7fd fe21 	bl	810c610 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 810e9ce:	69bb      	ldr	r3, [r7, #24]
 810e9d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810e9d2:	4b0f      	ldr	r3, [pc, #60]	; (810ea10 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 810e9d4:	681b      	ldr	r3, [r3, #0]
 810e9d6:	429a      	cmp	r2, r3
 810e9d8:	d903      	bls.n	810e9e2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 810e9da:	69bb      	ldr	r3, [r7, #24]
 810e9dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810e9de:	4a0c      	ldr	r2, [pc, #48]	; (810ea10 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 810e9e0:	6013      	str	r3, [r2, #0]
 810e9e2:	69bb      	ldr	r3, [r7, #24]
 810e9e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810e9e6:	4613      	mov	r3, r2
 810e9e8:	009b      	lsls	r3, r3, #2
 810e9ea:	4413      	add	r3, r2
 810e9ec:	009b      	lsls	r3, r3, #2
 810e9ee:	4a07      	ldr	r2, [pc, #28]	; (810ea0c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 810e9f0:	441a      	add	r2, r3
 810e9f2:	69bb      	ldr	r3, [r7, #24]
 810e9f4:	3304      	adds	r3, #4
 810e9f6:	4619      	mov	r1, r3
 810e9f8:	4610      	mov	r0, r2
 810e9fa:	f7fd fdac 	bl	810c556 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810e9fe:	bf00      	nop
 810ea00:	3720      	adds	r7, #32
 810ea02:	46bd      	mov	sp, r7
 810ea04:	bd80      	pop	{r7, pc}
 810ea06:	bf00      	nop
 810ea08:	100221b4 	.word	0x100221b4
 810ea0c:	100221b8 	.word	0x100221b8
 810ea10:	10022690 	.word	0x10022690

0810ea14 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 810ea14:	b480      	push	{r7}
 810ea16:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 810ea18:	4b07      	ldr	r3, [pc, #28]	; (810ea38 <pvTaskIncrementMutexHeldCount+0x24>)
 810ea1a:	681b      	ldr	r3, [r3, #0]
 810ea1c:	2b00      	cmp	r3, #0
 810ea1e:	d004      	beq.n	810ea2a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 810ea20:	4b05      	ldr	r3, [pc, #20]	; (810ea38 <pvTaskIncrementMutexHeldCount+0x24>)
 810ea22:	681b      	ldr	r3, [r3, #0]
 810ea24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 810ea26:	3201      	adds	r2, #1
 810ea28:	661a      	str	r2, [r3, #96]	; 0x60
		}

		return pxCurrentTCB;
 810ea2a:	4b03      	ldr	r3, [pc, #12]	; (810ea38 <pvTaskIncrementMutexHeldCount+0x24>)
 810ea2c:	681b      	ldr	r3, [r3, #0]
	}
 810ea2e:	4618      	mov	r0, r3
 810ea30:	46bd      	mov	sp, r7
 810ea32:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ea36:	4770      	bx	lr
 810ea38:	100221b4 	.word	0x100221b4

0810ea3c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 810ea3c:	b580      	push	{r7, lr}
 810ea3e:	b086      	sub	sp, #24
 810ea40:	af00      	add	r7, sp, #0
 810ea42:	60f8      	str	r0, [r7, #12]
 810ea44:	60b9      	str	r1, [r7, #8]
 810ea46:	607a      	str	r2, [r7, #4]
 810ea48:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 810ea4a:	f7fd ff3b 	bl	810c8c4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 810ea4e:	4b29      	ldr	r3, [pc, #164]	; (810eaf4 <xTaskNotifyWait+0xb8>)
 810ea50:	681b      	ldr	r3, [r3, #0]
 810ea52:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 810ea56:	b2db      	uxtb	r3, r3
 810ea58:	2b02      	cmp	r3, #2
 810ea5a:	d01c      	beq.n	810ea96 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 810ea5c:	4b25      	ldr	r3, [pc, #148]	; (810eaf4 <xTaskNotifyWait+0xb8>)
 810ea5e:	681b      	ldr	r3, [r3, #0]
 810ea60:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 810ea64:	68fa      	ldr	r2, [r7, #12]
 810ea66:	43d2      	mvns	r2, r2
 810ea68:	400a      	ands	r2, r1
 810ea6a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 810ea6e:	4b21      	ldr	r3, [pc, #132]	; (810eaf4 <xTaskNotifyWait+0xb8>)
 810ea70:	681b      	ldr	r3, [r3, #0]
 810ea72:	2201      	movs	r2, #1
 810ea74:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

				if( xTicksToWait > ( TickType_t ) 0 )
 810ea78:	683b      	ldr	r3, [r7, #0]
 810ea7a:	2b00      	cmp	r3, #0
 810ea7c:	d00b      	beq.n	810ea96 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 810ea7e:	2101      	movs	r1, #1
 810ea80:	6838      	ldr	r0, [r7, #0]
 810ea82:	f000 f9dd 	bl	810ee40 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 810ea86:	4b1c      	ldr	r3, [pc, #112]	; (810eaf8 <xTaskNotifyWait+0xbc>)
 810ea88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810ea8c:	601a      	str	r2, [r3, #0]
 810ea8e:	f3bf 8f4f 	dsb	sy
 810ea92:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 810ea96:	f7fd ff45 	bl	810c924 <vPortExitCritical>

		taskENTER_CRITICAL();
 810ea9a:	f7fd ff13 	bl	810c8c4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 810ea9e:	687b      	ldr	r3, [r7, #4]
 810eaa0:	2b00      	cmp	r3, #0
 810eaa2:	d005      	beq.n	810eab0 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 810eaa4:	4b13      	ldr	r3, [pc, #76]	; (810eaf4 <xTaskNotifyWait+0xb8>)
 810eaa6:	681b      	ldr	r3, [r3, #0]
 810eaa8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 810eaac:	687b      	ldr	r3, [r7, #4]
 810eaae:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 810eab0:	4b10      	ldr	r3, [pc, #64]	; (810eaf4 <xTaskNotifyWait+0xb8>)
 810eab2:	681b      	ldr	r3, [r3, #0]
 810eab4:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 810eab8:	b2db      	uxtb	r3, r3
 810eaba:	2b02      	cmp	r3, #2
 810eabc:	d002      	beq.n	810eac4 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 810eabe:	2300      	movs	r3, #0
 810eac0:	617b      	str	r3, [r7, #20]
 810eac2:	e00a      	b.n	810eada <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 810eac4:	4b0b      	ldr	r3, [pc, #44]	; (810eaf4 <xTaskNotifyWait+0xb8>)
 810eac6:	681b      	ldr	r3, [r3, #0]
 810eac8:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 810eacc:	68ba      	ldr	r2, [r7, #8]
 810eace:	43d2      	mvns	r2, r2
 810ead0:	400a      	ands	r2, r1
 810ead2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
				xReturn = pdTRUE;
 810ead6:	2301      	movs	r3, #1
 810ead8:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 810eada:	4b06      	ldr	r3, [pc, #24]	; (810eaf4 <xTaskNotifyWait+0xb8>)
 810eadc:	681b      	ldr	r3, [r3, #0]
 810eade:	2200      	movs	r2, #0
 810eae0:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		}
		taskEXIT_CRITICAL();
 810eae4:	f7fd ff1e 	bl	810c924 <vPortExitCritical>

		return xReturn;
 810eae8:	697b      	ldr	r3, [r7, #20]
	}
 810eaea:	4618      	mov	r0, r3
 810eaec:	3718      	adds	r7, #24
 810eaee:	46bd      	mov	sp, r7
 810eaf0:	bd80      	pop	{r7, pc}
 810eaf2:	bf00      	nop
 810eaf4:	100221b4 	.word	0x100221b4
 810eaf8:	e000ed04 	.word	0xe000ed04

0810eafc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 810eafc:	b580      	push	{r7, lr}
 810eafe:	b08a      	sub	sp, #40	; 0x28
 810eb00:	af00      	add	r7, sp, #0
 810eb02:	60f8      	str	r0, [r7, #12]
 810eb04:	60b9      	str	r1, [r7, #8]
 810eb06:	603b      	str	r3, [r7, #0]
 810eb08:	4613      	mov	r3, r2
 810eb0a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 810eb0c:	2301      	movs	r3, #1
 810eb0e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 810eb10:	68fb      	ldr	r3, [r7, #12]
 810eb12:	2b00      	cmp	r3, #0
 810eb14:	d10a      	bne.n	810eb2c <xTaskGenericNotify+0x30>
	__asm volatile
 810eb16:	f04f 0350 	mov.w	r3, #80	; 0x50
 810eb1a:	f383 8811 	msr	BASEPRI, r3
 810eb1e:	f3bf 8f6f 	isb	sy
 810eb22:	f3bf 8f4f 	dsb	sy
 810eb26:	61bb      	str	r3, [r7, #24]
}
 810eb28:	bf00      	nop
 810eb2a:	e7fe      	b.n	810eb2a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 810eb2c:	68fb      	ldr	r3, [r7, #12]
 810eb2e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 810eb30:	f7fd fec8 	bl	810c8c4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 810eb34:	683b      	ldr	r3, [r7, #0]
 810eb36:	2b00      	cmp	r3, #0
 810eb38:	d004      	beq.n	810eb44 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 810eb3a:	6a3b      	ldr	r3, [r7, #32]
 810eb3c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 810eb40:	683b      	ldr	r3, [r7, #0]
 810eb42:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 810eb44:	6a3b      	ldr	r3, [r7, #32]
 810eb46:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 810eb4a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 810eb4c:	6a3b      	ldr	r3, [r7, #32]
 810eb4e:	2202      	movs	r2, #2
 810eb50:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

			switch( eAction )
 810eb54:	79fb      	ldrb	r3, [r7, #7]
 810eb56:	2b04      	cmp	r3, #4
 810eb58:	d82d      	bhi.n	810ebb6 <xTaskGenericNotify+0xba>
 810eb5a:	a201      	add	r2, pc, #4	; (adr r2, 810eb60 <xTaskGenericNotify+0x64>)
 810eb5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810eb60:	0810ebd9 	.word	0x0810ebd9
 810eb64:	0810eb75 	.word	0x0810eb75
 810eb68:	0810eb87 	.word	0x0810eb87
 810eb6c:	0810eb97 	.word	0x0810eb97
 810eb70:	0810eba1 	.word	0x0810eba1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 810eb74:	6a3b      	ldr	r3, [r7, #32]
 810eb76:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 810eb7a:	68bb      	ldr	r3, [r7, #8]
 810eb7c:	431a      	orrs	r2, r3
 810eb7e:	6a3b      	ldr	r3, [r7, #32]
 810eb80:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 810eb84:	e02b      	b.n	810ebde <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 810eb86:	6a3b      	ldr	r3, [r7, #32]
 810eb88:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 810eb8c:	1c5a      	adds	r2, r3, #1
 810eb8e:	6a3b      	ldr	r3, [r7, #32]
 810eb90:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 810eb94:	e023      	b.n	810ebde <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 810eb96:	6a3b      	ldr	r3, [r7, #32]
 810eb98:	68ba      	ldr	r2, [r7, #8]
 810eb9a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 810eb9e:	e01e      	b.n	810ebde <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 810eba0:	7ffb      	ldrb	r3, [r7, #31]
 810eba2:	2b02      	cmp	r3, #2
 810eba4:	d004      	beq.n	810ebb0 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 810eba6:	6a3b      	ldr	r3, [r7, #32]
 810eba8:	68ba      	ldr	r2, [r7, #8]
 810ebaa:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 810ebae:	e016      	b.n	810ebde <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 810ebb0:	2300      	movs	r3, #0
 810ebb2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 810ebb4:	e013      	b.n	810ebde <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 810ebb6:	6a3b      	ldr	r3, [r7, #32]
 810ebb8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 810ebbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 810ebc0:	d00c      	beq.n	810ebdc <xTaskGenericNotify+0xe0>
	__asm volatile
 810ebc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ebc6:	f383 8811 	msr	BASEPRI, r3
 810ebca:	f3bf 8f6f 	isb	sy
 810ebce:	f3bf 8f4f 	dsb	sy
 810ebd2:	617b      	str	r3, [r7, #20]
}
 810ebd4:	bf00      	nop
 810ebd6:	e7fe      	b.n	810ebd6 <xTaskGenericNotify+0xda>
					break;
 810ebd8:	bf00      	nop
 810ebda:	e000      	b.n	810ebde <xTaskGenericNotify+0xe2>

					break;
 810ebdc:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 810ebde:	7ffb      	ldrb	r3, [r7, #31]
 810ebe0:	2b01      	cmp	r3, #1
 810ebe2:	d13a      	bne.n	810ec5a <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810ebe4:	6a3b      	ldr	r3, [r7, #32]
 810ebe6:	3304      	adds	r3, #4
 810ebe8:	4618      	mov	r0, r3
 810ebea:	f7fd fd11 	bl	810c610 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 810ebee:	6a3b      	ldr	r3, [r7, #32]
 810ebf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810ebf2:	4b1d      	ldr	r3, [pc, #116]	; (810ec68 <xTaskGenericNotify+0x16c>)
 810ebf4:	681b      	ldr	r3, [r3, #0]
 810ebf6:	429a      	cmp	r2, r3
 810ebf8:	d903      	bls.n	810ec02 <xTaskGenericNotify+0x106>
 810ebfa:	6a3b      	ldr	r3, [r7, #32]
 810ebfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ebfe:	4a1a      	ldr	r2, [pc, #104]	; (810ec68 <xTaskGenericNotify+0x16c>)
 810ec00:	6013      	str	r3, [r2, #0]
 810ec02:	6a3b      	ldr	r3, [r7, #32]
 810ec04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810ec06:	4613      	mov	r3, r2
 810ec08:	009b      	lsls	r3, r3, #2
 810ec0a:	4413      	add	r3, r2
 810ec0c:	009b      	lsls	r3, r3, #2
 810ec0e:	4a17      	ldr	r2, [pc, #92]	; (810ec6c <xTaskGenericNotify+0x170>)
 810ec10:	441a      	add	r2, r3
 810ec12:	6a3b      	ldr	r3, [r7, #32]
 810ec14:	3304      	adds	r3, #4
 810ec16:	4619      	mov	r1, r3
 810ec18:	4610      	mov	r0, r2
 810ec1a:	f7fd fc9c 	bl	810c556 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 810ec1e:	6a3b      	ldr	r3, [r7, #32]
 810ec20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810ec22:	2b00      	cmp	r3, #0
 810ec24:	d00a      	beq.n	810ec3c <xTaskGenericNotify+0x140>
	__asm volatile
 810ec26:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ec2a:	f383 8811 	msr	BASEPRI, r3
 810ec2e:	f3bf 8f6f 	isb	sy
 810ec32:	f3bf 8f4f 	dsb	sy
 810ec36:	613b      	str	r3, [r7, #16]
}
 810ec38:	bf00      	nop
 810ec3a:	e7fe      	b.n	810ec3a <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 810ec3c:	6a3b      	ldr	r3, [r7, #32]
 810ec3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810ec40:	4b0b      	ldr	r3, [pc, #44]	; (810ec70 <xTaskGenericNotify+0x174>)
 810ec42:	681b      	ldr	r3, [r3, #0]
 810ec44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ec46:	429a      	cmp	r2, r3
 810ec48:	d907      	bls.n	810ec5a <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 810ec4a:	4b0a      	ldr	r3, [pc, #40]	; (810ec74 <xTaskGenericNotify+0x178>)
 810ec4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810ec50:	601a      	str	r2, [r3, #0]
 810ec52:	f3bf 8f4f 	dsb	sy
 810ec56:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 810ec5a:	f7fd fe63 	bl	810c924 <vPortExitCritical>

		return xReturn;
 810ec5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 810ec60:	4618      	mov	r0, r3
 810ec62:	3728      	adds	r7, #40	; 0x28
 810ec64:	46bd      	mov	sp, r7
 810ec66:	bd80      	pop	{r7, pc}
 810ec68:	10022690 	.word	0x10022690
 810ec6c:	100221b8 	.word	0x100221b8
 810ec70:	100221b4 	.word	0x100221b4
 810ec74:	e000ed04 	.word	0xe000ed04

0810ec78 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 810ec78:	b580      	push	{r7, lr}
 810ec7a:	b08e      	sub	sp, #56	; 0x38
 810ec7c:	af00      	add	r7, sp, #0
 810ec7e:	60f8      	str	r0, [r7, #12]
 810ec80:	60b9      	str	r1, [r7, #8]
 810ec82:	603b      	str	r3, [r7, #0]
 810ec84:	4613      	mov	r3, r2
 810ec86:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 810ec88:	2301      	movs	r3, #1
 810ec8a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 810ec8c:	68fb      	ldr	r3, [r7, #12]
 810ec8e:	2b00      	cmp	r3, #0
 810ec90:	d10a      	bne.n	810eca8 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 810ec92:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ec96:	f383 8811 	msr	BASEPRI, r3
 810ec9a:	f3bf 8f6f 	isb	sy
 810ec9e:	f3bf 8f4f 	dsb	sy
 810eca2:	627b      	str	r3, [r7, #36]	; 0x24
}
 810eca4:	bf00      	nop
 810eca6:	e7fe      	b.n	810eca6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810eca8:	f7fd feee 	bl	810ca88 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 810ecac:	68fb      	ldr	r3, [r7, #12]
 810ecae:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 810ecb0:	f3ef 8211 	mrs	r2, BASEPRI
 810ecb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ecb8:	f383 8811 	msr	BASEPRI, r3
 810ecbc:	f3bf 8f6f 	isb	sy
 810ecc0:	f3bf 8f4f 	dsb	sy
 810ecc4:	623a      	str	r2, [r7, #32]
 810ecc6:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 810ecc8:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 810ecca:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 810eccc:	683b      	ldr	r3, [r7, #0]
 810ecce:	2b00      	cmp	r3, #0
 810ecd0:	d004      	beq.n	810ecdc <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 810ecd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ecd4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 810ecd8:	683b      	ldr	r3, [r7, #0]
 810ecda:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 810ecdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ecde:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 810ece2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 810ece6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ece8:	2202      	movs	r2, #2
 810ecea:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

			switch( eAction )
 810ecee:	79fb      	ldrb	r3, [r7, #7]
 810ecf0:	2b04      	cmp	r3, #4
 810ecf2:	d82f      	bhi.n	810ed54 <xTaskGenericNotifyFromISR+0xdc>
 810ecf4:	a201      	add	r2, pc, #4	; (adr r2, 810ecfc <xTaskGenericNotifyFromISR+0x84>)
 810ecf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ecfa:	bf00      	nop
 810ecfc:	0810ed77 	.word	0x0810ed77
 810ed00:	0810ed11 	.word	0x0810ed11
 810ed04:	0810ed23 	.word	0x0810ed23
 810ed08:	0810ed33 	.word	0x0810ed33
 810ed0c:	0810ed3d 	.word	0x0810ed3d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 810ed10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ed12:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 810ed16:	68bb      	ldr	r3, [r7, #8]
 810ed18:	431a      	orrs	r2, r3
 810ed1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ed1c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 810ed20:	e02c      	b.n	810ed7c <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 810ed22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ed24:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 810ed28:	1c5a      	adds	r2, r3, #1
 810ed2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ed2c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 810ed30:	e024      	b.n	810ed7c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 810ed32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ed34:	68ba      	ldr	r2, [r7, #8]
 810ed36:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 810ed3a:	e01f      	b.n	810ed7c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 810ed3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 810ed40:	2b02      	cmp	r3, #2
 810ed42:	d004      	beq.n	810ed4e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 810ed44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ed46:	68ba      	ldr	r2, [r7, #8]
 810ed48:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 810ed4c:	e016      	b.n	810ed7c <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 810ed4e:	2300      	movs	r3, #0
 810ed50:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 810ed52:	e013      	b.n	810ed7c <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 810ed54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ed56:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 810ed5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810ed5e:	d00c      	beq.n	810ed7a <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 810ed60:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ed64:	f383 8811 	msr	BASEPRI, r3
 810ed68:	f3bf 8f6f 	isb	sy
 810ed6c:	f3bf 8f4f 	dsb	sy
 810ed70:	61bb      	str	r3, [r7, #24]
}
 810ed72:	bf00      	nop
 810ed74:	e7fe      	b.n	810ed74 <xTaskGenericNotifyFromISR+0xfc>
					break;
 810ed76:	bf00      	nop
 810ed78:	e000      	b.n	810ed7c <xTaskGenericNotifyFromISR+0x104>
					break;
 810ed7a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 810ed7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 810ed80:	2b01      	cmp	r3, #1
 810ed82:	d146      	bne.n	810ee12 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 810ed84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ed86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810ed88:	2b00      	cmp	r3, #0
 810ed8a:	d00a      	beq.n	810eda2 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 810ed8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ed90:	f383 8811 	msr	BASEPRI, r3
 810ed94:	f3bf 8f6f 	isb	sy
 810ed98:	f3bf 8f4f 	dsb	sy
 810ed9c:	617b      	str	r3, [r7, #20]
}
 810ed9e:	bf00      	nop
 810eda0:	e7fe      	b.n	810eda0 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810eda2:	4b21      	ldr	r3, [pc, #132]	; (810ee28 <xTaskGenericNotifyFromISR+0x1b0>)
 810eda4:	681b      	ldr	r3, [r3, #0]
 810eda6:	2b00      	cmp	r3, #0
 810eda8:	d11d      	bne.n	810ede6 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810edaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810edac:	3304      	adds	r3, #4
 810edae:	4618      	mov	r0, r3
 810edb0:	f7fd fc2e 	bl	810c610 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 810edb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810edb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810edb8:	4b1c      	ldr	r3, [pc, #112]	; (810ee2c <xTaskGenericNotifyFromISR+0x1b4>)
 810edba:	681b      	ldr	r3, [r3, #0]
 810edbc:	429a      	cmp	r2, r3
 810edbe:	d903      	bls.n	810edc8 <xTaskGenericNotifyFromISR+0x150>
 810edc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810edc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810edc4:	4a19      	ldr	r2, [pc, #100]	; (810ee2c <xTaskGenericNotifyFromISR+0x1b4>)
 810edc6:	6013      	str	r3, [r2, #0]
 810edc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810edca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810edcc:	4613      	mov	r3, r2
 810edce:	009b      	lsls	r3, r3, #2
 810edd0:	4413      	add	r3, r2
 810edd2:	009b      	lsls	r3, r3, #2
 810edd4:	4a16      	ldr	r2, [pc, #88]	; (810ee30 <xTaskGenericNotifyFromISR+0x1b8>)
 810edd6:	441a      	add	r2, r3
 810edd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810edda:	3304      	adds	r3, #4
 810eddc:	4619      	mov	r1, r3
 810edde:	4610      	mov	r0, r2
 810ede0:	f7fd fbb9 	bl	810c556 <vListInsertEnd>
 810ede4:	e005      	b.n	810edf2 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 810ede6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ede8:	3318      	adds	r3, #24
 810edea:	4619      	mov	r1, r3
 810edec:	4811      	ldr	r0, [pc, #68]	; (810ee34 <xTaskGenericNotifyFromISR+0x1bc>)
 810edee:	f7fd fbb2 	bl	810c556 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 810edf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810edf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810edf6:	4b10      	ldr	r3, [pc, #64]	; (810ee38 <xTaskGenericNotifyFromISR+0x1c0>)
 810edf8:	681b      	ldr	r3, [r3, #0]
 810edfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810edfc:	429a      	cmp	r2, r3
 810edfe:	d908      	bls.n	810ee12 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 810ee00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810ee02:	2b00      	cmp	r3, #0
 810ee04:	d002      	beq.n	810ee0c <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 810ee06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810ee08:	2201      	movs	r2, #1
 810ee0a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 810ee0c:	4b0b      	ldr	r3, [pc, #44]	; (810ee3c <xTaskGenericNotifyFromISR+0x1c4>)
 810ee0e:	2201      	movs	r2, #1
 810ee10:	601a      	str	r2, [r3, #0]
 810ee12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810ee14:	613b      	str	r3, [r7, #16]
	__asm volatile
 810ee16:	693b      	ldr	r3, [r7, #16]
 810ee18:	f383 8811 	msr	BASEPRI, r3
}
 810ee1c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 810ee1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 810ee20:	4618      	mov	r0, r3
 810ee22:	3738      	adds	r7, #56	; 0x38
 810ee24:	46bd      	mov	sp, r7
 810ee26:	bd80      	pop	{r7, pc}
 810ee28:	100226b0 	.word	0x100226b0
 810ee2c:	10022690 	.word	0x10022690
 810ee30:	100221b8 	.word	0x100221b8
 810ee34:	10022648 	.word	0x10022648
 810ee38:	100221b4 	.word	0x100221b4
 810ee3c:	1002269c 	.word	0x1002269c

0810ee40 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 810ee40:	b580      	push	{r7, lr}
 810ee42:	b084      	sub	sp, #16
 810ee44:	af00      	add	r7, sp, #0
 810ee46:	6078      	str	r0, [r7, #4]
 810ee48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 810ee4a:	4b21      	ldr	r3, [pc, #132]	; (810eed0 <prvAddCurrentTaskToDelayedList+0x90>)
 810ee4c:	681b      	ldr	r3, [r3, #0]
 810ee4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810ee50:	4b20      	ldr	r3, [pc, #128]	; (810eed4 <prvAddCurrentTaskToDelayedList+0x94>)
 810ee52:	681b      	ldr	r3, [r3, #0]
 810ee54:	3304      	adds	r3, #4
 810ee56:	4618      	mov	r0, r3
 810ee58:	f7fd fbda 	bl	810c610 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 810ee5c:	687b      	ldr	r3, [r7, #4]
 810ee5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 810ee62:	d10a      	bne.n	810ee7a <prvAddCurrentTaskToDelayedList+0x3a>
 810ee64:	683b      	ldr	r3, [r7, #0]
 810ee66:	2b00      	cmp	r3, #0
 810ee68:	d007      	beq.n	810ee7a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810ee6a:	4b1a      	ldr	r3, [pc, #104]	; (810eed4 <prvAddCurrentTaskToDelayedList+0x94>)
 810ee6c:	681b      	ldr	r3, [r3, #0]
 810ee6e:	3304      	adds	r3, #4
 810ee70:	4619      	mov	r1, r3
 810ee72:	4819      	ldr	r0, [pc, #100]	; (810eed8 <prvAddCurrentTaskToDelayedList+0x98>)
 810ee74:	f7fd fb6f 	bl	810c556 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 810ee78:	e026      	b.n	810eec8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 810ee7a:	68fa      	ldr	r2, [r7, #12]
 810ee7c:	687b      	ldr	r3, [r7, #4]
 810ee7e:	4413      	add	r3, r2
 810ee80:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 810ee82:	4b14      	ldr	r3, [pc, #80]	; (810eed4 <prvAddCurrentTaskToDelayedList+0x94>)
 810ee84:	681b      	ldr	r3, [r3, #0]
 810ee86:	68ba      	ldr	r2, [r7, #8]
 810ee88:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 810ee8a:	68ba      	ldr	r2, [r7, #8]
 810ee8c:	68fb      	ldr	r3, [r7, #12]
 810ee8e:	429a      	cmp	r2, r3
 810ee90:	d209      	bcs.n	810eea6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810ee92:	4b12      	ldr	r3, [pc, #72]	; (810eedc <prvAddCurrentTaskToDelayedList+0x9c>)
 810ee94:	681a      	ldr	r2, [r3, #0]
 810ee96:	4b0f      	ldr	r3, [pc, #60]	; (810eed4 <prvAddCurrentTaskToDelayedList+0x94>)
 810ee98:	681b      	ldr	r3, [r3, #0]
 810ee9a:	3304      	adds	r3, #4
 810ee9c:	4619      	mov	r1, r3
 810ee9e:	4610      	mov	r0, r2
 810eea0:	f7fd fb7d 	bl	810c59e <vListInsert>
}
 810eea4:	e010      	b.n	810eec8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810eea6:	4b0e      	ldr	r3, [pc, #56]	; (810eee0 <prvAddCurrentTaskToDelayedList+0xa0>)
 810eea8:	681a      	ldr	r2, [r3, #0]
 810eeaa:	4b0a      	ldr	r3, [pc, #40]	; (810eed4 <prvAddCurrentTaskToDelayedList+0x94>)
 810eeac:	681b      	ldr	r3, [r3, #0]
 810eeae:	3304      	adds	r3, #4
 810eeb0:	4619      	mov	r1, r3
 810eeb2:	4610      	mov	r0, r2
 810eeb4:	f7fd fb73 	bl	810c59e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 810eeb8:	4b0a      	ldr	r3, [pc, #40]	; (810eee4 <prvAddCurrentTaskToDelayedList+0xa4>)
 810eeba:	681b      	ldr	r3, [r3, #0]
 810eebc:	68ba      	ldr	r2, [r7, #8]
 810eebe:	429a      	cmp	r2, r3
 810eec0:	d202      	bcs.n	810eec8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 810eec2:	4a08      	ldr	r2, [pc, #32]	; (810eee4 <prvAddCurrentTaskToDelayedList+0xa4>)
 810eec4:	68bb      	ldr	r3, [r7, #8]
 810eec6:	6013      	str	r3, [r2, #0]
}
 810eec8:	bf00      	nop
 810eeca:	3710      	adds	r7, #16
 810eecc:	46bd      	mov	sp, r7
 810eece:	bd80      	pop	{r7, pc}
 810eed0:	1002268c 	.word	0x1002268c
 810eed4:	100221b4 	.word	0x100221b4
 810eed8:	10022674 	.word	0x10022674
 810eedc:	10022644 	.word	0x10022644
 810eee0:	10022640 	.word	0x10022640
 810eee4:	100226a8 	.word	0x100226a8

0810eee8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 810eee8:	b580      	push	{r7, lr}
 810eeea:	b08a      	sub	sp, #40	; 0x28
 810eeec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 810eeee:	2300      	movs	r3, #0
 810eef0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 810eef2:	f000 fb07 	bl	810f504 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 810eef6:	4b1c      	ldr	r3, [pc, #112]	; (810ef68 <xTimerCreateTimerTask+0x80>)
 810eef8:	681b      	ldr	r3, [r3, #0]
 810eefa:	2b00      	cmp	r3, #0
 810eefc:	d021      	beq.n	810ef42 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 810eefe:	2300      	movs	r3, #0
 810ef00:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 810ef02:	2300      	movs	r3, #0
 810ef04:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 810ef06:	1d3a      	adds	r2, r7, #4
 810ef08:	f107 0108 	add.w	r1, r7, #8
 810ef0c:	f107 030c 	add.w	r3, r7, #12
 810ef10:	4618      	mov	r0, r3
 810ef12:	f7fd f8ef 	bl	810c0f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 810ef16:	6879      	ldr	r1, [r7, #4]
 810ef18:	68bb      	ldr	r3, [r7, #8]
 810ef1a:	68fa      	ldr	r2, [r7, #12]
 810ef1c:	9202      	str	r2, [sp, #8]
 810ef1e:	9301      	str	r3, [sp, #4]
 810ef20:	2302      	movs	r3, #2
 810ef22:	9300      	str	r3, [sp, #0]
 810ef24:	2300      	movs	r3, #0
 810ef26:	460a      	mov	r2, r1
 810ef28:	4910      	ldr	r1, [pc, #64]	; (810ef6c <xTimerCreateTimerTask+0x84>)
 810ef2a:	4811      	ldr	r0, [pc, #68]	; (810ef70 <xTimerCreateTimerTask+0x88>)
 810ef2c:	f7fe fdb4 	bl	810da98 <xTaskCreateStatic>
 810ef30:	4603      	mov	r3, r0
 810ef32:	4a10      	ldr	r2, [pc, #64]	; (810ef74 <xTimerCreateTimerTask+0x8c>)
 810ef34:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 810ef36:	4b0f      	ldr	r3, [pc, #60]	; (810ef74 <xTimerCreateTimerTask+0x8c>)
 810ef38:	681b      	ldr	r3, [r3, #0]
 810ef3a:	2b00      	cmp	r3, #0
 810ef3c:	d001      	beq.n	810ef42 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 810ef3e:	2301      	movs	r3, #1
 810ef40:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 810ef42:	697b      	ldr	r3, [r7, #20]
 810ef44:	2b00      	cmp	r3, #0
 810ef46:	d10a      	bne.n	810ef5e <xTimerCreateTimerTask+0x76>
	__asm volatile
 810ef48:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ef4c:	f383 8811 	msr	BASEPRI, r3
 810ef50:	f3bf 8f6f 	isb	sy
 810ef54:	f3bf 8f4f 	dsb	sy
 810ef58:	613b      	str	r3, [r7, #16]
}
 810ef5a:	bf00      	nop
 810ef5c:	e7fe      	b.n	810ef5c <xTimerCreateTimerTask+0x74>
	return xReturn;
 810ef5e:	697b      	ldr	r3, [r7, #20]
}
 810ef60:	4618      	mov	r0, r3
 810ef62:	3718      	adds	r7, #24
 810ef64:	46bd      	mov	sp, r7
 810ef66:	bd80      	pop	{r7, pc}
 810ef68:	100226e4 	.word	0x100226e4
 810ef6c:	08110234 	.word	0x08110234
 810ef70:	0810f0ad 	.word	0x0810f0ad
 810ef74:	100226e8 	.word	0x100226e8

0810ef78 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 810ef78:	b580      	push	{r7, lr}
 810ef7a:	b08a      	sub	sp, #40	; 0x28
 810ef7c:	af00      	add	r7, sp, #0
 810ef7e:	60f8      	str	r0, [r7, #12]
 810ef80:	60b9      	str	r1, [r7, #8]
 810ef82:	607a      	str	r2, [r7, #4]
 810ef84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 810ef86:	2300      	movs	r3, #0
 810ef88:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 810ef8a:	68fb      	ldr	r3, [r7, #12]
 810ef8c:	2b00      	cmp	r3, #0
 810ef8e:	d10a      	bne.n	810efa6 <xTimerGenericCommand+0x2e>
	__asm volatile
 810ef90:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ef94:	f383 8811 	msr	BASEPRI, r3
 810ef98:	f3bf 8f6f 	isb	sy
 810ef9c:	f3bf 8f4f 	dsb	sy
 810efa0:	623b      	str	r3, [r7, #32]
}
 810efa2:	bf00      	nop
 810efa4:	e7fe      	b.n	810efa4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 810efa6:	4b1a      	ldr	r3, [pc, #104]	; (810f010 <xTimerGenericCommand+0x98>)
 810efa8:	681b      	ldr	r3, [r3, #0]
 810efaa:	2b00      	cmp	r3, #0
 810efac:	d02a      	beq.n	810f004 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 810efae:	68bb      	ldr	r3, [r7, #8]
 810efb0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 810efb2:	687b      	ldr	r3, [r7, #4]
 810efb4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 810efb6:	68fb      	ldr	r3, [r7, #12]
 810efb8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 810efba:	68bb      	ldr	r3, [r7, #8]
 810efbc:	2b05      	cmp	r3, #5
 810efbe:	dc18      	bgt.n	810eff2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 810efc0:	f7ff fbb2 	bl	810e728 <xTaskGetSchedulerState>
 810efc4:	4603      	mov	r3, r0
 810efc6:	2b02      	cmp	r3, #2
 810efc8:	d109      	bne.n	810efde <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 810efca:	4b11      	ldr	r3, [pc, #68]	; (810f010 <xTimerGenericCommand+0x98>)
 810efcc:	6818      	ldr	r0, [r3, #0]
 810efce:	f107 0110 	add.w	r1, r7, #16
 810efd2:	2300      	movs	r3, #0
 810efd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810efd6:	f7fd ff0b 	bl	810cdf0 <xQueueGenericSend>
 810efda:	6278      	str	r0, [r7, #36]	; 0x24
 810efdc:	e012      	b.n	810f004 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 810efde:	4b0c      	ldr	r3, [pc, #48]	; (810f010 <xTimerGenericCommand+0x98>)
 810efe0:	6818      	ldr	r0, [r3, #0]
 810efe2:	f107 0110 	add.w	r1, r7, #16
 810efe6:	2300      	movs	r3, #0
 810efe8:	2200      	movs	r2, #0
 810efea:	f7fd ff01 	bl	810cdf0 <xQueueGenericSend>
 810efee:	6278      	str	r0, [r7, #36]	; 0x24
 810eff0:	e008      	b.n	810f004 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 810eff2:	4b07      	ldr	r3, [pc, #28]	; (810f010 <xTimerGenericCommand+0x98>)
 810eff4:	6818      	ldr	r0, [r3, #0]
 810eff6:	f107 0110 	add.w	r1, r7, #16
 810effa:	2300      	movs	r3, #0
 810effc:	683a      	ldr	r2, [r7, #0]
 810effe:	f7fd fff5 	bl	810cfec <xQueueGenericSendFromISR>
 810f002:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 810f004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 810f006:	4618      	mov	r0, r3
 810f008:	3728      	adds	r7, #40	; 0x28
 810f00a:	46bd      	mov	sp, r7
 810f00c:	bd80      	pop	{r7, pc}
 810f00e:	bf00      	nop
 810f010:	100226e4 	.word	0x100226e4

0810f014 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 810f014:	b580      	push	{r7, lr}
 810f016:	b088      	sub	sp, #32
 810f018:	af02      	add	r7, sp, #8
 810f01a:	6078      	str	r0, [r7, #4]
 810f01c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810f01e:	4b22      	ldr	r3, [pc, #136]	; (810f0a8 <prvProcessExpiredTimer+0x94>)
 810f020:	681b      	ldr	r3, [r3, #0]
 810f022:	68db      	ldr	r3, [r3, #12]
 810f024:	68db      	ldr	r3, [r3, #12]
 810f026:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810f028:	697b      	ldr	r3, [r7, #20]
 810f02a:	3304      	adds	r3, #4
 810f02c:	4618      	mov	r0, r3
 810f02e:	f7fd faef 	bl	810c610 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810f032:	697b      	ldr	r3, [r7, #20]
 810f034:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810f038:	f003 0304 	and.w	r3, r3, #4
 810f03c:	2b00      	cmp	r3, #0
 810f03e:	d022      	beq.n	810f086 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 810f040:	697b      	ldr	r3, [r7, #20]
 810f042:	699a      	ldr	r2, [r3, #24]
 810f044:	687b      	ldr	r3, [r7, #4]
 810f046:	18d1      	adds	r1, r2, r3
 810f048:	687b      	ldr	r3, [r7, #4]
 810f04a:	683a      	ldr	r2, [r7, #0]
 810f04c:	6978      	ldr	r0, [r7, #20]
 810f04e:	f000 f8d1 	bl	810f1f4 <prvInsertTimerInActiveList>
 810f052:	4603      	mov	r3, r0
 810f054:	2b00      	cmp	r3, #0
 810f056:	d01f      	beq.n	810f098 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810f058:	2300      	movs	r3, #0
 810f05a:	9300      	str	r3, [sp, #0]
 810f05c:	2300      	movs	r3, #0
 810f05e:	687a      	ldr	r2, [r7, #4]
 810f060:	2100      	movs	r1, #0
 810f062:	6978      	ldr	r0, [r7, #20]
 810f064:	f7ff ff88 	bl	810ef78 <xTimerGenericCommand>
 810f068:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 810f06a:	693b      	ldr	r3, [r7, #16]
 810f06c:	2b00      	cmp	r3, #0
 810f06e:	d113      	bne.n	810f098 <prvProcessExpiredTimer+0x84>
	__asm volatile
 810f070:	f04f 0350 	mov.w	r3, #80	; 0x50
 810f074:	f383 8811 	msr	BASEPRI, r3
 810f078:	f3bf 8f6f 	isb	sy
 810f07c:	f3bf 8f4f 	dsb	sy
 810f080:	60fb      	str	r3, [r7, #12]
}
 810f082:	bf00      	nop
 810f084:	e7fe      	b.n	810f084 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810f086:	697b      	ldr	r3, [r7, #20]
 810f088:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810f08c:	f023 0301 	bic.w	r3, r3, #1
 810f090:	b2da      	uxtb	r2, r3
 810f092:	697b      	ldr	r3, [r7, #20]
 810f094:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810f098:	697b      	ldr	r3, [r7, #20]
 810f09a:	6a1b      	ldr	r3, [r3, #32]
 810f09c:	6978      	ldr	r0, [r7, #20]
 810f09e:	4798      	blx	r3
}
 810f0a0:	bf00      	nop
 810f0a2:	3718      	adds	r7, #24
 810f0a4:	46bd      	mov	sp, r7
 810f0a6:	bd80      	pop	{r7, pc}
 810f0a8:	100226dc 	.word	0x100226dc

0810f0ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 810f0ac:	b580      	push	{r7, lr}
 810f0ae:	b084      	sub	sp, #16
 810f0b0:	af00      	add	r7, sp, #0
 810f0b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810f0b4:	f107 0308 	add.w	r3, r7, #8
 810f0b8:	4618      	mov	r0, r3
 810f0ba:	f000 f857 	bl	810f16c <prvGetNextExpireTime>
 810f0be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 810f0c0:	68bb      	ldr	r3, [r7, #8]
 810f0c2:	4619      	mov	r1, r3
 810f0c4:	68f8      	ldr	r0, [r7, #12]
 810f0c6:	f000 f803 	bl	810f0d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 810f0ca:	f000 f8d5 	bl	810f278 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810f0ce:	e7f1      	b.n	810f0b4 <prvTimerTask+0x8>

0810f0d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 810f0d0:	b580      	push	{r7, lr}
 810f0d2:	b084      	sub	sp, #16
 810f0d4:	af00      	add	r7, sp, #0
 810f0d6:	6078      	str	r0, [r7, #4]
 810f0d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 810f0da:	f7fe ff39 	bl	810df50 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810f0de:	f107 0308 	add.w	r3, r7, #8
 810f0e2:	4618      	mov	r0, r3
 810f0e4:	f000 f866 	bl	810f1b4 <prvSampleTimeNow>
 810f0e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 810f0ea:	68bb      	ldr	r3, [r7, #8]
 810f0ec:	2b00      	cmp	r3, #0
 810f0ee:	d130      	bne.n	810f152 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 810f0f0:	683b      	ldr	r3, [r7, #0]
 810f0f2:	2b00      	cmp	r3, #0
 810f0f4:	d10a      	bne.n	810f10c <prvProcessTimerOrBlockTask+0x3c>
 810f0f6:	687a      	ldr	r2, [r7, #4]
 810f0f8:	68fb      	ldr	r3, [r7, #12]
 810f0fa:	429a      	cmp	r2, r3
 810f0fc:	d806      	bhi.n	810f10c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 810f0fe:	f7fe ff35 	bl	810df6c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 810f102:	68f9      	ldr	r1, [r7, #12]
 810f104:	6878      	ldr	r0, [r7, #4]
 810f106:	f7ff ff85 	bl	810f014 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 810f10a:	e024      	b.n	810f156 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 810f10c:	683b      	ldr	r3, [r7, #0]
 810f10e:	2b00      	cmp	r3, #0
 810f110:	d008      	beq.n	810f124 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 810f112:	4b13      	ldr	r3, [pc, #76]	; (810f160 <prvProcessTimerOrBlockTask+0x90>)
 810f114:	681b      	ldr	r3, [r3, #0]
 810f116:	681b      	ldr	r3, [r3, #0]
 810f118:	2b00      	cmp	r3, #0
 810f11a:	d101      	bne.n	810f120 <prvProcessTimerOrBlockTask+0x50>
 810f11c:	2301      	movs	r3, #1
 810f11e:	e000      	b.n	810f122 <prvProcessTimerOrBlockTask+0x52>
 810f120:	2300      	movs	r3, #0
 810f122:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 810f124:	4b0f      	ldr	r3, [pc, #60]	; (810f164 <prvProcessTimerOrBlockTask+0x94>)
 810f126:	6818      	ldr	r0, [r3, #0]
 810f128:	687a      	ldr	r2, [r7, #4]
 810f12a:	68fb      	ldr	r3, [r7, #12]
 810f12c:	1ad3      	subs	r3, r2, r3
 810f12e:	683a      	ldr	r2, [r7, #0]
 810f130:	4619      	mov	r1, r3
 810f132:	f7fe fc7d 	bl	810da30 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 810f136:	f7fe ff19 	bl	810df6c <xTaskResumeAll>
 810f13a:	4603      	mov	r3, r0
 810f13c:	2b00      	cmp	r3, #0
 810f13e:	d10a      	bne.n	810f156 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 810f140:	4b09      	ldr	r3, [pc, #36]	; (810f168 <prvProcessTimerOrBlockTask+0x98>)
 810f142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810f146:	601a      	str	r2, [r3, #0]
 810f148:	f3bf 8f4f 	dsb	sy
 810f14c:	f3bf 8f6f 	isb	sy
}
 810f150:	e001      	b.n	810f156 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 810f152:	f7fe ff0b 	bl	810df6c <xTaskResumeAll>
}
 810f156:	bf00      	nop
 810f158:	3710      	adds	r7, #16
 810f15a:	46bd      	mov	sp, r7
 810f15c:	bd80      	pop	{r7, pc}
 810f15e:	bf00      	nop
 810f160:	100226e0 	.word	0x100226e0
 810f164:	100226e4 	.word	0x100226e4
 810f168:	e000ed04 	.word	0xe000ed04

0810f16c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 810f16c:	b480      	push	{r7}
 810f16e:	b085      	sub	sp, #20
 810f170:	af00      	add	r7, sp, #0
 810f172:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 810f174:	4b0e      	ldr	r3, [pc, #56]	; (810f1b0 <prvGetNextExpireTime+0x44>)
 810f176:	681b      	ldr	r3, [r3, #0]
 810f178:	681b      	ldr	r3, [r3, #0]
 810f17a:	2b00      	cmp	r3, #0
 810f17c:	d101      	bne.n	810f182 <prvGetNextExpireTime+0x16>
 810f17e:	2201      	movs	r2, #1
 810f180:	e000      	b.n	810f184 <prvGetNextExpireTime+0x18>
 810f182:	2200      	movs	r2, #0
 810f184:	687b      	ldr	r3, [r7, #4]
 810f186:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 810f188:	687b      	ldr	r3, [r7, #4]
 810f18a:	681b      	ldr	r3, [r3, #0]
 810f18c:	2b00      	cmp	r3, #0
 810f18e:	d105      	bne.n	810f19c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 810f190:	4b07      	ldr	r3, [pc, #28]	; (810f1b0 <prvGetNextExpireTime+0x44>)
 810f192:	681b      	ldr	r3, [r3, #0]
 810f194:	68db      	ldr	r3, [r3, #12]
 810f196:	681b      	ldr	r3, [r3, #0]
 810f198:	60fb      	str	r3, [r7, #12]
 810f19a:	e001      	b.n	810f1a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 810f19c:	2300      	movs	r3, #0
 810f19e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 810f1a0:	68fb      	ldr	r3, [r7, #12]
}
 810f1a2:	4618      	mov	r0, r3
 810f1a4:	3714      	adds	r7, #20
 810f1a6:	46bd      	mov	sp, r7
 810f1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f1ac:	4770      	bx	lr
 810f1ae:	bf00      	nop
 810f1b0:	100226dc 	.word	0x100226dc

0810f1b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 810f1b4:	b580      	push	{r7, lr}
 810f1b6:	b084      	sub	sp, #16
 810f1b8:	af00      	add	r7, sp, #0
 810f1ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 810f1bc:	f7fe ff74 	bl	810e0a8 <xTaskGetTickCount>
 810f1c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 810f1c2:	4b0b      	ldr	r3, [pc, #44]	; (810f1f0 <prvSampleTimeNow+0x3c>)
 810f1c4:	681b      	ldr	r3, [r3, #0]
 810f1c6:	68fa      	ldr	r2, [r7, #12]
 810f1c8:	429a      	cmp	r2, r3
 810f1ca:	d205      	bcs.n	810f1d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 810f1cc:	f000 f936 	bl	810f43c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 810f1d0:	687b      	ldr	r3, [r7, #4]
 810f1d2:	2201      	movs	r2, #1
 810f1d4:	601a      	str	r2, [r3, #0]
 810f1d6:	e002      	b.n	810f1de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 810f1d8:	687b      	ldr	r3, [r7, #4]
 810f1da:	2200      	movs	r2, #0
 810f1dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 810f1de:	4a04      	ldr	r2, [pc, #16]	; (810f1f0 <prvSampleTimeNow+0x3c>)
 810f1e0:	68fb      	ldr	r3, [r7, #12]
 810f1e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 810f1e4:	68fb      	ldr	r3, [r7, #12]
}
 810f1e6:	4618      	mov	r0, r3
 810f1e8:	3710      	adds	r7, #16
 810f1ea:	46bd      	mov	sp, r7
 810f1ec:	bd80      	pop	{r7, pc}
 810f1ee:	bf00      	nop
 810f1f0:	100226ec 	.word	0x100226ec

0810f1f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 810f1f4:	b580      	push	{r7, lr}
 810f1f6:	b086      	sub	sp, #24
 810f1f8:	af00      	add	r7, sp, #0
 810f1fa:	60f8      	str	r0, [r7, #12]
 810f1fc:	60b9      	str	r1, [r7, #8]
 810f1fe:	607a      	str	r2, [r7, #4]
 810f200:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 810f202:	2300      	movs	r3, #0
 810f204:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 810f206:	68fb      	ldr	r3, [r7, #12]
 810f208:	68ba      	ldr	r2, [r7, #8]
 810f20a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 810f20c:	68fb      	ldr	r3, [r7, #12]
 810f20e:	68fa      	ldr	r2, [r7, #12]
 810f210:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 810f212:	68ba      	ldr	r2, [r7, #8]
 810f214:	687b      	ldr	r3, [r7, #4]
 810f216:	429a      	cmp	r2, r3
 810f218:	d812      	bhi.n	810f240 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810f21a:	687a      	ldr	r2, [r7, #4]
 810f21c:	683b      	ldr	r3, [r7, #0]
 810f21e:	1ad2      	subs	r2, r2, r3
 810f220:	68fb      	ldr	r3, [r7, #12]
 810f222:	699b      	ldr	r3, [r3, #24]
 810f224:	429a      	cmp	r2, r3
 810f226:	d302      	bcc.n	810f22e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 810f228:	2301      	movs	r3, #1
 810f22a:	617b      	str	r3, [r7, #20]
 810f22c:	e01b      	b.n	810f266 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 810f22e:	4b10      	ldr	r3, [pc, #64]	; (810f270 <prvInsertTimerInActiveList+0x7c>)
 810f230:	681a      	ldr	r2, [r3, #0]
 810f232:	68fb      	ldr	r3, [r7, #12]
 810f234:	3304      	adds	r3, #4
 810f236:	4619      	mov	r1, r3
 810f238:	4610      	mov	r0, r2
 810f23a:	f7fd f9b0 	bl	810c59e <vListInsert>
 810f23e:	e012      	b.n	810f266 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 810f240:	687a      	ldr	r2, [r7, #4]
 810f242:	683b      	ldr	r3, [r7, #0]
 810f244:	429a      	cmp	r2, r3
 810f246:	d206      	bcs.n	810f256 <prvInsertTimerInActiveList+0x62>
 810f248:	68ba      	ldr	r2, [r7, #8]
 810f24a:	683b      	ldr	r3, [r7, #0]
 810f24c:	429a      	cmp	r2, r3
 810f24e:	d302      	bcc.n	810f256 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 810f250:	2301      	movs	r3, #1
 810f252:	617b      	str	r3, [r7, #20]
 810f254:	e007      	b.n	810f266 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810f256:	4b07      	ldr	r3, [pc, #28]	; (810f274 <prvInsertTimerInActiveList+0x80>)
 810f258:	681a      	ldr	r2, [r3, #0]
 810f25a:	68fb      	ldr	r3, [r7, #12]
 810f25c:	3304      	adds	r3, #4
 810f25e:	4619      	mov	r1, r3
 810f260:	4610      	mov	r0, r2
 810f262:	f7fd f99c 	bl	810c59e <vListInsert>
		}
	}

	return xProcessTimerNow;
 810f266:	697b      	ldr	r3, [r7, #20]
}
 810f268:	4618      	mov	r0, r3
 810f26a:	3718      	adds	r7, #24
 810f26c:	46bd      	mov	sp, r7
 810f26e:	bd80      	pop	{r7, pc}
 810f270:	100226e0 	.word	0x100226e0
 810f274:	100226dc 	.word	0x100226dc

0810f278 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 810f278:	b580      	push	{r7, lr}
 810f27a:	b08e      	sub	sp, #56	; 0x38
 810f27c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810f27e:	e0ca      	b.n	810f416 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 810f280:	687b      	ldr	r3, [r7, #4]
 810f282:	2b00      	cmp	r3, #0
 810f284:	da18      	bge.n	810f2b8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 810f286:	1d3b      	adds	r3, r7, #4
 810f288:	3304      	adds	r3, #4
 810f28a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 810f28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810f28e:	2b00      	cmp	r3, #0
 810f290:	d10a      	bne.n	810f2a8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 810f292:	f04f 0350 	mov.w	r3, #80	; 0x50
 810f296:	f383 8811 	msr	BASEPRI, r3
 810f29a:	f3bf 8f6f 	isb	sy
 810f29e:	f3bf 8f4f 	dsb	sy
 810f2a2:	61fb      	str	r3, [r7, #28]
}
 810f2a4:	bf00      	nop
 810f2a6:	e7fe      	b.n	810f2a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 810f2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810f2aa:	681b      	ldr	r3, [r3, #0]
 810f2ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810f2ae:	6850      	ldr	r0, [r2, #4]
 810f2b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810f2b2:	6892      	ldr	r2, [r2, #8]
 810f2b4:	4611      	mov	r1, r2
 810f2b6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 810f2b8:	687b      	ldr	r3, [r7, #4]
 810f2ba:	2b00      	cmp	r3, #0
 810f2bc:	f2c0 80aa 	blt.w	810f414 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 810f2c0:	68fb      	ldr	r3, [r7, #12]
 810f2c2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 810f2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f2c6:	695b      	ldr	r3, [r3, #20]
 810f2c8:	2b00      	cmp	r3, #0
 810f2ca:	d004      	beq.n	810f2d6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810f2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f2ce:	3304      	adds	r3, #4
 810f2d0:	4618      	mov	r0, r3
 810f2d2:	f7fd f99d 	bl	810c610 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810f2d6:	463b      	mov	r3, r7
 810f2d8:	4618      	mov	r0, r3
 810f2da:	f7ff ff6b 	bl	810f1b4 <prvSampleTimeNow>
 810f2de:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 810f2e0:	687b      	ldr	r3, [r7, #4]
 810f2e2:	2b09      	cmp	r3, #9
 810f2e4:	f200 8097 	bhi.w	810f416 <prvProcessReceivedCommands+0x19e>
 810f2e8:	a201      	add	r2, pc, #4	; (adr r2, 810f2f0 <prvProcessReceivedCommands+0x78>)
 810f2ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810f2ee:	bf00      	nop
 810f2f0:	0810f319 	.word	0x0810f319
 810f2f4:	0810f319 	.word	0x0810f319
 810f2f8:	0810f319 	.word	0x0810f319
 810f2fc:	0810f38d 	.word	0x0810f38d
 810f300:	0810f3a1 	.word	0x0810f3a1
 810f304:	0810f3eb 	.word	0x0810f3eb
 810f308:	0810f319 	.word	0x0810f319
 810f30c:	0810f319 	.word	0x0810f319
 810f310:	0810f38d 	.word	0x0810f38d
 810f314:	0810f3a1 	.word	0x0810f3a1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810f318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f31a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810f31e:	f043 0301 	orr.w	r3, r3, #1
 810f322:	b2da      	uxtb	r2, r3
 810f324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f326:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 810f32a:	68ba      	ldr	r2, [r7, #8]
 810f32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f32e:	699b      	ldr	r3, [r3, #24]
 810f330:	18d1      	adds	r1, r2, r3
 810f332:	68bb      	ldr	r3, [r7, #8]
 810f334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810f336:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810f338:	f7ff ff5c 	bl	810f1f4 <prvInsertTimerInActiveList>
 810f33c:	4603      	mov	r3, r0
 810f33e:	2b00      	cmp	r3, #0
 810f340:	d069      	beq.n	810f416 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810f342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f344:	6a1b      	ldr	r3, [r3, #32]
 810f346:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810f348:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810f34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f34c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810f350:	f003 0304 	and.w	r3, r3, #4
 810f354:	2b00      	cmp	r3, #0
 810f356:	d05e      	beq.n	810f416 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 810f358:	68ba      	ldr	r2, [r7, #8]
 810f35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f35c:	699b      	ldr	r3, [r3, #24]
 810f35e:	441a      	add	r2, r3
 810f360:	2300      	movs	r3, #0
 810f362:	9300      	str	r3, [sp, #0]
 810f364:	2300      	movs	r3, #0
 810f366:	2100      	movs	r1, #0
 810f368:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810f36a:	f7ff fe05 	bl	810ef78 <xTimerGenericCommand>
 810f36e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 810f370:	6a3b      	ldr	r3, [r7, #32]
 810f372:	2b00      	cmp	r3, #0
 810f374:	d14f      	bne.n	810f416 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 810f376:	f04f 0350 	mov.w	r3, #80	; 0x50
 810f37a:	f383 8811 	msr	BASEPRI, r3
 810f37e:	f3bf 8f6f 	isb	sy
 810f382:	f3bf 8f4f 	dsb	sy
 810f386:	61bb      	str	r3, [r7, #24]
}
 810f388:	bf00      	nop
 810f38a:	e7fe      	b.n	810f38a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810f38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f38e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810f392:	f023 0301 	bic.w	r3, r3, #1
 810f396:	b2da      	uxtb	r2, r3
 810f398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f39a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 810f39e:	e03a      	b.n	810f416 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810f3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f3a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810f3a6:	f043 0301 	orr.w	r3, r3, #1
 810f3aa:	b2da      	uxtb	r2, r3
 810f3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f3ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 810f3b2:	68ba      	ldr	r2, [r7, #8]
 810f3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f3b6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 810f3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f3ba:	699b      	ldr	r3, [r3, #24]
 810f3bc:	2b00      	cmp	r3, #0
 810f3be:	d10a      	bne.n	810f3d6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 810f3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 810f3c4:	f383 8811 	msr	BASEPRI, r3
 810f3c8:	f3bf 8f6f 	isb	sy
 810f3cc:	f3bf 8f4f 	dsb	sy
 810f3d0:	617b      	str	r3, [r7, #20]
}
 810f3d2:	bf00      	nop
 810f3d4:	e7fe      	b.n	810f3d4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 810f3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f3d8:	699a      	ldr	r2, [r3, #24]
 810f3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810f3dc:	18d1      	adds	r1, r2, r3
 810f3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810f3e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810f3e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810f3e4:	f7ff ff06 	bl	810f1f4 <prvInsertTimerInActiveList>
					break;
 810f3e8:	e015      	b.n	810f416 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 810f3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f3ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810f3f0:	f003 0302 	and.w	r3, r3, #2
 810f3f4:	2b00      	cmp	r3, #0
 810f3f6:	d103      	bne.n	810f400 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 810f3f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810f3fa:	f7fc ff61 	bl	810c2c0 <vPortFree>
 810f3fe:	e00a      	b.n	810f416 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810f400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f402:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810f406:	f023 0301 	bic.w	r3, r3, #1
 810f40a:	b2da      	uxtb	r2, r3
 810f40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f40e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 810f412:	e000      	b.n	810f416 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 810f414:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810f416:	4b08      	ldr	r3, [pc, #32]	; (810f438 <prvProcessReceivedCommands+0x1c0>)
 810f418:	681b      	ldr	r3, [r3, #0]
 810f41a:	1d39      	adds	r1, r7, #4
 810f41c:	2200      	movs	r2, #0
 810f41e:	4618      	mov	r0, r3
 810f420:	f7fd ff0c 	bl	810d23c <xQueueReceive>
 810f424:	4603      	mov	r3, r0
 810f426:	2b00      	cmp	r3, #0
 810f428:	f47f af2a 	bne.w	810f280 <prvProcessReceivedCommands+0x8>
	}
}
 810f42c:	bf00      	nop
 810f42e:	bf00      	nop
 810f430:	3730      	adds	r7, #48	; 0x30
 810f432:	46bd      	mov	sp, r7
 810f434:	bd80      	pop	{r7, pc}
 810f436:	bf00      	nop
 810f438:	100226e4 	.word	0x100226e4

0810f43c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 810f43c:	b580      	push	{r7, lr}
 810f43e:	b088      	sub	sp, #32
 810f440:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810f442:	e048      	b.n	810f4d6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 810f444:	4b2d      	ldr	r3, [pc, #180]	; (810f4fc <prvSwitchTimerLists+0xc0>)
 810f446:	681b      	ldr	r3, [r3, #0]
 810f448:	68db      	ldr	r3, [r3, #12]
 810f44a:	681b      	ldr	r3, [r3, #0]
 810f44c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810f44e:	4b2b      	ldr	r3, [pc, #172]	; (810f4fc <prvSwitchTimerLists+0xc0>)
 810f450:	681b      	ldr	r3, [r3, #0]
 810f452:	68db      	ldr	r3, [r3, #12]
 810f454:	68db      	ldr	r3, [r3, #12]
 810f456:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810f458:	68fb      	ldr	r3, [r7, #12]
 810f45a:	3304      	adds	r3, #4
 810f45c:	4618      	mov	r0, r3
 810f45e:	f7fd f8d7 	bl	810c610 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810f462:	68fb      	ldr	r3, [r7, #12]
 810f464:	6a1b      	ldr	r3, [r3, #32]
 810f466:	68f8      	ldr	r0, [r7, #12]
 810f468:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810f46a:	68fb      	ldr	r3, [r7, #12]
 810f46c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810f470:	f003 0304 	and.w	r3, r3, #4
 810f474:	2b00      	cmp	r3, #0
 810f476:	d02e      	beq.n	810f4d6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 810f478:	68fb      	ldr	r3, [r7, #12]
 810f47a:	699b      	ldr	r3, [r3, #24]
 810f47c:	693a      	ldr	r2, [r7, #16]
 810f47e:	4413      	add	r3, r2
 810f480:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 810f482:	68ba      	ldr	r2, [r7, #8]
 810f484:	693b      	ldr	r3, [r7, #16]
 810f486:	429a      	cmp	r2, r3
 810f488:	d90e      	bls.n	810f4a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 810f48a:	68fb      	ldr	r3, [r7, #12]
 810f48c:	68ba      	ldr	r2, [r7, #8]
 810f48e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 810f490:	68fb      	ldr	r3, [r7, #12]
 810f492:	68fa      	ldr	r2, [r7, #12]
 810f494:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810f496:	4b19      	ldr	r3, [pc, #100]	; (810f4fc <prvSwitchTimerLists+0xc0>)
 810f498:	681a      	ldr	r2, [r3, #0]
 810f49a:	68fb      	ldr	r3, [r7, #12]
 810f49c:	3304      	adds	r3, #4
 810f49e:	4619      	mov	r1, r3
 810f4a0:	4610      	mov	r0, r2
 810f4a2:	f7fd f87c 	bl	810c59e <vListInsert>
 810f4a6:	e016      	b.n	810f4d6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810f4a8:	2300      	movs	r3, #0
 810f4aa:	9300      	str	r3, [sp, #0]
 810f4ac:	2300      	movs	r3, #0
 810f4ae:	693a      	ldr	r2, [r7, #16]
 810f4b0:	2100      	movs	r1, #0
 810f4b2:	68f8      	ldr	r0, [r7, #12]
 810f4b4:	f7ff fd60 	bl	810ef78 <xTimerGenericCommand>
 810f4b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 810f4ba:	687b      	ldr	r3, [r7, #4]
 810f4bc:	2b00      	cmp	r3, #0
 810f4be:	d10a      	bne.n	810f4d6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 810f4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 810f4c4:	f383 8811 	msr	BASEPRI, r3
 810f4c8:	f3bf 8f6f 	isb	sy
 810f4cc:	f3bf 8f4f 	dsb	sy
 810f4d0:	603b      	str	r3, [r7, #0]
}
 810f4d2:	bf00      	nop
 810f4d4:	e7fe      	b.n	810f4d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810f4d6:	4b09      	ldr	r3, [pc, #36]	; (810f4fc <prvSwitchTimerLists+0xc0>)
 810f4d8:	681b      	ldr	r3, [r3, #0]
 810f4da:	681b      	ldr	r3, [r3, #0]
 810f4dc:	2b00      	cmp	r3, #0
 810f4de:	d1b1      	bne.n	810f444 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 810f4e0:	4b06      	ldr	r3, [pc, #24]	; (810f4fc <prvSwitchTimerLists+0xc0>)
 810f4e2:	681b      	ldr	r3, [r3, #0]
 810f4e4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 810f4e6:	4b06      	ldr	r3, [pc, #24]	; (810f500 <prvSwitchTimerLists+0xc4>)
 810f4e8:	681b      	ldr	r3, [r3, #0]
 810f4ea:	4a04      	ldr	r2, [pc, #16]	; (810f4fc <prvSwitchTimerLists+0xc0>)
 810f4ec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 810f4ee:	4a04      	ldr	r2, [pc, #16]	; (810f500 <prvSwitchTimerLists+0xc4>)
 810f4f0:	697b      	ldr	r3, [r7, #20]
 810f4f2:	6013      	str	r3, [r2, #0]
}
 810f4f4:	bf00      	nop
 810f4f6:	3718      	adds	r7, #24
 810f4f8:	46bd      	mov	sp, r7
 810f4fa:	bd80      	pop	{r7, pc}
 810f4fc:	100226dc 	.word	0x100226dc
 810f500:	100226e0 	.word	0x100226e0

0810f504 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 810f504:	b580      	push	{r7, lr}
 810f506:	b082      	sub	sp, #8
 810f508:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 810f50a:	f7fd f9db 	bl	810c8c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 810f50e:	4b15      	ldr	r3, [pc, #84]	; (810f564 <prvCheckForValidListAndQueue+0x60>)
 810f510:	681b      	ldr	r3, [r3, #0]
 810f512:	2b00      	cmp	r3, #0
 810f514:	d120      	bne.n	810f558 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 810f516:	4814      	ldr	r0, [pc, #80]	; (810f568 <prvCheckForValidListAndQueue+0x64>)
 810f518:	f7fc fff0 	bl	810c4fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 810f51c:	4813      	ldr	r0, [pc, #76]	; (810f56c <prvCheckForValidListAndQueue+0x68>)
 810f51e:	f7fc ffed 	bl	810c4fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 810f522:	4b13      	ldr	r3, [pc, #76]	; (810f570 <prvCheckForValidListAndQueue+0x6c>)
 810f524:	4a10      	ldr	r2, [pc, #64]	; (810f568 <prvCheckForValidListAndQueue+0x64>)
 810f526:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 810f528:	4b12      	ldr	r3, [pc, #72]	; (810f574 <prvCheckForValidListAndQueue+0x70>)
 810f52a:	4a10      	ldr	r2, [pc, #64]	; (810f56c <prvCheckForValidListAndQueue+0x68>)
 810f52c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 810f52e:	2300      	movs	r3, #0
 810f530:	9300      	str	r3, [sp, #0]
 810f532:	4b11      	ldr	r3, [pc, #68]	; (810f578 <prvCheckForValidListAndQueue+0x74>)
 810f534:	4a11      	ldr	r2, [pc, #68]	; (810f57c <prvCheckForValidListAndQueue+0x78>)
 810f536:	2110      	movs	r1, #16
 810f538:	200a      	movs	r0, #10
 810f53a:	f7fd fb4d 	bl	810cbd8 <xQueueGenericCreateStatic>
 810f53e:	4603      	mov	r3, r0
 810f540:	4a08      	ldr	r2, [pc, #32]	; (810f564 <prvCheckForValidListAndQueue+0x60>)
 810f542:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 810f544:	4b07      	ldr	r3, [pc, #28]	; (810f564 <prvCheckForValidListAndQueue+0x60>)
 810f546:	681b      	ldr	r3, [r3, #0]
 810f548:	2b00      	cmp	r3, #0
 810f54a:	d005      	beq.n	810f558 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 810f54c:	4b05      	ldr	r3, [pc, #20]	; (810f564 <prvCheckForValidListAndQueue+0x60>)
 810f54e:	681b      	ldr	r3, [r3, #0]
 810f550:	490b      	ldr	r1, [pc, #44]	; (810f580 <prvCheckForValidListAndQueue+0x7c>)
 810f552:	4618      	mov	r0, r3
 810f554:	f7fe fa42 	bl	810d9dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810f558:	f7fd f9e4 	bl	810c924 <vPortExitCritical>
}
 810f55c:	bf00      	nop
 810f55e:	46bd      	mov	sp, r7
 810f560:	bd80      	pop	{r7, pc}
 810f562:	bf00      	nop
 810f564:	100226e4 	.word	0x100226e4
 810f568:	100226b4 	.word	0x100226b4
 810f56c:	100226c8 	.word	0x100226c8
 810f570:	100226dc 	.word	0x100226dc
 810f574:	100226e0 	.word	0x100226e0
 810f578:	10022790 	.word	0x10022790
 810f57c:	100226f0 	.word	0x100226f0
 810f580:	0811023c 	.word	0x0811023c

0810f584 <__errno>:
 810f584:	4b01      	ldr	r3, [pc, #4]	; (810f58c <__errno+0x8>)
 810f586:	6818      	ldr	r0, [r3, #0]
 810f588:	4770      	bx	lr
 810f58a:	bf00      	nop
 810f58c:	1000001c 	.word	0x1000001c

0810f590 <__libc_init_array>:
 810f590:	b570      	push	{r4, r5, r6, lr}
 810f592:	4d0d      	ldr	r5, [pc, #52]	; (810f5c8 <__libc_init_array+0x38>)
 810f594:	4c0d      	ldr	r4, [pc, #52]	; (810f5cc <__libc_init_array+0x3c>)
 810f596:	1b64      	subs	r4, r4, r5
 810f598:	10a4      	asrs	r4, r4, #2
 810f59a:	2600      	movs	r6, #0
 810f59c:	42a6      	cmp	r6, r4
 810f59e:	d109      	bne.n	810f5b4 <__libc_init_array+0x24>
 810f5a0:	4d0b      	ldr	r5, [pc, #44]	; (810f5d0 <__libc_init_array+0x40>)
 810f5a2:	4c0c      	ldr	r4, [pc, #48]	; (810f5d4 <__libc_init_array+0x44>)
 810f5a4:	f000 fcd2 	bl	810ff4c <_init>
 810f5a8:	1b64      	subs	r4, r4, r5
 810f5aa:	10a4      	asrs	r4, r4, #2
 810f5ac:	2600      	movs	r6, #0
 810f5ae:	42a6      	cmp	r6, r4
 810f5b0:	d105      	bne.n	810f5be <__libc_init_array+0x2e>
 810f5b2:	bd70      	pop	{r4, r5, r6, pc}
 810f5b4:	f855 3b04 	ldr.w	r3, [r5], #4
 810f5b8:	4798      	blx	r3
 810f5ba:	3601      	adds	r6, #1
 810f5bc:	e7ee      	b.n	810f59c <__libc_init_array+0xc>
 810f5be:	f855 3b04 	ldr.w	r3, [r5], #4
 810f5c2:	4798      	blx	r3
 810f5c4:	3601      	adds	r6, #1
 810f5c6:	e7f2      	b.n	810f5ae <__libc_init_array+0x1e>
 810f5c8:	08110344 	.word	0x08110344
 810f5cc:	08110344 	.word	0x08110344
 810f5d0:	08110344 	.word	0x08110344
 810f5d4:	08110348 	.word	0x08110348

0810f5d8 <__retarget_lock_acquire_recursive>:
 810f5d8:	4770      	bx	lr

0810f5da <__retarget_lock_release_recursive>:
 810f5da:	4770      	bx	lr

0810f5dc <memcpy>:
 810f5dc:	440a      	add	r2, r1
 810f5de:	4291      	cmp	r1, r2
 810f5e0:	f100 33ff 	add.w	r3, r0, #4294967295
 810f5e4:	d100      	bne.n	810f5e8 <memcpy+0xc>
 810f5e6:	4770      	bx	lr
 810f5e8:	b510      	push	{r4, lr}
 810f5ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 810f5ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 810f5f2:	4291      	cmp	r1, r2
 810f5f4:	d1f9      	bne.n	810f5ea <memcpy+0xe>
 810f5f6:	bd10      	pop	{r4, pc}

0810f5f8 <memset>:
 810f5f8:	4402      	add	r2, r0
 810f5fa:	4603      	mov	r3, r0
 810f5fc:	4293      	cmp	r3, r2
 810f5fe:	d100      	bne.n	810f602 <memset+0xa>
 810f600:	4770      	bx	lr
 810f602:	f803 1b01 	strb.w	r1, [r3], #1
 810f606:	e7f9      	b.n	810f5fc <memset+0x4>

0810f608 <_malloc_r>:
 810f608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810f60a:	1ccd      	adds	r5, r1, #3
 810f60c:	f025 0503 	bic.w	r5, r5, #3
 810f610:	3508      	adds	r5, #8
 810f612:	2d0c      	cmp	r5, #12
 810f614:	bf38      	it	cc
 810f616:	250c      	movcc	r5, #12
 810f618:	2d00      	cmp	r5, #0
 810f61a:	4606      	mov	r6, r0
 810f61c:	db01      	blt.n	810f622 <_malloc_r+0x1a>
 810f61e:	42a9      	cmp	r1, r5
 810f620:	d903      	bls.n	810f62a <_malloc_r+0x22>
 810f622:	230c      	movs	r3, #12
 810f624:	6033      	str	r3, [r6, #0]
 810f626:	2000      	movs	r0, #0
 810f628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810f62a:	f000 f8fb 	bl	810f824 <__malloc_lock>
 810f62e:	4921      	ldr	r1, [pc, #132]	; (810f6b4 <_malloc_r+0xac>)
 810f630:	680a      	ldr	r2, [r1, #0]
 810f632:	4614      	mov	r4, r2
 810f634:	b99c      	cbnz	r4, 810f65e <_malloc_r+0x56>
 810f636:	4f20      	ldr	r7, [pc, #128]	; (810f6b8 <_malloc_r+0xb0>)
 810f638:	683b      	ldr	r3, [r7, #0]
 810f63a:	b923      	cbnz	r3, 810f646 <_malloc_r+0x3e>
 810f63c:	4621      	mov	r1, r4
 810f63e:	4630      	mov	r0, r6
 810f640:	f000 f8a6 	bl	810f790 <_sbrk_r>
 810f644:	6038      	str	r0, [r7, #0]
 810f646:	4629      	mov	r1, r5
 810f648:	4630      	mov	r0, r6
 810f64a:	f000 f8a1 	bl	810f790 <_sbrk_r>
 810f64e:	1c43      	adds	r3, r0, #1
 810f650:	d123      	bne.n	810f69a <_malloc_r+0x92>
 810f652:	230c      	movs	r3, #12
 810f654:	6033      	str	r3, [r6, #0]
 810f656:	4630      	mov	r0, r6
 810f658:	f000 f8ea 	bl	810f830 <__malloc_unlock>
 810f65c:	e7e3      	b.n	810f626 <_malloc_r+0x1e>
 810f65e:	6823      	ldr	r3, [r4, #0]
 810f660:	1b5b      	subs	r3, r3, r5
 810f662:	d417      	bmi.n	810f694 <_malloc_r+0x8c>
 810f664:	2b0b      	cmp	r3, #11
 810f666:	d903      	bls.n	810f670 <_malloc_r+0x68>
 810f668:	6023      	str	r3, [r4, #0]
 810f66a:	441c      	add	r4, r3
 810f66c:	6025      	str	r5, [r4, #0]
 810f66e:	e004      	b.n	810f67a <_malloc_r+0x72>
 810f670:	6863      	ldr	r3, [r4, #4]
 810f672:	42a2      	cmp	r2, r4
 810f674:	bf0c      	ite	eq
 810f676:	600b      	streq	r3, [r1, #0]
 810f678:	6053      	strne	r3, [r2, #4]
 810f67a:	4630      	mov	r0, r6
 810f67c:	f000 f8d8 	bl	810f830 <__malloc_unlock>
 810f680:	f104 000b 	add.w	r0, r4, #11
 810f684:	1d23      	adds	r3, r4, #4
 810f686:	f020 0007 	bic.w	r0, r0, #7
 810f68a:	1ac2      	subs	r2, r0, r3
 810f68c:	d0cc      	beq.n	810f628 <_malloc_r+0x20>
 810f68e:	1a1b      	subs	r3, r3, r0
 810f690:	50a3      	str	r3, [r4, r2]
 810f692:	e7c9      	b.n	810f628 <_malloc_r+0x20>
 810f694:	4622      	mov	r2, r4
 810f696:	6864      	ldr	r4, [r4, #4]
 810f698:	e7cc      	b.n	810f634 <_malloc_r+0x2c>
 810f69a:	1cc4      	adds	r4, r0, #3
 810f69c:	f024 0403 	bic.w	r4, r4, #3
 810f6a0:	42a0      	cmp	r0, r4
 810f6a2:	d0e3      	beq.n	810f66c <_malloc_r+0x64>
 810f6a4:	1a21      	subs	r1, r4, r0
 810f6a6:	4630      	mov	r0, r6
 810f6a8:	f000 f872 	bl	810f790 <_sbrk_r>
 810f6ac:	3001      	adds	r0, #1
 810f6ae:	d1dd      	bne.n	810f66c <_malloc_r+0x64>
 810f6b0:	e7cf      	b.n	810f652 <_malloc_r+0x4a>
 810f6b2:	bf00      	nop
 810f6b4:	100227e0 	.word	0x100227e0
 810f6b8:	100227e4 	.word	0x100227e4

0810f6bc <cleanup_glue>:
 810f6bc:	b538      	push	{r3, r4, r5, lr}
 810f6be:	460c      	mov	r4, r1
 810f6c0:	6809      	ldr	r1, [r1, #0]
 810f6c2:	4605      	mov	r5, r0
 810f6c4:	b109      	cbz	r1, 810f6ca <cleanup_glue+0xe>
 810f6c6:	f7ff fff9 	bl	810f6bc <cleanup_glue>
 810f6ca:	4621      	mov	r1, r4
 810f6cc:	4628      	mov	r0, r5
 810f6ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810f6d2:	f000 b8b3 	b.w	810f83c <_free_r>
	...

0810f6d8 <_reclaim_reent>:
 810f6d8:	4b2c      	ldr	r3, [pc, #176]	; (810f78c <_reclaim_reent+0xb4>)
 810f6da:	681b      	ldr	r3, [r3, #0]
 810f6dc:	4283      	cmp	r3, r0
 810f6de:	b570      	push	{r4, r5, r6, lr}
 810f6e0:	4604      	mov	r4, r0
 810f6e2:	d051      	beq.n	810f788 <_reclaim_reent+0xb0>
 810f6e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 810f6e6:	b143      	cbz	r3, 810f6fa <_reclaim_reent+0x22>
 810f6e8:	68db      	ldr	r3, [r3, #12]
 810f6ea:	2b00      	cmp	r3, #0
 810f6ec:	d14a      	bne.n	810f784 <_reclaim_reent+0xac>
 810f6ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810f6f0:	6819      	ldr	r1, [r3, #0]
 810f6f2:	b111      	cbz	r1, 810f6fa <_reclaim_reent+0x22>
 810f6f4:	4620      	mov	r0, r4
 810f6f6:	f000 f8a1 	bl	810f83c <_free_r>
 810f6fa:	6961      	ldr	r1, [r4, #20]
 810f6fc:	b111      	cbz	r1, 810f704 <_reclaim_reent+0x2c>
 810f6fe:	4620      	mov	r0, r4
 810f700:	f000 f89c 	bl	810f83c <_free_r>
 810f704:	6a61      	ldr	r1, [r4, #36]	; 0x24
 810f706:	b111      	cbz	r1, 810f70e <_reclaim_reent+0x36>
 810f708:	4620      	mov	r0, r4
 810f70a:	f000 f897 	bl	810f83c <_free_r>
 810f70e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 810f710:	b111      	cbz	r1, 810f718 <_reclaim_reent+0x40>
 810f712:	4620      	mov	r0, r4
 810f714:	f000 f892 	bl	810f83c <_free_r>
 810f718:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 810f71a:	b111      	cbz	r1, 810f722 <_reclaim_reent+0x4a>
 810f71c:	4620      	mov	r0, r4
 810f71e:	f000 f88d 	bl	810f83c <_free_r>
 810f722:	6c21      	ldr	r1, [r4, #64]	; 0x40
 810f724:	b111      	cbz	r1, 810f72c <_reclaim_reent+0x54>
 810f726:	4620      	mov	r0, r4
 810f728:	f000 f888 	bl	810f83c <_free_r>
 810f72c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 810f72e:	b111      	cbz	r1, 810f736 <_reclaim_reent+0x5e>
 810f730:	4620      	mov	r0, r4
 810f732:	f000 f883 	bl	810f83c <_free_r>
 810f736:	6da1      	ldr	r1, [r4, #88]	; 0x58
 810f738:	b111      	cbz	r1, 810f740 <_reclaim_reent+0x68>
 810f73a:	4620      	mov	r0, r4
 810f73c:	f000 f87e 	bl	810f83c <_free_r>
 810f740:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810f742:	b111      	cbz	r1, 810f74a <_reclaim_reent+0x72>
 810f744:	4620      	mov	r0, r4
 810f746:	f000 f879 	bl	810f83c <_free_r>
 810f74a:	69a3      	ldr	r3, [r4, #24]
 810f74c:	b1e3      	cbz	r3, 810f788 <_reclaim_reent+0xb0>
 810f74e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 810f750:	4620      	mov	r0, r4
 810f752:	4798      	blx	r3
 810f754:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 810f756:	b1b9      	cbz	r1, 810f788 <_reclaim_reent+0xb0>
 810f758:	4620      	mov	r0, r4
 810f75a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 810f75e:	f7ff bfad 	b.w	810f6bc <cleanup_glue>
 810f762:	5949      	ldr	r1, [r1, r5]
 810f764:	b941      	cbnz	r1, 810f778 <_reclaim_reent+0xa0>
 810f766:	3504      	adds	r5, #4
 810f768:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810f76a:	2d80      	cmp	r5, #128	; 0x80
 810f76c:	68d9      	ldr	r1, [r3, #12]
 810f76e:	d1f8      	bne.n	810f762 <_reclaim_reent+0x8a>
 810f770:	4620      	mov	r0, r4
 810f772:	f000 f863 	bl	810f83c <_free_r>
 810f776:	e7ba      	b.n	810f6ee <_reclaim_reent+0x16>
 810f778:	680e      	ldr	r6, [r1, #0]
 810f77a:	4620      	mov	r0, r4
 810f77c:	f000 f85e 	bl	810f83c <_free_r>
 810f780:	4631      	mov	r1, r6
 810f782:	e7ef      	b.n	810f764 <_reclaim_reent+0x8c>
 810f784:	2500      	movs	r5, #0
 810f786:	e7ef      	b.n	810f768 <_reclaim_reent+0x90>
 810f788:	bd70      	pop	{r4, r5, r6, pc}
 810f78a:	bf00      	nop
 810f78c:	1000001c 	.word	0x1000001c

0810f790 <_sbrk_r>:
 810f790:	b538      	push	{r3, r4, r5, lr}
 810f792:	4d06      	ldr	r5, [pc, #24]	; (810f7ac <_sbrk_r+0x1c>)
 810f794:	2300      	movs	r3, #0
 810f796:	4604      	mov	r4, r0
 810f798:	4608      	mov	r0, r1
 810f79a:	602b      	str	r3, [r5, #0]
 810f79c:	f7f1 fa92 	bl	8100cc4 <_sbrk>
 810f7a0:	1c43      	adds	r3, r0, #1
 810f7a2:	d102      	bne.n	810f7aa <_sbrk_r+0x1a>
 810f7a4:	682b      	ldr	r3, [r5, #0]
 810f7a6:	b103      	cbz	r3, 810f7aa <_sbrk_r+0x1a>
 810f7a8:	6023      	str	r3, [r4, #0]
 810f7aa:	bd38      	pop	{r3, r4, r5, pc}
 810f7ac:	10022ac0 	.word	0x10022ac0

0810f7b0 <_vsniprintf_r>:
 810f7b0:	b530      	push	{r4, r5, lr}
 810f7b2:	1e14      	subs	r4, r2, #0
 810f7b4:	4605      	mov	r5, r0
 810f7b6:	b09b      	sub	sp, #108	; 0x6c
 810f7b8:	4618      	mov	r0, r3
 810f7ba:	da05      	bge.n	810f7c8 <_vsniprintf_r+0x18>
 810f7bc:	238b      	movs	r3, #139	; 0x8b
 810f7be:	602b      	str	r3, [r5, #0]
 810f7c0:	f04f 30ff 	mov.w	r0, #4294967295
 810f7c4:	b01b      	add	sp, #108	; 0x6c
 810f7c6:	bd30      	pop	{r4, r5, pc}
 810f7c8:	f44f 7302 	mov.w	r3, #520	; 0x208
 810f7cc:	f8ad 300c 	strh.w	r3, [sp, #12]
 810f7d0:	bf14      	ite	ne
 810f7d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 810f7d6:	4623      	moveq	r3, r4
 810f7d8:	9302      	str	r3, [sp, #8]
 810f7da:	9305      	str	r3, [sp, #20]
 810f7dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 810f7e0:	9100      	str	r1, [sp, #0]
 810f7e2:	9104      	str	r1, [sp, #16]
 810f7e4:	f8ad 300e 	strh.w	r3, [sp, #14]
 810f7e8:	4602      	mov	r2, r0
 810f7ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 810f7ec:	4669      	mov	r1, sp
 810f7ee:	4628      	mov	r0, r5
 810f7f0:	f000 f8d0 	bl	810f994 <_svfiprintf_r>
 810f7f4:	1c43      	adds	r3, r0, #1
 810f7f6:	bfbc      	itt	lt
 810f7f8:	238b      	movlt	r3, #139	; 0x8b
 810f7fa:	602b      	strlt	r3, [r5, #0]
 810f7fc:	2c00      	cmp	r4, #0
 810f7fe:	d0e1      	beq.n	810f7c4 <_vsniprintf_r+0x14>
 810f800:	9b00      	ldr	r3, [sp, #0]
 810f802:	2200      	movs	r2, #0
 810f804:	701a      	strb	r2, [r3, #0]
 810f806:	e7dd      	b.n	810f7c4 <_vsniprintf_r+0x14>

0810f808 <vsniprintf>:
 810f808:	b507      	push	{r0, r1, r2, lr}
 810f80a:	9300      	str	r3, [sp, #0]
 810f80c:	4613      	mov	r3, r2
 810f80e:	460a      	mov	r2, r1
 810f810:	4601      	mov	r1, r0
 810f812:	4803      	ldr	r0, [pc, #12]	; (810f820 <vsniprintf+0x18>)
 810f814:	6800      	ldr	r0, [r0, #0]
 810f816:	f7ff ffcb 	bl	810f7b0 <_vsniprintf_r>
 810f81a:	b003      	add	sp, #12
 810f81c:	f85d fb04 	ldr.w	pc, [sp], #4
 810f820:	1000001c 	.word	0x1000001c

0810f824 <__malloc_lock>:
 810f824:	4801      	ldr	r0, [pc, #4]	; (810f82c <__malloc_lock+0x8>)
 810f826:	f7ff bed7 	b.w	810f5d8 <__retarget_lock_acquire_recursive>
 810f82a:	bf00      	nop
 810f82c:	10022ab8 	.word	0x10022ab8

0810f830 <__malloc_unlock>:
 810f830:	4801      	ldr	r0, [pc, #4]	; (810f838 <__malloc_unlock+0x8>)
 810f832:	f7ff bed2 	b.w	810f5da <__retarget_lock_release_recursive>
 810f836:	bf00      	nop
 810f838:	10022ab8 	.word	0x10022ab8

0810f83c <_free_r>:
 810f83c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810f83e:	2900      	cmp	r1, #0
 810f840:	d048      	beq.n	810f8d4 <_free_r+0x98>
 810f842:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810f846:	9001      	str	r0, [sp, #4]
 810f848:	2b00      	cmp	r3, #0
 810f84a:	f1a1 0404 	sub.w	r4, r1, #4
 810f84e:	bfb8      	it	lt
 810f850:	18e4      	addlt	r4, r4, r3
 810f852:	f7ff ffe7 	bl	810f824 <__malloc_lock>
 810f856:	4a20      	ldr	r2, [pc, #128]	; (810f8d8 <_free_r+0x9c>)
 810f858:	9801      	ldr	r0, [sp, #4]
 810f85a:	6813      	ldr	r3, [r2, #0]
 810f85c:	4615      	mov	r5, r2
 810f85e:	b933      	cbnz	r3, 810f86e <_free_r+0x32>
 810f860:	6063      	str	r3, [r4, #4]
 810f862:	6014      	str	r4, [r2, #0]
 810f864:	b003      	add	sp, #12
 810f866:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810f86a:	f7ff bfe1 	b.w	810f830 <__malloc_unlock>
 810f86e:	42a3      	cmp	r3, r4
 810f870:	d90b      	bls.n	810f88a <_free_r+0x4e>
 810f872:	6821      	ldr	r1, [r4, #0]
 810f874:	1862      	adds	r2, r4, r1
 810f876:	4293      	cmp	r3, r2
 810f878:	bf04      	itt	eq
 810f87a:	681a      	ldreq	r2, [r3, #0]
 810f87c:	685b      	ldreq	r3, [r3, #4]
 810f87e:	6063      	str	r3, [r4, #4]
 810f880:	bf04      	itt	eq
 810f882:	1852      	addeq	r2, r2, r1
 810f884:	6022      	streq	r2, [r4, #0]
 810f886:	602c      	str	r4, [r5, #0]
 810f888:	e7ec      	b.n	810f864 <_free_r+0x28>
 810f88a:	461a      	mov	r2, r3
 810f88c:	685b      	ldr	r3, [r3, #4]
 810f88e:	b10b      	cbz	r3, 810f894 <_free_r+0x58>
 810f890:	42a3      	cmp	r3, r4
 810f892:	d9fa      	bls.n	810f88a <_free_r+0x4e>
 810f894:	6811      	ldr	r1, [r2, #0]
 810f896:	1855      	adds	r5, r2, r1
 810f898:	42a5      	cmp	r5, r4
 810f89a:	d10b      	bne.n	810f8b4 <_free_r+0x78>
 810f89c:	6824      	ldr	r4, [r4, #0]
 810f89e:	4421      	add	r1, r4
 810f8a0:	1854      	adds	r4, r2, r1
 810f8a2:	42a3      	cmp	r3, r4
 810f8a4:	6011      	str	r1, [r2, #0]
 810f8a6:	d1dd      	bne.n	810f864 <_free_r+0x28>
 810f8a8:	681c      	ldr	r4, [r3, #0]
 810f8aa:	685b      	ldr	r3, [r3, #4]
 810f8ac:	6053      	str	r3, [r2, #4]
 810f8ae:	4421      	add	r1, r4
 810f8b0:	6011      	str	r1, [r2, #0]
 810f8b2:	e7d7      	b.n	810f864 <_free_r+0x28>
 810f8b4:	d902      	bls.n	810f8bc <_free_r+0x80>
 810f8b6:	230c      	movs	r3, #12
 810f8b8:	6003      	str	r3, [r0, #0]
 810f8ba:	e7d3      	b.n	810f864 <_free_r+0x28>
 810f8bc:	6825      	ldr	r5, [r4, #0]
 810f8be:	1961      	adds	r1, r4, r5
 810f8c0:	428b      	cmp	r3, r1
 810f8c2:	bf04      	itt	eq
 810f8c4:	6819      	ldreq	r1, [r3, #0]
 810f8c6:	685b      	ldreq	r3, [r3, #4]
 810f8c8:	6063      	str	r3, [r4, #4]
 810f8ca:	bf04      	itt	eq
 810f8cc:	1949      	addeq	r1, r1, r5
 810f8ce:	6021      	streq	r1, [r4, #0]
 810f8d0:	6054      	str	r4, [r2, #4]
 810f8d2:	e7c7      	b.n	810f864 <_free_r+0x28>
 810f8d4:	b003      	add	sp, #12
 810f8d6:	bd30      	pop	{r4, r5, pc}
 810f8d8:	100227e0 	.word	0x100227e0

0810f8dc <__ssputs_r>:
 810f8dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810f8e0:	688e      	ldr	r6, [r1, #8]
 810f8e2:	429e      	cmp	r6, r3
 810f8e4:	4682      	mov	sl, r0
 810f8e6:	460c      	mov	r4, r1
 810f8e8:	4690      	mov	r8, r2
 810f8ea:	461f      	mov	r7, r3
 810f8ec:	d838      	bhi.n	810f960 <__ssputs_r+0x84>
 810f8ee:	898a      	ldrh	r2, [r1, #12]
 810f8f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810f8f4:	d032      	beq.n	810f95c <__ssputs_r+0x80>
 810f8f6:	6825      	ldr	r5, [r4, #0]
 810f8f8:	6909      	ldr	r1, [r1, #16]
 810f8fa:	eba5 0901 	sub.w	r9, r5, r1
 810f8fe:	6965      	ldr	r5, [r4, #20]
 810f900:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810f904:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810f908:	3301      	adds	r3, #1
 810f90a:	444b      	add	r3, r9
 810f90c:	106d      	asrs	r5, r5, #1
 810f90e:	429d      	cmp	r5, r3
 810f910:	bf38      	it	cc
 810f912:	461d      	movcc	r5, r3
 810f914:	0553      	lsls	r3, r2, #21
 810f916:	d531      	bpl.n	810f97c <__ssputs_r+0xa0>
 810f918:	4629      	mov	r1, r5
 810f91a:	f7ff fe75 	bl	810f608 <_malloc_r>
 810f91e:	4606      	mov	r6, r0
 810f920:	b950      	cbnz	r0, 810f938 <__ssputs_r+0x5c>
 810f922:	230c      	movs	r3, #12
 810f924:	f8ca 3000 	str.w	r3, [sl]
 810f928:	89a3      	ldrh	r3, [r4, #12]
 810f92a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810f92e:	81a3      	strh	r3, [r4, #12]
 810f930:	f04f 30ff 	mov.w	r0, #4294967295
 810f934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810f938:	6921      	ldr	r1, [r4, #16]
 810f93a:	464a      	mov	r2, r9
 810f93c:	f7ff fe4e 	bl	810f5dc <memcpy>
 810f940:	89a3      	ldrh	r3, [r4, #12]
 810f942:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810f946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810f94a:	81a3      	strh	r3, [r4, #12]
 810f94c:	6126      	str	r6, [r4, #16]
 810f94e:	6165      	str	r5, [r4, #20]
 810f950:	444e      	add	r6, r9
 810f952:	eba5 0509 	sub.w	r5, r5, r9
 810f956:	6026      	str	r6, [r4, #0]
 810f958:	60a5      	str	r5, [r4, #8]
 810f95a:	463e      	mov	r6, r7
 810f95c:	42be      	cmp	r6, r7
 810f95e:	d900      	bls.n	810f962 <__ssputs_r+0x86>
 810f960:	463e      	mov	r6, r7
 810f962:	4632      	mov	r2, r6
 810f964:	6820      	ldr	r0, [r4, #0]
 810f966:	4641      	mov	r1, r8
 810f968:	f000 faa8 	bl	810febc <memmove>
 810f96c:	68a3      	ldr	r3, [r4, #8]
 810f96e:	6822      	ldr	r2, [r4, #0]
 810f970:	1b9b      	subs	r3, r3, r6
 810f972:	4432      	add	r2, r6
 810f974:	60a3      	str	r3, [r4, #8]
 810f976:	6022      	str	r2, [r4, #0]
 810f978:	2000      	movs	r0, #0
 810f97a:	e7db      	b.n	810f934 <__ssputs_r+0x58>
 810f97c:	462a      	mov	r2, r5
 810f97e:	f000 fab7 	bl	810fef0 <_realloc_r>
 810f982:	4606      	mov	r6, r0
 810f984:	2800      	cmp	r0, #0
 810f986:	d1e1      	bne.n	810f94c <__ssputs_r+0x70>
 810f988:	6921      	ldr	r1, [r4, #16]
 810f98a:	4650      	mov	r0, sl
 810f98c:	f7ff ff56 	bl	810f83c <_free_r>
 810f990:	e7c7      	b.n	810f922 <__ssputs_r+0x46>
	...

0810f994 <_svfiprintf_r>:
 810f994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810f998:	4698      	mov	r8, r3
 810f99a:	898b      	ldrh	r3, [r1, #12]
 810f99c:	061b      	lsls	r3, r3, #24
 810f99e:	b09d      	sub	sp, #116	; 0x74
 810f9a0:	4607      	mov	r7, r0
 810f9a2:	460d      	mov	r5, r1
 810f9a4:	4614      	mov	r4, r2
 810f9a6:	d50e      	bpl.n	810f9c6 <_svfiprintf_r+0x32>
 810f9a8:	690b      	ldr	r3, [r1, #16]
 810f9aa:	b963      	cbnz	r3, 810f9c6 <_svfiprintf_r+0x32>
 810f9ac:	2140      	movs	r1, #64	; 0x40
 810f9ae:	f7ff fe2b 	bl	810f608 <_malloc_r>
 810f9b2:	6028      	str	r0, [r5, #0]
 810f9b4:	6128      	str	r0, [r5, #16]
 810f9b6:	b920      	cbnz	r0, 810f9c2 <_svfiprintf_r+0x2e>
 810f9b8:	230c      	movs	r3, #12
 810f9ba:	603b      	str	r3, [r7, #0]
 810f9bc:	f04f 30ff 	mov.w	r0, #4294967295
 810f9c0:	e0d1      	b.n	810fb66 <_svfiprintf_r+0x1d2>
 810f9c2:	2340      	movs	r3, #64	; 0x40
 810f9c4:	616b      	str	r3, [r5, #20]
 810f9c6:	2300      	movs	r3, #0
 810f9c8:	9309      	str	r3, [sp, #36]	; 0x24
 810f9ca:	2320      	movs	r3, #32
 810f9cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810f9d0:	f8cd 800c 	str.w	r8, [sp, #12]
 810f9d4:	2330      	movs	r3, #48	; 0x30
 810f9d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 810fb80 <_svfiprintf_r+0x1ec>
 810f9da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810f9de:	f04f 0901 	mov.w	r9, #1
 810f9e2:	4623      	mov	r3, r4
 810f9e4:	469a      	mov	sl, r3
 810f9e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 810f9ea:	b10a      	cbz	r2, 810f9f0 <_svfiprintf_r+0x5c>
 810f9ec:	2a25      	cmp	r2, #37	; 0x25
 810f9ee:	d1f9      	bne.n	810f9e4 <_svfiprintf_r+0x50>
 810f9f0:	ebba 0b04 	subs.w	fp, sl, r4
 810f9f4:	d00b      	beq.n	810fa0e <_svfiprintf_r+0x7a>
 810f9f6:	465b      	mov	r3, fp
 810f9f8:	4622      	mov	r2, r4
 810f9fa:	4629      	mov	r1, r5
 810f9fc:	4638      	mov	r0, r7
 810f9fe:	f7ff ff6d 	bl	810f8dc <__ssputs_r>
 810fa02:	3001      	adds	r0, #1
 810fa04:	f000 80aa 	beq.w	810fb5c <_svfiprintf_r+0x1c8>
 810fa08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810fa0a:	445a      	add	r2, fp
 810fa0c:	9209      	str	r2, [sp, #36]	; 0x24
 810fa0e:	f89a 3000 	ldrb.w	r3, [sl]
 810fa12:	2b00      	cmp	r3, #0
 810fa14:	f000 80a2 	beq.w	810fb5c <_svfiprintf_r+0x1c8>
 810fa18:	2300      	movs	r3, #0
 810fa1a:	f04f 32ff 	mov.w	r2, #4294967295
 810fa1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810fa22:	f10a 0a01 	add.w	sl, sl, #1
 810fa26:	9304      	str	r3, [sp, #16]
 810fa28:	9307      	str	r3, [sp, #28]
 810fa2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810fa2e:	931a      	str	r3, [sp, #104]	; 0x68
 810fa30:	4654      	mov	r4, sl
 810fa32:	2205      	movs	r2, #5
 810fa34:	f814 1b01 	ldrb.w	r1, [r4], #1
 810fa38:	4851      	ldr	r0, [pc, #324]	; (810fb80 <_svfiprintf_r+0x1ec>)
 810fa3a:	f7f0 fc59 	bl	81002f0 <memchr>
 810fa3e:	9a04      	ldr	r2, [sp, #16]
 810fa40:	b9d8      	cbnz	r0, 810fa7a <_svfiprintf_r+0xe6>
 810fa42:	06d0      	lsls	r0, r2, #27
 810fa44:	bf44      	itt	mi
 810fa46:	2320      	movmi	r3, #32
 810fa48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810fa4c:	0711      	lsls	r1, r2, #28
 810fa4e:	bf44      	itt	mi
 810fa50:	232b      	movmi	r3, #43	; 0x2b
 810fa52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810fa56:	f89a 3000 	ldrb.w	r3, [sl]
 810fa5a:	2b2a      	cmp	r3, #42	; 0x2a
 810fa5c:	d015      	beq.n	810fa8a <_svfiprintf_r+0xf6>
 810fa5e:	9a07      	ldr	r2, [sp, #28]
 810fa60:	4654      	mov	r4, sl
 810fa62:	2000      	movs	r0, #0
 810fa64:	f04f 0c0a 	mov.w	ip, #10
 810fa68:	4621      	mov	r1, r4
 810fa6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 810fa6e:	3b30      	subs	r3, #48	; 0x30
 810fa70:	2b09      	cmp	r3, #9
 810fa72:	d94e      	bls.n	810fb12 <_svfiprintf_r+0x17e>
 810fa74:	b1b0      	cbz	r0, 810faa4 <_svfiprintf_r+0x110>
 810fa76:	9207      	str	r2, [sp, #28]
 810fa78:	e014      	b.n	810faa4 <_svfiprintf_r+0x110>
 810fa7a:	eba0 0308 	sub.w	r3, r0, r8
 810fa7e:	fa09 f303 	lsl.w	r3, r9, r3
 810fa82:	4313      	orrs	r3, r2
 810fa84:	9304      	str	r3, [sp, #16]
 810fa86:	46a2      	mov	sl, r4
 810fa88:	e7d2      	b.n	810fa30 <_svfiprintf_r+0x9c>
 810fa8a:	9b03      	ldr	r3, [sp, #12]
 810fa8c:	1d19      	adds	r1, r3, #4
 810fa8e:	681b      	ldr	r3, [r3, #0]
 810fa90:	9103      	str	r1, [sp, #12]
 810fa92:	2b00      	cmp	r3, #0
 810fa94:	bfbb      	ittet	lt
 810fa96:	425b      	neglt	r3, r3
 810fa98:	f042 0202 	orrlt.w	r2, r2, #2
 810fa9c:	9307      	strge	r3, [sp, #28]
 810fa9e:	9307      	strlt	r3, [sp, #28]
 810faa0:	bfb8      	it	lt
 810faa2:	9204      	strlt	r2, [sp, #16]
 810faa4:	7823      	ldrb	r3, [r4, #0]
 810faa6:	2b2e      	cmp	r3, #46	; 0x2e
 810faa8:	d10c      	bne.n	810fac4 <_svfiprintf_r+0x130>
 810faaa:	7863      	ldrb	r3, [r4, #1]
 810faac:	2b2a      	cmp	r3, #42	; 0x2a
 810faae:	d135      	bne.n	810fb1c <_svfiprintf_r+0x188>
 810fab0:	9b03      	ldr	r3, [sp, #12]
 810fab2:	1d1a      	adds	r2, r3, #4
 810fab4:	681b      	ldr	r3, [r3, #0]
 810fab6:	9203      	str	r2, [sp, #12]
 810fab8:	2b00      	cmp	r3, #0
 810faba:	bfb8      	it	lt
 810fabc:	f04f 33ff 	movlt.w	r3, #4294967295
 810fac0:	3402      	adds	r4, #2
 810fac2:	9305      	str	r3, [sp, #20]
 810fac4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 810fb90 <_svfiprintf_r+0x1fc>
 810fac8:	7821      	ldrb	r1, [r4, #0]
 810faca:	2203      	movs	r2, #3
 810facc:	4650      	mov	r0, sl
 810face:	f7f0 fc0f 	bl	81002f0 <memchr>
 810fad2:	b140      	cbz	r0, 810fae6 <_svfiprintf_r+0x152>
 810fad4:	2340      	movs	r3, #64	; 0x40
 810fad6:	eba0 000a 	sub.w	r0, r0, sl
 810fada:	fa03 f000 	lsl.w	r0, r3, r0
 810fade:	9b04      	ldr	r3, [sp, #16]
 810fae0:	4303      	orrs	r3, r0
 810fae2:	3401      	adds	r4, #1
 810fae4:	9304      	str	r3, [sp, #16]
 810fae6:	f814 1b01 	ldrb.w	r1, [r4], #1
 810faea:	4826      	ldr	r0, [pc, #152]	; (810fb84 <_svfiprintf_r+0x1f0>)
 810faec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810faf0:	2206      	movs	r2, #6
 810faf2:	f7f0 fbfd 	bl	81002f0 <memchr>
 810faf6:	2800      	cmp	r0, #0
 810faf8:	d038      	beq.n	810fb6c <_svfiprintf_r+0x1d8>
 810fafa:	4b23      	ldr	r3, [pc, #140]	; (810fb88 <_svfiprintf_r+0x1f4>)
 810fafc:	bb1b      	cbnz	r3, 810fb46 <_svfiprintf_r+0x1b2>
 810fafe:	9b03      	ldr	r3, [sp, #12]
 810fb00:	3307      	adds	r3, #7
 810fb02:	f023 0307 	bic.w	r3, r3, #7
 810fb06:	3308      	adds	r3, #8
 810fb08:	9303      	str	r3, [sp, #12]
 810fb0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810fb0c:	4433      	add	r3, r6
 810fb0e:	9309      	str	r3, [sp, #36]	; 0x24
 810fb10:	e767      	b.n	810f9e2 <_svfiprintf_r+0x4e>
 810fb12:	fb0c 3202 	mla	r2, ip, r2, r3
 810fb16:	460c      	mov	r4, r1
 810fb18:	2001      	movs	r0, #1
 810fb1a:	e7a5      	b.n	810fa68 <_svfiprintf_r+0xd4>
 810fb1c:	2300      	movs	r3, #0
 810fb1e:	3401      	adds	r4, #1
 810fb20:	9305      	str	r3, [sp, #20]
 810fb22:	4619      	mov	r1, r3
 810fb24:	f04f 0c0a 	mov.w	ip, #10
 810fb28:	4620      	mov	r0, r4
 810fb2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 810fb2e:	3a30      	subs	r2, #48	; 0x30
 810fb30:	2a09      	cmp	r2, #9
 810fb32:	d903      	bls.n	810fb3c <_svfiprintf_r+0x1a8>
 810fb34:	2b00      	cmp	r3, #0
 810fb36:	d0c5      	beq.n	810fac4 <_svfiprintf_r+0x130>
 810fb38:	9105      	str	r1, [sp, #20]
 810fb3a:	e7c3      	b.n	810fac4 <_svfiprintf_r+0x130>
 810fb3c:	fb0c 2101 	mla	r1, ip, r1, r2
 810fb40:	4604      	mov	r4, r0
 810fb42:	2301      	movs	r3, #1
 810fb44:	e7f0      	b.n	810fb28 <_svfiprintf_r+0x194>
 810fb46:	ab03      	add	r3, sp, #12
 810fb48:	9300      	str	r3, [sp, #0]
 810fb4a:	462a      	mov	r2, r5
 810fb4c:	4b0f      	ldr	r3, [pc, #60]	; (810fb8c <_svfiprintf_r+0x1f8>)
 810fb4e:	a904      	add	r1, sp, #16
 810fb50:	4638      	mov	r0, r7
 810fb52:	f3af 8000 	nop.w
 810fb56:	1c42      	adds	r2, r0, #1
 810fb58:	4606      	mov	r6, r0
 810fb5a:	d1d6      	bne.n	810fb0a <_svfiprintf_r+0x176>
 810fb5c:	89ab      	ldrh	r3, [r5, #12]
 810fb5e:	065b      	lsls	r3, r3, #25
 810fb60:	f53f af2c 	bmi.w	810f9bc <_svfiprintf_r+0x28>
 810fb64:	9809      	ldr	r0, [sp, #36]	; 0x24
 810fb66:	b01d      	add	sp, #116	; 0x74
 810fb68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810fb6c:	ab03      	add	r3, sp, #12
 810fb6e:	9300      	str	r3, [sp, #0]
 810fb70:	462a      	mov	r2, r5
 810fb72:	4b06      	ldr	r3, [pc, #24]	; (810fb8c <_svfiprintf_r+0x1f8>)
 810fb74:	a904      	add	r1, sp, #16
 810fb76:	4638      	mov	r0, r7
 810fb78:	f000 f87a 	bl	810fc70 <_printf_i>
 810fb7c:	e7eb      	b.n	810fb56 <_svfiprintf_r+0x1c2>
 810fb7e:	bf00      	nop
 810fb80:	08110308 	.word	0x08110308
 810fb84:	08110312 	.word	0x08110312
 810fb88:	00000000 	.word	0x00000000
 810fb8c:	0810f8dd 	.word	0x0810f8dd
 810fb90:	0811030e 	.word	0x0811030e

0810fb94 <_printf_common>:
 810fb94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810fb98:	4616      	mov	r6, r2
 810fb9a:	4699      	mov	r9, r3
 810fb9c:	688a      	ldr	r2, [r1, #8]
 810fb9e:	690b      	ldr	r3, [r1, #16]
 810fba0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 810fba4:	4293      	cmp	r3, r2
 810fba6:	bfb8      	it	lt
 810fba8:	4613      	movlt	r3, r2
 810fbaa:	6033      	str	r3, [r6, #0]
 810fbac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 810fbb0:	4607      	mov	r7, r0
 810fbb2:	460c      	mov	r4, r1
 810fbb4:	b10a      	cbz	r2, 810fbba <_printf_common+0x26>
 810fbb6:	3301      	adds	r3, #1
 810fbb8:	6033      	str	r3, [r6, #0]
 810fbba:	6823      	ldr	r3, [r4, #0]
 810fbbc:	0699      	lsls	r1, r3, #26
 810fbbe:	bf42      	ittt	mi
 810fbc0:	6833      	ldrmi	r3, [r6, #0]
 810fbc2:	3302      	addmi	r3, #2
 810fbc4:	6033      	strmi	r3, [r6, #0]
 810fbc6:	6825      	ldr	r5, [r4, #0]
 810fbc8:	f015 0506 	ands.w	r5, r5, #6
 810fbcc:	d106      	bne.n	810fbdc <_printf_common+0x48>
 810fbce:	f104 0a19 	add.w	sl, r4, #25
 810fbd2:	68e3      	ldr	r3, [r4, #12]
 810fbd4:	6832      	ldr	r2, [r6, #0]
 810fbd6:	1a9b      	subs	r3, r3, r2
 810fbd8:	42ab      	cmp	r3, r5
 810fbda:	dc26      	bgt.n	810fc2a <_printf_common+0x96>
 810fbdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 810fbe0:	1e13      	subs	r3, r2, #0
 810fbe2:	6822      	ldr	r2, [r4, #0]
 810fbe4:	bf18      	it	ne
 810fbe6:	2301      	movne	r3, #1
 810fbe8:	0692      	lsls	r2, r2, #26
 810fbea:	d42b      	bmi.n	810fc44 <_printf_common+0xb0>
 810fbec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 810fbf0:	4649      	mov	r1, r9
 810fbf2:	4638      	mov	r0, r7
 810fbf4:	47c0      	blx	r8
 810fbf6:	3001      	adds	r0, #1
 810fbf8:	d01e      	beq.n	810fc38 <_printf_common+0xa4>
 810fbfa:	6823      	ldr	r3, [r4, #0]
 810fbfc:	68e5      	ldr	r5, [r4, #12]
 810fbfe:	6832      	ldr	r2, [r6, #0]
 810fc00:	f003 0306 	and.w	r3, r3, #6
 810fc04:	2b04      	cmp	r3, #4
 810fc06:	bf08      	it	eq
 810fc08:	1aad      	subeq	r5, r5, r2
 810fc0a:	68a3      	ldr	r3, [r4, #8]
 810fc0c:	6922      	ldr	r2, [r4, #16]
 810fc0e:	bf0c      	ite	eq
 810fc10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810fc14:	2500      	movne	r5, #0
 810fc16:	4293      	cmp	r3, r2
 810fc18:	bfc4      	itt	gt
 810fc1a:	1a9b      	subgt	r3, r3, r2
 810fc1c:	18ed      	addgt	r5, r5, r3
 810fc1e:	2600      	movs	r6, #0
 810fc20:	341a      	adds	r4, #26
 810fc22:	42b5      	cmp	r5, r6
 810fc24:	d11a      	bne.n	810fc5c <_printf_common+0xc8>
 810fc26:	2000      	movs	r0, #0
 810fc28:	e008      	b.n	810fc3c <_printf_common+0xa8>
 810fc2a:	2301      	movs	r3, #1
 810fc2c:	4652      	mov	r2, sl
 810fc2e:	4649      	mov	r1, r9
 810fc30:	4638      	mov	r0, r7
 810fc32:	47c0      	blx	r8
 810fc34:	3001      	adds	r0, #1
 810fc36:	d103      	bne.n	810fc40 <_printf_common+0xac>
 810fc38:	f04f 30ff 	mov.w	r0, #4294967295
 810fc3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810fc40:	3501      	adds	r5, #1
 810fc42:	e7c6      	b.n	810fbd2 <_printf_common+0x3e>
 810fc44:	18e1      	adds	r1, r4, r3
 810fc46:	1c5a      	adds	r2, r3, #1
 810fc48:	2030      	movs	r0, #48	; 0x30
 810fc4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 810fc4e:	4422      	add	r2, r4
 810fc50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 810fc54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 810fc58:	3302      	adds	r3, #2
 810fc5a:	e7c7      	b.n	810fbec <_printf_common+0x58>
 810fc5c:	2301      	movs	r3, #1
 810fc5e:	4622      	mov	r2, r4
 810fc60:	4649      	mov	r1, r9
 810fc62:	4638      	mov	r0, r7
 810fc64:	47c0      	blx	r8
 810fc66:	3001      	adds	r0, #1
 810fc68:	d0e6      	beq.n	810fc38 <_printf_common+0xa4>
 810fc6a:	3601      	adds	r6, #1
 810fc6c:	e7d9      	b.n	810fc22 <_printf_common+0x8e>
	...

0810fc70 <_printf_i>:
 810fc70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810fc74:	460c      	mov	r4, r1
 810fc76:	4691      	mov	r9, r2
 810fc78:	7e27      	ldrb	r7, [r4, #24]
 810fc7a:	990c      	ldr	r1, [sp, #48]	; 0x30
 810fc7c:	2f78      	cmp	r7, #120	; 0x78
 810fc7e:	4680      	mov	r8, r0
 810fc80:	469a      	mov	sl, r3
 810fc82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 810fc86:	d807      	bhi.n	810fc98 <_printf_i+0x28>
 810fc88:	2f62      	cmp	r7, #98	; 0x62
 810fc8a:	d80a      	bhi.n	810fca2 <_printf_i+0x32>
 810fc8c:	2f00      	cmp	r7, #0
 810fc8e:	f000 80d8 	beq.w	810fe42 <_printf_i+0x1d2>
 810fc92:	2f58      	cmp	r7, #88	; 0x58
 810fc94:	f000 80a3 	beq.w	810fdde <_printf_i+0x16e>
 810fc98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 810fc9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 810fca0:	e03a      	b.n	810fd18 <_printf_i+0xa8>
 810fca2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 810fca6:	2b15      	cmp	r3, #21
 810fca8:	d8f6      	bhi.n	810fc98 <_printf_i+0x28>
 810fcaa:	a001      	add	r0, pc, #4	; (adr r0, 810fcb0 <_printf_i+0x40>)
 810fcac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 810fcb0:	0810fd09 	.word	0x0810fd09
 810fcb4:	0810fd1d 	.word	0x0810fd1d
 810fcb8:	0810fc99 	.word	0x0810fc99
 810fcbc:	0810fc99 	.word	0x0810fc99
 810fcc0:	0810fc99 	.word	0x0810fc99
 810fcc4:	0810fc99 	.word	0x0810fc99
 810fcc8:	0810fd1d 	.word	0x0810fd1d
 810fccc:	0810fc99 	.word	0x0810fc99
 810fcd0:	0810fc99 	.word	0x0810fc99
 810fcd4:	0810fc99 	.word	0x0810fc99
 810fcd8:	0810fc99 	.word	0x0810fc99
 810fcdc:	0810fe29 	.word	0x0810fe29
 810fce0:	0810fd4d 	.word	0x0810fd4d
 810fce4:	0810fe0b 	.word	0x0810fe0b
 810fce8:	0810fc99 	.word	0x0810fc99
 810fcec:	0810fc99 	.word	0x0810fc99
 810fcf0:	0810fe4b 	.word	0x0810fe4b
 810fcf4:	0810fc99 	.word	0x0810fc99
 810fcf8:	0810fd4d 	.word	0x0810fd4d
 810fcfc:	0810fc99 	.word	0x0810fc99
 810fd00:	0810fc99 	.word	0x0810fc99
 810fd04:	0810fe13 	.word	0x0810fe13
 810fd08:	680b      	ldr	r3, [r1, #0]
 810fd0a:	1d1a      	adds	r2, r3, #4
 810fd0c:	681b      	ldr	r3, [r3, #0]
 810fd0e:	600a      	str	r2, [r1, #0]
 810fd10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 810fd14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 810fd18:	2301      	movs	r3, #1
 810fd1a:	e0a3      	b.n	810fe64 <_printf_i+0x1f4>
 810fd1c:	6825      	ldr	r5, [r4, #0]
 810fd1e:	6808      	ldr	r0, [r1, #0]
 810fd20:	062e      	lsls	r6, r5, #24
 810fd22:	f100 0304 	add.w	r3, r0, #4
 810fd26:	d50a      	bpl.n	810fd3e <_printf_i+0xce>
 810fd28:	6805      	ldr	r5, [r0, #0]
 810fd2a:	600b      	str	r3, [r1, #0]
 810fd2c:	2d00      	cmp	r5, #0
 810fd2e:	da03      	bge.n	810fd38 <_printf_i+0xc8>
 810fd30:	232d      	movs	r3, #45	; 0x2d
 810fd32:	426d      	negs	r5, r5
 810fd34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810fd38:	485e      	ldr	r0, [pc, #376]	; (810feb4 <_printf_i+0x244>)
 810fd3a:	230a      	movs	r3, #10
 810fd3c:	e019      	b.n	810fd72 <_printf_i+0x102>
 810fd3e:	f015 0f40 	tst.w	r5, #64	; 0x40
 810fd42:	6805      	ldr	r5, [r0, #0]
 810fd44:	600b      	str	r3, [r1, #0]
 810fd46:	bf18      	it	ne
 810fd48:	b22d      	sxthne	r5, r5
 810fd4a:	e7ef      	b.n	810fd2c <_printf_i+0xbc>
 810fd4c:	680b      	ldr	r3, [r1, #0]
 810fd4e:	6825      	ldr	r5, [r4, #0]
 810fd50:	1d18      	adds	r0, r3, #4
 810fd52:	6008      	str	r0, [r1, #0]
 810fd54:	0628      	lsls	r0, r5, #24
 810fd56:	d501      	bpl.n	810fd5c <_printf_i+0xec>
 810fd58:	681d      	ldr	r5, [r3, #0]
 810fd5a:	e002      	b.n	810fd62 <_printf_i+0xf2>
 810fd5c:	0669      	lsls	r1, r5, #25
 810fd5e:	d5fb      	bpl.n	810fd58 <_printf_i+0xe8>
 810fd60:	881d      	ldrh	r5, [r3, #0]
 810fd62:	4854      	ldr	r0, [pc, #336]	; (810feb4 <_printf_i+0x244>)
 810fd64:	2f6f      	cmp	r7, #111	; 0x6f
 810fd66:	bf0c      	ite	eq
 810fd68:	2308      	moveq	r3, #8
 810fd6a:	230a      	movne	r3, #10
 810fd6c:	2100      	movs	r1, #0
 810fd6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 810fd72:	6866      	ldr	r6, [r4, #4]
 810fd74:	60a6      	str	r6, [r4, #8]
 810fd76:	2e00      	cmp	r6, #0
 810fd78:	bfa2      	ittt	ge
 810fd7a:	6821      	ldrge	r1, [r4, #0]
 810fd7c:	f021 0104 	bicge.w	r1, r1, #4
 810fd80:	6021      	strge	r1, [r4, #0]
 810fd82:	b90d      	cbnz	r5, 810fd88 <_printf_i+0x118>
 810fd84:	2e00      	cmp	r6, #0
 810fd86:	d04d      	beq.n	810fe24 <_printf_i+0x1b4>
 810fd88:	4616      	mov	r6, r2
 810fd8a:	fbb5 f1f3 	udiv	r1, r5, r3
 810fd8e:	fb03 5711 	mls	r7, r3, r1, r5
 810fd92:	5dc7      	ldrb	r7, [r0, r7]
 810fd94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 810fd98:	462f      	mov	r7, r5
 810fd9a:	42bb      	cmp	r3, r7
 810fd9c:	460d      	mov	r5, r1
 810fd9e:	d9f4      	bls.n	810fd8a <_printf_i+0x11a>
 810fda0:	2b08      	cmp	r3, #8
 810fda2:	d10b      	bne.n	810fdbc <_printf_i+0x14c>
 810fda4:	6823      	ldr	r3, [r4, #0]
 810fda6:	07df      	lsls	r7, r3, #31
 810fda8:	d508      	bpl.n	810fdbc <_printf_i+0x14c>
 810fdaa:	6923      	ldr	r3, [r4, #16]
 810fdac:	6861      	ldr	r1, [r4, #4]
 810fdae:	4299      	cmp	r1, r3
 810fdb0:	bfde      	ittt	le
 810fdb2:	2330      	movle	r3, #48	; 0x30
 810fdb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 810fdb8:	f106 36ff 	addle.w	r6, r6, #4294967295
 810fdbc:	1b92      	subs	r2, r2, r6
 810fdbe:	6122      	str	r2, [r4, #16]
 810fdc0:	f8cd a000 	str.w	sl, [sp]
 810fdc4:	464b      	mov	r3, r9
 810fdc6:	aa03      	add	r2, sp, #12
 810fdc8:	4621      	mov	r1, r4
 810fdca:	4640      	mov	r0, r8
 810fdcc:	f7ff fee2 	bl	810fb94 <_printf_common>
 810fdd0:	3001      	adds	r0, #1
 810fdd2:	d14c      	bne.n	810fe6e <_printf_i+0x1fe>
 810fdd4:	f04f 30ff 	mov.w	r0, #4294967295
 810fdd8:	b004      	add	sp, #16
 810fdda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810fdde:	4835      	ldr	r0, [pc, #212]	; (810feb4 <_printf_i+0x244>)
 810fde0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 810fde4:	6823      	ldr	r3, [r4, #0]
 810fde6:	680e      	ldr	r6, [r1, #0]
 810fde8:	061f      	lsls	r7, r3, #24
 810fdea:	f856 5b04 	ldr.w	r5, [r6], #4
 810fdee:	600e      	str	r6, [r1, #0]
 810fdf0:	d514      	bpl.n	810fe1c <_printf_i+0x1ac>
 810fdf2:	07d9      	lsls	r1, r3, #31
 810fdf4:	bf44      	itt	mi
 810fdf6:	f043 0320 	orrmi.w	r3, r3, #32
 810fdfa:	6023      	strmi	r3, [r4, #0]
 810fdfc:	b91d      	cbnz	r5, 810fe06 <_printf_i+0x196>
 810fdfe:	6823      	ldr	r3, [r4, #0]
 810fe00:	f023 0320 	bic.w	r3, r3, #32
 810fe04:	6023      	str	r3, [r4, #0]
 810fe06:	2310      	movs	r3, #16
 810fe08:	e7b0      	b.n	810fd6c <_printf_i+0xfc>
 810fe0a:	6823      	ldr	r3, [r4, #0]
 810fe0c:	f043 0320 	orr.w	r3, r3, #32
 810fe10:	6023      	str	r3, [r4, #0]
 810fe12:	2378      	movs	r3, #120	; 0x78
 810fe14:	4828      	ldr	r0, [pc, #160]	; (810feb8 <_printf_i+0x248>)
 810fe16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 810fe1a:	e7e3      	b.n	810fde4 <_printf_i+0x174>
 810fe1c:	065e      	lsls	r6, r3, #25
 810fe1e:	bf48      	it	mi
 810fe20:	b2ad      	uxthmi	r5, r5
 810fe22:	e7e6      	b.n	810fdf2 <_printf_i+0x182>
 810fe24:	4616      	mov	r6, r2
 810fe26:	e7bb      	b.n	810fda0 <_printf_i+0x130>
 810fe28:	680b      	ldr	r3, [r1, #0]
 810fe2a:	6826      	ldr	r6, [r4, #0]
 810fe2c:	6960      	ldr	r0, [r4, #20]
 810fe2e:	1d1d      	adds	r5, r3, #4
 810fe30:	600d      	str	r5, [r1, #0]
 810fe32:	0635      	lsls	r5, r6, #24
 810fe34:	681b      	ldr	r3, [r3, #0]
 810fe36:	d501      	bpl.n	810fe3c <_printf_i+0x1cc>
 810fe38:	6018      	str	r0, [r3, #0]
 810fe3a:	e002      	b.n	810fe42 <_printf_i+0x1d2>
 810fe3c:	0671      	lsls	r1, r6, #25
 810fe3e:	d5fb      	bpl.n	810fe38 <_printf_i+0x1c8>
 810fe40:	8018      	strh	r0, [r3, #0]
 810fe42:	2300      	movs	r3, #0
 810fe44:	6123      	str	r3, [r4, #16]
 810fe46:	4616      	mov	r6, r2
 810fe48:	e7ba      	b.n	810fdc0 <_printf_i+0x150>
 810fe4a:	680b      	ldr	r3, [r1, #0]
 810fe4c:	1d1a      	adds	r2, r3, #4
 810fe4e:	600a      	str	r2, [r1, #0]
 810fe50:	681e      	ldr	r6, [r3, #0]
 810fe52:	6862      	ldr	r2, [r4, #4]
 810fe54:	2100      	movs	r1, #0
 810fe56:	4630      	mov	r0, r6
 810fe58:	f7f0 fa4a 	bl	81002f0 <memchr>
 810fe5c:	b108      	cbz	r0, 810fe62 <_printf_i+0x1f2>
 810fe5e:	1b80      	subs	r0, r0, r6
 810fe60:	6060      	str	r0, [r4, #4]
 810fe62:	6863      	ldr	r3, [r4, #4]
 810fe64:	6123      	str	r3, [r4, #16]
 810fe66:	2300      	movs	r3, #0
 810fe68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810fe6c:	e7a8      	b.n	810fdc0 <_printf_i+0x150>
 810fe6e:	6923      	ldr	r3, [r4, #16]
 810fe70:	4632      	mov	r2, r6
 810fe72:	4649      	mov	r1, r9
 810fe74:	4640      	mov	r0, r8
 810fe76:	47d0      	blx	sl
 810fe78:	3001      	adds	r0, #1
 810fe7a:	d0ab      	beq.n	810fdd4 <_printf_i+0x164>
 810fe7c:	6823      	ldr	r3, [r4, #0]
 810fe7e:	079b      	lsls	r3, r3, #30
 810fe80:	d413      	bmi.n	810feaa <_printf_i+0x23a>
 810fe82:	68e0      	ldr	r0, [r4, #12]
 810fe84:	9b03      	ldr	r3, [sp, #12]
 810fe86:	4298      	cmp	r0, r3
 810fe88:	bfb8      	it	lt
 810fe8a:	4618      	movlt	r0, r3
 810fe8c:	e7a4      	b.n	810fdd8 <_printf_i+0x168>
 810fe8e:	2301      	movs	r3, #1
 810fe90:	4632      	mov	r2, r6
 810fe92:	4649      	mov	r1, r9
 810fe94:	4640      	mov	r0, r8
 810fe96:	47d0      	blx	sl
 810fe98:	3001      	adds	r0, #1
 810fe9a:	d09b      	beq.n	810fdd4 <_printf_i+0x164>
 810fe9c:	3501      	adds	r5, #1
 810fe9e:	68e3      	ldr	r3, [r4, #12]
 810fea0:	9903      	ldr	r1, [sp, #12]
 810fea2:	1a5b      	subs	r3, r3, r1
 810fea4:	42ab      	cmp	r3, r5
 810fea6:	dcf2      	bgt.n	810fe8e <_printf_i+0x21e>
 810fea8:	e7eb      	b.n	810fe82 <_printf_i+0x212>
 810feaa:	2500      	movs	r5, #0
 810feac:	f104 0619 	add.w	r6, r4, #25
 810feb0:	e7f5      	b.n	810fe9e <_printf_i+0x22e>
 810feb2:	bf00      	nop
 810feb4:	08110319 	.word	0x08110319
 810feb8:	0811032a 	.word	0x0811032a

0810febc <memmove>:
 810febc:	4288      	cmp	r0, r1
 810febe:	b510      	push	{r4, lr}
 810fec0:	eb01 0402 	add.w	r4, r1, r2
 810fec4:	d902      	bls.n	810fecc <memmove+0x10>
 810fec6:	4284      	cmp	r4, r0
 810fec8:	4623      	mov	r3, r4
 810feca:	d807      	bhi.n	810fedc <memmove+0x20>
 810fecc:	1e43      	subs	r3, r0, #1
 810fece:	42a1      	cmp	r1, r4
 810fed0:	d008      	beq.n	810fee4 <memmove+0x28>
 810fed2:	f811 2b01 	ldrb.w	r2, [r1], #1
 810fed6:	f803 2f01 	strb.w	r2, [r3, #1]!
 810feda:	e7f8      	b.n	810fece <memmove+0x12>
 810fedc:	4402      	add	r2, r0
 810fede:	4601      	mov	r1, r0
 810fee0:	428a      	cmp	r2, r1
 810fee2:	d100      	bne.n	810fee6 <memmove+0x2a>
 810fee4:	bd10      	pop	{r4, pc}
 810fee6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810feea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810feee:	e7f7      	b.n	810fee0 <memmove+0x24>

0810fef0 <_realloc_r>:
 810fef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810fef2:	4607      	mov	r7, r0
 810fef4:	4614      	mov	r4, r2
 810fef6:	460e      	mov	r6, r1
 810fef8:	b921      	cbnz	r1, 810ff04 <_realloc_r+0x14>
 810fefa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 810fefe:	4611      	mov	r1, r2
 810ff00:	f7ff bb82 	b.w	810f608 <_malloc_r>
 810ff04:	b922      	cbnz	r2, 810ff10 <_realloc_r+0x20>
 810ff06:	f7ff fc99 	bl	810f83c <_free_r>
 810ff0a:	4625      	mov	r5, r4
 810ff0c:	4628      	mov	r0, r5
 810ff0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810ff10:	f000 f814 	bl	810ff3c <_malloc_usable_size_r>
 810ff14:	42a0      	cmp	r0, r4
 810ff16:	d20f      	bcs.n	810ff38 <_realloc_r+0x48>
 810ff18:	4621      	mov	r1, r4
 810ff1a:	4638      	mov	r0, r7
 810ff1c:	f7ff fb74 	bl	810f608 <_malloc_r>
 810ff20:	4605      	mov	r5, r0
 810ff22:	2800      	cmp	r0, #0
 810ff24:	d0f2      	beq.n	810ff0c <_realloc_r+0x1c>
 810ff26:	4631      	mov	r1, r6
 810ff28:	4622      	mov	r2, r4
 810ff2a:	f7ff fb57 	bl	810f5dc <memcpy>
 810ff2e:	4631      	mov	r1, r6
 810ff30:	4638      	mov	r0, r7
 810ff32:	f7ff fc83 	bl	810f83c <_free_r>
 810ff36:	e7e9      	b.n	810ff0c <_realloc_r+0x1c>
 810ff38:	4635      	mov	r5, r6
 810ff3a:	e7e7      	b.n	810ff0c <_realloc_r+0x1c>

0810ff3c <_malloc_usable_size_r>:
 810ff3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810ff40:	1f18      	subs	r0, r3, #4
 810ff42:	2b00      	cmp	r3, #0
 810ff44:	bfbc      	itt	lt
 810ff46:	580b      	ldrlt	r3, [r1, r0]
 810ff48:	18c0      	addlt	r0, r0, r3
 810ff4a:	4770      	bx	lr

0810ff4c <_init>:
 810ff4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810ff4e:	bf00      	nop
 810ff50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810ff52:	bc08      	pop	{r3}
 810ff54:	469e      	mov	lr, r3
 810ff56:	4770      	bx	lr

0810ff58 <_fini>:
 810ff58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810ff5a:	bf00      	nop
 810ff5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810ff5e:	bc08      	pop	{r3}
 810ff60:	469e      	mov	lr, r3
 810ff62:	4770      	bx	lr
